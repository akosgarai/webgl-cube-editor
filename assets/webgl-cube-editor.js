"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}
var $linknames = {} // Collection of functions referenced by a go:linkname directive.
var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface); }; };
var $unused = function(v) {};
var $print = console.log;
// Under Node we can emulate print() more closely by avoiding a newline.
if (($global.process !== undefined) && $global.require) {
  try {
    var util = $global.require('util');
    $print = function() { $global.process.stderr.write(util.format.apply(this, arguments)); };
  } catch (e) {
    // Failed to require util module, keep using console.log().
  }
}
var $println = console.log

var $initAllLinknames = function() {
  var names = $keys($packages);
  for (var i = 0; i < names.length; i++) {
    var f = $packages[names[i]]["$initLinknames"];
    if (typeof f == 'function') {
      f();
    }
  }
}

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (high === undefined) {
    high = slice.$length;
  }
  if (max === undefined) {
    max = slice.$capacity;
  }
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  if (slice === slice.constructor.nil) {
    return slice;
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = high - low;
  s.$capacity = max - low;
  return s;
};

var $substring = function(str, low, high) {
  if (low < 0 || high < low || high > str.length) {
    $throwRuntimeError("slice bounds out of range");
  }
  return str.substring(low, high);
};

var $sliceToArray = function(slice) {
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, named, pkg, exported, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, pkg, exported, constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(pkgPath, fields) {
      typ.pkgPath = pkgPath;
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.embedded) {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.named = named;
  typ.pkg = pkg;
  typ.exported = exported;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if (e.typ.named) {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.embedded) {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           true, "", false, null);
var $Int           = $newType( 4, $kindInt,           "int",            true, "", false, null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           true, "", false, null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          true, "", false, null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          true, "", false, null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          true, "", false, null);
var $Uint          = $newType( 4, $kindUint,          "uint",           true, "", false, null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          true, "", false, null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         true, "", false, null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         true, "", false, null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         true, "", false, null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        true, "", false, null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        true, "", false, null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        true, "", false, null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      true, "", false, null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     true, "", false, null);
var $String        = $newType( 8, $kindString,        "string",         true, "", false, null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", true, "", false, null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ");
  if (!sendOnly && !recvOnly && (elem.string[0] == "<")) {
    string += "(" + elem.string + ")";
  } else {
    string += elem.string;
  }
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, false, "", false, null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, false, "", false, null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, false, "", false, null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(pkgPath, fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      var str = f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
      if (f.embedded) {
        return str;
      }
      return f.name + " " + str;
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, false, "", false, function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        if (f.name == '_') {
          continue;
        }
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(pkgPath, fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr(
      $packages["runtime"]._type.ptr.nil,
      (value === $ifaceNil ? $packages["runtime"]._type.ptr.nil : new $packages["runtime"]._type.ptr(value.constructor.string)),
      new $packages["runtime"]._type.ptr(type.string),
      missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        /* error was recovered */
        if (fromPanic) {
          throw null;
        }
        return;
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $noGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [] };
var $curGoroutine = $noGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true, $exportedFunctions = 0;
var $mainFinished = false;
var $go = function(fun, args) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $noGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock && $exportedFunctions === 0) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $schedule($goroutine);
};

var $scheduled = [];
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
  } finally {
    if ($scheduled.length > 0) {
      setTimeout($runScheduled, 0);
    }
  }
};

var $schedule = function(goroutine) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }
  $scheduled.push(goroutine);
  if ($curGoroutine === $noGoroutine) {
    $runScheduled();
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if ($curGoroutine === $noGoroutine) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  var closedDuringSend;
  chan.$sendQueue.push(function(closed) {
    closedDuringSend = closed;
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (closedDuringSend) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend(false));
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(true); /* will panic */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if ($isASCII(v)) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (!f.exported) {
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var result = v.apply(passThis ? this : undefined, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv, seen) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }

  // Cache for values we've already internalized in order to deal with circular
  // references.
  if (seen === undefined) { seen = new Map(); }
  if (!seen.has(t)) { seen.set(t, new Map()); }
  if (seen.get(t).has(v)) { return seen.get(t).get(v); }

  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType, recv, seen));
    }
  case $kindMap:
    var m = {};
    seen.get(t).set(v, m);
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key, recv, seen);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem, recv, seen) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if ($isASCII(v)) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

/* $isASCII reports whether string s contains only ASCII characters. */
var $isASCII = function(s) {
  for (var i = 0; i < s.length; i++) {
    if (s.charCodeAt(i) >= 128) {
      return false;
    }
  }
  return true;
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, MakeFunc, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	init = function() {
		var e;
		e = new Error.ptr(null);
		$unused(e);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", embedded: false, exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "Object", embedded: true, exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, _type, TypeAssertionError, basicFrame, Func, errorString, ptrType, sliceType, ptrType$1, structType, sliceType$1, ptrType$2, knownPositions, positionCounters, fastrand, init, GOROOT, registerPosition, itoa, callstack, Caller, Goexit, SetFinalizer, FuncForPC, KeepAlive, throw$1, nanotime;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	_type = $pkg._type = $newType(0, $kindStruct, "runtime._type", true, "runtime", false, function(str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.str = "";
			return;
		}
		this.str = str_;
	});
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(_interface_, concrete_, asserted_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this._interface = ptrType$1.nil;
			this.concrete = ptrType$1.nil;
			this.asserted = ptrType$1.nil;
			this.missingMethod = "";
			return;
		}
		this._interface = _interface_;
		this.concrete = concrete_;
		this.asserted = asserted_;
		this.missingMethod = missingMethod_;
	});
	basicFrame = $pkg.basicFrame = $newType(0, $kindStruct, "runtime.basicFrame", true, "runtime", false, function(FuncName_, File_, Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FuncName = "";
			this.File = "";
			this.Line = 0;
			return;
		}
		this.FuncName = FuncName_;
		this.File = File_;
		this.Line = Line_;
	});
	Func = $pkg.Func = $newType(0, $kindStruct, "runtime.Func", true, "runtime", true, function(name_, file_, line_, opaque_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.file = "";
			this.line = 0;
			this.opaque = new structType.ptr();
			return;
		}
		this.name = name_;
		this.file = file_;
		this.line = line_;
		this.opaque = opaque_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	ptrType = $ptrType(Func);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType(_type);
	structType = $structType("", []);
	sliceType$1 = $sliceType(basicFrame);
	ptrType$2 = $ptrType(TypeAssertionError);
	fastrand = function() {
		return (($parseFloat($global.Math.random()) * 4.294967295e+09 >> 0));
	};
	$linknames["runtime.fastrand"] = fastrand;
	_type.ptr.prototype.string = function() {
		var t;
		t = this;
		return t.str;
	};
	_type.prototype.string = function() { return this.$val.string(); };
	_type.ptr.prototype.pkgpath = function() {
		var t;
		t = this;
		return "";
	};
	_type.prototype.pkgpath = function() { return this.$val.pkgpath(); };
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var as, cs, e, inter, msg;
		e = this;
		inter = "interface";
		if (!(e._interface === ptrType$1.nil)) {
			inter = e._interface.string();
		}
		as = e.asserted.string();
		if (e.concrete === ptrType$1.nil) {
			return "interface conversion: " + inter + " is nil, not " + as;
		}
		cs = e.concrete.string();
		if (e.missingMethod === "") {
			msg = "interface conversion: " + inter + " is " + cs + ", not " + as;
			if (cs === as) {
				if (!(e.concrete.pkgpath() === e.asserted.pkgpath())) {
					msg = msg + (" (types from different packages)");
				} else {
					msg = msg + (" (types from different scopes)");
				}
			}
			return msg;
		}
		return "interface conversion: " + cs + " is not " + as + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	init = function() {
		var e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = throw$1;
		e = $ifaceNil;
		e = new TypeAssertionError.ptr(ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, "");
		$unused(e);
	};
	GOROOT = function() {
		var process, v, v$1;
		process = $global.process;
		if (process === undefined) {
			return "/";
		}
		v = process.env.GOPHERJS_GOROOT;
		if (!(v === undefined) && !($internalize(v, $String) === "")) {
			return $internalize(v, $String);
		} else {
			v$1 = process.env.GOROOT;
			if (!(v$1 === undefined) && !($internalize(v$1, $String) === "")) {
				return $internalize(v$1, $String);
			}
		}
		return "/usr/local/go";
	};
	$pkg.GOROOT = GOROOT;
	registerPosition = function(funcName, file, line) {
		var _entry, _key, _tuple, f, file, found, funcName, key, line, pc, pc$1;
		key = file + ":" + itoa(line);
		_tuple = (_entry = knownPositions[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		pc = _tuple[0];
		found = _tuple[1];
		if (found) {
			return pc;
		}
		f = new Func.ptr(funcName, file, line, new structType.ptr());
		pc$1 = ((positionCounters.$length >>> 0));
		positionCounters = $append(positionCounters, f);
		_key = key; (knownPositions || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: pc$1 };
		return pc$1;
	};
	itoa = function(i) {
		var i;
		return $internalize(new ($global.String)(i), $String);
	};
	callstack = function(skip, limit) {
		var frames, i, info, l, limit, lines, parts, pos, skip;
		skip = (skip + 1 >> 0) + 1 >> 0;
		lines = new ($global.Error)().stack.split($externalize("\n", $String)).slice(skip);
		frames = new sliceType$1([]);
		l = $parseInt(lines.length) >> 0;
		i = 0;
		while (true) {
			if (!(i < l && i < limit)) { break; }
			info = lines[i];
			pos = info.substring(($parseInt(info.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0);
			parts = pos.split($externalize(":", $String));
			frames = $append(frames, new basicFrame.ptr($internalize(info.substring(($parseInt(info.indexOf($externalize("at ", $String))) >> 0) + 3 >> 0, $parseInt(info.indexOf($externalize(" (", $String))) >> 0), $String), $internalize(parts[0], $String), $parseInt(parts[1]) >> 0));
			i = i + (1) >> 0;
		}
		return frames;
	};
	Caller = function(skip) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, file, frames, line, ok, pc, skip;
		pc = 0;
		file = "";
		line = 0;
		ok = false;
		skip = skip + 1 >> 0;
		frames = callstack(skip, 1);
		if (!((frames.$length === 1))) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = 0;
			_tmp$3 = false;
			pc = _tmp;
			file = _tmp$1;
			line = _tmp$2;
			ok = _tmp$3;
			return [pc, file, line, ok];
		}
		pc = registerPosition((0 >= frames.$length ? ($throwRuntimeError("index out of range"), undefined) : frames.$array[frames.$offset + 0]).FuncName, (0 >= frames.$length ? ($throwRuntimeError("index out of range"), undefined) : frames.$array[frames.$offset + 0]).File, (0 >= frames.$length ? ($throwRuntimeError("index out of range"), undefined) : frames.$array[frames.$offset + 0]).Line);
		_tmp$4 = pc;
		_tmp$5 = (0 >= frames.$length ? ($throwRuntimeError("index out of range"), undefined) : frames.$array[frames.$offset + 0]).File;
		_tmp$6 = (0 >= frames.$length ? ($throwRuntimeError("index out of range"), undefined) : frames.$array[frames.$offset + 0]).Line;
		_tmp$7 = true;
		pc = _tmp$4;
		file = _tmp$5;
		line = _tmp$6;
		ok = _tmp$7;
		return [pc, file, line, ok];
	};
	$pkg.Caller = Caller;
	Goexit = function() {
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	SetFinalizer = function(x, f) {
		var f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	Func.ptr.prototype.Entry = function() {
		return 0;
	};
	Func.prototype.Entry = function() { return this.$val.Entry(); };
	Func.ptr.prototype.FileLine = function(pc) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, f, file, line, pc;
		file = "";
		line = 0;
		f = this;
		if (f === ptrType.nil) {
			_tmp = "";
			_tmp$1 = 0;
			file = _tmp;
			line = _tmp$1;
			return [file, line];
		}
		_tmp$2 = f.file;
		_tmp$3 = f.line;
		file = _tmp$2;
		line = _tmp$3;
		return [file, line];
	};
	Func.prototype.FileLine = function(pc) { return this.$val.FileLine(pc); };
	Func.ptr.prototype.Name = function() {
		var f;
		f = this;
		if (f === ptrType.nil || f.name === "") {
			return "<unknown>";
		}
		return f.name;
	};
	Func.prototype.Name = function() { return this.$val.Name(); };
	FuncForPC = function(pc) {
		var ipc, pc;
		ipc = ((pc >> 0));
		if (ipc >= positionCounters.$length) {
			$panic(new $String("GopherJS: pc=" + itoa(ipc) + " is out of range of known position counters"));
		}
		return ((ipc < 0 || ipc >= positionCounters.$length) ? ($throwRuntimeError("index out of range"), undefined) : positionCounters.$array[positionCounters.$offset + ipc]);
	};
	$pkg.FuncForPC = FuncForPC;
	KeepAlive = function(param) {
		var param;
	};
	$pkg.KeepAlive = KeepAlive;
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val;
		return "runtime error: " + (e);
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	throw$1 = function(s) {
		var s;
		$panic(new errorString((s)));
	};
	nanotime = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	$linknames["runtime.nanotime"] = nanotime;
	ptrType$1.methods = [{prop: "string", name: "string", pkg: "runtime", typ: $funcType([], [$String], false)}, {prop: "pkgpath", name: "pkgpath", pkg: "runtime", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType.methods = [{prop: "Entry", name: "Entry", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "FileLine", name: "FileLine", pkg: "", typ: $funcType([$Uintptr], [$String, $Int], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	_type.init("runtime", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
	TypeAssertionError.init("runtime", [{prop: "_interface", name: "_interface", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "concrete", name: "concrete", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "asserted", name: "asserted", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "missingMethod", name: "missingMethod", embedded: false, exported: false, typ: $String, tag: ""}]);
	basicFrame.init("", [{prop: "FuncName", name: "FuncName", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "File", name: "File", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Line", name: "Line", embedded: false, exported: true, typ: $Int, tag: ""}]);
	Func.init("runtime", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "file", name: "file", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "line", name: "line", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "opaque", name: "opaque", embedded: false, exported: false, typ: structType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		knownPositions = $makeMap($String.keyFor, []);
		positionCounters = new sliceType([]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/unsafeheader"] = (function() {
	var $pkg = {}, $init, Slice;
	Slice = $pkg.Slice = $newType(0, $kindStruct, "unsafeheader.Slice", true, "internal/unsafeheader", true, function(Data_, Len_, Cap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Data = 0;
			this.Len = 0;
			this.Cap = 0;
			return;
		}
		this.Data = Data_;
		this.Len = Len_;
		this.Cap = Cap_;
	});
	Slice.init("", [{prop: "Data", name: "Data", embedded: false, exported: true, typ: $UnsafePointer, tag: ""}, {prop: "Len", name: "Len", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Cap", name: "Cap", embedded: false, exported: true, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/reflectlite"] = (function() {
	var $pkg = {}, $init, js, unsafeheader, runtime, uncommonType, funcType, name, nameData, mapIter, TypeEx, errorString, Method, Type, Kind, tflag, rtype, method, chanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, nameOff, typeOff, textOff, Value, flag, ValueError, ptrType$1, sliceType$1, sliceType$2, sliceType$3, ptrType$2, funcType$1, sliceType$4, ptrType$3, sliceType$5, sliceType$6, sliceType$7, ptrType$4, ptrType$5, structType$2, sliceType$8, sliceType$9, ptrType$6, ptrType$7, sliceType$12, ptrType$8, ptrType$10, funcType$2, ptrType$11, funcType$3, ptrType$12, arrayType$2, sliceType$13, ptrType$13, initialized, uint8Type, idJsType, idReflectType, idKindType, idRtype, uncommonTypeMap, nameMap, nameOffList, typeOffList, jsObjectPtr, selectHelper, callHelper, kindNames, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, TypeOf, ValueOf, FuncOf, SliceOf, unsafe_New, typedmemmove, keyFor, mapaccess, mapiterinit, mapiterkey, mapiternext, maplen, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, PtrTo, copyVal, unquote, implements$1, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	unsafeheader = $packages["internal/unsafeheader"];
	runtime = $packages["runtime"];
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflectlite.uncommonType", true, "internal/reflectlite", false, function(pkgPath_, mcount_, xcount_, moff_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this.xcount = 0;
			this.moff = 0;
			this._methods = sliceType$5.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this.xcount = xcount_;
		this.moff = moff_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflectlite.funcType", true, "internal/reflectlite", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflectlite.name", true, "internal/reflectlite", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$3.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflectlite.nameData", true, "internal/reflectlite", false, function(name_, tag_, exported_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.exported = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.exported = exported_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflectlite.mapIter", true, "internal/reflectlite", false, function(t_, m_, keys_, i_, last_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			this.last = null;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
		this.last = last_;
	});
	TypeEx = $pkg.TypeEx = $newType(8, $kindInterface, "reflectlite.TypeEx", true, "internal/reflectlite", true, null);
	errorString = $pkg.errorString = $newType(0, $kindStruct, "reflectlite.errorString", true, "internal/reflectlite", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflectlite.Method", true, "internal/reflectlite", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflectlite.Type", true, "internal/reflectlite", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflectlite.Kind", true, "internal/reflectlite", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflectlite.tflag", true, "internal/reflectlite", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflectlite.rtype", true, "internal/reflectlite", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, equal_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.equal = $throwNilPointerError;
			this.gcdata = ptrType$3.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.equal = equal_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflectlite.method", true, "internal/reflectlite", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	chanDir = $pkg.chanDir = $newType(4, $kindInt, "reflectlite.chanDir", true, "internal/reflectlite", false, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflectlite.arrayType", true, "internal/reflectlite", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflectlite.chanType", true, "internal/reflectlite", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflectlite.imethod", true, "internal/reflectlite", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflectlite.interfaceType", true, "internal/reflectlite", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$3.nil);
			this.methods = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflectlite.mapType", true, "internal/reflectlite", false, function(rtype_, key_, elem_, bucket_, hasher_, keysize_, valuesize_, bucketsize_, flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hasher = $throwNilPointerError;
			this.keysize = 0;
			this.valuesize = 0;
			this.bucketsize = 0;
			this.flags = 0;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hasher = hasher_;
		this.keysize = keysize_;
		this.valuesize = valuesize_;
		this.bucketsize = bucketsize_;
		this.flags = flags_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflectlite.ptrType", true, "internal/reflectlite", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflectlite.sliceType", true, "internal/reflectlite", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflectlite.structField", true, "internal/reflectlite", false, function(name_, typ_, offsetEmbed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$3.nil);
			this.typ = ptrType$1.nil;
			this.offsetEmbed = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offsetEmbed = offsetEmbed_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflectlite.structType", true, "internal/reflectlite", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$3.nil);
			this.fields = sliceType$7.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflectlite.nameOff", true, "internal/reflectlite", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflectlite.typeOff", true, "internal/reflectlite", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflectlite.textOff", true, "internal/reflectlite", false, null);
	Value = $pkg.Value = $newType(0, $kindStruct, "reflectlite.Value", true, "internal/reflectlite", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflectlite.flag", true, "internal/reflectlite", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflectlite.ValueError", true, "internal/reflectlite", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	ptrType$1 = $ptrType(rtype);
	sliceType$1 = $sliceType(name);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$3], [ptrType$2], true);
	sliceType$4 = $sliceType($String);
	ptrType$3 = $ptrType($Uint8);
	sliceType$5 = $sliceType(method);
	sliceType$6 = $sliceType(imethod);
	sliceType$7 = $sliceType(structField);
	ptrType$4 = $ptrType(uncommonType);
	ptrType$5 = $ptrType(nameData);
	structType$2 = $structType("internal/reflectlite", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
	sliceType$8 = $sliceType(ptrType$2);
	sliceType$9 = $sliceType(Value);
	ptrType$6 = $ptrType(mapIter);
	ptrType$7 = $ptrType(funcType);
	sliceType$12 = $sliceType(Type);
	ptrType$8 = $ptrType($UnsafePointer);
	ptrType$10 = $ptrType(errorString);
	funcType$2 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	ptrType$11 = $ptrType(interfaceType);
	funcType$3 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	ptrType$12 = $ptrType(structField);
	arrayType$2 = $arrayType($Uintptr, 2);
	sliceType$13 = $sliceType($Uint8);
	ptrType$13 = $ptrType(ValueError);
	init = function() {
		var used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, sliceType$5.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), new name.ptr(ptrType$3.nil), sliceType$6.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), new name.ptr(ptrType$3.nil), sliceType$7.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$3.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var typ;
		return typ[$externalize(idJsType, $String)];
	};
	reflectType = function(typ) {
		var _1, _i, _i$1, _i$2, _i$3, _key, _ref, _ref$1, _ref$2, _ref$3, dir, exported, exported$1, f, fields, i, i$1, i$2, i$3, i$4, i$5, imethods, in$1, m, m$1, m$2, methodSet, methods, offsetEmbed, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut, xcount;
		if (typ[$externalize(idReflectType, $String)] === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), $throwNilPointerError, ptrType$3.nil, newNameOff($clone(newName(internalStr(typ.string), "", !!(typ.exported)), name)), 0);
			rt[$externalize(idJsType, $String)] = typ;
			typ[$externalize(idReflectType, $String)] = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = sliceType$5.nil;
				i = 0;
				while (true) {
					if (!(i < $parseInt(methodSet.length))) { break; }
					m = methodSet[i];
					exported = internalStr(m.pkg) === "";
					if (!exported) {
						i = i + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", exported), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					i = i + (1) >> 0;
				}
				xcount = ((reflectMethods.$length << 16 >>> 16));
				i$1 = 0;
				while (true) {
					if (!(i$1 < $parseInt(methodSet.length))) { break; }
					m$1 = methodSet[i$1];
					exported$1 = internalStr(m$1.pkg) === "";
					if (exported$1) {
						i$1 = i$1 + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", exported$1), name)), newTypeOff(reflectType(m$1.typ)), 0, 0));
					i$1 = i$1 + (1) >> 0;
				}
				ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), xcount, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
				ut[$externalize(idJsType, $String)] = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref = in$1;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i$2 = _i;
					((i$2 < 0 || i$2 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$2] = reflectType(params[i$2]));
					_i++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$1 = out;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$3 = _i$1;
					((i$3 < 0 || i$3 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$3] = reflectType(results[i$3]));
					_i$1++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$6, $parseInt(methods.length));
				_ref$2 = imethods;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$4 = _i$2;
					m$2 = methods[i$4];
					imethod.copy(((i$4 < 0 || i$4 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$4]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$2.name), "", internalStr(m$2.pkg) === ""), name)), newTypeOff(reflectType(m$2.typ))));
					_i$2++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", false), name), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$7, $parseInt(fields.length));
				_ref$3 = reflectFields;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$5 = _i$3;
					f = fields[i$5];
					offsetEmbed = ((i$5 >>> 0)) << 1 >>> 0;
					if (!!(f.embedded)) {
						offsetEmbed = (offsetEmbed | (1)) >>> 0;
					}
					structField.copy(((i$5 < 0 || i$5 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$5]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), !!(f.exported)), name), reflectType(f.typ), offsetEmbed));
					_i$3++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", false), name), reflectFields));
			}
		}
		return ((typ[$externalize(idReflectType, $String)]));
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt[$externalize(idKindType, $String)] = kindType;
		kindType[$externalize(idRtype, $String)] = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	uncommonType.ptr.prototype.exportedMethods = function() {
		var t;
		t = this;
		return $subslice(t._methods, 0, t.xcount, t.xcount);
	};
	uncommonType.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.uncommon = function() {
		var _entry, t;
		t = this;
		return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$4.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$3.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$5.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$3.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$5.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var n;
		n = this;
		return "";
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$3.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$5.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	newName = function(n, tag, exported) {
		var _key, b, exported, n, tag;
		b = $newDataPointer(0, ptrType$3);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$3.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, exported) };
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var c, strObj;
		c = new structType$2.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var $24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$24r = new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
			$s = 10; case 10: return $24r;
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$24r$1 = new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		$s = 12; case 12: return $24r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var $24r, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$24r = $24r; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$8, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$8, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$8), $externalize(jsOut, sliceType$8), $externalize(variadic, $Bool)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	unsafe_New = function(typ) {
		var _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	typedmemmove = function(t, dst, src) {
		var dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapIter.ptr.prototype.skipUntilValidKey = function() {
		var iter, k;
		iter = this;
		while (true) {
			if (!(iter.i < $parseInt(iter.keys.length))) { break; }
			k = iter.keys[iter.i];
			if (!(iter.m[$externalize($internalize(k, $String), $String)] === undefined)) {
				break;
			}
			iter.i = iter.i + (1) >> 0;
		}
	};
	mapIter.prototype.skipUntilValidKey = function() { return this.$val.skipUntilValidKey(); };
	mapiterinit = function(t, m) {
		var m, t;
		return (new mapIter.ptr(t, m, $keys(m), 0, null));
	};
	mapiterkey = function(it) {
		var $24r, _r, _r$1, _r$2, it, iter, k, kv, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; kv = $f.kv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = ($pointerOfStructConversion(it, ptrType$6));
		kv = null;
		if (!(iter.last === null)) {
			kv = iter.last;
		} else {
			iter.skipUntilValidKey();
			if (iter.i === $parseInt(iter.keys.length)) {
				$s = -1; return 0;
			}
			k = iter.keys[iter.i];
			kv = iter.m[$externalize($internalize(k, $String), $String)];
			iter.last = kv;
		}
		_r = $assertType(iter.t, TypeEx).Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = ($newDataPointer(kv.k, _r$2));
		$s = 4; case 4: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.kv = kv; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var it, iter;
		iter = ($pointerOfStructConversion(it, ptrType$6));
		iter.last = null;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt($keys(m).length);
	};
	methodReceiver = function(op, v, i) {
		var _$12, fn, i, m, m$1, ms, op, prop, rcvr, t, tt, v, x;
		_$12 = ptrType$1.nil;
		t = ptrType$7.nil;
		fn = 0;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (tt.rtype.typeOff(m.typ).kindType);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
		} else {
			ms = v.typ.exportedMethods();
			if (((i >>> 0)) >= ((ms.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (v.typ.typeOff(m$1.mtyp).kindType);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		return [_$12, t, fn];
	};
	valueInterface = function(v) {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			Value.copy(v, _r);
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var $24r, _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8)));
		}; })(fn, rcvr));
		_r = $clone(v, Value).Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = new Value.ptr(_r, (fv), (new flag(v.flag).ro() | 19) >>> 0);
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$24r = $24r; $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	getJsTag = function(tag) {
		var _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	PtrTo = function(t) {
		var t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	copyVal = function(typ, fl, ptr) {
		var c, fl, ptr, typ;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, ptr);
			return new Value.ptr(typ, c, (fl | 128) >>> 0);
		}
		return new Value.ptr(typ, (ptr).$get(), fl);
	};
	rtype.ptr.prototype.Comparable = function() {
		var $24r, _1, _r, _r$1, ft, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; ft = $f.ft; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 8:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 9; continue; }
					ft = $clone(t.Field(i), structField);
					_r$1 = ft.typ.Comparable(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (!_r$1) { */ case 10:
						$s = -1; return false;
					/* } */ case 11:
					i = i + (1) >> 0;
				/* } */ $s = 8; continue; case 9:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$24r = $24r; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.ft = ft; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = (t.kindType);
		if (i < 0 || i >= tt.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		return (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.Method = function(i) {
		var $24r, _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		/* */ if (t.Kind() === 20) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Kind() === 20) { */ case 1:
			tt = (t.kindType);
			_r = tt.rtype.Method(i); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			Method.copy(m, _r);
			$24r = m;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		methods = t.exportedMethods();
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$12, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$12, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t[$externalize(idJsType, $String)])[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8)));
		}; })(prop));
		Value.copy(m.Func, new Value.ptr($assertType(mt, ptrType$1), (fn), fl));
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f.$24r = $24r; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	unquote = function(s) {
		var s;
		if (s.length < 2) {
			return [s, $ifaceNil];
		}
		if ((s.charCodeAt(0) === 39) || (s.charCodeAt(0) === 34)) {
			if (s.charCodeAt((s.length - 1 >> 0)) === s.charCodeAt(0)) {
				return [$substring(s, 1, (s.length - 1 >> 0)), $ifaceNil];
			}
			return ["", $pkg.ErrSyntax];
		}
		return [s, $ifaceNil];
	};
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((((((f & 31) >>> 0) >>> 0)) === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	Value.ptr.prototype.object = function() {
		var _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var _r, _r$1, _r$2, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			Value.copy(v, _r);
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				fl = (((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				if (dst.NumMethod() === 0) {
					(target).$set(x);
				} else {
					ifaceE2I(dst, x, target);
				}
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Cap = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt($clone(v, Value).object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	Value.ptr.prototype.Index = function(i) {
		var $24r, $24r$1, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (((((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 10; case 10: return $24r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (((384 | new flag(v.flag).ro()) >>> 0) | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 11:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 12:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$24r$1 = _r$1;
				$s = 14; case 14: return $24r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((new flag(v.flag).ro() | 8) >>> 0) | 128) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), fl$2);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		$panic(new $String("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else if (_1 === (26)) {
			return $clone(v, Value).object() === 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt($clone(v, Value).object().length);
		} else if (_1 === (23)) {
			return $parseInt($clone(v, Value).object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($keys($clone(v, Value).object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var _1, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		Value.copy(x, _r);
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var $24r, $24r$1, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 8; case 8: return $24r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), new flag(v.flag).ro()); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r$1 = _r$1;
		$s = 10; case 10: return $24r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var $24r, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), new flag(v.flag).ro()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$24r = $24r; $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	Value.ptr.prototype.Elem = function() {
		var $24r, _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, new flag(v.flag).ro()); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$24r = $24r; $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.MapKeys = function() {
		var _r, a, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (new flag(v.flag).ro() | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$9, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			Value.copy(((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]), copyVal(keyType, fl, key));
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f._r = _r; $f.a = a; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var _r, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		Value.copy(key, _r);
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = new flag((((v.flag | key.flag) >>> 0))).ro();
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		$s = -1; return copyVal(typ, fl, e);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f._r = _r; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.Field = function(i) {
		var $24r, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if (field.embedded()) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					Value.copy(v, _r);
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						Value.copy(v, _r$1);
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 16; case 16: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	structField.ptr.prototype.embedded = function() {
		var f;
		f = this;
		return !((((f.offsetEmbed & 1) >>> 0) === 0));
	};
	structField.prototype.embedded = function() { return this.$val.embedded(); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if (((k >> 0)) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
		}
		return (0 >= kindNames.$length ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + 0]);
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.pointers = function() {
		var t;
		t = this;
		return !((t.ptrdata === 0));
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var t, ut;
		t = this;
		ut = t.uncommon();
		if (ut === ptrType$4.nil) {
			return sliceType$5.nil;
		}
		return ut.exportedMethods();
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			return tt.NumMethod();
		}
		return t.exportedMethods().$length;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.PkgPath = function() {
		var t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$4.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.hasName = function() {
		var t;
		t = this;
		return !((((t.tflag & 4) >>> 0) === 0));
	};
	rtype.prototype.hasName = function() { return this.$val.hasName(); };
	rtype.ptr.prototype.Name = function() {
		var i, s, t;
		t = this;
		if (!t.hasName()) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0 && !((s.charCodeAt(i) === 46)))) { break; }
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.chanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: chanDir of non-chan type"));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.chanDir = function() { return this.$val.chanDir(); };
	rtype.ptr.prototype.Elem = function() {
		var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.Implements = function(u) {
		var _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var $24r, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r || implements$1(uu, t);
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.AssignableTo }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tmName = $clone(t.rtype.nameOff(tm.name), name);
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				vmName = $clone(V.nameOff(vm.name), name);
				if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					if (!$clone(tmName, name).isExported()) {
						tmPkgPath = $clone(tmName, name).pkgPath();
						if (tmPkgPath === "") {
							tmPkgPath = $clone(t.pkgPath, name).name();
						}
						vmPkgPath = $clone(vmName, name).pkgPath();
						if (vmPkgPath === "") {
							vmPkgPath = $clone(v.pkgPath, name).name();
						}
						if (!(tmPkgPath === vmPkgPath)) {
							j = j + (1) >> 0;
							continue;
						}
					}
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$4.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			vmName$1 = $clone(V.nameOff(vm$1.name), name);
			if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				if (!$clone(tmName$1, name).isExported()) {
					tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
					if (tmPkgPath$1 === "") {
						tmPkgPath$1 = $clone(t.pkgPath, name).name();
					}
					vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
					if (vmPkgPath$1 === "") {
						vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
					}
					if (!(tmPkgPath$1 === vmPkgPath$1)) {
						j$1 = j$1 + (1) >> 0;
						continue;
					}
				}
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var $24r, T, V, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; T = $f.T; V = $f.V; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (T.hasName() && V.hasName() || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		_r = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: directlyAssignable }; } $f.$24r = $24r; $f.T = T; $f.V = V; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var $24r, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; T = $f.T; V = $f.V; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; cmpTags = $f.cmpTags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
		_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$2 === _r$3)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$24r = _r$6;
		$s = 11; case 11: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalType }; } $f.$24r = $24r; $f.T = T; $f.V = V; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f.cmpTags = cmpTags; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var $24r, $24r$1, $24r$2, $24r$3, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; T = $f.T; V = $f.V; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; cmpTags = $f.cmpTags; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; kind = $f.kind; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; tf = $f.tf; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; vf = $f.vf; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$24r = _v;
				$s = 12; case 12: return $24r;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.chanDir() === 3)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 15:
				/* */ if (_v$1) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_v$1) { */ case 13:
					$s = -1; return true;
				/* } */ case 14:
				if (!(V.chanDir() === T.chanDir())) { _v$2 = false; $s = 17; continue s; }
				_r$2 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 17:
				$24r$1 = _v$2;
				$s = 19; case 19: return $24r$1;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 20:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 21; continue; }
					_r$3 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if (!_r$3) { */ case 22:
						$s = -1; return false;
					/* } */ case 23:
					i = i + (1) >> 0;
				/* } */ $s = 20; continue; case 21:
				i$1 = 0;
				/* while (true) { */ case 25:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 26; continue; }
					_r$4 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!_r$4) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (!_r$4) { */ case 27:
						$s = -1; return false;
					/* } */ case 28:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 25; continue; case 26:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$5 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 31; case 31: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				if (!(_r$5)) { _v$3 = false; $s = 30; continue s; }
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 32; case 32: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$3 = _r$6; case 30:
				$24r$2 = _v$3;
				$s = 33; case 33: return $24r$2;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$7 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$24r$3 = _r$7;
				$s = 35; case 35: return $24r$3;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				if (!($clone(t$2.pkgPath, name).name() === $clone(v$2.pkgPath, name).name())) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 36:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 37; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$8 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 40; case 40: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!_r$8) { $s = 38; continue; }
					/* */ $s = 39; continue;
					/* if (!_r$8) { */ case 38:
						$s = -1; return false;
					/* } */ case 39:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offsetEmbed === vf.offsetEmbed))) {
						$s = -1; return false;
					}
					_i++;
				/* } */ $s = 36; continue; case 37:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalUnderlyingType }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f.T = T; $f.V = V; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.cmpTags = cmpTags; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.kind = kind; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.tf = tf; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.vf = vf; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	flag.prototype.ro = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0))) {
			return 32;
		}
		return 0;
	};
	$ptrType(flag).prototype.ro = function() { return new flag(this.$get()).ro(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.Type = function() {
		var f, v;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflectlite.Value.Type", 0));
		}
		return v.typ;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	ptrType$4.methods = [{prop: "methods", name: "methods", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$5], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$5], false)}];
	ptrType$7.methods = [{prop: "in$", name: "in", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "name", name: "name", pkg: "internal/reflectlite", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "internal/reflectlite", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "internal/reflectlite", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "internal/reflectlite", typ: $funcType([$Int, $String], [ptrType$3], false)}, {prop: "nameLen", name: "nameLen", pkg: "internal/reflectlite", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "internal/reflectlite", typ: $funcType([], [$Int], false)}];
	ptrType$6.methods = [{prop: "skipUntilValidKey", name: "skipUntilValidKey", pkg: "internal/reflectlite", typ: $funcType([], [], false)}];
	ptrType$10.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$4], false)}, {prop: "nameOff", name: "nameOff", pkg: "internal/reflectlite", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "internal/reflectlite", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "kindType", name: "kindType", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [structField], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "pointers", name: "pointers", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}, {prop: "common", name: "common", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$5], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "hasName", name: "hasName", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "chanDir", name: "chanDir", pkg: "internal/reflectlite", typ: $funcType([], [chanDir], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ptrType$11.methods = [{prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$12.methods = [{prop: "offset", name: "offset", pkg: "internal/reflectlite", typ: $funcType([], [$Uintptr], false)}, {prop: "embedded", name: "embedded", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$2], false)}, {prop: "assignTo", name: "assignTo", pkg: "internal/reflectlite", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "internal/reflectlite", typ: $funcType([$String, sliceType$9], [sliceType$9], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$2], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$13], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "pointer", name: "pointer", pkg: "internal/reflectlite", typ: $funcType([], [$UnsafePointer], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "numMethod", name: "numMethod", pkg: "internal/reflectlite", typ: $funcType([], [$Int], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}];
	flag.methods = [{prop: "mustBe", name: "mustBe", pkg: "internal/reflectlite", typ: $funcType([Kind], [], false)}, {prop: "kind", name: "kind", pkg: "internal/reflectlite", typ: $funcType([], [Kind], false)}, {prop: "ro", name: "ro", pkg: "internal/reflectlite", typ: $funcType([], [flag], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "internal/reflectlite", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "internal/reflectlite", typ: $funcType([], [], false)}];
	ptrType$13.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	uncommonType.init("internal/reflectlite", [{prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "xcount", name: "xcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", embedded: false, exported: false, typ: sliceType$5, tag: ""}]);
	funcType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", embedded: false, exported: false, typ: sliceType$2, tag: ""}]);
	name.init("internal/reflectlite", [{prop: "bytes", name: "bytes", embedded: false, exported: false, typ: ptrType$3, tag: ""}]);
	nameData.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("internal/reflectlite", [{prop: "t", name: "t", embedded: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "last", name: "last", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	TypeEx.init([{prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$4], false)}]);
	errorString.init("internal/reflectlite", [{prop: "s", name: "s", embedded: false, exported: false, typ: $String, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", embedded: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: $Int, tag: ""}]);
	Type.init([{prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$4], false)}]);
	rtype.init("internal/reflectlite", [{prop: "size", name: "size", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", embedded: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "equal", name: "equal", embedded: false, exported: false, typ: funcType$2, tag: ""}, {prop: "gcdata", name: "gcdata", embedded: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "str", name: "str", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	method.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", embedded: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", embedded: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", embedded: false, exported: false, typ: textOff, tag: ""}]);
	arrayType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", embedded: false, exported: false, typ: sliceType$6, tag: ""}]);
	mapType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "key", name: "key", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hasher", name: "hasher", embedded: false, exported: false, typ: funcType$3, tag: ""}, {prop: "keysize", name: "keysize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "flags", name: "flags", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	ptrType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offsetEmbed", name: "offsetEmbed", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", embedded: false, exported: false, typ: sliceType$7, tag: ""}]);
	Value.init("internal/reflectlite", [{prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", embedded: true, exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", embedded: false, exported: true, typ: Kind, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unsafeheader.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		uint8Type = ptrType$1.nil;
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		initialized = false;
		idJsType = "_jsType";
		idReflectType = "_reflectType";
		idKindType = "kindType";
		idRtype = "_rtype";
		uncommonTypeMap = {};
		nameMap = {};
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		$pkg.ErrSyntax = new errorString.ptr("invalid syntax");
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		jsObjectPtr = reflectType($jsObjectPtr);
		kindNames = new sliceType$4(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		$r = init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, reflectlite, errorString, ptrType, ptrType$1, errorType, _r, New;
	reflectlite = $packages["internal/reflectlite"];
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType($error);
	ptrType$1 = $ptrType(errorString);
	New = function(text) {
		var text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", embedded: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflectlite.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = reflectlite.TypeOf((ptrType.nil)).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errorType = _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/bits"] = (function() {
	var $pkg = {}, $init, deBruijn32tab, deBruijn64tab, len8tab, LeadingZeros64, TrailingZeros, TrailingZeros32, TrailingZeros64, Len64, Mul64;
	LeadingZeros64 = function(x) {
		var x;
		return 64 - Len64(x) >> 0;
	};
	$pkg.LeadingZeros64 = LeadingZeros64;
	TrailingZeros = function(x) {
		var x;
		if (true) {
			return TrailingZeros32(((x >>> 0)));
		}
		return TrailingZeros64((new $Uint64(0, x)));
	};
	$pkg.TrailingZeros = TrailingZeros;
	TrailingZeros32 = function(x) {
		var x, x$1;
		if (x === 0) {
			return 32;
		}
		return (((x$1 = ($imul((((x & (-x >>> 0)) >>> 0)), 125613361) >>> 0) >>> 27 >>> 0, ((x$1 < 0 || x$1 >= deBruijn32tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn32tab[x$1])) >> 0));
	};
	$pkg.TrailingZeros32 = TrailingZeros32;
	TrailingZeros64 = function(x) {
		var x, x$1, x$2;
		if ((x.$high === 0 && x.$low === 0)) {
			return 64;
		}
		return (((x$1 = $shiftRightUint64($mul64(((x$2 = new $Uint64(-x.$high, -x.$low), new $Uint64(x.$high & x$2.$high, (x.$low & x$2.$low) >>> 0))), new $Uint64(66559345, 3033172745)), 58), (($flatten64(x$1) < 0 || $flatten64(x$1) >= deBruijn64tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn64tab[$flatten64(x$1)])) >> 0));
	};
	$pkg.TrailingZeros64 = TrailingZeros64;
	Len64 = function(x) {
		var n, x;
		n = 0;
		if ((x.$high > 1 || (x.$high === 1 && x.$low >= 0))) {
			x = $shiftRightUint64(x, (32));
			n = 32;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low >= 65536))) {
			x = $shiftRightUint64(x, (16));
			n = n + (16) >> 0;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low >= 256))) {
			x = $shiftRightUint64(x, (8));
			n = n + (8) >> 0;
		}
		n = n + (((($flatten64(x) < 0 || $flatten64(x) >= len8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : len8tab[$flatten64(x)]) >> 0)) >> 0;
		return n;
	};
	$pkg.Len64 = Len64;
	Mul64 = function(x, y) {
		var hi, lo, t, w0, w1, w2, x, x$1, x$2, x$3, x$4, x$5, x$6, x0, x1, y, y0, y1;
		hi = new $Uint64(0, 0);
		lo = new $Uint64(0, 0);
		x0 = new $Uint64(x.$high & 0, (x.$low & 4294967295) >>> 0);
		x1 = $shiftRightUint64(x, 32);
		y0 = new $Uint64(y.$high & 0, (y.$low & 4294967295) >>> 0);
		y1 = $shiftRightUint64(y, 32);
		w0 = $mul64(x0, y0);
		t = (x$1 = $mul64(x1, y0), x$2 = $shiftRightUint64(w0, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		w1 = new $Uint64(t.$high & 0, (t.$low & 4294967295) >>> 0);
		w2 = $shiftRightUint64(t, 32);
		w1 = (x$3 = $mul64(x0, y1), new $Uint64(w1.$high + x$3.$high, w1.$low + x$3.$low));
		hi = (x$4 = (x$5 = $mul64(x1, y1), new $Uint64(x$5.$high + w2.$high, x$5.$low + w2.$low)), x$6 = $shiftRightUint64(w1, 32), new $Uint64(x$4.$high + x$6.$high, x$4.$low + x$6.$low));
		lo = $mul64(x, y);
		return [hi, lo];
	};
	$pkg.Mul64 = Mul64;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		deBruijn32tab = $toNativeArray($kindUint8, [0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9]);
		deBruijn64tab = $toNativeArray($kindUint8, [0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4, 62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5, 63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11, 54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6]);
		len8tab = $toNativeArray($kindUint8, [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, bits, arrayType, arrayType$1, arrayType$2, structType, math, _zero, posInf, negInf, nan, buf, Inf, NaN, init, Float32bits, Float32frombits, Float64bits, Float64frombits;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	bits = $packages["math/bits"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", embedded: false, exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", embedded: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", embedded: false, exported: false, typ: arrayType$2, tag: ""}]);
	Inf = function(sign) {
		var sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	NaN = function() {
		return nan;
	};
	$pkg.NaN = NaN;
	init = function() {
		var ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64((new $Uint64(0, buf.uint32array[1])), 32), x$1 = (new $Uint64(0, buf.uint32array[0])), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var b;
		buf.uint32array[0] = ((b.$low >>> 0));
		buf.uint32array[1] = (($shiftRightUint64(b, 32).$low >>> 0));
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		math = $global.Math;
		_zero = 0;
		posInf = 1 / _zero;
		negInf = -1 / _zero;
		nan = 0 / _zero;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/cpu"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/bytealg"] = (function() {
	var $pkg = {}, $init, cpu, IndexByteString;
	cpu = $packages["internal/cpu"];
	IndexByteString = function(s, c) {
		var c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	$pkg.IndexByteString = IndexByteString;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = cpu.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, DecodeRune, DecodeRuneInString, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart, ValidString, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	DecodeRune = function(p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[p0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = ((((x & 7) >>> 0) >> 0));
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < sz) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz <= 2) {
			_tmp$8 = (((((p0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((b1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz <= 3) {
			_tmp$12 = ((((((p0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((p0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((b2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[s0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((s.charCodeAt(0) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = ((((x & 7) >>> 0) >> 0));
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < sz) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz <= 2) {
			_tmp$8 = (((((s0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((s1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz <= 3) {
			_tmp$12 = ((((((s0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((s0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((s2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r, s, size, start;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = ((s.charCodeAt(start) >> 0));
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString($substring(s, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRuneInString = DecodeLastRuneInString;
	RuneLen = function(r) {
		var r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var i, p, r;
		i = ((r >>> 0));
		if (i <= 127) {
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((r << 24 >>> 24)));
			return 1;
		} else if (i <= 2047) {
			$unused((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((192 | (((r >> 6 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			$unused((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((240 | (((r >> 18 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 12 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	ValidString = function(s) {
		var accept, c, c$1, c$2, first32, i, n, s, second32, si, size, x, x$1;
		while (true) {
			if (!(s.length >= 8)) { break; }
			first32 = (((((((s.charCodeAt(0) >>> 0)) | (((s.charCodeAt(1) >>> 0)) << 8 >>> 0)) >>> 0) | (((s.charCodeAt(2) >>> 0)) << 16 >>> 0)) >>> 0) | (((s.charCodeAt(3) >>> 0)) << 24 >>> 0)) >>> 0;
			second32 = (((((((s.charCodeAt(4) >>> 0)) | (((s.charCodeAt(5) >>> 0)) << 8 >>> 0)) >>> 0) | (((s.charCodeAt(6) >>> 0)) << 16 >>> 0)) >>> 0) | (((s.charCodeAt(7) >>> 0)) << 24 >>> 0)) >>> 0;
			if (!(((((((first32 | second32) >>> 0)) & 2155905152) >>> 0) === 0))) {
				break;
			}
			s = $substring(s, 8);
		}
		n = s.length;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			si = s.charCodeAt(i);
			if (si < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((si < 0 || si >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[si]);
			if (x === 241) {
				return false;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > n) {
				return false;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c = s.charCodeAt((i + 1 >> 0));
			if (c < accept.lo || accept.hi < c) {
				return false;
			} else if (size === 2) {
			} else {
				c$1 = s.charCodeAt((i + 2 >> 0));
				if (c$1 < 128 || 191 < c$1) {
					return false;
				} else if (size === 3) {
				} else {
					c$2 = s.charCodeAt((i + 3 >> 0));
					if (c$2 < 128 || 191 < c$2) {
						return false;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return true;
	};
	$pkg.ValidString = ValidString;
	ValidRune = function(r) {
		var r;
		if (0 <= r && r < 55296) {
			return true;
		} else if (57343 < r && r <= 1114111) {
			return true;
		}
		return false;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", embedded: false, exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint8, [240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 35, 3, 3, 52, 4, 4, 4, 68, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241]);
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, bytealg, math, bits, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, arrayType, sliceType$4, sliceType$5, ptrType, arrayType$1, sliceType$6, arrayType$2, arrayType$3, ptrType$1, arrayType$4, arrayType$5, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, detailedPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, commonPrefixLenIgnoreCase, special, readFloat, atof64exact, atof32exact, atofHex, atof32, atof64, ParseFloat, parseFloatPrefix, lower, syntaxError, rangeError, baseError, bitSizeError, ParseUint, ParseInt, Atoi, underscoreOK, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, eiselLemire64, eiselLemire32, frexp10Many, adjustLastDigitFixed, adjustLastDigit, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, fmtX, min, max, FormatInt, Itoa, small, formatBits, isPowerOfTwo, quoteWith, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, Quote, AppendQuote, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	bytealg = $packages["internal/bytealg"];
	math = $packages["math"];
	bits = $packages["math/bits"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", true, "strconv", true, function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType$1.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($Float64);
	sliceType$2 = $sliceType($Float32);
	sliceType$3 = $sliceType(leftCheat);
	arrayType = $arrayType($Uint64, 2);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	ptrType = $ptrType(NumError);
	arrayType$1 = $arrayType($Uint8, 800);
	sliceType$6 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 24);
	arrayType$3 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$4 = $arrayType($Uint8, 65);
	arrayType$5 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	commonPrefixLenIgnoreCase = function(s, prefix) {
		var c, i, n, prefix, s;
		n = prefix.length;
		if (n > s.length) {
			n = s.length;
		}
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			c = s.charCodeAt(i);
			if (65 <= c && c <= 90) {
				c = c + (32) << 24 >>> 24;
			}
			if (!((c === prefix.charCodeAt(i)))) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return n;
	};
	special = function(s) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, f, n, n$1, nsign, ok, s, sign;
		f = 0;
		n = 0;
		ok = false;
		if (s.length === 0) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = false;
			f = _tmp;
			n = _tmp$1;
			ok = _tmp$2;
			return [f, n, ok];
		}
		sign = 1;
		nsign = 0;
		_1 = s.charCodeAt(0);
		if ((_1 === (43)) || (_1 === (45))) {
			if (s.charCodeAt(0) === 45) {
				sign = -1;
			}
			nsign = 1;
			s = $substring(s, 1);
			n$1 = commonPrefixLenIgnoreCase(s, "infinity");
			if (3 < n$1 && n$1 < 8) {
				n$1 = 3;
			}
			if ((n$1 === 3) || (n$1 === 8)) {
				_tmp$3 = math.Inf(sign);
				_tmp$4 = nsign + n$1 >> 0;
				_tmp$5 = true;
				f = _tmp$3;
				n = _tmp$4;
				ok = _tmp$5;
				return [f, n, ok];
			}
		} else if ((_1 === (105)) || (_1 === (73))) {
			n$1 = commonPrefixLenIgnoreCase(s, "infinity");
			if (3 < n$1 && n$1 < 8) {
				n$1 = 3;
			}
			if ((n$1 === 3) || (n$1 === 8)) {
				_tmp$6 = math.Inf(sign);
				_tmp$7 = nsign + n$1 >> 0;
				_tmp$8 = true;
				f = _tmp$6;
				n = _tmp$7;
				ok = _tmp$8;
				return [f, n, ok];
			}
		} else if ((_1 === (110)) || (_1 === (78))) {
			if (commonPrefixLenIgnoreCase(s, "nan") === 3) {
				_tmp$9 = math.NaN();
				_tmp$10 = 3;
				_tmp$11 = true;
				f = _tmp$9;
				n = _tmp$10;
				ok = _tmp$11;
				return [f, n, ok];
			}
		}
		_tmp$12 = 0;
		_tmp$13 = 0;
		_tmp$14 = false;
		f = _tmp$12;
		n = _tmp$13;
		ok = _tmp$14;
		return [f, n, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (true) {
			if (!(i < s.length)) { break; }
			if ((s.charCodeAt(i) === 95)) {
				i = i + (1) >> 0;
				continue;
			} else if ((s.charCodeAt(i) === 46)) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = s.charCodeAt(i)));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && (lower(s.charCodeAt(i)) === 101)) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (true) {
				if (!(i < s.length && (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57 || (s.charCodeAt(i) === 95)))) { break; }
				if (s.charCodeAt(i) === 95) {
					i = i + (1) >> 0;
					continue;
				}
				if (e < 10000) {
					e = (($imul(e, 10)) + ((s.charCodeAt(i) >> 0)) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var _1, base, c, dp, e, esign, exp, expChar, hex, i, mantissa, maxMantDigits, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, underscores, x, x$1;
		mantissa = new $Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		hex = false;
		i = 0;
		ok = false;
		underscores = false;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, hex, i, ok];
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			neg = true;
			i = i + (1) >> 0;
		}
		base = new $Uint64(0, 10);
		maxMantDigits = 19;
		expChar = 101;
		if ((i + 2 >> 0) < s.length && (s.charCodeAt(i) === 48) && (lower(s.charCodeAt((i + 1 >> 0))) === 120)) {
			base = new $Uint64(0, 16);
			maxMantDigits = 16;
			i = i + (2) >> 0;
			expChar = 112;
			hex = true;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		loop:
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			_1 = true;
			if (_1 === ((c === 95))) {
				underscores = true;
				i = i + (1) >> 0;
				continue;
			} else if (_1 === ((c === 46))) {
				if (sawdot) {
					break loop;
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (_1 === (48 <= c && c <= 57)) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < maxMantDigits) {
					mantissa = $mul64(mantissa, (base));
					mantissa = (x = (new $Uint64(0, (c - 48 << 24 >>> 24))), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((c === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			} else if (_1 === ((base.$high === 0 && base.$low === 16) && 97 <= lower(c) && lower(c) <= 102)) {
				sawdigits = true;
				nd = nd + (1) >> 0;
				if (ndMant < maxMantDigits) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 16)));
					mantissa = (x$1 = (new $Uint64(0, ((lower(c) - 97 << 24 >>> 24) + 10 << 24 >>> 24))), new $Uint64(mantissa.$high + x$1.$high, mantissa.$low + x$1.$low));
					ndMant = ndMant + (1) >> 0;
				} else {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, hex, i, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if ((base.$high === 0 && base.$low === 16)) {
			dp = $imul(dp, (4));
			ndMant = $imul(ndMant, (4));
		}
		if (i < s.length && (lower(s.charCodeAt(i)) === expChar)) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, hex, i, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, hex, i, ok];
			}
			e = 0;
			while (true) {
				if (!(i < s.length && (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57 || (s.charCodeAt(i) === 95)))) { break; }
				if (s.charCodeAt(i) === 95) {
					underscores = true;
					i = i + (1) >> 0;
					continue;
				}
				if (e < 10000) {
					e = (($imul(e, 10)) + ((s.charCodeAt(i) >> 0)) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + (($imul(e, esign))) >> 0;
		} else if ((base.$high === 0 && base.$low === 16)) {
			return [mantissa, exp, neg, trunc, hex, i, ok];
		}
		if (!((mantissa.$high === 0 && mantissa.$low === 0))) {
			exp = dp - ndMant >> 0;
		}
		if (underscores && !underscoreOK($substring(s, 0, i))) {
			return [mantissa, exp, neg, trunc, hex, i, ok];
		}
		ok = true;
		return [mantissa, exp, neg, trunc, hex, i, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var _tmp, _tmp$1, b, bits$1, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		b = new $Uint64(0, 0);
		overflow = false;
		d = this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* */ if (d.nd === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nd === 0) { */ case 1:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 2:
		/* */ if (d.dp > 310) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.dp > 310) { */ case 4:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 5:
		/* */ if (d.dp < -330) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (d.dp < -330) { */ case 7:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 8:
		exp = 0;
		while (true) {
			if (!(d.dp > 0)) { break; }
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? ($throwRuntimeError("index out of range"), undefined) : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (true) {
			if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? ($throwRuntimeError("index out of range"), undefined) : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 10:
		d.Shift((((1 + flt.mantbits >>> 0) >> 0)));
		mant = d.RoundedInteger();
		/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 14:
		/* } */ case 12:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 3; continue;
		/* overflow: */ case 6:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 3:
		bits$1 = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits$1 = (x$7 = $shiftLeft64((new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0))))), flt.mantbits), new $Uint64(bits$1.$high | x$7.$high, (bits$1.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits$1 = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits$1.$high | x$8.$high, (bits$1.$low | x$8.$low) >>> 0));
		}
		_tmp = bits$1;
		_tmp$1 = overflow;
		b = _tmp;
		overflow = _tmp$1;
		$s = -1; return [b, overflow];
		/* */ } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = ($flatten64(mantissa));
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + exp]);
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + x$2]));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = ($flatten64(mantissa));
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + x$1]))));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + exp]));
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + x$2])));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atofHex = function(s, flt, mantissa, exp, neg, trunc) {
		var bits$1, err, exp, flt, mantissa, maxExp, minExp, neg, round, s, trunc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1;
		maxExp = (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) + flt.bias >> 0) - 2 >> 0;
		minExp = flt.bias + 1 >> 0;
		exp = exp + (((flt.mantbits >> 0))) >> 0;
		while (true) {
			if (!(!((mantissa.$high === 0 && mantissa.$low === 0)) && (x = $shiftRightUint64(mantissa, ((flt.mantbits + 2 >>> 0))), (x.$high === 0 && x.$low === 0)))) { break; }
			mantissa = $shiftLeft64(mantissa, (1));
			exp = exp - (1) >> 0;
		}
		if (trunc) {
			mantissa = (x$1 = new $Uint64(0, 1), new $Uint64(mantissa.$high | x$1.$high, (mantissa.$low | x$1.$low) >>> 0));
		}
		while (true) {
			if (!(!((x$2 = $shiftRightUint64(mantissa, (((1 + flt.mantbits >>> 0) + 2 >>> 0))), (x$2.$high === 0 && x$2.$low === 0))))) { break; }
			mantissa = (x$3 = $shiftRightUint64(mantissa, 1), x$4 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), new $Uint64(x$3.$high | x$4.$high, (x$3.$low | x$4.$low) >>> 0));
			exp = exp + (1) >> 0;
		}
		while (true) {
			if (!((mantissa.$high > 0 || (mantissa.$high === 0 && mantissa.$low > 1)) && exp < (minExp - 2 >> 0))) { break; }
			mantissa = (x$5 = $shiftRightUint64(mantissa, 1), x$6 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), new $Uint64(x$5.$high | x$6.$high, (x$5.$low | x$6.$low) >>> 0));
			exp = exp + (1) >> 0;
		}
		round = new $Uint64(mantissa.$high & 0, (mantissa.$low & 3) >>> 0);
		mantissa = $shiftRightUint64(mantissa, (2));
		round = (x$7 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), new $Uint64(round.$high | x$7.$high, (round.$low | x$7.$low) >>> 0));
		exp = exp + (2) >> 0;
		if ((round.$high === 0 && round.$low === 3)) {
			mantissa = (x$8 = new $Uint64(0, 1), new $Uint64(mantissa.$high + x$8.$high, mantissa.$low + x$8.$low));
			if ((x$9 = $shiftLeft64(new $Uint64(0, 1), ((1 + flt.mantbits >>> 0))), (mantissa.$high === x$9.$high && mantissa.$low === x$9.$low))) {
				mantissa = $shiftRightUint64(mantissa, (1));
				exp = exp + (1) >> 0;
			}
		}
		if ((x$10 = $shiftRightUint64(mantissa, flt.mantbits), (x$10.$high === 0 && x$10.$low === 0))) {
			exp = flt.bias;
		}
		err = $ifaceNil;
		if (exp > maxExp) {
			mantissa = $shiftLeft64(new $Uint64(0, 1), flt.mantbits);
			exp = maxExp + 1 >> 0;
			err = rangeError("ParseFloat", s);
		}
		bits$1 = (x$11 = (x$12 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$12.$high - 0, x$12.$low - 1)), new $Uint64(mantissa.$high & x$11.$high, (mantissa.$low & x$11.$low) >>> 0));
		bits$1 = (x$13 = $shiftLeft64((new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))))), flt.mantbits), new $Uint64(bits$1.$high | x$13.$high, (bits$1.$low | x$13.$low) >>> 0));
		if (neg) {
			bits$1 = (x$14 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits$1.$high | x$14.$high, (bits$1.$low | x$14.$low) >>> 0));
		}
		if (flt === float32info) {
			return [(math.Float32frombits(((bits$1.$low >>> 0)))), err];
		}
		return [math.Float64frombits(bits$1), err];
	};
	atof32 = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, b, d, err, err$1, exp, f, f$1, f$2, f$3, fUp, hex, mantissa, n, n$1, neg, ok, ok$1, ok$2, ok$3, ok$4, ovf, s, trunc, val;
		f = 0;
		n = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		n$1 = _tuple[1];
		ok = _tuple[2];
		if (ok) {
			_tmp = ($fround(val));
			_tmp$1 = n$1;
			_tmp$2 = $ifaceNil;
			f = _tmp;
			n = _tmp$1;
			err = _tmp$2;
			return [f, n, err];
		}
		_tuple$1 = readFloat(s);
		mantissa = _tuple$1[0];
		exp = _tuple$1[1];
		neg = _tuple$1[2];
		trunc = _tuple$1[3];
		hex = _tuple$1[4];
		n = _tuple$1[5];
		ok$1 = _tuple$1[6];
		if (!ok$1) {
			_tmp$3 = 0;
			_tmp$4 = n;
			_tmp$5 = syntaxError("ParseFloat", s);
			f = _tmp$3;
			n = _tmp$4;
			err = _tmp$5;
			return [f, n, err];
		}
		if (hex) {
			_tuple$2 = atofHex($substring(s, 0, n), float32info, mantissa, exp, neg, trunc);
			f$1 = _tuple$2[0];
			err$1 = _tuple$2[1];
			_tmp$6 = ($fround(f$1));
			_tmp$7 = n;
			_tmp$8 = err$1;
			f = _tmp$6;
			n = _tmp$7;
			err = _tmp$8;
			return [f, n, err];
		}
		if (optimize) {
			if (!trunc) {
				_tuple$3 = atof32exact(mantissa, exp, neg);
				f$2 = _tuple$3[0];
				ok$2 = _tuple$3[1];
				if (ok$2) {
					_tmp$9 = f$2;
					_tmp$10 = n;
					_tmp$11 = $ifaceNil;
					f = _tmp$9;
					n = _tmp$10;
					err = _tmp$11;
					return [f, n, err];
				}
			}
			_tuple$4 = eiselLemire32(mantissa, exp, neg);
			f$3 = _tuple$4[0];
			ok$3 = _tuple$4[1];
			if (ok$3) {
				if (!trunc) {
					_tmp$12 = f$3;
					_tmp$13 = n;
					_tmp$14 = $ifaceNil;
					f = _tmp$12;
					n = _tmp$13;
					err = _tmp$14;
					return [f, n, err];
				}
				_tuple$5 = eiselLemire32(new $Uint64(mantissa.$high + 0, mantissa.$low + 1), exp, neg);
				fUp = _tuple$5[0];
				ok$4 = _tuple$5[1];
				if (ok$4 && (f$3 === fUp)) {
					_tmp$15 = f$3;
					_tmp$16 = n;
					_tmp$17 = $ifaceNil;
					f = _tmp$15;
					n = _tmp$16;
					err = _tmp$17;
					return [f, n, err];
				}
			}
		}
		d = new decimal.ptr(arrayType$1.zero(), 0, 0, false, false);
		if (!d.set($substring(s, 0, n))) {
			_tmp$18 = 0;
			_tmp$19 = n;
			_tmp$20 = syntaxError("ParseFloat", s);
			f = _tmp$18;
			n = _tmp$19;
			err = _tmp$20;
			return [f, n, err];
		}
		_tuple$6 = d.floatBits(float32info);
		b = _tuple$6[0];
		ovf = _tuple$6[1];
		f = math.Float32frombits(((b.$low >>> 0)));
		if (ovf) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$21 = f;
		_tmp$22 = n;
		_tmp$23 = err;
		f = _tmp$21;
		n = _tmp$22;
		err = _tmp$23;
		return [f, n, err];
	};
	atof64 = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, b, d, err, err$1, exp, f, f$1, f$2, f$3, fUp, hex, mantissa, n, n$1, neg, ok, ok$1, ok$2, ok$3, ok$4, ovf, s, trunc, val;
		f = 0;
		n = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		n$1 = _tuple[1];
		ok = _tuple[2];
		if (ok) {
			_tmp = val;
			_tmp$1 = n$1;
			_tmp$2 = $ifaceNil;
			f = _tmp;
			n = _tmp$1;
			err = _tmp$2;
			return [f, n, err];
		}
		_tuple$1 = readFloat(s);
		mantissa = _tuple$1[0];
		exp = _tuple$1[1];
		neg = _tuple$1[2];
		trunc = _tuple$1[3];
		hex = _tuple$1[4];
		n = _tuple$1[5];
		ok$1 = _tuple$1[6];
		if (!ok$1) {
			_tmp$3 = 0;
			_tmp$4 = n;
			_tmp$5 = syntaxError("ParseFloat", s);
			f = _tmp$3;
			n = _tmp$4;
			err = _tmp$5;
			return [f, n, err];
		}
		if (hex) {
			_tuple$2 = atofHex($substring(s, 0, n), float64info, mantissa, exp, neg, trunc);
			f$1 = _tuple$2[0];
			err$1 = _tuple$2[1];
			_tmp$6 = f$1;
			_tmp$7 = n;
			_tmp$8 = err$1;
			f = _tmp$6;
			n = _tmp$7;
			err = _tmp$8;
			return [f, n, err];
		}
		if (optimize) {
			if (!trunc) {
				_tuple$3 = atof64exact(mantissa, exp, neg);
				f$2 = _tuple$3[0];
				ok$2 = _tuple$3[1];
				if (ok$2) {
					_tmp$9 = f$2;
					_tmp$10 = n;
					_tmp$11 = $ifaceNil;
					f = _tmp$9;
					n = _tmp$10;
					err = _tmp$11;
					return [f, n, err];
				}
			}
			_tuple$4 = eiselLemire64(mantissa, exp, neg);
			f$3 = _tuple$4[0];
			ok$3 = _tuple$4[1];
			if (ok$3) {
				if (!trunc) {
					_tmp$12 = f$3;
					_tmp$13 = n;
					_tmp$14 = $ifaceNil;
					f = _tmp$12;
					n = _tmp$13;
					err = _tmp$14;
					return [f, n, err];
				}
				_tuple$5 = eiselLemire64(new $Uint64(mantissa.$high + 0, mantissa.$low + 1), exp, neg);
				fUp = _tuple$5[0];
				ok$4 = _tuple$5[1];
				if (ok$4 && (f$3 === fUp)) {
					_tmp$15 = f$3;
					_tmp$16 = n;
					_tmp$17 = $ifaceNil;
					f = _tmp$15;
					n = _tmp$16;
					err = _tmp$17;
					return [f, n, err];
				}
			}
		}
		d = new decimal.ptr(arrayType$1.zero(), 0, 0, false, false);
		if (!d.set($substring(s, 0, n))) {
			_tmp$18 = 0;
			_tmp$19 = n;
			_tmp$20 = syntaxError("ParseFloat", s);
			f = _tmp$18;
			n = _tmp$19;
			err = _tmp$20;
			return [f, n, err];
		}
		_tuple$6 = d.floatBits(float64info);
		b = _tuple$6[0];
		ovf = _tuple$6[1];
		f = math.Float64frombits(b);
		if (ovf) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$21 = f;
		_tmp$22 = n;
		_tmp$23 = err;
		f = _tmp$21;
		n = _tmp$22;
		err = _tmp$23;
		return [f, n, err];
	};
	ParseFloat = function(s, bitSize) {
		var _tuple, bitSize, err, f, n, s;
		_tuple = parseFloatPrefix(s, bitSize);
		f = _tuple[0];
		n = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil) && !((n === s.length))) {
			return [0, syntaxError("ParseFloat", s)];
		}
		return [f, err];
	};
	$pkg.ParseFloat = ParseFloat;
	parseFloatPrefix = function(s, bitSize) {
		var _tuple, bitSize, err, f, n, s;
		if (bitSize === 32) {
			_tuple = atof32(s);
			f = _tuple[0];
			n = _tuple[1];
			err = _tuple[2];
			return [(f), n, err];
		}
		return atof64(s);
	};
	lower = function(c) {
		var c;
		return (c | 32) >>> 0;
	};
	NumError.ptr.prototype.Error = function() {
		var $24r, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f.$24r = $24r; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	NumError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	NumError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	syntaxError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	baseError = function(fn, str, base) {
		var base, fn, str;
		return new NumError.ptr(fn, str, errors.New("invalid base " + Itoa(base)));
	};
	bitSizeError = function(fn, str, bitSize) {
		var bitSize, fn, str;
		return new NumError.ptr(fn, str, errors.New("invalid bit size " + Itoa(bitSize)));
	};
	ParseUint = function(s, base, bitSize) {
		var _1, _i, _ref, base, base0, bitSize, c, cutoff, d, maxVal, n, n1, s, s0, underscores, x, x$1, x$2;
		if (s === "") {
			return [new $Uint64(0, 0), syntaxError("ParseUint", s)];
		}
		base0 = base === 0;
		s0 = s;
		if (2 <= base && base <= 36) {
		} else if ((base === 0)) {
			base = 10;
			if (s.charCodeAt(0) === 48) {
				if (s.length >= 3 && (lower(s.charCodeAt(1)) === 98)) {
					base = 2;
					s = $substring(s, 2);
				} else if (s.length >= 3 && (lower(s.charCodeAt(1)) === 111)) {
					base = 8;
					s = $substring(s, 2);
				} else if (s.length >= 3 && (lower(s.charCodeAt(1)) === 120)) {
					base = 16;
					s = $substring(s, 2);
				} else {
					base = 8;
					s = $substring(s, 1);
				}
			}
		} else {
			return [new $Uint64(0, 0), baseError("ParseUint", s0, base)];
		}
		if (bitSize === 0) {
			bitSize = 32;
		} else if (bitSize < 0 || bitSize > 64) {
			return [new $Uint64(0, 0), bitSizeError("ParseUint", s0, bitSize)];
		}
		cutoff = new $Uint64(0, 0);
		_1 = base;
		if (_1 === (10)) {
			cutoff = new $Uint64(429496729, 2576980378);
		} else if (_1 === (16)) {
			cutoff = new $Uint64(268435456, 0);
		} else {
			cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), (new $Uint64(0, base)), false), new $Uint64(x.$high + 0, x.$low + 1));
		}
		maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), ((bitSize >>> 0))), new $Uint64(x$1.$high - 0, x$1.$low - 1));
		underscores = false;
		n = new $Uint64(0, 0);
		_ref = (new sliceType$6($stringToBytes(s)));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			d = 0;
			if ((c === 95) && base0) {
				underscores = true;
				_i++;
				continue;
			} else if (48 <= c && c <= 57) {
				d = c - 48 << 24 >>> 24;
			} else if (97 <= lower(c) && lower(c) <= 122) {
				d = (lower(c) - 97 << 24 >>> 24) + 10 << 24 >>> 24;
			} else {
				return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
			}
			if (d >= ((base << 24 >>> 24))) {
				return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
			}
			if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) {
				return [maxVal, rangeError("ParseUint", s0)];
			}
			n = $mul64(n, ((new $Uint64(0, base))));
			n1 = (x$2 = (new $Uint64(0, d)), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
			if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) {
				return [maxVal, rangeError("ParseUint", s0)];
			}
			n = n1;
			_i++;
		}
		if (underscores && !underscoreOK(s0)) {
			return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
		}
		return [n, $ifaceNil];
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (s === "") {
			_tmp = new $Int64(0, 0);
			_tmp$1 = syntaxError("ParseInt", s);
			i = _tmp;
			err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = $substring(s, 1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = $substring(s, 1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize);
		un = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err;
			i = _tmp$2;
			err = _tmp$3;
			return [i, err];
		}
		if (bitSize === 0) {
			bitSize = 32;
		}
		cutoff = ($shiftLeft64(new $Uint64(0, 1), (((bitSize - 1 >> 0) >>> 0))));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = ((x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)));
			_tmp$5 = rangeError("ParseInt", s0);
			i = _tmp$4;
			err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = (new $Int64(cutoff.$high, cutoff.$low)), new $Int64(-x$1.$high, -x$1.$low));
			_tmp$7 = rangeError("ParseInt", s0);
			i = _tmp$6;
			err = _tmp$7;
			return [i, err];
		}
		n = (new $Int64(un.$high, un.$low));
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		i = _tmp$8;
		err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	Atoi = function(s) {
		var _i, _ref, _tuple, _tuple$1, ch, err, i64, n, nerr, ok, s, s0, sLen;
		sLen = s.length;
		if (true && (0 < sLen && sLen < 10) || false && (0 < sLen && sLen < 19)) {
			s0 = s;
			if ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43)) {
				s = $substring(s, 1);
				if (s.length < 1) {
					return [0, new NumError.ptr("Atoi", s0, $pkg.ErrSyntax)];
				}
			}
			n = 0;
			_ref = (new sliceType$6($stringToBytes(s)));
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				ch = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				ch = ch - (48) << 24 >>> 24;
				if (ch > 9) {
					return [0, new NumError.ptr("Atoi", s0, $pkg.ErrSyntax)];
				}
				n = ($imul(n, 10)) + ((ch >> 0)) >> 0;
				_i++;
			}
			if (s0.charCodeAt(0) === 45) {
				n = -n;
			}
			return [n, $ifaceNil];
		}
		_tuple = ParseInt(s, 10, 0);
		i64 = _tuple[0];
		err = _tuple[1];
		_tuple$1 = $assertType(err, ptrType, true);
		nerr = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			nerr.Func = "Atoi";
		}
		return [(((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0)), err];
	};
	$pkg.Atoi = Atoi;
	underscoreOK = function(s) {
		var hex, i, s, saw;
		saw = 94;
		i = 0;
		if (s.length >= 1 && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			s = $substring(s, 1);
		}
		hex = false;
		if (s.length >= 2 && (s.charCodeAt(0) === 48) && ((lower(s.charCodeAt(1)) === 98) || (lower(s.charCodeAt(1)) === 111) || (lower(s.charCodeAt(1)) === 120))) {
			i = 2;
			saw = 48;
			hex = lower(s.charCodeAt(1)) === 120;
		}
		while (true) {
			if (!(i < s.length)) { break; }
			if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57 || hex && 97 <= lower(s.charCodeAt(i)) && lower(s.charCodeAt(i)) <= 102) {
				saw = 48;
				i = i + (1) >> 0;
				continue;
			}
			if (s.charCodeAt(i) === 95) {
				if (!((saw === 48))) {
					return false;
				}
				saw = 95;
				i = i + (1) >> 0;
				continue;
			}
			if (saw === 95) {
				return false;
			}
			saw = 33;
			i = i + (1) >> 0;
		}
		return !((saw === 95));
	};
	decimal.ptr.prototype.String = function() {
		var a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return ($bytesToString($subslice(buf, 0, w)));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$2.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var a, c, c$1, dig, dig$1, k, mask, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = (((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0));
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		mask = (((y$2 = k, y$2 < 32 ? (1 << y$2) : 0) >>> 0)) - 1 >>> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = (((x$1 = a.d, ((r < 0 || r >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[r])) >>> 0));
			dig = (y$3 = k, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((dig + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[w] = (((dig$1 + 48 >>> 0) << 24 >>> 24))));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? ((((((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0)) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[w] = (((rem + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((rem$1 + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, ((k >>> 0)));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, ((-k >>> 0)));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = (new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) - 48 << 24 >>> 24))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	eiselLemire64 = function(man, exp10, neg) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, clz, exp10, f, man, mergedHi, mergedLo, msb, neg, ok, retBits, retExp2, retMantissa, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xHi, xLo, yHi, yLo;
		f = 0;
		ok = false;
		if ((man.$high === 0 && man.$low === 0)) {
			if (neg) {
				f = math.Float64frombits(new $Uint64(2147483648, 0));
			}
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		}
		if (exp10 < -348 || 347 < exp10) {
			_tmp$2 = 0;
			_tmp$3 = false;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		}
		clz = bits.LeadingZeros64(man);
		man = $shiftLeft64(man, (clz));
		retExp2 = (x = (new $Uint64(0, (((($imul(217706, exp10)) >> 16 >> 0) + 64 >> 0) + 1023 >> 0))), x$1 = (new $Uint64(0, clz)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low));
		_tuple = bits.Mul64(man, (x$2 = exp10 - -348 >> 0, ((x$2 < 0 || x$2 >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x$2]))[1]);
		xHi = _tuple[0];
		xLo = _tuple[1];
		if ((x$3 = new $Uint64(xHi.$high & 0, (xHi.$low & 511) >>> 0), (x$3.$high === 0 && x$3.$low === 511)) && (x$4 = new $Uint64(xLo.$high + man.$high, xLo.$low + man.$low), (x$4.$high < man.$high || (x$4.$high === man.$high && x$4.$low < man.$low)))) {
			_tuple$1 = bits.Mul64(man, (x$5 = exp10 - -348 >> 0, ((x$5 < 0 || x$5 >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x$5]))[0]);
			yHi = _tuple$1[0];
			yLo = _tuple$1[1];
			_tmp$4 = xHi;
			_tmp$5 = new $Uint64(xLo.$high + yHi.$high, xLo.$low + yHi.$low);
			mergedHi = _tmp$4;
			mergedLo = _tmp$5;
			if ((mergedLo.$high < xLo.$high || (mergedLo.$high === xLo.$high && mergedLo.$low < xLo.$low))) {
				mergedHi = (x$6 = new $Uint64(0, 1), new $Uint64(mergedHi.$high + x$6.$high, mergedHi.$low + x$6.$low));
			}
			if ((x$7 = new $Uint64(mergedHi.$high & 0, (mergedHi.$low & 511) >>> 0), (x$7.$high === 0 && x$7.$low === 511)) && (x$8 = new $Uint64(mergedLo.$high + 0, mergedLo.$low + 1), (x$8.$high === 0 && x$8.$low === 0)) && (x$9 = new $Uint64(yLo.$high + man.$high, yLo.$low + man.$low), (x$9.$high < man.$high || (x$9.$high === man.$high && x$9.$low < man.$low)))) {
				_tmp$6 = 0;
				_tmp$7 = false;
				f = _tmp$6;
				ok = _tmp$7;
				return [f, ok];
			}
			_tmp$8 = mergedHi;
			_tmp$9 = mergedLo;
			xHi = _tmp$8;
			xLo = _tmp$9;
		}
		msb = $shiftRightUint64(xHi, 63);
		retMantissa = $shiftRightUint64(xHi, $flatten64((new $Uint64(msb.$high + 0, msb.$low + 9))));
		retExp2 = (x$10 = new $Uint64(0 ^ msb.$high, (1 ^ msb.$low) >>> 0), new $Uint64(retExp2.$high - x$10.$high, retExp2.$low - x$10.$low));
		if ((xLo.$high === 0 && xLo.$low === 0) && (x$11 = new $Uint64(xHi.$high & 0, (xHi.$low & 511) >>> 0), (x$11.$high === 0 && x$11.$low === 0)) && (x$12 = new $Uint64(retMantissa.$high & 0, (retMantissa.$low & 3) >>> 0), (x$12.$high === 0 && x$12.$low === 1))) {
			_tmp$10 = 0;
			_tmp$11 = false;
			f = _tmp$10;
			ok = _tmp$11;
			return [f, ok];
		}
		retMantissa = (x$13 = new $Uint64(retMantissa.$high & 0, (retMantissa.$low & 1) >>> 0), new $Uint64(retMantissa.$high + x$13.$high, retMantissa.$low + x$13.$low));
		retMantissa = $shiftRightUint64(retMantissa, (1));
		if ((x$14 = $shiftRightUint64(retMantissa, 53), (x$14.$high > 0 || (x$14.$high === 0 && x$14.$low > 0)))) {
			retMantissa = $shiftRightUint64(retMantissa, (1));
			retExp2 = (x$15 = new $Uint64(0, 1), new $Uint64(retExp2.$high + x$15.$high, retExp2.$low + x$15.$low));
		}
		if ((x$16 = new $Uint64(retExp2.$high - 0, retExp2.$low - 1), (x$16.$high > 0 || (x$16.$high === 0 && x$16.$low >= 2046)))) {
			_tmp$12 = 0;
			_tmp$13 = false;
			f = _tmp$12;
			ok = _tmp$13;
			return [f, ok];
		}
		retBits = (x$17 = $shiftLeft64(retExp2, 52), x$18 = new $Uint64(retMantissa.$high & 1048575, (retMantissa.$low & 4294967295) >>> 0), new $Uint64(x$17.$high | x$18.$high, (x$17.$low | x$18.$low) >>> 0));
		if (neg) {
			retBits = (x$19 = new $Uint64(2147483648, 0), new $Uint64(retBits.$high | x$19.$high, (retBits.$low | x$19.$low) >>> 0));
		}
		_tmp$14 = math.Float64frombits(retBits);
		_tmp$15 = true;
		f = _tmp$14;
		ok = _tmp$15;
		return [f, ok];
	};
	eiselLemire32 = function(man, exp10, neg) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, clz, exp10, f, man, mergedHi, mergedLo, msb, neg, ok, retBits, retExp2, retMantissa, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xHi, xLo, yHi, yLo;
		f = 0;
		ok = false;
		if ((man.$high === 0 && man.$low === 0)) {
			if (neg) {
				f = math.Float32frombits(2147483648);
			}
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		}
		if (exp10 < -348 || 347 < exp10) {
			_tmp$2 = 0;
			_tmp$3 = false;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		}
		clz = bits.LeadingZeros64(man);
		man = $shiftLeft64(man, (clz));
		retExp2 = (x = (new $Uint64(0, (((($imul(217706, exp10)) >> 16 >> 0) + 64 >> 0) + 127 >> 0))), x$1 = (new $Uint64(0, clz)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low));
		_tuple = bits.Mul64(man, (x$2 = exp10 - -348 >> 0, ((x$2 < 0 || x$2 >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x$2]))[1]);
		xHi = _tuple[0];
		xLo = _tuple[1];
		if ((x$3 = new $Uint64(xHi.$high & 63, (xHi.$low & 4294967295) >>> 0), (x$3.$high === 63 && x$3.$low === 4294967295)) && (x$4 = new $Uint64(xLo.$high + man.$high, xLo.$low + man.$low), (x$4.$high < man.$high || (x$4.$high === man.$high && x$4.$low < man.$low)))) {
			_tuple$1 = bits.Mul64(man, (x$5 = exp10 - -348 >> 0, ((x$5 < 0 || x$5 >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x$5]))[0]);
			yHi = _tuple$1[0];
			yLo = _tuple$1[1];
			_tmp$4 = xHi;
			_tmp$5 = new $Uint64(xLo.$high + yHi.$high, xLo.$low + yHi.$low);
			mergedHi = _tmp$4;
			mergedLo = _tmp$5;
			if ((mergedLo.$high < xLo.$high || (mergedLo.$high === xLo.$high && mergedLo.$low < xLo.$low))) {
				mergedHi = (x$6 = new $Uint64(0, 1), new $Uint64(mergedHi.$high + x$6.$high, mergedHi.$low + x$6.$low));
			}
			if ((x$7 = new $Uint64(mergedHi.$high & 63, (mergedHi.$low & 4294967295) >>> 0), (x$7.$high === 63 && x$7.$low === 4294967295)) && (x$8 = new $Uint64(mergedLo.$high + 0, mergedLo.$low + 1), (x$8.$high === 0 && x$8.$low === 0)) && (x$9 = new $Uint64(yLo.$high + man.$high, yLo.$low + man.$low), (x$9.$high < man.$high || (x$9.$high === man.$high && x$9.$low < man.$low)))) {
				_tmp$6 = 0;
				_tmp$7 = false;
				f = _tmp$6;
				ok = _tmp$7;
				return [f, ok];
			}
			_tmp$8 = mergedHi;
			_tmp$9 = mergedLo;
			xHi = _tmp$8;
			xLo = _tmp$9;
		}
		msb = $shiftRightUint64(xHi, 63);
		retMantissa = $shiftRightUint64(xHi, $flatten64((new $Uint64(msb.$high + 0, msb.$low + 38))));
		retExp2 = (x$10 = new $Uint64(0 ^ msb.$high, (1 ^ msb.$low) >>> 0), new $Uint64(retExp2.$high - x$10.$high, retExp2.$low - x$10.$low));
		if ((xLo.$high === 0 && xLo.$low === 0) && (x$11 = new $Uint64(xHi.$high & 63, (xHi.$low & 4294967295) >>> 0), (x$11.$high === 0 && x$11.$low === 0)) && (x$12 = new $Uint64(retMantissa.$high & 0, (retMantissa.$low & 3) >>> 0), (x$12.$high === 0 && x$12.$low === 1))) {
			_tmp$10 = 0;
			_tmp$11 = false;
			f = _tmp$10;
			ok = _tmp$11;
			return [f, ok];
		}
		retMantissa = (x$13 = new $Uint64(retMantissa.$high & 0, (retMantissa.$low & 1) >>> 0), new $Uint64(retMantissa.$high + x$13.$high, retMantissa.$low + x$13.$low));
		retMantissa = $shiftRightUint64(retMantissa, (1));
		if ((x$14 = $shiftRightUint64(retMantissa, 24), (x$14.$high > 0 || (x$14.$high === 0 && x$14.$low > 0)))) {
			retMantissa = $shiftRightUint64(retMantissa, (1));
			retExp2 = (x$15 = new $Uint64(0, 1), new $Uint64(retExp2.$high + x$15.$high, retExp2.$low + x$15.$low));
		}
		if ((x$16 = new $Uint64(retExp2.$high - 0, retExp2.$low - 1), (x$16.$high > 0 || (x$16.$high === 0 && x$16.$low >= 254)))) {
			_tmp$12 = 0;
			_tmp$13 = false;
			f = _tmp$12;
			ok = _tmp$13;
			return [f, ok];
		}
		retBits = (x$17 = $shiftLeft64(retExp2, 23), x$18 = new $Uint64(retMantissa.$high & 0, (retMantissa.$low & 8388607) >>> 0), new $Uint64(x$17.$high | x$18.$high, (x$17.$low | x$18.$low) >>> 0));
		if (neg) {
			retBits = (x$19 = new $Uint64(0, 2147483648), new $Uint64(retBits.$high | x$19.$high, (retBits.$low | x$19.$low) >>> 0));
		}
		_tmp$14 = math.Float32frombits(((retBits.$low >>> 0)));
		_tmp$15 = true;
		f = _tmp$14;
		ok = _tmp$15;
		return [f, ok];
	};
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var _tmp, _tmp$1, exp, expBiased, f, flt, lower$1, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower$1 = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - ((flt.mantbits >> 0)) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, ((-f.exp >>> 0)))), ((-f.exp >>> 0))), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, (((-f.exp >>> 0))));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower$1, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower$1, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower$1, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower$1, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower$1, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var f, shift, x;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			return 0;
		}
		shift = bits.LeadingZeros64(f.mant);
		f.mant = $shiftLeft64(f.mant, (((shift >>> 0))));
		f.exp = f.exp - (shift) >> 0;
		return ((shift >>> 0));
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var _tuple, f, g, hi, lo, x;
		f = this;
		_tuple = bits.Mul64(f.mant, g.mant);
		hi = _tuple[0];
		lo = _tuple[1];
		f.mant = (x = $shiftRightUint64(lo, 63), new $Uint64(hi.$high + x.$high, hi.$low + x.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.frexp10 = function() {
		var _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		b.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = ((-f.exp >>> 0));
		integer = (($shiftRightUint64(f.mant, shift).$low >>> 0));
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = (new $Uint64(0, integer)), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$4]));
			integer = (_q = integer / (((pow10.$low >>> 0))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, ((pow10.$low >>> 0))) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$3.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[pos] = (((v + 48 >>> 0) << 24 >>> 24)));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + nd] = ((new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24))));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64((new $Uint64(0, rest)), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower$1, upper) {
		var _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower$1, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower$1, f, extFloat) && $equal(lower$1, upper, extFloat)) {
			buf = arrayType$2.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, ((((f.exp - upper.exp >> 0) >>> 0))));
			f.exp = upper.exp;
		}
		if (lower$1.exp > upper.exp) {
			lower$1.mant = $shiftLeft64(lower$1.mant, ((((lower$1.exp - upper.exp >> 0) >>> 0))));
			lower$1.exp = upper.exp;
		}
		exp10 = frexp10Many(lower$1, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower$1.mant = (x$8 = lower$1.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = ((-upper.exp >>> 0));
		integer = (($shiftRightUint64(upper.mant, shift).$low >>> 0));
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower$1.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = (new $Uint64(0, integer)), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$17]));
			digit = (_q = integer / ((pow$1.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$2] = (((digit + 48 >>> 0) << 24 >>> 24))));
			integer = integer - (($imul(digit, ((pow$1.$low >>> 0))) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = (($shiftRightUint64(fraction, shift).$low >> 0));
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21] = (((digit$1 + 48 >> 0) << 24 >>> 24))));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64((new $Uint64(0, digit$1)), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower$1, upper) { return this.$val.ShortestDecimal(d, lower$1, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var _1, _2, _3, _4, _tuple, bitSize, bits$1, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower$1, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits$1 = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits$1 = (new $Uint64(0, math.Float32bits(($fround(val)))));
			flt = float32info;
		} else if (_1 === (64)) {
			bits$1 = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits$1, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = (($shiftRightUint64(bits$1, flt.mantbits).$low >> 0)) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits$1.$high & x$1.$high, (bits$1.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if ((fmt === 120) || (fmt === 88)) {
			return fmtX(dst, prec, fmt, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower$1 = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$3.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower$1, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$2.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - ((flt.mantbits >> 0)) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType$1.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - ((flt.mantbits >> 0)) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var d, exp, explo, flt, inclusive, l, li, lower$1, m, mant, mantlo, mi, minexp, okdown, okup, u, ui, upper, upperdelta, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - ((flt.mantbits >> 0)) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType$1.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower$1 = new decimal.ptr(arrayType$1.zero(), 0, 0, false, false);
		lower$1.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower$1.Shift((explo - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		upperdelta = 0;
		ui = 0;
		while (true) {
			mi = (ui - upper.dp >> 0) + d.dp >> 0;
			if (mi >= d.nd) {
				break;
			}
			li = (ui - upper.dp >> 0) + lower$1.dp >> 0;
			l = 48;
			if (li >= 0 && li < lower$1.nd) {
				l = (x$5 = lower$1.d, ((li < 0 || li >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[li]));
			}
			m = 48;
			if (mi >= 0) {
				m = (x$6 = d.d, ((mi < 0 || mi >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[mi]));
			}
			u = 48;
			if (ui < upper.nd) {
				u = (x$7 = upper.d, ((ui < 0 || ui >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[ui]));
			}
			okdown = !((l === m)) || inclusive && ((li + 1 >> 0) === lower$1.nd);
			if ((upperdelta === 0) && (m + 1 << 24 >>> 24) < u) {
				upperdelta = 2;
			} else if ((upperdelta === 0) && !((m === u))) {
				upperdelta = 1;
			} else if ((upperdelta === 1) && (!((m === 57)) || !((u === 48)))) {
				upperdelta = 2;
			}
			okup = upperdelta > 0 && (inclusive || upperdelta > 1 || (ui + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(mi + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(mi + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(mi + 1 >> 0);
				return;
			}
			ui = ui + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, ((exp << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$1 = (((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var ch, d, dst, i, j, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - (((flt.mantbits >> 0))) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, (new $Uint64(0, exp)), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	fmtX = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, ch, dst, exp, extra, flt, fmt, hex, i, mant, neg, prec, shift, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		if ((mant.$high === 0 && mant.$low === 0)) {
			exp = 0;
		}
		mant = $shiftLeft64(mant, ((60 - flt.mantbits >>> 0)));
		while (true) {
			if (!(!((mant.$high === 0 && mant.$low === 0)) && (x = new $Uint64(mant.$high & 268435456, (mant.$low & 0) >>> 0), (x.$high === 0 && x.$low === 0)))) { break; }
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		if (prec >= 0 && prec < 15) {
			shift = ((($imul(prec, 4)) >>> 0));
			extra = (x$1 = $shiftLeft64(mant, shift), new $Uint64(x$1.$high & 268435455, (x$1.$low & 4294967295) >>> 0));
			mant = $shiftRightUint64(mant, ((60 - shift >>> 0)));
			if ((x$2 = (x$3 = new $Uint64(mant.$high & 0, (mant.$low & 1) >>> 0), new $Uint64(extra.$high | x$3.$high, (extra.$low | x$3.$low) >>> 0)), (x$2.$high > 134217728 || (x$2.$high === 134217728 && x$2.$low > 0)))) {
				mant = (x$4 = new $Uint64(0, 1), new $Uint64(mant.$high + x$4.$high, mant.$low + x$4.$low));
			}
			mant = $shiftLeft64(mant, ((60 - shift >>> 0)));
			if (!((x$5 = new $Uint64(mant.$high & 536870912, (mant.$low & 0) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) {
				mant = $shiftRightUint64(mant, (1));
				exp = exp + (1) >> 0;
			}
		}
		hex = "0123456789abcdef";
		if (fmt === 88) {
			hex = "0123456789ABCDEF";
		}
		if (neg) {
			dst = $append(dst, 45);
		}
		dst = $append(dst, 48, fmt, 48 + (((x$6 = $shiftRightUint64(mant, 60), new $Uint64(x$6.$high & 0, (x$6.$low & 1) >>> 0)).$low << 24 >>> 24)) << 24 >>> 24);
		mant = $shiftLeft64(mant, (4));
		if (prec < 0 && !((mant.$high === 0 && mant.$low === 0))) {
			dst = $append(dst, 46);
			while (true) {
				if (!(!((mant.$high === 0 && mant.$low === 0)))) { break; }
				dst = $append(dst, hex.charCodeAt($flatten64((x$7 = $shiftRightUint64(mant, 60), new $Uint64(x$7.$high & 0, (x$7.$low & 15) >>> 0)))));
				mant = $shiftLeft64(mant, (4));
			}
		} else if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				dst = $append(dst, hex.charCodeAt($flatten64((x$8 = $shiftRightUint64(mant, 60), new $Uint64(x$8.$high & 0, (x$8.$low & 15) >>> 0)))));
				mant = $shiftLeft64(mant, (4));
				i = i + (1) >> 0;
			}
		}
		ch = 80;
		if (fmt === lower(fmt)) {
			ch = 112;
		}
		dst = $append(dst, ch);
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 1000) {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r$1 = ((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$3 = exp / 1000, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$3 = (((_q$4 = exp / 100, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$4 = ((_q$5 = exp / 10, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r$5 = exp % 10, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	min = function(a, b) {
		var a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatInt = function(i, base) {
		var _tuple, base, i, s;
		if (true && (0 < i.$high || (0 === i.$high && 0 <= i.$low)) && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return small((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0)));
		}
		_tuple = formatBits(sliceType$6.nil, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var i;
		return FormatInt((new $Int64(0, i)), 10);
	};
	$pkg.Itoa = Itoa;
	small = function(i) {
		var i;
		if (i < 10) {
			return $substring("0123456789abcdefghijklmnopqrstuvwxyz", i, (i + 1 >> 0));
		}
		return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", ($imul(i, 2)), (($imul(i, 2)) + 2 >> 0));
	};
	formatBits = function(dst, u, base, neg, append_) {
		var _q, _q$1, _r, _r$1, a, append_, b, b$1, base, d, dst, i, is, is$1, is$2, j, m, neg, q, q$1, s, shift, u, us, us$1, x, x$1, x$2, x$3, x$4, x$5;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$4.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 1000000000)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = (((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0));
					j = 4;
					while (true) {
						if (!(j > 0)) { break; }
						is = (_r = us % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
						us = (_q = us / (100), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						i = i - (2) >> 0;
						(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$1] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 1 >>> 0))));
						(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$2] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 0 >>> 0))));
						j = j - (1) >> 0;
					}
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(((us * 2 >>> 0) + 1 >>> 0)));
					u = q;
				}
			}
			us$1 = ((u.$low >>> 0));
			while (true) {
				if (!(us$1 >= 100)) { break; }
				is$1 = (_r$1 = us$1 % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
				us$1 = (_q$1 = us$1 / (100), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				i = i - (2) >> 0;
				(x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$3] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 1 >>> 0))));
				(x$4 = i + 0 >> 0, ((x$4 < 0 || x$4 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$4] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 0 >>> 0))));
			}
			is$2 = us$1 * 2 >>> 0;
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$2 + 1 >>> 0)));
			if (us$1 >= 10) {
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(is$2));
			}
		} else if (isPowerOfTwo(base)) {
			shift = (((bits.TrailingZeros(((base >>> 0))) >>> 0)) & 7) >>> 0;
			b = (new $Uint64(0, base));
			m = ((base >>> 0)) - 1 >>> 0;
			while (true) {
				if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((((u.$low >>> 0)) & m) >>> 0)));
				u = $shiftRightUint64(u, (shift));
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
		} else {
			b$1 = (new $Uint64(0, base));
			while (true) {
				if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
				i = i - (1) >> 0;
				q$1 = $div64(u, b$1, false);
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((x$5 = $mul64(q$1, b$1), new $Uint64(u.$high - x$5.$high, u.$low - x$5.$low)).$low >>> 0))));
				u = q$1;
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = ($bytesToString($subslice(new sliceType$6(a), i)));
		return [d, s];
	};
	isPowerOfTwo = function(x) {
		var x;
		return (x & ((x - 1 >> 0))) === 0;
	};
	quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _q, graphicOnly, quote, s;
		return ($bytesToString(appendQuotedWith($makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), s, quote, ASCIIonly, graphicOnly)));
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _tuple, buf, graphicOnly, nBuf, quote, r, s, width;
		if ((buf.$capacity - buf.$length >> 0) < s.length) {
			nBuf = $makeSlice(sliceType$6, buf.$length, (((buf.$length + 1 >> 0) + s.length >> 0) + 1 >> 0));
			$copySlice(nBuf, buf);
			buf = nBuf;
		}
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = ((s.charCodeAt(0) >> 0));
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1;
		runeTmp = arrayType$5.zero();
		if ((r === ((quote >> 0))) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, ((r << 24 >>> 24)));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, ((r << 24 >>> 24)));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24)) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((((r << 24 >>> 24)) & 15) >>> 0)));
			} else if (r > 1114111) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s$1 >>> 0)), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	Quote = function(s) {
		var s;
		return quoteWith(s, 34, false, false);
	};
	$pkg.Quote = Quote;
	AppendQuote = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	AppendQuoteToASCII = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = ((b >> 0));
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		if (s.length === 0) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = ((s.charCodeAt(0) >> 0));
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = ((c$1 >> 0)) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = ((s.charCodeAt(j$1) >> 0)) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = ((c$1 >> 0));
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var _1, _q, _tuple, _tuple$1, buf, buf$1, c, err, i, multibyte, n, n$1, quote, r, runeTmp, s, size, ss;
		n = s.length;
		if (n < 2) {
			return ["", $pkg.ErrSyntax];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			return ["", $pkg.ErrSyntax];
		}
		s = $substring(s, 1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				return ["", $pkg.ErrSyntax];
			}
			if (contains(s, 13)) {
				buf = $makeSlice(sliceType$6, 0, (s.length - 1 >> 0));
				i = 0;
				while (true) {
					if (!(i < s.length)) { break; }
					if (!((s.charCodeAt(i) === 13))) {
						buf = $append(buf, s.charCodeAt(i));
					}
					i = i + (1) >> 0;
				}
				return [($bytesToString(buf)), $ifaceNil];
			}
			return [s, $ifaceNil];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			return ["", $pkg.ErrSyntax];
		}
		if (contains(s, 10)) {
			return ["", $pkg.ErrSyntax];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_1 = quote;
			if (_1 === (34)) {
				if (utf8.ValidString(s)) {
					return [s, $ifaceNil];
				}
			} else if (_1 === (39)) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					return [s, $ifaceNil];
				}
			}
		}
		runeTmp = arrayType$5.zero();
		buf$1 = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return ["", err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf$1 = $append(buf$1, ((c << 24 >>> 24)));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf$1 = $appendSlice(buf$1, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				return ["", $pkg.ErrSyntax];
			}
		}
		return [($bytesToString(buf$1)), $ifaceNil];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var c, s;
		return !((bytealg.IndexByteString(s, c) === -1));
	};
	bsearch16 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = ((r << 16 >>> 16));
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = ((r >>> 0));
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, ((r << 16 >>> 16)));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === ((r << 16 >>> 16))));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = ((r << 16 >>> 16));
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? ($throwRuntimeError("index out of range"), undefined) : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init("", [{prop: "Func", name: "Func", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Num", name: "Num", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	decimal.init("strconv", [{prop: "d", name: "d", embedded: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "nd", name: "nd", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", embedded: false, exported: false, typ: $String, tag: ""}]);
	extFloat.init("strconv", [{prop: "mant", name: "mant", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", embedded: false, exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", embedded: false, exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", embedded: false, exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", embedded: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		detailedPowersOfTen = $toNativeArray($kindArray, [$toNativeArray($kindUint64, [new $Uint64(389204073, 3445679187), new $Uint64(4203730336, 136053384)]), $toNativeArray($kindUint64, [new $Uint64(243252546, 542936756), new $Uint64(2627331460, 85033365)]), $toNativeArray($kindUint64, [new $Uint64(1377807506, 2826154593), new $Uint64(3284164325, 106291706)]), $toNativeArray($kindUint64, [new $Uint64(3869743031, 1385209593), new $Uint64(4105205406, 1206606456)]), $toNativeArray($kindUint64, [new $Uint64(2418589394, 2476368732), new $Uint64(2565753378, 3975354507)]), $toNativeArray($kindUint64, [new $Uint64(1949494919, 947977267), new $Uint64(3207191723, 2821709486)]), $toNativeArray($kindUint64, [new $Uint64(289385001, 111229759), new $Uint64(4008989654, 2453395034)]), $toNativeArray($kindUint64, [new $Uint64(1254607449, 2753873159), new $Uint64(2505618534, 459630072)]), $toNativeArray($kindUint64, [new $Uint64(1568259312, 221115977), new $Uint64(3132023167, 2722021238)]), $toNativeArray($kindUint64, [new $Uint64(4107807788, 276394972), new $Uint64(3915028959, 2328784723)]), $toNativeArray($kindUint64, [new $Uint64(2030508955, 2320230505), new $Uint64(2446893099, 3066103188)]), $toNativeArray($kindUint64, [new $Uint64(2538136194, 1826546308), new $Uint64(3058616374, 2758887161)]), $toNativeArray($kindUint64, [new $Uint64(4246412067, 135699237), new $Uint64(3823270468, 1301125303)]), $toNativeArray($kindUint64, [new $Uint64(4264620277, 3842908407), new $Uint64(2389544042, 2960686962)]), $toNativeArray($kindUint64, [new $Uint64(3183291699, 1582410037), new $Uint64(2986930053, 1553375055)]), $toNativeArray($kindUint64, [new $Uint64(2905372800, 904270722), new $Uint64(3733662566, 3015460643)]), $toNativeArray($kindUint64, [new $Uint64(1278987088, 565169201), new $Uint64(2333539104, 810921078)]), $toNativeArray($kindUint64, [new $Uint64(3746217508, 706461501), new $Uint64(2916923880, 1013651347)]), $toNativeArray($kindUint64, [new $Uint64(3609030061, 883076877), new $Uint64(3646154850, 1267064184)]), $toNativeArray($kindUint64, [new $Uint64(2255643788, 1088793960), new $Uint64(2278846781, 1865656939)]), $toNativeArray($kindUint64, [new $Uint64(1745812911, 1360992450), new $Uint64(2848558476, 3405812998)]), $toNativeArray($kindUint64, [new $Uint64(34782491, 627498738), new $Uint64(3560698095, 4257266248)]), $toNativeArray($kindUint64, [new $Uint64(21739056, 4150283095), new $Uint64(2225436309, 4271404141)]), $toNativeArray($kindUint64, [new $Uint64(1100915645, 892886573), new $Uint64(2781795387, 2118029704)]), $toNativeArray($kindUint64, [new $Uint64(1376144556, 2189850041), new $Uint64(3477244234, 1573795306)]), $toNativeArray($kindUint64, [new $Uint64(1933832171, 3516139923), new $Uint64(2173277646, 2057363890)]), $toNativeArray($kindUint64, [new $Uint64(269806566, 3321433080), new $Uint64(2716597058, 424221215)]), $toNativeArray($kindUint64, [new $Uint64(3558483680, 2004307702), new $Uint64(3395746322, 2677760166)]), $toNativeArray($kindUint64, [new $Uint64(2300620952, 2505384628), new $Uint64(4244682903, 1199716560)]), $toNativeArray($kindUint64, [new $Uint64(1437888095, 1565865392), new $Uint64(2652926814, 2360435586)]), $toNativeArray($kindUint64, [new $Uint64(3944843767, 883589917), new $Uint64(3316158518, 803060834)]), $toNativeArray($kindUint64, [new $Uint64(2783571061, 30745572), new $Uint64(4145198147, 3151309691)]), $toNativeArray($kindUint64, [new $Uint64(1202861001, 556086894), new $Uint64(2590748842, 1432697645)]), $toNativeArray($kindUint64, [new $Uint64(2577318075, 1768850442), new $Uint64(3238436052, 3938355704)]), $toNativeArray($kindUint64, [new $Uint64(3221647594, 1137321229), new $Uint64(4048045066, 627977334)]), $toNativeArray($kindUint64, [new $Uint64(939787922, 1784567592), new $Uint64(2530028166, 1466227658)]), $toNativeArray($kindUint64, [new $Uint64(3322218551, 83225842), new $Uint64(3162535207, 3980268220)]), $toNativeArray($kindUint64, [new $Uint64(4152773188, 3325257774), new $Uint64(3953169009, 3901593451)]), $toNativeArray($kindUint64, [new $Uint64(2058612330, 4225769757), new $Uint64(2470730631, 827883171)]), $toNativeArray($kindUint64, [new $Uint64(1499523589, 3134728548), new $Uint64(3088413288, 4256079436)]), $toNativeArray($kindUint64, [new $Uint64(1874404487, 697185213), new $Uint64(3860516611, 1025131999)]), $toNativeArray($kindUint64, [new $Uint64(2782115540, 2046353494), new $Uint64(2412822882, 103836587)]), $toNativeArray($kindUint64, [new $Uint64(2403902601, 2557941868), new $Uint64(3016028602, 2277279382)]), $toNativeArray($kindUint64, [new $Uint64(857394603, 4271169159), new $Uint64(3770035753, 699115580)]), $toNativeArray($kindUint64, [new $Uint64(2683355275, 2132609812), new $Uint64(2356272345, 3121301797)]), $toNativeArray($kindUint64, [new $Uint64(132968622, 1592020441), new $Uint64(2945340432, 680401775)]), $toNativeArray($kindUint64, [new $Uint64(3387436249, 4137509200), new $Uint64(3681675540, 850502218)]), $toNativeArray($kindUint64, [new $Uint64(3190889480, 975330514), new $Uint64(2301047212, 2679047534)]), $toNativeArray($kindUint64, [new $Uint64(1841128202, 1219163142), new $Uint64(2876309015, 3348809418)]), $toNativeArray($kindUint64, [new $Uint64(153926604, 3671437576), new $Uint64(3595386269, 3112269949)]), $toNativeArray($kindUint64, [new $Uint64(633075040, 147164837), new $Uint64(2247116418, 2482039630)]), $toNativeArray($kindUint64, [new $Uint64(2938827448, 183956046), new $Uint64(2808895523, 955065889)]), $toNativeArray($kindUint64, [new $Uint64(452308838, 229945057), new $Uint64(3511119404, 120090538)]), $toNativeArray($kindUint64, [new $Uint64(1356434847, 3364941133), new $Uint64(2194449627, 2222540234)]), $toNativeArray($kindUint64, [new $Uint64(3843027207, 3132434592), new $Uint64(2743062034, 1704433468)]), $toNativeArray($kindUint64, [new $Uint64(508816713, 2841801416), new $Uint64(3428827542, 4278025484)]), $toNativeArray($kindUint64, [new $Uint64(636020892, 331026298), new $Uint64(4286034428, 3200048207)]), $toNativeArray($kindUint64, [new $Uint64(2008125793, 2354375084), new $Uint64(2678771517, 4147513777)]), $toNativeArray($kindUint64, [new $Uint64(3583899065, 4016710679), new $Uint64(3348464397, 1963166749)]), $toNativeArray($kindUint64, [new $Uint64(1258648360, 1799662877), new $Uint64(4185580496, 3527700261)]), $toNativeArray($kindUint64, [new $Uint64(1323526137, 1124789298), new $Uint64(2615987810, 2204812663)]), $toNativeArray($kindUint64, [new $Uint64(580665847, 2479728447), new $Uint64(3269984763, 608532181)]), $toNativeArray($kindUint64, [new $Uint64(1799574133, 2025918735), new $Uint64(4087480953, 3981890698)]), $toNativeArray($kindUint64, [new $Uint64(2198475657, 1803070121), new $Uint64(2554675596, 878068950)]), $toNativeArray($kindUint64, [new $Uint64(600610923, 3327579475), new $Uint64(3193344495, 1097586188)]), $toNativeArray($kindUint64, [new $Uint64(750763654, 3085732520), new $Uint64(3991680619, 298240911)]), $toNativeArray($kindUint64, [new $Uint64(2079840020, 854841001), new $Uint64(2494800386, 3944496953)]), $toNativeArray($kindUint64, [new $Uint64(3673541849, 1068551251), new $Uint64(3118500483, 2783137543)]), $toNativeArray($kindUint64, [new $Uint64(3518185487, 2409430888), new $Uint64(3898125604, 2405180105)]), $toNativeArray($kindUint64, [new $Uint64(588253193, 3116507041), new $Uint64(2436328502, 3650721214)]), $toNativeArray($kindUint64, [new $Uint64(2882800140, 674408330), new $Uint64(3045410628, 2415917869)]), $toNativeArray($kindUint64, [new $Uint64(382274703, 843010412), new $Uint64(3806763285, 3019897337)]), $toNativeArray($kindUint64, [new $Uint64(2923276249, 2137494243), new $Uint64(2379227053, 2424306747)]), $toNativeArray($kindUint64, [new $Uint64(2580353487, 3745609628), new $Uint64(2974033816, 4104125258)]), $toNativeArray($kindUint64, [new $Uint64(1077958211, 3608270211), new $Uint64(3717542271, 835189277)]), $toNativeArray($kindUint64, [new $Uint64(1210594794, 1718297970), new $Uint64(2323463919, 2132606034)]), $toNativeArray($kindUint64, [new $Uint64(3660727141, 388815), new $Uint64(2904329899, 1592015718)]), $toNativeArray($kindUint64, [new $Uint64(2428425278, 1074227842), new $Uint64(3630412374, 916277824)]), $toNativeArray($kindUint64, [new $Uint64(1517765798, 3892617873), new $Uint64(2269007733, 3793899112)]), $toNativeArray($kindUint64, [new $Uint64(1897207248, 2718288694), new $Uint64(2836259667, 1521148418)]), $toNativeArray($kindUint64, [new $Uint64(224025412, 3397860867), new $Uint64(3545324584, 827693699)]), $toNativeArray($kindUint64, [new $Uint64(3898112266, 4271146690), new $Uint64(2215827865, 517308561)]), $toNativeArray($kindUint64, [new $Uint64(1651414861, 3191449714), new $Uint64(2769784831, 1720377526)]), $toNativeArray($kindUint64, [new $Uint64(4211752225, 768086671), new $Uint64(3462231039, 1076730083)]), $toNativeArray($kindUint64, [new $Uint64(2095474228, 3164408729), new $Uint64(2163894399, 2283569038)]), $toNativeArray($kindUint64, [new $Uint64(471859137, 3955510912), new $Uint64(2704867999, 1780719474)]), $toNativeArray($kindUint64, [new $Uint64(2737307570, 1723163168), new $Uint64(3381084999, 1152157518)]), $toNativeArray($kindUint64, [new $Uint64(1274150815, 6470312), new $Uint64(4226356249, 366455074)]), $toNativeArray($kindUint64, [new $Uint64(1870086083, 1614656681), new $Uint64(2641472655, 2913388981)]), $toNativeArray($kindUint64, [new $Uint64(3411349428, 944579027), new $Uint64(3301840819, 2567994402)]), $toNativeArray($kindUint64, [new $Uint64(2116703137, 1180723784), new $Uint64(4127301024, 2136251179)]), $toNativeArray($kindUint64, [new $Uint64(786068548, 3422306925), new $Uint64(2579563140, 1335156987)]), $toNativeArray($kindUint64, [new $Uint64(4203811157, 4277883656), new $Uint64(3224453925, 1668946233)]), $toNativeArray($kindUint64, [new $Uint64(2033538475, 2126129098), new $Uint64(4030567406, 3159924616)]), $toNativeArray($kindUint64, [new $Uint64(1270961547, 791959774), new $Uint64(2519104629, 901211061)]), $toNativeArray($kindUint64, [new $Uint64(2662443757, 4211175190), new $Uint64(3148880786, 2200255650)]), $toNativeArray($kindUint64, [new $Uint64(1180571049, 2042743516), new $Uint64(3936100983, 602835915)]), $toNativeArray($kindUint64, [new $Uint64(200985993, 3961069257), new $Uint64(2460063114, 1987385183)]), $toNativeArray($kindUint64, [new $Uint64(3472457964, 1730111099), new $Uint64(3075078893, 336747830)]), $toNativeArray($kindUint64, [new $Uint64(2193088807, 2162638874), new $Uint64(3843848616, 1494676612)]), $toNativeArray($kindUint64, [new $Uint64(3518164152, 2962262032), new $Uint64(2402405385, 934172882)]), $toNativeArray($kindUint64, [new $Uint64(2250221542, 3702827541), new $Uint64(3003006731, 2241457927)]), $toNativeArray($kindUint64, [new $Uint64(1739035104, 2481050778), new $Uint64(3753758414, 1728080585)]), $toNativeArray($kindUint64, [new $Uint64(3771251500, 1550656736), new $Uint64(2346099009, 6308541)]), $toNativeArray($kindUint64, [new $Uint64(1492838903, 1938320920), new $Uint64(2932623761, 1081627501)]), $toNativeArray($kindUint64, [new $Uint64(2939790453, 1349159326), new $Uint64(3665779701, 2425776200)]), $toNativeArray($kindUint64, [new $Uint64(1837369033, 1380095491), new $Uint64(2291112313, 2052981037)]), $toNativeArray($kindUint64, [new $Uint64(3370453115, 2798861187), new $Uint64(2863890391, 3639968120)]), $toNativeArray($kindUint64, [new $Uint64(4213066394, 2424834660), new $Uint64(3579862989, 3476218326)]), $toNativeArray($kindUint64, [new $Uint64(1559424672, 2589263487), new $Uint64(2237414368, 2709507366)]), $toNativeArray($kindUint64, [new $Uint64(4096764488, 3236579358), new $Uint64(2796767960, 3386884207)]), $toNativeArray($kindUint64, [new $Uint64(4047213786, 4045724198), new $Uint64(3495959950, 4233605259)]), $toNativeArray($kindUint64, [new $Uint64(1992637704, 3602319448), new $Uint64(2184974969, 1572261463)]), $toNativeArray($kindUint64, [new $Uint64(1417055307, 207932014), new $Uint64(2731218711, 3039068653)]), $toNativeArray($kindUint64, [new $Uint64(2845060957, 3481140489), new $Uint64(3414023389, 2725093992)]), $toNativeArray($kindUint64, [new $Uint64(3556326197, 1130200140), new $Uint64(4267529237, 185142018)]), $toNativeArray($kindUint64, [new $Uint64(3296445697, 1243245999), new $Uint64(2667205773, 652584673)]), $toNativeArray($kindUint64, [new $Uint64(899331649, 2627799323), new $Uint64(3334007216, 1889472666)]), $toNativeArray($kindUint64, [new $Uint64(3271648210, 63523682), new $Uint64(4167509020, 2361840832)]), $toNativeArray($kindUint64, [new $Uint64(2044780131, 1113444125), new $Uint64(2604693137, 3623634168)]), $toNativeArray($kindUint64, [new $Uint64(2555975164, 318063332), new $Uint64(3255866422, 1308317238)]), $toNativeArray($kindUint64, [new $Uint64(1047485307, 397579165), new $Uint64(4069833027, 3782880196)]), $toNativeArray($kindUint64, [new $Uint64(2802161964, 4006583362), new $Uint64(2543645642, 1827429210)]), $toNativeArray($kindUint64, [new $Uint64(1355218808, 713261907), new $Uint64(3179557053, 136802865)]), $toNativeArray($kindUint64, [new $Uint64(2767765334, 891577384), new $Uint64(3974446316, 1244745405)]), $toNativeArray($kindUint64, [new $Uint64(2266724245, 3778461337), new $Uint64(2484028947, 2925449526)]), $toNativeArray($kindUint64, [new $Uint64(685921659, 1501851199), new $Uint64(3105036184, 2583070084)]), $toNativeArray($kindUint64, [new $Uint64(857402074, 803572175), new $Uint64(3881295230, 3228837605)]), $toNativeArray($kindUint64, [new $Uint64(1072747208, 1575974433), new $Uint64(2425809519, 944281679)]), $toNativeArray($kindUint64, [new $Uint64(267192186, 1969968041), new $Uint64(3032261899, 106610275)]), $toNativeArray($kindUint64, [new $Uint64(3555215705, 314976404), new $Uint64(3790327373, 3354488315)]), $toNativeArray($kindUint64, [new $Uint64(1685138903, 2881214812), new $Uint64(2368954608, 2633426109)]), $toNativeArray($kindUint64, [new $Uint64(3180165453, 2527776691), new $Uint64(2961193260, 3291782636)]), $toNativeArray($kindUint64, [new $Uint64(3975206816, 4233462688), new $Uint64(3701491575, 4114728295)]), $toNativeArray($kindUint64, [new $Uint64(4095116996, 2645914180), new $Uint64(2313432234, 4182317920)]), $toNativeArray($kindUint64, [new $Uint64(823928949, 3307392725), new $Uint64(2891790293, 3080413753)]), $toNativeArray($kindUint64, [new $Uint64(2103653011, 913015435), new $Uint64(3614737867, 629291719)]), $toNativeArray($kindUint64, [new $Uint64(2925395868, 33763735), new $Uint64(2259211166, 4151403708)]), $toNativeArray($kindUint64, [new $Uint64(3656744835, 42204668), new $Uint64(2824013958, 3041770987)]), $toNativeArray($kindUint64, [new $Uint64(3497189219, 3273981307), new $Uint64(3530017448, 1654730086)]), $toNativeArray($kindUint64, [new $Uint64(1112001438, 1509367405), new $Uint64(2206260905, 1034206304)]), $toNativeArray($kindUint64, [new $Uint64(1390001797, 4034192904), new $Uint64(2757826131, 2366499704)]), $toNativeArray($kindUint64, [new $Uint64(1737502247, 1821515659), new $Uint64(3447282664, 1884382806)]), $toNativeArray($kindUint64, [new $Uint64(12197080, 2749060022), new $Uint64(2154551665, 1177739254)]), $toNativeArray($kindUint64, [new $Uint64(2162729998, 3436325028), new $Uint64(2693189581, 2545915891)]), $toNativeArray($kindUint64, [new $Uint64(1629670674, 2147922637), new $Uint64(3366486976, 4256136688)]), $toNativeArray($kindUint64, [new $Uint64(2037088343, 537419649), new $Uint64(4208108721, 1025203564)]), $toNativeArray($kindUint64, [new $Uint64(3420663862, 1946500016), new $Uint64(2630067950, 3325106787)]), $toNativeArray($kindUint64, [new $Uint64(3202088004, 285641372), new $Uint64(3287584938, 2008899836)]), $toNativeArray($kindUint64, [new $Uint64(4002610005, 357051716), new $Uint64(4109481173, 363641147)]), $toNativeArray($kindUint64, [new $Uint64(1964760341, 760028234), new $Uint64(2568425733, 764146629)]), $toNativeArray($kindUint64, [new $Uint64(3529692250, 2023777117), new $Uint64(3210532166, 2028925110)]), $toNativeArray($kindUint64, [new $Uint64(2264631665, 382237748), new $Uint64(4013165208, 388672740)]), $toNativeArray($kindUint64, [new $Uint64(3562878438, 2923253152), new $Uint64(2508228255, 242920462)]), $toNativeArray($kindUint64, [new $Uint64(2306114400, 1506582793), new $Uint64(3135285318, 3524876050)]), $toNativeArray($kindUint64, [new $Uint64(735159352, 1883228491), new $Uint64(3919106648, 2258611415)]), $toNativeArray($kindUint64, [new $Uint64(2070087331, 1177017807), new $Uint64(2449441655, 1411632134)]), $toNativeArray($kindUint64, [new $Uint64(440125516, 397530434), new $Uint64(3061802069, 690798344)]), $toNativeArray($kindUint64, [new $Uint64(550156895, 496913043), new $Uint64(3827252586, 1937239754)]), $toNativeArray($kindUint64, [new $Uint64(1417589883, 1921183388), new $Uint64(2392032866, 2284516670)]), $toNativeArray($kindUint64, [new $Uint64(3919471002, 1327737411), new $Uint64(2990041083, 708162189)]), $toNativeArray($kindUint64, [new $Uint64(1678113280, 3807155412), new $Uint64(3737551353, 4106428209)]), $toNativeArray($kindUint64, [new $Uint64(3733175360, 2379472132), new $Uint64(2335969596, 955904894)]), $toNativeArray($kindUint64, [new $Uint64(2518985552, 2974340165), new $Uint64(2919961995, 1194881118)]), $toNativeArray($kindUint64, [new $Uint64(1001248292, 3717925207), new $Uint64(3649952494, 419859574)]), $toNativeArray($kindUint64, [new $Uint64(3847005655, 176219606), new $Uint64(2281220308, 3483637705)]), $toNativeArray($kindUint64, [new $Uint64(1587531596, 3441499980), new $Uint64(2851525386, 59579836)]), $toNativeArray($kindUint64, [new $Uint64(1984414496, 6907679), new $Uint64(3564406732, 2221958443)]), $toNativeArray($kindUint64, [new $Uint64(703388148, 4317299), new $Uint64(2227754207, 3536207675)]), $toNativeArray($kindUint64, [new $Uint64(4100460657, 5396624), new $Uint64(2784692759, 3346517769)]), $toNativeArray($kindUint64, [new $Uint64(1904350349, 1080487604), new $Uint64(3480865949, 3109405388)]), $toNativeArray($kindUint64, [new $Uint64(3337702616, 1212175664), new $Uint64(2175541218, 2480249279)]), $toNativeArray($kindUint64, [new $Uint64(3098386446, 1515219580), new $Uint64(2719426523, 952827951)]), $toNativeArray($kindUint64, [new $Uint64(2799241233, 4041508124), new $Uint64(3399283154, 117293115)]), $toNativeArray($kindUint64, [new $Uint64(2425309718, 1830659683), new $Uint64(4249103942, 2294100042)]), $toNativeArray($kindUint64, [new $Uint64(2589560398, 70420478), new $Uint64(2655689964, 360070702)]), $toNativeArray($kindUint64, [new $Uint64(1089466849, 2235509245), new $Uint64(3319612455, 450088378)]), $toNativeArray($kindUint64, [new $Uint64(3509317209, 3868128380), new $Uint64(4149515568, 3783835944)]), $toNativeArray($kindUint64, [new $Uint64(2193323256, 806967502), new $Uint64(2593447230, 2364897465)]), $toNativeArray($kindUint64, [new $Uint64(3815395894, 1008709377), new $Uint64(3241809038, 808638183)]), $toNativeArray($kindUint64, [new $Uint64(3695503043, 3408370369), new $Uint64(4052261297, 3158281377)]), $toNativeArray($kindUint64, [new $Uint64(699076666, 1593360569), new $Uint64(2532663311, 363313125)]), $toNativeArray($kindUint64, [new $Uint64(1947587656, 4139184359), new $Uint64(3165829138, 3675366878)]), $toNativeArray($kindUint64, [new $Uint64(287000923, 879013153), new $Uint64(3957286423, 2446724950)]), $toNativeArray($kindUint64, [new $Uint64(3400601049, 12512308), new $Uint64(2473304014, 3139815829)]), $toNativeArray($kindUint64, [new $Uint64(1029525839, 1089382210), new $Uint64(3091630018, 1777286139)]), $toNativeArray($kindUint64, [new $Uint64(213165475, 287985938), new $Uint64(3864537523, 74124026)]), $toNativeArray($kindUint64, [new $Uint64(1206970245, 3938087595), new $Uint64(2415335951, 3804423900)]), $toNativeArray($kindUint64, [new $Uint64(1508712807, 1701384022), new $Uint64(3019169939, 3681788051)]), $toNativeArray($kindUint64, [new $Uint64(812149185, 1052988204), new $Uint64(3773962424, 3528493240)]), $toNativeArray($kindUint64, [new $Uint64(507593240, 3342472187), new $Uint64(2358726515, 2205308275)]), $toNativeArray($kindUint64, [new $Uint64(3855717022, 4178090234), new $Uint64(2948408144, 1682893519)]), $toNativeArray($kindUint64, [new $Uint64(3745904454, 3075129145), new $Uint64(3685510180, 2103616899)]), $toNativeArray($kindUint64, [new $Uint64(1804319372, 848213891), new $Uint64(2303443862, 3462244210)]), $toNativeArray($kindUint64, [new $Uint64(107915567, 1060267364), new $Uint64(2879304828, 2180321615)]), $toNativeArray($kindUint64, [new $Uint64(3356119931, 251592381), new $Uint64(3599131035, 2725402018)]), $toNativeArray($kindUint64, [new $Uint64(3171316780, 3915341622), new $Uint64(2249456897, 1166505349)]), $toNativeArray($kindUint64, [new $Uint64(742920504, 599209732), new $Uint64(2811821121, 2531873511)]), $toNativeArray($kindUint64, [new $Uint64(4149876102, 749012165), new $Uint64(3514776401, 4238583712)]), $toNativeArray($kindUint64, [new $Uint64(2593672563, 3689358075), new $Uint64(2196735251, 1038502084)]), $toNativeArray($kindUint64, [new $Uint64(3242090704, 3537955770), new $Uint64(2745919064, 224385781)]), $toNativeArray($kindUint64, [new $Uint64(831387909, 127477416), new $Uint64(3432398830, 280482227)]), $toNativeArray($kindUint64, [new $Uint64(4260460358, 1233088594), new $Uint64(4290498537, 2498086431)]), $toNativeArray($kindUint64, [new $Uint64(4273400459, 3991905843), new $Uint64(2681561585, 4245658579)]), $toNativeArray($kindUint64, [new $Uint64(4268008750, 3916140480), new $Uint64(3351951982, 2085847752)]), $toNativeArray($kindUint64, [new $Uint64(1040043642, 2747691952), new $Uint64(4189939978, 459826043)]), $toNativeArray($kindUint64, [new $Uint64(113156364, 2791049294), new $Uint64(2618712486, 1361133101)]), $toNativeArray($kindUint64, [new $Uint64(1215187279, 3488811618), new $Uint64(3273390607, 3848900024)]), $toNativeArray($kindUint64, [new $Uint64(1518984099, 3287272698), new $Uint64(4091738259, 3737383206)]), $toNativeArray($kindUint64, [new $Uint64(4170590534, 1517674524), new $Uint64(2557336412, 1798993591)]), $toNativeArray($kindUint64, [new $Uint64(4139496343, 4044576803), new $Uint64(3196670515, 2248741989)]), $toNativeArray($kindUint64, [new $Uint64(1953144957, 3981979180), new $Uint64(3995838144, 1737185663)]), $toNativeArray($kindUint64, [new $Uint64(2831328334, 3025607900), new $Uint64(2497398840, 1085741039)]), $toNativeArray($kindUint64, [new $Uint64(2465418594, 1634526227), new $Uint64(3121748550, 1357176299)]), $toNativeArray($kindUint64, [new $Uint64(2008031418, 4190641431), new $Uint64(3902185687, 3843954022)]), $toNativeArray($kindUint64, [new $Uint64(181277812, 3692892718), new $Uint64(2438866054, 4013084000)]), $toNativeArray($kindUint64, [new $Uint64(226597266, 321148602), new $Uint64(3048582568, 2868871352)]), $toNativeArray($kindUint64, [new $Uint64(283246582, 2548919401), new $Uint64(3810728210, 3586089190)]), $toNativeArray($kindUint64, [new $Uint64(3398254586, 519332801), new $Uint64(2381705131, 3315047567)]), $toNativeArray($kindUint64, [new $Uint64(3174076408, 2796649650), new $Uint64(2977131414, 3070067635)]), $toNativeArray($kindUint64, [new $Uint64(2893853686, 3495812062), new $Uint64(3721414268, 1690100896)]), $toNativeArray($kindUint64, [new $Uint64(1808658554, 1111140715), new $Uint64(2325883917, 3203796708)]), $toNativeArray($kindUint64, [new $Uint64(2260823192, 3536409542), new $Uint64(2907354897, 783520413)]), $toNativeArray($kindUint64, [new $Uint64(3899770815, 125544631), new $Uint64(3634193621, 2053142340)]), $toNativeArray($kindUint64, [new $Uint64(289873111, 1689078130), new $Uint64(2271371013, 1820084875)]), $toNativeArray($kindUint64, [new $Uint64(3583566861, 1037605839), new $Uint64(2839213766, 3348847917)]), $toNativeArray($kindUint64, [new $Uint64(1258233104, 2370749123), new $Uint64(3549017208, 2038576249)]), $toNativeArray($kindUint64, [new $Uint64(3470750250, 1481718202), new $Uint64(2218135755, 1274110155)]), $toNativeArray($kindUint64, [new $Uint64(3264695988, 3999631400), new $Uint64(2772669694, 518895870)]), $toNativeArray($kindUint64, [new $Uint64(1933386338, 704571954), new $Uint64(3465837117, 2796103486)]), $toNativeArray($kindUint64, [new $Uint64(134624637, 1514099295), new $Uint64(2166148198, 2284435591)]), $toNativeArray($kindUint64, [new $Uint64(3389506268, 2966365943), new $Uint64(2707685248, 708060840)]), $toNativeArray($kindUint64, [new $Uint64(4236882835, 3707957429), new $Uint64(3384606560, 885076050)]), $toNativeArray($kindUint64, [new $Uint64(3148619896, 3561204962), new $Uint64(4230758200, 1106345063)]), $toNativeArray($kindUint64, [new $Uint64(3578500171, 2225753101), new $Uint64(2644223875, 691465664)]), $toNativeArray($kindUint64, [new $Uint64(178157918, 1708449553), new $Uint64(3305279843, 4085557553)]), $toNativeArray($kindUint64, [new $Uint64(1296439221, 4283045589), new $Uint64(4131599804, 4033205117)]), $toNativeArray($kindUint64, [new $Uint64(1347145425, 3213774405), new $Uint64(2582249878, 373269550)]), $toNativeArray($kindUint64, [new $Uint64(3831415430, 795992534), new $Uint64(3227812347, 2614070585)]), $toNativeArray($kindUint64, [new $Uint64(1568043815, 3142474316), new $Uint64(4034765434, 2193846408)]), $toNativeArray($kindUint64, [new $Uint64(980027384, 3574659183), new $Uint64(2521728396, 2444895829)]), $toNativeArray($kindUint64, [new $Uint64(2298776055, 173356683), new $Uint64(3152160495, 3056119786)]), $toNativeArray($kindUint64, [new $Uint64(725986420, 3437921326), new $Uint64(3940200619, 2746407909)]), $toNativeArray($kindUint64, [new $Uint64(990612425, 1217181), new $Uint64(2462625387, 1179634031)]), $toNativeArray($kindUint64, [new $Uint64(164523707, 1075263300), new $Uint64(3078281734, 400800715)]), $toNativeArray($kindUint64, [new $Uint64(3426880106, 270337301), new $Uint64(3847852167, 2648484541)]), $toNativeArray($kindUint64, [new $Uint64(2678670978, 1242702637), new $Uint64(2404907604, 3265915574)]), $toNativeArray($kindUint64, [new $Uint64(1200855074, 3700861945), new $Uint64(3006134505, 4082394468)]), $toNativeArray($kindUint64, [new $Uint64(1501068843, 2478593783), new $Uint64(3757668132, 1881767613)]), $toNativeArray($kindUint64, [new $Uint64(1475038939, 1012250202), new $Uint64(2348542582, 3323588406)]), $toNativeArray($kindUint64, [new $Uint64(3991282322, 191570929), new $Uint64(2935678228, 2007001859)]), $toNativeArray($kindUint64, [new $Uint64(3915361078, 2386947309), new $Uint64(3669597785, 2508752324)]), $toNativeArray($kindUint64, [new $Uint64(299617026, 418100244), new $Uint64(2293498615, 4252324763)]), $toNativeArray($kindUint64, [new $Uint64(3595746754, 2670108953), new $Uint64(2866873269, 4241664129)]), $toNativeArray($kindUint64, [new $Uint64(1273457971, 1190152543), new $Uint64(3583591587, 2080854690)]), $toNativeArray($kindUint64, [new $Uint64(1869653056, 206974427), new $Uint64(2239744742, 763663269)]), $toNativeArray($kindUint64, [new $Uint64(3410808144, 258718034), new $Uint64(2799680927, 3102062734)]), $toNativeArray($kindUint64, [new $Uint64(2116026532, 323397543), new $Uint64(3499601159, 2803836594)]), $toNativeArray($kindUint64, [new $Uint64(2396258406, 2349607112), new $Uint64(2187250724, 3363010607)]), $toNativeArray($kindUint64, [new $Uint64(1921581184, 789525242), new $Uint64(2734063405, 4203763259)]), $toNativeArray($kindUint64, [new $Uint64(1328234656, 986906553), new $Uint64(3417579257, 2033478602)]), $toNativeArray($kindUint64, [new $Uint64(3807776968, 1233633192), new $Uint64(4271974071, 3615590076)]), $toNativeArray($kindUint64, [new $Uint64(232376957, 771020745), new $Uint64(2669983794, 3870356534)]), $toNativeArray($kindUint64, [new $Uint64(2437954844, 2037517755), new $Uint64(3337479743, 2690462019)]), $toNativeArray($kindUint64, [new $Uint64(1973701731, 2546897194), new $Uint64(4171849679, 2289335700)]), $toNativeArray($kindUint64, [new $Uint64(3381047230, 1054939834), new $Uint64(2607406049, 3041447548)]), $toNativeArray($kindUint64, [new $Uint64(4226309037, 3466158440), new $Uint64(3259257562, 580583963)]), $toNativeArray($kindUint64, [new $Uint64(4209144473, 1111472579), new $Uint64(4074071952, 2873213602)]), $toNativeArray($kindUint64, [new $Uint64(3704457119, 3379024922), new $Uint64(2546294970, 1795758501)]), $toNativeArray($kindUint64, [new $Uint64(1409345927, 3150039328), new $Uint64(3182868713, 97214479)]), $toNativeArray($kindUint64, [new $Uint64(687940585, 2863807336), new $Uint64(3978585891, 1195259923)]), $toNativeArray($kindUint64, [new $Uint64(4188059250, 179266849), new $Uint64(2486616182, 210166539)]), $toNativeArray($kindUint64, [new $Uint64(4161332238, 2371567209), new $Uint64(3108270227, 2410191822)]), $toNativeArray($kindUint64, [new $Uint64(3054181650, 816975364), new $Uint64(3885337784, 1938997954)]), $toNativeArray($kindUint64, [new $Uint64(2982605355, 1584351426), new $Uint64(2428336115, 1211873721)]), $toNativeArray($kindUint64, [new $Uint64(507031222, 906697459), new $Uint64(3035420144, 441100328)]), $toNativeArray($kindUint64, [new $Uint64(633789027, 3280855472), new $Uint64(3794275180, 551375410)]), $toNativeArray($kindUint64, [new $Uint64(1469859966, 1513663758), new $Uint64(2371421987, 2492093279)]), $toNativeArray($kindUint64, [new $Uint64(763583133, 4039563345), new $Uint64(2964277484, 2041374775)]), $toNativeArray($kindUint64, [new $Uint64(4175704389, 1828228709), new $Uint64(3705346855, 2551718468)]), $toNativeArray($kindUint64, [new $Uint64(462331595, 1679513855), new $Uint64(2315841784, 3205436779)]), $toNativeArray($kindUint64, [new $Uint64(3799139966, 1025650495), new $Uint64(2894802230, 4006795973)]), $toNativeArray($kindUint64, [new $Uint64(1527699485, 3429546767), new $Uint64(3618502788, 2861011319)]), $toNativeArray($kindUint64, [new $Uint64(2565424914, 2680337641), new $Uint64(2261564242, 3935615722)]), $toNativeArray($kindUint64, [new $Uint64(1059297495, 1202938404), new $Uint64(2826955303, 2772036005)]), $toNativeArray($kindUint64, [new $Uint64(2397863693, 429931181), new $Uint64(3533694129, 2391303182)]), $toNativeArray($kindUint64, [new $Uint64(424922984, 805577900), new $Uint64(2208558830, 4178919049)]), $toNativeArray($kindUint64, [new $Uint64(1604895554, 1006972375), new $Uint64(2760698538, 3076165163)]), $toNativeArray($kindUint64, [new $Uint64(932377618, 3406199117), new $Uint64(3450873173, 1697722806)]), $toNativeArray($kindUint64, [new $Uint64(3803961483, 3202616272), new $Uint64(2156795733, 1597947665)]), $toNativeArray($kindUint64, [new $Uint64(1533726382, 2929528516), new $Uint64(2695994666, 3071176406)]), $toNativeArray($kindUint64, [new $Uint64(4064641626, 1514426997), new $Uint64(3369993333, 1691486859)]), $toNativeArray($kindUint64, [new $Uint64(4007060208, 4040517394), new $Uint64(4212491666, 3188100398)]), $toNativeArray($kindUint64, [new $Uint64(1430670806, 2525323371), new $Uint64(2632807291, 3066304573)]), $toNativeArray($kindUint64, [new $Uint64(2862080332, 1009170566), new $Uint64(3291009114, 2759138892)]), $toNativeArray($kindUint64, [new $Uint64(3577600415, 1261463208), new $Uint64(4113761393, 1301439967)]), $toNativeArray($kindUint64, [new $Uint64(3846612995, 2399027241), new $Uint64(2571100870, 3497754539)]), $toNativeArray($kindUint64, [new $Uint64(3734524420, 1925042227), new $Uint64(3213876088, 2224709526)]), $toNativeArray($kindUint64, [new $Uint64(2520671877, 2406302784), new $Uint64(4017345110, 2780886908)]), $toNativeArray($kindUint64, [new $Uint64(3722903571, 2040810152), new $Uint64(2510840694, 664312493)]), $toNativeArray($kindUint64, [new $Uint64(1432403992, 1477270866), new $Uint64(3138550867, 2977874265)]), $toNativeArray($kindUint64, [new $Uint64(2864246814, 1846588582), new $Uint64(3923188584, 2648601007)]), $toNativeArray($kindUint64, [new $Uint64(3400766995, 80376040), new $Uint64(2451992865, 1655375629)]), $toNativeArray($kindUint64, [new $Uint64(1029733271, 3321695522), new $Uint64(3064991081, 3142961361)]), $toNativeArray($kindUint64, [new $Uint64(2360908413, 3078377578), new $Uint64(3831238852, 707476229)]), $toNativeArray($kindUint64, [new $Uint64(2012438670, 2460856898), new $Uint64(2394524282, 2589656291)]), $toNativeArray($kindUint64, [new $Uint64(1441806514, 928587475), new $Uint64(2993155353, 1089586716)]), $toNativeArray($kindUint64, [new $Uint64(1802258142, 3308217992), new $Uint64(3741444191, 2435725219)]), $toNativeArray($kindUint64, [new $Uint64(589540427, 993894421), new $Uint64(2338402619, 3132940998)]), $toNativeArray($kindUint64, [new $Uint64(2884409182, 168626202), new $Uint64(2923003274, 2842434423)]), $toNativeArray($kindUint64, [new $Uint64(2531769653, 2358266401), new $Uint64(3653754093, 1405559381)]), $toNativeArray($kindUint64, [new $Uint64(2119226945, 2010787412), new $Uint64(2283596308, 1415345525)]), $toNativeArray($kindUint64, [new $Uint64(3722775505, 3587226089), new $Uint64(2854495385, 1769181906)]), $toNativeArray($kindUint64, [new $Uint64(2505985734, 1262807140), new $Uint64(3568119231, 3285219207)]), $toNativeArray($kindUint64, [new $Uint64(3176853819, 4010479934), new $Uint64(2230074519, 3663874740)]), $toNativeArray($kindUint64, [new $Uint64(3971067274, 3939358094), new $Uint64(2787593149, 3506101601)]), $toNativeArray($kindUint64, [new $Uint64(1742608621, 2776713970), new $Uint64(3484491437, 1161401530)]), $toNativeArray($kindUint64, [new $Uint64(2162872212, 2272317143), new $Uint64(2177807148, 1262746868)]), $toNativeArray($kindUint64, [new $Uint64(2703590265, 2840396429), new $Uint64(2722258935, 1578433585)]), $toNativeArray($kindUint64, [new $Uint64(158262360, 329270064), new $Uint64(3402823669, 899300158)]), $toNativeArray($kindUint64, [new $Uint64(2345311598, 411587580), new $Uint64(4253529586, 2197867021)]), $toNativeArray($kindUint64, [new $Uint64(2002690660, 3478467709), new $Uint64(2658455991, 2447408712)]), $toNativeArray($kindUint64, [new $Uint64(2503363326, 53117341), new $Uint64(3323069989, 1985519066)]), $toNativeArray($kindUint64, [new $Uint64(981720509, 2213880324), new $Uint64(4153837486, 3555640657)]), $toNativeArray($kindUint64, [new $Uint64(3297929878, 1920546114), new $Uint64(2596148429, 1148533586)]), $toNativeArray($kindUint64, [new $Uint64(1974928700, 253198995), new $Uint64(3245185536, 2509408807)]), $toNativeArray($kindUint64, [new $Uint64(1394919051, 316498744), new $Uint64(4056481920, 3136761009)]), $toNativeArray($kindUint64, [new $Uint64(3556178966, 3955908099), new $Uint64(2535301200, 1960475630)]), $toNativeArray($kindUint64, [new $Uint64(2297740060, 2797401476), new $Uint64(3169126500, 2450594538)]), $toNativeArray($kindUint64, [new $Uint64(724691427, 3496751845), new $Uint64(3961408125, 3063243173)]), $toNativeArray($kindUint64, [new $Uint64(989803054, 1648598991), new $Uint64(2475880078, 2451397895)]), $toNativeArray($kindUint64, [new $Uint64(163511993, 4208232386), new $Uint64(3094850098, 916763721)]), $toNativeArray($kindUint64, [new $Uint64(1278131816, 2039065011), new $Uint64(3868562622, 3293438299)]), $toNativeArray($kindUint64, [new $Uint64(261961473, 1274415632), new $Uint64(2417851639, 984657113)]), $toNativeArray($kindUint64, [new $Uint64(1401193665, 2666761364), new $Uint64(3022314549, 157079567)]), $toNativeArray($kindUint64, [new $Uint64(677750258, 112226233), new $Uint64(3777893186, 1270091283)]), $toNativeArray($kindUint64, [new $Uint64(4181690295, 1143883219), new $Uint64(2361183241, 1867548875)]), $toNativeArray($kindUint64, [new $Uint64(4153371045, 356112200), new $Uint64(2951479051, 3408177918)]), $toNativeArray($kindUint64, [new $Uint64(3044230158, 1518882075), new $Uint64(3689348814, 3186480574)]), $toNativeArray($kindUint64, [new $Uint64(828902024, 4170526768), new $Uint64(2305843009, 917808535)]), $toNativeArray($kindUint64, [new $Uint64(4257353003, 918191165), new $Uint64(2882303761, 2221002492)]), $toNativeArray($kindUint64, [new $Uint64(1026723958, 73997132), new $Uint64(3602879701, 3849994940)]), $toNativeArray($kindUint64, [new $Uint64(2789186121, 3267473679), new $Uint64(2251799813, 2943117749)]), $toNativeArray($kindUint64, [new $Uint64(265257180, 863116627), new $Uint64(2814749767, 457671715)]), $toNativeArray($kindUint64, [new $Uint64(3552796947, 1078895784), new $Uint64(3518437208, 3793315115)]), $toNativeArray($kindUint64, [new $Uint64(1683627180, 137438953), new $Uint64(2199023255, 2370821947)]), $toNativeArray($kindUint64, [new $Uint64(1030792151, 171798691), new $Uint64(2748779069, 1889785610)]), $toNativeArray($kindUint64, [new $Uint64(3435973836, 3435973836), new $Uint64(3435973836, 3435973836)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2147483648, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2684354560, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3355443200, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(4194304000, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2621440000, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3276800000, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(4096000000, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2560000000, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3200000000, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(4000000000, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2500000000, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3125000000, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3906250000, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2441406250, 0)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3051757812, 2147483648)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3814697265, 2684354560)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2384185791, 67108864)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2980232238, 3305111552)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3725290298, 1983905792)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2328306436, 2313682944)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2910383045, 2892103680)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3637978807, 393904128)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2273736754, 1856802816)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2842170943, 173519872)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3552713678, 3438125312)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2220446049, 1075086496)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2775557561, 2417599944)]), $toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3469446951, 4095741754)]), $toNativeArray($kindUint64, [new $Uint64(1073741824, 0), new $Uint64(2168404344, 4170451332)]), $toNativeArray($kindUint64, [new $Uint64(1342177280, 0), new $Uint64(2710505431, 918096869)]), $toNativeArray($kindUint64, [new $Uint64(2751463424, 0), new $Uint64(3388131789, 73879262)]), $toNativeArray($kindUint64, [new $Uint64(1291845632, 0), new $Uint64(4235164736, 1166090902)]), $toNativeArray($kindUint64, [new $Uint64(4028628992, 0), new $Uint64(2646977960, 728806813)]), $toNativeArray($kindUint64, [new $Uint64(1814560768, 0), new $Uint64(3308722450, 911008517)]), $toNativeArray($kindUint64, [new $Uint64(3341942784, 0), new $Uint64(4135903062, 3286244294)]), $toNativeArray($kindUint64, [new $Uint64(1014972416, 0), new $Uint64(2584939414, 980160860)]), $toNativeArray($kindUint64, [new $Uint64(1268715520, 0), new $Uint64(3231174267, 3372684723)]), $toNativeArray($kindUint64, [new $Uint64(512152576, 0), new $Uint64(4038967834, 3142114080)]), $toNativeArray($kindUint64, [new $Uint64(320095360, 0), new $Uint64(2524354896, 3037563124)]), $toNativeArray($kindUint64, [new $Uint64(400119200, 0), new $Uint64(3155443620, 3796953905)]), $toNativeArray($kindUint64, [new $Uint64(1573890824, 0), new $Uint64(3944304526, 451225085)]), $toNativeArray($kindUint64, [new $Uint64(1520552677, 0), new $Uint64(2465190328, 3503241150)]), $toNativeArray($kindUint64, [new $Uint64(4048174494, 1073741824), new $Uint64(3081487911, 84084141)]), $toNativeArray($kindUint64, [new $Uint64(1838992645, 3489660928), new $Uint64(3851859888, 3326330649)]), $toNativeArray($kindUint64, [new $Uint64(3833724963, 2717908992), new $Uint64(2407412430, 2078956655)]), $toNativeArray($kindUint64, [new $Uint64(3718414380, 2323644416), new $Uint64(3009265538, 451212171)]), $toNativeArray($kindUint64, [new $Uint64(3574276151, 2904555520), new $Uint64(3761581922, 2711498862)]), $toNativeArray($kindUint64, [new $Uint64(1160180770, 3425959936), new $Uint64(2350988701, 2768428613)]), $toNativeArray($kindUint64, [new $Uint64(2523967787, 2134966272), new $Uint64(2938735877, 239310294)]), $toNativeArray($kindUint64, [new $Uint64(1007476086, 1594966016), new $Uint64(3673419846, 1372879692)]), $toNativeArray($kindUint64, [new $Uint64(2777156201, 4218079232), new $Uint64(2295887403, 4079275279)]), $toNativeArray($kindUint64, [new $Uint64(2397703428, 2051373568), new $Uint64(2869859254, 4025352275)]), $toNativeArray($kindUint64, [new $Uint64(1923387461, 2564216960), new $Uint64(3587324068, 2884206696)]), $toNativeArray($kindUint64, [new $Uint64(1202117163, 2139506512), new $Uint64(2242077542, 3950112833)]), $toNativeArray($kindUint64, [new $Uint64(2576388278, 1600641316), new $Uint64(2802596928, 2790157393)]), $toNativeArray($kindUint64, [new $Uint64(4294227171, 4148285293), new $Uint64(3503246160, 3487696741)]), $toNativeArray($kindUint64, [new $Uint64(3220762894, 2055807396), new $Uint64(2189528850, 2179810463)]), $toNativeArray($kindUint64, [new $Uint64(2952211794, 422275597), new $Uint64(2736911063, 577279431)]), $toNativeArray($kindUint64, [new $Uint64(2616522918, 2675328144), new $Uint64(3421138828, 3942824761)]), $toNativeArray($kindUint64, [new $Uint64(49428176, 1196676532), new $Uint64(4276423536, 633563656)]), $toNativeArray($kindUint64, [new $Uint64(30892610, 747922832), new $Uint64(2672764710, 395977285)]), $toNativeArray($kindUint64, [new $Uint64(1112357586, 3082387189), new $Uint64(3340955887, 2642455254)]), $toNativeArray($kindUint64, [new $Uint64(3537930631, 1705500338), new $Uint64(4176194859, 2229327243)]), $toNativeArray($kindUint64, [new $Uint64(1674335732, 2676550447), new $Uint64(2610121787, 856458615)]), $toNativeArray($kindUint64, [new $Uint64(1019177841, 3345688059), new $Uint64(3262652233, 4291798741)]), $toNativeArray($kindUint64, [new $Uint64(2347714126, 960884602), new $Uint64(4078315292, 2143522954)]), $toNativeArray($kindUint64, [new $Uint64(2541063152, 3821778348), new $Uint64(2548947057, 3487185494)]), $toNativeArray($kindUint64, [new $Uint64(1028845293, 482255639), new $Uint64(3186183822, 1137756396)]), $toNativeArray($kindUint64, [new $Uint64(1286056616, 1676561373), new $Uint64(3982729777, 3569679143)]), $toNativeArray($kindUint64, [new $Uint64(2414398121, 1047850858), new $Uint64(2489206111, 620436728)]), $toNativeArray($kindUint64, [new $Uint64(3017997651, 2383555396), new $Uint64(3111507638, 3996771382)]), $toNativeArray($kindUint64, [new $Uint64(1625013416, 1905702422), new $Uint64(3889384548, 2848480580)]), $toNativeArray($kindUint64, [new $Uint64(3163117033, 1191064013), new $Uint64(2430865342, 3927784010)]), $toNativeArray($kindUint64, [new $Uint64(1806412643, 2562571841), new $Uint64(3038581678, 2762246365)]), $toNativeArray($kindUint64, [new $Uint64(3331757628, 2129472977), new $Uint64(3798227098, 1305324308)]), $toNativeArray($kindUint64, [new $Uint64(4229832165, 3478404258), new $Uint64(2373891936, 1889569516)]), $toNativeArray($kindUint64, [new $Uint64(992322911, 1126779851), new $Uint64(2967364920, 2361961896)]), $toNativeArray($kindUint64, [new $Uint64(1240403639, 334732990), new $Uint64(3709206150, 2952452370)]), $toNativeArray($kindUint64, [new $Uint64(1848994098, 1819820855), new $Uint64(2318253844, 771540907)]), $toNativeArray($kindUint64, [new $Uint64(1237500799, 127292420), new $Uint64(2897817305, 964426134)]), $toNativeArray($kindUint64, [new $Uint64(3694359646, 3380340998), new $Uint64(3622271631, 2279274491)]), $toNativeArray($kindUint64, [new $Uint64(1772103867, 1038971299), new $Uint64(2263919769, 3035159293)]), $toNativeArray($kindUint64, [new $Uint64(3288871658, 224972300), new $Uint64(2829899712, 572723644)]), $toNativeArray($kindUint64, [new $Uint64(4111089572, 2428699024), new $Uint64(3537374640, 715904555)]), $toNativeArray($kindUint64, [new $Uint64(2032560070, 3665420538), new $Uint64(2210859150, 447440347)]), $toNativeArray($kindUint64, [new $Uint64(1466958264, 2434292024), new $Uint64(2763573937, 2706784082)]), $toNativeArray($kindUint64, [new $Uint64(3981181478, 3042865030), new $Uint64(3454467422, 162254630)]), $toNativeArray($kindUint64, [new $Uint64(1414496600, 828048820), new $Uint64(2159042138, 3322634616)]), $toNativeArray($kindUint64, [new $Uint64(1768120750, 1035061025), new $Uint64(2698802673, 2005809622)]), $toNativeArray($kindUint64, [new $Uint64(62667289, 3441309929), new $Uint64(3373503341, 3581003852)]), $toNativeArray($kindUint64, [new $Uint64(78334112, 1080411939), new $Uint64(4216879177, 1255029343)]), $toNativeArray($kindUint64, [new $Uint64(1659571556, 675257462), new $Uint64(2635549485, 3468747899)]), $toNativeArray($kindUint64, [new $Uint64(1000722621, 844071828), new $Uint64(3294436857, 1114709402)]), $toNativeArray($kindUint64, [new $Uint64(3398386924, 2128831609), new $Uint64(4118046071, 2467128576)]), $toNativeArray($kindUint64, [new $Uint64(2123991827, 3478003403), new $Uint64(2573778794, 3152568096)]), $toNativeArray($kindUint64, [new $Uint64(2654989784, 3273762430), new $Uint64(3217223493, 1793226472)]), $toNativeArray($kindUint64, [new $Uint64(3318737230, 4092203038), new $Uint64(4021529366, 3315274914)]), $toNativeArray($kindUint64, [new $Uint64(3147952593, 1483885074), new $Uint64(2513455854, 998304997)]), $toNativeArray($kindUint64, [new $Uint64(713715269, 2928598167), new $Uint64(3141819817, 3395364895)]), $toNativeArray($kindUint64, [new $Uint64(4113369559, 439522237), new $Uint64(3927274772, 1022980646)]), $toNativeArray($kindUint64, [new $Uint64(1497114150, 1885314134), new $Uint64(2454546732, 2786846552)]), $toNativeArray($kindUint64, [new $Uint64(1871392688, 209159020), new $Uint64(3068183415, 3483558190)]), $toNativeArray($kindUint64, [new $Uint64(191757212, 261448775), new $Uint64(3835229269, 3280705914)]), $toNativeArray($kindUint64, [new $Uint64(1193590081, 2310889132), new $Uint64(2397018293, 2587312108)]), $toNativeArray($kindUint64, [new $Uint64(1491987601, 3962353239), new $Uint64(2996272867, 12914663)]), $toNativeArray($kindUint64, [new $Uint64(791242678, 1731716077), new $Uint64(3745341083, 3237368801)]), $toNativeArray($kindUint64, [new $Uint64(3178881234, 8580724), new $Uint64(2340838177, 1486484588)]), $toNativeArray($kindUint64, [new $Uint64(3973601542, 2158209553), new $Uint64(2926047721, 2931847559)]), $toNativeArray($kindUint64, [new $Uint64(3893260104, 550278293), new $Uint64(3657559652, 443583977)]), $toNativeArray($kindUint64, [new $Uint64(822674829, 343923933), new $Uint64(2285974782, 2424723634)]), $toNativeArray($kindUint64, [new $Uint64(3175827184, 1503646741), new $Uint64(2857468478, 883420894)]), $toNativeArray($kindUint64, [new $Uint64(1822300332, 1879558426), new $Uint64(3571835597, 3251759766)]), $toNativeArray($kindUint64, [new $Uint64(65195883, 3322207664), new $Uint64(2232397248, 2569220766)]), $toNativeArray($kindUint64, [new $Uint64(2228978502, 3079017756), new $Uint64(2790496560, 3211525957)]), $toNativeArray($kindUint64, [new $Uint64(3859964952, 1701288547), new $Uint64(3488120700, 4014407446)]), $toNativeArray($kindUint64, [new $Uint64(1338736271, 1063305342), new $Uint64(2180075438, 361521006)]), $toNativeArray($kindUint64, [new $Uint64(3820903987, 255389853), new $Uint64(2725094297, 2599384905)]), $toNativeArray($kindUint64, [new $Uint64(1554904511, 3540462789), new $Uint64(3406367872, 28005660)]), $toNativeArray($kindUint64, [new $Uint64(1943630639, 3351836662), new $Uint64(4257959840, 35007075)]), $toNativeArray($kindUint64, [new $Uint64(677898237, 3705510650), new $Uint64(2661224900, 21879422)]), $toNativeArray($kindUint64, [new $Uint64(2994856445, 1410662840), new $Uint64(3326531125, 27349277)]), $toNativeArray($kindUint64, [new $Uint64(522345084, 2837070374), new $Uint64(4158163906, 1107928421)]), $toNativeArray($kindUint64, [new $Uint64(863336589, 3920652632), new $Uint64(2598852441, 1766197087)]), $toNativeArray($kindUint64, [new $Uint64(5428913, 1679590318), new $Uint64(3248565551, 3281488183)]), $toNativeArray($kindUint64, [new $Uint64(3228011613, 3173229722), new $Uint64(4060706939, 3028118404)]), $toNativeArray($kindUint64, [new $Uint64(4164990906, 2520139488), new $Uint64(2537941837, 1355703090)]), $toNativeArray($kindUint64, [new $Uint64(3058754985, 1002690712), new $Uint64(3172427296, 2768370687)]), $toNativeArray($kindUint64, [new $Uint64(2749701907, 2327105214), new $Uint64(3965534120, 3460463359)]), $toNativeArray($kindUint64, [new $Uint64(3329176428, 917569847), new $Uint64(2478458825, 2162789599)]), $toNativeArray($kindUint64, [new $Uint64(3087728711, 1146962308), new $Uint64(3098073531, 3777228823)]), $toNativeArray($kindUint64, [new $Uint64(2785919065, 359961061), new $Uint64(3872591914, 3647794205)]), $toNativeArray($kindUint64, [new $Uint64(2278070327, 2909330223), new $Uint64(2420369946, 3353613202)]), $toNativeArray($kindUint64, [new $Uint64(700104261, 2562920955), new $Uint64(3025462433, 2044532855)]), $toNativeArray($kindUint64, [new $Uint64(4096355798, 4277393018), new $Uint64(3781828041, 3629407892)]), $toNativeArray($kindUint64, [new $Uint64(412738726, 1599628812), new $Uint64(2363642526, 657767197)]), $toNativeArray($kindUint64, [new $Uint64(1589665231, 4147019663), new $Uint64(2954553157, 2969692644)]), $toNativeArray($kindUint64, [new $Uint64(1987081539, 4110032755), new $Uint64(3693191447, 490890333)]), $toNativeArray($kindUint64, [new $Uint64(1778796874, 2031899560), new $Uint64(2308244654, 1917419194)]), $toNativeArray($kindUint64, [new $Uint64(76012445, 392390802), new $Uint64(2885305818, 249290345)]), $toNativeArray($kindUint64, [new $Uint64(1168757380, 1564230326), new $Uint64(3606632272, 2459096579)]), $toNativeArray($kindUint64, [new $Uint64(193602450, 3125127602), new $Uint64(2254145170, 1536935362)]), $toNativeArray($kindUint64, [new $Uint64(2389486711, 1758925854), new $Uint64(2817681462, 4068652850)]), $toNativeArray($kindUint64, [new $Uint64(839374741, 1124915494), new $Uint64(3522101828, 2938332415)]), $toNativeArray($kindUint64, [new $Uint64(2135221949, 1239943096), new $Uint64(2201313642, 3983941407)]), $toNativeArray($kindUint64, [new $Uint64(1595285612, 2623670694), new $Uint64(2751642053, 2832443111)]), $toNativeArray($kindUint64, [new $Uint64(920365191, 3279588367), new $Uint64(3439552567, 319328417)]), $toNativeArray($kindUint64, [new $Uint64(3259582804, 3660355465), new $Uint64(2149720354, 1810192996)]), $toNativeArray($kindUint64, [new $Uint64(4074478506, 280477036), new $Uint64(2687150443, 115257597)]), $toNativeArray($kindUint64, [new $Uint64(1871872660, 2498079943), new $Uint64(3358938053, 3365297469)]), $toNativeArray($kindUint64, [new $Uint64(3413582649, 3122599929), new $Uint64(4198672567, 985396364)]), $toNativeArray($kindUint64, [new $Uint64(4280972804, 341012219), new $Uint64(2624170354, 2226485463)]), $toNativeArray($kindUint64, [new $Uint64(4277474181, 426265274), new $Uint64(3280212943, 635623181)]), $toNativeArray($kindUint64, [new $Uint64(2125617254, 1606573417), new $Uint64(4100266178, 4015754449)]), $toNativeArray($kindUint64, [new $Uint64(4012865343, 4225333857), new $Uint64(2562666361, 3583588354)]), $toNativeArray($kindUint64, [new $Uint64(2868598031, 4207925498), new $Uint64(3203332952, 1258259971)]), $toNativeArray($kindUint64, [new $Uint64(2512005715, 4186165048), new $Uint64(4004166190, 1572824964)]), $toNativeArray($kindUint64, [new $Uint64(3717487220, 2079482243), new $Uint64(2502603868, 4204241074)]), $toNativeArray($kindUint64, [new $Uint64(2499375377, 2599352804), new $Uint64(3128254836, 960334047)]), $toNativeArray($kindUint64, [new $Uint64(2050477398, 27965533), new $Uint64(3910318545, 1200417559)]), $toNativeArray($kindUint64, [new $Uint64(2892161109, 3238703930), new $Uint64(2443949090, 3434615534)]), $toNativeArray($kindUint64, [new $Uint64(1467717739, 827154441), new $Uint64(3054936363, 2145785770)]), $toNativeArray($kindUint64, [new $Uint64(3982130821, 4255168523), new $Uint64(3818670454, 1608490388)]), $toNativeArray($kindUint64, [new $Uint64(341348115, 3196351239), new $Uint64(2386669033, 4226531965)]), $toNativeArray($kindUint64, [new $Uint64(1500426968, 2921697224), new $Uint64(2983336292, 2061939484)]), $toNativeArray($kindUint64, [new $Uint64(1875533710, 3652121531), new $Uint64(3729170365, 2577424355)]), $toNativeArray($kindUint64, [new $Uint64(635337657, 1208834132), new $Uint64(2330731478, 2147761134)]), $toNativeArray($kindUint64, [new $Uint64(2941655719, 2584784490), new $Uint64(2913414348, 537217769)]), $toNativeArray($kindUint64, [new $Uint64(455844177, 2157238788), new $Uint64(3641767935, 671522212)]), $toNativeArray($kindUint64, [new $Uint64(2432386258, 4032628802), new $Uint64(2276104959, 2030314118)]), $toNativeArray($kindUint64, [new $Uint64(892999175, 2893302355), new $Uint64(2845131199, 1464150824)]), $toNativeArray($kindUint64, [new $Uint64(1116248969, 2542886120), new $Uint64(3556413999, 756446706)]), $toNativeArray($kindUint64, [new $Uint64(1771397429, 4273658385), new $Uint64(2222758749, 2083391927)]), $toNativeArray($kindUint64, [new $Uint64(1140504963, 2120847509), new $Uint64(2778448436, 3677981733)]), $toNativeArray($kindUint64, [new $Uint64(2499373028, 1577317563), new $Uint64(3473060546, 302509870)]), $toNativeArray($kindUint64, [new $Uint64(488366318, 3133307125), new $Uint64(2170662841, 1262810493)]), $toNativeArray($kindUint64, [new $Uint64(1684199722, 1769150258), new $Uint64(2713328551, 2652254940)]), $toNativeArray($kindUint64, [new $Uint64(2105249653, 63954174), new $Uint64(3391660689, 2241576851)]), $toNativeArray($kindUint64, [new $Uint64(1557820242, 1153684542), new $Uint64(4239575861, 3875712888)]), $toNativeArray($kindUint64, [new $Uint64(973637651, 1794794663), new $Uint64(2649734913, 2959191467)]), $toNativeArray($kindUint64, [new $Uint64(143305240, 1169751504), new $Uint64(3312168642, 477763862)]), $toNativeArray($kindUint64, [new $Uint64(2326615198, 1462189381), new $Uint64(4140210802, 2744688475)]), $toNativeArray($kindUint64, [new $Uint64(917263586, 4135093835), new $Uint64(2587631751, 2789172121)]), $toNativeArray($kindUint64, [new $Uint64(2220321307, 3021383645), new $Uint64(3234539689, 2412723327)]), $toNativeArray($kindUint64, [new $Uint64(1701659810, 2702987733), new $Uint64(4043174611, 4089645983)]), $toNativeArray($kindUint64, [new $Uint64(2674150117, 2763109157), new $Uint64(2526984132, 2019157827)]), $toNativeArray($kindUint64, [new $Uint64(2268945823, 232660974), new $Uint64(3158730165, 2523947284)]), $toNativeArray($kindUint64, [new $Uint64(2836182278, 3512051690), new $Uint64(3948412706, 4228675929)]), $toNativeArray($kindUint64, [new $Uint64(162001188, 1121290482), new $Uint64(2467757941, 3716664280)]), $toNativeArray($kindUint64, [new $Uint64(202501485, 1401613103), new $Uint64(3084697427, 1424604878)]), $toNativeArray($kindUint64, [new $Uint64(2400610504, 2825758202), new $Uint64(3855871784, 707014273)]), $toNativeArray($kindUint64, [new $Uint64(4184736125, 1766098876), new $Uint64(2409919865, 441883920)]), $toNativeArray($kindUint64, [new $Uint64(935952860, 3281365420), new $Uint64(3012399831, 1626096725)]), $toNativeArray($kindUint64, [new $Uint64(2243682899, 4101706775), new $Uint64(3765499789, 958879082)]), $toNativeArray($kindUint64, [new $Uint64(2476043636, 2026695822), new $Uint64(2353437368, 1136170338)]), $toNativeArray($kindUint64, [new $Uint64(947570897, 2533369778), new $Uint64(2941796710, 1420212923)]), $toNativeArray($kindUint64, [new $Uint64(110721797, 4240454046), new $Uint64(3677245887, 3922749802)]), $toNativeArray($kindUint64, [new $Uint64(1142942947, 3187154691), new $Uint64(2298278679, 4062331362)]), $toNativeArray($kindUint64, [new $Uint64(3576162332, 2910201539), new $Uint64(2872848349, 4004172378)]), $toNativeArray($kindUint64, [new $Uint64(2322719267, 3637751924), new $Uint64(3591060437, 1783990001)]), $toNativeArray($kindUint64, [new $Uint64(4136054102, 1736724041), new $Uint64(2244412773, 1651864662)]), $toNativeArray($kindUint64, [new $Uint64(3022583980, 23421403), new $Uint64(2805515966, 3138572652)]), $toNativeArray($kindUint64, [new $Uint64(3778229975, 29276754), new $Uint64(3506894958, 1775732167)]), $toNativeArray($kindUint64, [new $Uint64(3972006470, 1628910707), new $Uint64(2191809349, 36090780)]), $toNativeArray($kindUint64, [new $Uint64(670040791, 4183622032), new $Uint64(2739761686, 1118855300)]), $toNativeArray($kindUint64, [new $Uint64(837550989, 4155785716), new $Uint64(3424702107, 3546052773)]), $toNativeArray($kindUint64, [new $Uint64(2120680561, 1973506673), new $Uint64(4280877634, 3358824142)]), $toNativeArray($kindUint64, [new $Uint64(251683526, 3917796230), new $Uint64(2675548521, 3173006913)]), $toNativeArray($kindUint64, [new $Uint64(1388346232, 2749761640), new $Uint64(3344435652, 745033169)]), $toNativeArray($kindUint64, [new $Uint64(2809174614, 3437202050), new $Uint64(4180544565, 931291461)]), $toNativeArray($kindUint64, [new $Uint64(2292605046, 1074509457), new $Uint64(2612840353, 1118928075)]), $toNativeArray($kindUint64, [new $Uint64(1792014483, 3490620469), new $Uint64(3266050441, 2472401918)]), $toNativeArray($kindUint64, [new $Uint64(92534456, 3289533763), new $Uint64(4082563051, 4164244222)]), $toNativeArray($kindUint64, [new $Uint64(3279059507, 2055958602), new $Uint64(2551601907, 2065781726)]), $toNativeArray($kindUint64, [new $Uint64(1951340736, 1496206428), new $Uint64(3189502384, 1508485334)]), $toNativeArray($kindUint64, [new $Uint64(291692272, 1870258035), new $Uint64(3986877980, 1885606668)]), $toNativeArray($kindUint64, [new $Uint64(2329791318, 1168911272), new $Uint64(2491798737, 3325987815)]), $toNativeArray($kindUint64, [new $Uint64(1838497323, 3608622738), new $Uint64(3114748422, 936259297)]), $toNativeArray($kindUint64, [new $Uint64(3371863478, 3437036599), new $Uint64(3893435527, 3317807769)]), $toNativeArray($kindUint64, [new $Uint64(496801938, 1074406050), new $Uint64(2433397204, 3684242592)]), $toNativeArray($kindUint64, [new $Uint64(621002422, 3490491211), new $Uint64(3041746506, 310335944)]), $toNativeArray($kindUint64, [new $Uint64(776253028, 2215630365), new $Uint64(3802183132, 2535403578)]), $toNativeArray($kindUint64, [new $Uint64(1558899966, 3532252626), new $Uint64(2376364457, 3732110884)]), $toNativeArray($kindUint64, [new $Uint64(1948624958, 2267832135), new $Uint64(2970455572, 1443913133)]), $toNativeArray($kindUint64, [new $Uint64(3509523022, 687306521), new $Uint64(3713069465, 1804891416)]), $toNativeArray($kindUint64, [new $Uint64(2193451888, 3650792047), new $Uint64(2320668415, 3812411695)]), $toNativeArray($kindUint64, [new $Uint64(1668073037, 268522763), new $Uint64(2900835519, 3691772795)]), $toNativeArray($kindUint64, [new $Uint64(1011349472, 1409395278), new $Uint64(3626044399, 3540974170)]), $toNativeArray($kindUint64, [new $Uint64(1705835244, 880872049), new $Uint64(2266277749, 3823721592)]), $toNativeArray($kindUint64, [new $Uint64(2132294055, 1101090061), new $Uint64(2832847187, 1558426518)]), $toNativeArray($kindUint64, [new $Uint64(517883921, 302620752), new $Uint64(3541058984, 874291324)]), $toNativeArray($kindUint64, [new $Uint64(2471161098, 2873492530), new $Uint64(2213161865, 546432077)]), $toNativeArray($kindUint64, [new $Uint64(4162693197, 1444382015), new $Uint64(2766452331, 1756781920)]), $toNativeArray($kindUint64, [new $Uint64(908399200, 2879219342), new $Uint64(3458065414, 1122235577)]), $toNativeArray($kindUint64, [new $Uint64(3252104060, 1799512089), new $Uint64(2161290883, 3922622707)]), $toNativeArray($kindUint64, [new $Uint64(2991388251, 2249390111), new $Uint64(2701613604, 3829536560)]), $toNativeArray($kindUint64, [new $Uint64(3739235314, 1737995815), new $Uint64(3377017006, 491953404)]), $toNativeArray($kindUint64, [new $Uint64(379076847, 25011121), new $Uint64(4221271257, 2762425404)]), $toNativeArray($kindUint64, [new $Uint64(2384406677, 1626244686), new $Uint64(2638294536, 115903141)]), $toNativeArray($kindUint64, [new $Uint64(4054250170, 3106547682), new $Uint64(3297868170, 144878926)]), $toNativeArray($kindUint64, [new $Uint64(2920329065, 1735700955), new $Uint64(4122335212, 2328582306)]), $toNativeArray($kindUint64, [new $Uint64(2898947489, 3769167657), new $Uint64(2576459507, 3602847589)]), $toNativeArray($kindUint64, [new $Uint64(402458890, 1490234099), new $Uint64(3220574384, 3429817663)]), $toNativeArray($kindUint64, [new $Uint64(3724299084, 4010276272), new $Uint64(4025717980, 4287272078)]), $toNativeArray($kindUint64, [new $Uint64(1253945104, 358939022), new $Uint64(2516073738, 532061401)]), $toNativeArray($kindUint64, [new $Uint64(2641173204, 448673777), new $Uint64(3145092172, 2812560399)]), $toNativeArray($kindUint64, [new $Uint64(2227724681, 560842221), new $Uint64(3931365215, 3515700499)]), $toNativeArray($kindUint64, [new $Uint64(855457013, 3034880948), new $Uint64(2457103259, 3807925548)]), $toNativeArray($kindUint64, [new $Uint64(1069321267, 572375713), new $Uint64(3071379074, 3686165111)]), $toNativeArray($kindUint64, [new $Uint64(262909759, 3936695114), new $Uint64(3839223843, 2460222741)]), $toNativeArray($kindUint64, [new $Uint64(701189511, 4071047182), new $Uint64(2399514902, 1000768301)]), $toNativeArray($kindUint64, [new $Uint64(1950228713, 4015067154), new $Uint64(2999393627, 3398444024)]), $toNativeArray($kindUint64, [new $Uint64(2437785892, 1797608470), new $Uint64(3749242034, 3174313206)]), $toNativeArray($kindUint64, [new $Uint64(449874358, 3270988942), new $Uint64(2343276271, 3057687578)]), $toNativeArray($kindUint64, [new $Uint64(2709826596, 1941252529), new $Uint64(2929095339, 2748367648)]), $toNativeArray($kindUint64, [new $Uint64(3387283245, 2426565662), new $Uint64(3661369174, 2361717736)]), $toNativeArray($kindUint64, [new $Uint64(2117052028, 2053474450), new $Uint64(2288355734, 402331761)]), $toNativeArray($kindUint64, [new $Uint64(3720056859, 2566843063), new $Uint64(2860444667, 2650398349)]), $toNativeArray($kindUint64, [new $Uint64(1428845602, 2134812005), new $Uint64(3575555834, 2239256113)]), $toNativeArray($kindUint64, [new $Uint64(3577383061, 2407999327), new $Uint64(2234722396, 2473276894)]), $toNativeArray($kindUint64, [new $Uint64(2324245178, 4083740983), new $Uint64(2793402995, 3091596118)]), $toNativeArray($kindUint64, [new $Uint64(757822825, 2957192581), new $Uint64(3491753744, 2790753324)]), $toNativeArray($kindUint64, [new $Uint64(2621122914, 237632627), new $Uint64(2182346090, 1744220827)]), $toNativeArray($kindUint64, [new $Uint64(2202661818, 2444524431), new $Uint64(2727932613, 32792386)]), $toNativeArray($kindUint64, [new $Uint64(605843625, 908171891), new $Uint64(3409915766, 1114732307)]), $toNativeArray($kindUint64, [new $Uint64(3978530003, 2208956688), new $Uint64(4262394707, 3540899031)]), $toNativeArray($kindUint64, [new $Uint64(4097193988, 843727018), new $Uint64(2663996692, 1676190982)]), $toNativeArray($kindUint64, [new $Uint64(2974008837, 1054658773), new $Uint64(3329995865, 2095238728)]), $toNativeArray($kindUint64, [new $Uint64(3717511046, 2392065290), new $Uint64(4162494831, 3692790234)]), $toNativeArray($kindUint64, [new $Uint64(3397186228, 421298982), new $Uint64(2601559269, 3918606632)]), $toNativeArray($kindUint64, [new $Uint64(4246482785, 526623728), new $Uint64(3251949087, 1677032818)]), $toNativeArray($kindUint64, [new $Uint64(3160619833, 1732021484), new $Uint64(4064936359, 1022549199)]), $toNativeArray($kindUint64, [new $Uint64(3586000131, 3766867987), new $Uint64(2540585224, 2249705985)]), $toNativeArray($kindUint64, [new $Uint64(1261274692, 3634843160), new $Uint64(3175731530, 2812132482)]), $toNativeArray($kindUint64, [new $Uint64(3724077014, 248586654), new $Uint64(3969664413, 1367681954)]), $toNativeArray($kindUint64, [new $Uint64(3401289957, 3376592131), new $Uint64(2481040258, 1391672133)]), $toNativeArray($kindUint64, [new $Uint64(1030386975, 999514691), new $Uint64(3101300322, 3887073815)]), $toNativeArray($kindUint64, [new $Uint64(214241895, 175651540), new $Uint64(3876625403, 2711358621)]), $toNativeArray($kindUint64, [new $Uint64(670772096, 1720394949), new $Uint64(2422890877, 1157728226)]), $toNativeArray($kindUint64, [new $Uint64(2985948768, 2150493686), new $Uint64(3028613596, 2520902106)]), $toNativeArray($kindUint64, [new $Uint64(1584952312, 2688117107), new $Uint64(3785766995, 3151127633)]), $toNativeArray($kindUint64, [new $Uint64(3674949755, 1680073192), new $Uint64(2366104372, 1432583858)]), $toNativeArray($kindUint64, [new $Uint64(2446203546, 1026349666), new $Uint64(2957630465, 1790729823)]), $toNativeArray($kindUint64, [new $Uint64(1984012608, 3430420731), new $Uint64(3697038081, 3312154103)]), $toNativeArray($kindUint64, [new $Uint64(2850620616, 2144012957), new $Uint64(2310648801, 459483578)]), $toNativeArray($kindUint64, [new $Uint64(1415792122, 2680016196), new $Uint64(2888311001, 1648096297)]), $toNativeArray($kindUint64, [new $Uint64(2843481977, 1202536597), new $Uint64(3610388751, 3133862195)]), $toNativeArray($kindUint64, [new $Uint64(1240305323, 3435939933), new $Uint64(2256492969, 3569276608)]), $toNativeArray($kindUint64, [new $Uint64(1550381654, 3221183092), new $Uint64(2820616212, 1240370288)]), $toNativeArray($kindUint64, [new $Uint64(1937977068, 1878995217), new $Uint64(3525770265, 1550462860)]), $toNativeArray($kindUint64, [new $Uint64(3358719315, 3321855659), new $Uint64(2203606415, 3653393847)]), $toNativeArray($kindUint64, [new $Uint64(3124657320, 3078577749), new $Uint64(2754508019, 3493000485)]), $toNativeArray($kindUint64, [new $Uint64(684596178, 3848222187), new $Uint64(3443135024, 3292508783)]), $toNativeArray($kindUint64, [new $Uint64(2038485347, 3478880691), new $Uint64(2151959390, 2057817989)]), $toNativeArray($kindUint64, [new $Uint64(3621848508, 3274859039), new $Uint64(2689949238, 424788838)]), $toNativeArray($kindUint64, [new $Uint64(2379826987, 4093573799), new $Uint64(3362436547, 2678469696)]), $toNativeArray($kindUint64, [new $Uint64(2974783734, 4043225425), new $Uint64(4203045684, 2274345296)]), $toNativeArray($kindUint64, [new $Uint64(1859239834, 1453274067), new $Uint64(2626903552, 3568949458)]), $toNativeArray($kindUint64, [new $Uint64(176566144, 3964076232), new $Uint64(3283629441, 166219527)]), $toNativeArray($kindUint64, [new $Uint64(3441933153, 660127994), new $Uint64(4104536801, 1281516232)]), $toNativeArray($kindUint64, [new $Uint64(2151208220, 3096934556), new $Uint64(2565335500, 3485302205)]), $toNativeArray($kindUint64, [new $Uint64(3762752099, 3871168195), new $Uint64(3206669376, 61660460)]), $toNativeArray($kindUint64, [new $Uint64(408472828, 3765218420), new $Uint64(4008336720, 77075576)]), $toNativeArray($kindUint64, [new $Uint64(255295518, 205777864), new $Uint64(2505210450, 48172235)]), $toNativeArray($kindUint64, [new $Uint64(3540344869, 2404705978), new $Uint64(3131513062, 2207698941)]), $toNativeArray($kindUint64, [new $Uint64(1204205614, 4079624297), new $Uint64(3914391328, 612140029)]), $toNativeArray($kindUint64, [new $Uint64(1289499421, 1476023361), new $Uint64(2446494580, 382587518)]), $toNativeArray($kindUint64, [new $Uint64(3759357924, 2918771026), new $Uint64(3058118225, 478234397)]), $toNativeArray($kindUint64, [new $Uint64(1477971933, 3648463782), new $Uint64(3822647781, 1671534821)]), $toNativeArray($kindUint64, [new $Uint64(1460603370, 2817160776), new $Uint64(2389154863, 1581580175)]), $toNativeArray($kindUint64, [new $Uint64(752012389, 1373967322), new $Uint64(2986443579, 903233395)]), $toNativeArray($kindUint64, [new $Uint64(4161240958, 2791200977), new $Uint64(3733054474, 55299919)]), $toNativeArray($kindUint64, [new $Uint64(4211388335, 670758786), new $Uint64(2333159046, 1108304273)]), $toNativeArray($kindUint64, [new $Uint64(2043009946, 4059673955), new $Uint64(2916448807, 3532863990)]), $toNativeArray($kindUint64, [new $Uint64(406278785, 2927108796), new $Uint64(3645561009, 3342338164)]), $toNativeArray($kindUint64, [new $Uint64(2401407889, 218830261), new $Uint64(2278475631, 478348616)]), $toNativeArray($kindUint64, [new $Uint64(3001759861, 1347279650), new $Uint64(2848094538, 3819161242)]), $toNativeArray($kindUint64, [new $Uint64(1604716178, 2757841387), new $Uint64(3560118173, 2626467905)]), $toNativeArray($kindUint64, [new $Uint64(3687302171, 2797392691), new $Uint64(2225073858, 2178413352)]), $toNativeArray($kindUint64, [new $Uint64(314160418, 2422999040), new $Uint64(2781342323, 575533043)]), $toNativeArray($kindUint64, [new $Uint64(3613925995, 881265152), new $Uint64(3476677903, 3940641775)]), $toNativeArray($kindUint64, [new $Uint64(3869316483, 13919808), new $Uint64(2172923689, 4073513845)]), $toNativeArray($kindUint64, [new $Uint64(1615420131, 3238625232), new $Uint64(2716154612, 1870666835)]), $toNativeArray($kindUint64, [new $Uint64(945533340, 2974539716), new $Uint64(3395193265, 2338333544)]), $toNativeArray($kindUint64, [new $Uint64(1181916675, 3718174645), new $Uint64(4243991581, 3996658754)]), $toNativeArray($kindUint64, [new $Uint64(1812439746, 1786988241), new $Uint64(2652494738, 3034782633)]), $toNativeArray($kindUint64, [new $Uint64(3339291507, 86251653), new $Uint64(3315618423, 1645994643)]), $toNativeArray($kindUint64, [new $Uint64(3100372559, 3329040039), new $Uint64(4144523029, 983751480)]), $toNativeArray($kindUint64, [new $Uint64(1937732849, 3691262760), new $Uint64(2590326893, 1151715587)]), $toNativeArray($kindUint64, [new $Uint64(1348424238, 1392852978), new $Uint64(3237908616, 2513386308)]), $toNativeArray($kindUint64, [new $Uint64(1685530297, 3888549871), new $Uint64(4047385770, 3141732885)]), $toNativeArray($kindUint64, [new $Uint64(1590327348, 819730933), new $Uint64(2529616106, 3037324877)]), $toNativeArray($kindUint64, [new $Uint64(3061651009, 1024663666), new $Uint64(3162020133, 1649172448)]), $toNativeArray($kindUint64, [new $Uint64(3827063761, 2354571407), new $Uint64(3952525166, 3135207384)]), $toNativeArray($kindUint64, [new $Uint64(2391914850, 4155961689), new $Uint64(2470328229, 885762791)]), $toNativeArray($kindUint64, [new $Uint64(1916151739, 3047468464), new $Uint64(3087910286, 2180945313)]), $toNativeArray($kindUint64, [new $Uint64(3468931498, 2735593756), new $Uint64(3859887858, 578697993)]), $toNativeArray($kindUint64, [new $Uint64(557469450, 2783487921), new $Uint64(2412429911, 1435428070)]), $toNativeArray($kindUint64, [new $Uint64(2844320461, 1331876253), new $Uint64(3015537389, 720543263)]), $toNativeArray($kindUint64, [new $Uint64(2481658752, 2738587141), new $Uint64(3769421736, 1974420903)]), $toNativeArray($kindUint64, [new $Uint64(3161649456, 1711616963), new $Uint64(2355888585, 1234013064)]), $toNativeArray($kindUint64, [new $Uint64(3952061820, 2139521204), new $Uint64(2944860731, 2616258154)]), $toNativeArray($kindUint64, [new $Uint64(2792593627, 2674401505), new $Uint64(3681075914, 2196580869)]), $toNativeArray($kindUint64, [new $Uint64(2282241929, 1134630028), new $Uint64(2300672446, 2446604867)]), $toNativeArray($kindUint64, [new $Uint64(1779060587, 2492029360), new $Uint64(2875840558, 910772436)]), $toNativeArray($kindUint64, [new $Uint64(2223825734, 2041294876), new $Uint64(3594800697, 3285949193)]), $toNativeArray($kindUint64, [new $Uint64(4074245644, 202067473), new $Uint64(2246750436, 443105509)]), $toNativeArray($kindUint64, [new $Uint64(1871581583, 252584341), new $Uint64(2808438045, 553881887)]), $toNativeArray($kindUint64, [new $Uint64(1265735154, 3536955899), new $Uint64(3510547556, 1766094183)])]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1519, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2045, 2093, 2096, 2139, 2142, 2154, 2208, 2247, 2259, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2558, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2678, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2901, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3191, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3328, 3407, 3412, 3427, 3430, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6264, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6848, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7312, 7354, 7357, 7367, 7376, 7418, 7424, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8383, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11858, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12771, 12784, 40956, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42943, 42946, 42954, 42997, 43052, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43883, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1424, 1757, 2111, 2143, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2816, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3085, 3089, 3113, 3141, 3145, 3159, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3341, 3345, 3397, 3401, 3456, 3460, 3506, 3516, 3541, 3543, 3715, 3717, 3723, 3748, 3750, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7674, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11158, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12592, 12687, 12831, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65948, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66349, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68149, 68152, 68154, 68159, 68168, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68903, 68912, 68921, 69216, 69293, 69296, 69297, 69376, 69415, 69424, 69465, 69552, 69579, 69600, 69622, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69959, 69968, 70006, 70016, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70753, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71352, 71360, 71369, 71424, 71450, 71453, 71467, 71472, 71487, 71680, 71739, 71840, 71922, 71935, 71942, 71945, 71945, 71948, 71992, 71995, 72006, 72016, 72025, 72096, 72103, 72106, 72151, 72154, 72164, 72192, 72263, 72272, 72354, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 72960, 73014, 73018, 73031, 73040, 73049, 73056, 73112, 73120, 73129, 73440, 73464, 73648, 73648, 73664, 73713, 73727, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93760, 93850, 93952, 94026, 94031, 94087, 94095, 94111, 94176, 94180, 94192, 94193, 94208, 100343, 100352, 101589, 101632, 101640, 110592, 110878, 110928, 110930, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119520, 119539, 119552, 119638, 119648, 119672, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 123136, 123180, 123184, 123197, 123200, 123209, 123214, 123215, 123584, 123641, 123647, 123647, 124928, 125124, 125127, 125142, 125184, 125259, 125264, 125273, 125278, 125279, 126065, 126132, 126209, 126269, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127405, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127584, 127589, 127744, 128727, 128736, 128748, 128752, 128764, 128768, 128883, 128896, 128984, 128992, 129003, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129200, 129201, 129280, 129619, 129632, 129645, 129648, 129652, 129656, 129658, 129664, 129670, 129680, 129704, 129712, 129718, 129728, 129730, 129744, 129750, 129792, 129994, 130032, 130041, 131072, 173789, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 196608, 201546, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 3711, 3754, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 4922, 5212, 6420, 6423, 6454, 7177, 7223, 7336, 7431, 7434, 7483, 7486, 7526, 7529, 7567, 7570, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 63865, 63948, 64403]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable, ReadRange, WriteRange;
	Acquire = function(addr) {
		var addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
	};
	$pkg.Disable = Disable;
	Enable = function() {
	};
	$pkg.Enable = Enable;
	ReadRange = function(addr, len) {
		var addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, ptrType, CompareAndSwapInt32, CompareAndSwapUint64, AddInt32, LoadInt32, LoadUint64, StoreInt32, StoreUint32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = $ifaceNil;
			return;
		}
		this.v = v_;
	});
	ptrType = $ptrType(Value);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	CompareAndSwapUint64 = function(addr, old, new$1) {
		var addr, new$1, old, x;
		if ((x = addr.$get(), (x.$high === old.$high && x.$low === old.$low))) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapUint64 = CompareAndSwapUint64;
	AddInt32 = function(addr, delta) {
		var addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadInt32 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadInt32 = LoadInt32;
	LoadUint64 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadUint64 = LoadUint64;
	StoreInt32 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StoreInt32 = StoreInt32;
	StoreUint32 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	Value.ptr.prototype.Load = function() {
		var v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(x) {
		var v, x;
		v = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			$panic(new $String("sync/atomic: store of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !(x.constructor === v.v.constructor)) {
			$panic(new $String("sync/atomic: store of inconsistently typed value into Value"));
		}
		v.v = x;
	};
	Value.prototype.Store = function(x) { return this.$val.Store(x); };
	ptrType.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	Value.init("sync/atomic", [{prop: "v", name: "v", embedded: false, exported: false, typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, js, race, atomic, Pool, Mutex, Locker, notifyList, RWMutex, rlocker, ptrType, chanType, sliceType, ptrType$5, ptrType$10, ptrType$11, sliceType$3, ptrType$13, funcType, ptrType$18, semWaiters, semAwoken, expunged, runtime_SemacquireMutex, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, runtime_nanotime, throw$1, init, runtime_doSpin;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.store = sliceType$3.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.store = store_;
		this.New = New_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", true, "sync", true, null);
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "sync", true, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", true, "sync", false, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType = $sliceType(chanType);
	ptrType$5 = $ptrType($Int32);
	ptrType$10 = $ptrType(rlocker);
	ptrType$11 = $ptrType(RWMutex);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$13 = $ptrType(Pool);
	funcType = $funcType([], [$emptyInterface], false);
	ptrType$18 = $ptrType(Mutex);
	Pool.ptr.prototype.Get = function() {
		var $24r, _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f.$24r = $24r; $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_SemacquireMutex = function(s, lifo, skipframes) {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _key, _key$1, _key$2, _r, ch, lifo, s, skipframes, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _r = $f._r; ch = $f.ch; lifo = $f.lifo; s = $f.s; skipframes = $f.skipframes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (((s.$get() - (_entry = semAwoken[ptrType.keyFor(s)], _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((s.$get() - (_entry = semAwoken[ptrType.keyFor(s)], _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			if (lifo) {
				_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: $appendSlice(new sliceType([ch]), (_entry$1 = semWaiters[ptrType.keyFor(s)], _entry$1 !== undefined ? _entry$1.v : sliceType.nil)) };
			} else {
				_key$1 = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key$1)] = { k: _key$1, v: $append((_entry$2 = semWaiters[ptrType.keyFor(s)], _entry$2 !== undefined ? _entry$2.v : sliceType.nil), ch) };
			}
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
			_key$2 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key$2)] = { k: _key$2, v: (_entry$3 = semAwoken[ptrType.keyFor(s)], _entry$3 !== undefined ? _entry$3.v : 0) - (1) >>> 0 };
			if ((_entry$4 = semAwoken[ptrType.keyFor(s)], _entry$4 !== undefined ? _entry$4.v : 0) === 0) {
				delete semAwoken[ptrType.keyFor(s)];
			}
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_SemacquireMutex }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._r = _r; $f.ch = ch; $f.lifo = lifo; $f.s = s; $f.skipframes = skipframes; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s, handoff, skipframes) {
		var _entry, _entry$1, _key, _key$1, ch, handoff, s, skipframes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; ch = $f.ch; handoff = $f.handoff; s = $f.s; skipframes = $f.skipframes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType.keyFor(s)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType.keyFor(s)];
		}
		_key$1 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key$1)] = { k: _key$1, v: (_entry$1 = semAwoken[ptrType.keyFor(s)], _entry$1 !== undefined ? _entry$1.v : 0) + (1) >>> 0 };
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f.ch = ch; $f.handoff = handoff; $f.s = s; $f.skipframes = skipframes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_notifyListCheck = function(size) {
		var size;
	};
	runtime_canSpin = function(i) {
		var i;
		return false;
	};
	runtime_nanotime = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	throw$1 = function(s) {
		var s;
		$throwRuntimeError($externalize(s, $String));
	};
	Mutex.ptr.prototype.Lock = function() {
		var m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$5(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire((m));
			}
			$s = -1; return;
		}
		$r = m.lockSlow(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.lockSlow = function() {
		var awoke, delta, iter, m, new$1, old, queueLifo, starving, waitStartTime, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; awoke = $f.awoke; delta = $f.delta; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; queueLifo = $f.queueLifo; starving = $f.starving; waitStartTime = $f.waitStartTime; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		waitStartTime = new $Int64(0, 0);
		starving = false;
		awoke = false;
		iter = 0;
		old = m.state;
		/* while (true) { */ case 1:
			if (((old & 5) === 1) && runtime_canSpin(iter)) {
				if (!awoke && ((old & 2) === 0) && !(((old >> 3 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$5(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
					awoke = true;
				}
				runtime_doSpin();
				iter = iter + (1) >> 0;
				old = m.state;
				/* continue; */ $s = 1; continue;
			}
			new$1 = old;
			if ((old & 4) === 0) {
				new$1 = new$1 | (1);
			}
			if (!(((old & 5) === 0))) {
				new$1 = new$1 + (8) >> 0;
			}
			if (starving && !(((old & 1) === 0))) {
				new$1 = new$1 | (4);
			}
			if (awoke) {
				if ((new$1 & 2) === 0) {
					throw$1("sync: inconsistent mutex state");
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$5(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$5(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				if ((old & 5) === 0) {
					/* break; */ $s = 2; continue;
				}
				queueLifo = !((waitStartTime.$high === 0 && waitStartTime.$low === 0));
				if ((waitStartTime.$high === 0 && waitStartTime.$low === 0)) {
					waitStartTime = runtime_nanotime();
				}
				$r = runtime_SemacquireMutex((m.$ptr_sema || (m.$ptr_sema = new ptrType(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), queueLifo, 1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				starving = starving || (x = (x$1 = runtime_nanotime(), new $Int64(x$1.$high - waitStartTime.$high, x$1.$low - waitStartTime.$low)), (x.$high > 0 || (x.$high === 0 && x.$low > 1000000)));
				old = m.state;
				if (!(((old & 4) === 0))) {
					if (!(((old & 3) === 0)) || ((old >> 3 >> 0) === 0)) {
						throw$1("sync: inconsistent mutex state");
					}
					delta = -7;
					if (!starving || ((old >> 3 >> 0) === 1)) {
						delta = delta - (4) >> 0;
					}
					atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$5(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), delta);
					/* break; */ $s = 2; continue;
				}
				awoke = true;
				iter = 0;
				$s = 5; continue;
			/* } else { */ case 4:
				old = m.state;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire((m));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.lockSlow }; } $f.awoke = awoke; $f.delta = delta; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.queueLifo = queueLifo; $f.starving = starving; $f.waitStartTime = waitStartTime; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.lockSlow = function() { return this.$val.lockSlow(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m, new$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; m = $f.m; new$1 = $f.new$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			$unused(m.state);
			race.Release((m));
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$5(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		/* */ if (!((new$1 === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((new$1 === 0))) { */ case 1:
			$r = m.unlockSlow(new$1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.m = m; $f.new$1 = new$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Mutex.ptr.prototype.unlockSlow = function(new$1) {
		var m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			throw$1("sync: unlock of unlocked mutex");
		}
		/* */ if ((new$1 & 4) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((new$1 & 4) === 0) { */ case 1:
			old = new$1;
			/* while (true) { */ case 4:
				if (((old >> 3 >> 0) === 0) || !(((old & 7) === 0))) {
					$s = -1; return;
				}
				new$1 = ((old - 8 >> 0)) | 2;
				/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$5(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$5(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 6:
					$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), false, 1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 7:
				old = m.state;
			/* } */ $s = 4; continue; case 5:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), true, 1); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.unlockSlow }; } $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.unlockSlow = function(new$1) { return this.$val.unlockSlow(new$1); };
	init = function() {
		var n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	RWMutex.ptr.prototype.RLock = function() {
		var rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$5(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$5(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_SemacquireMutex((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))), false, 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.ReleaseMerge(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$5(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			$r = rw.rUnlockSlow(r); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.rUnlockSlow = function(r) {
		var r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
			race.Enable();
			throw$1("sync: RUnlock of unlocked RWMutex");
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$5(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$5(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 1:
			$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))), false, 1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.rUnlockSlow }; } $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.rUnlockSlow = function(r) { return this.$val.rUnlockSlow(r); };
	RWMutex.ptr.prototype.Lock = function() {
		var r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$5(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$5(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$5(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_SemacquireMutex((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))), false, 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Acquire(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Release(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$5(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			race.Enable();
			throw$1("sync: Unlock of unlocked RWMutex");
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ((r >> 0)))) { break; } */ if(!(i < ((r >> 0)))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))), false, 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var rw;
		rw = this;
		return ($pointerOfStructConversion(rw, ptrType$10));
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$11)).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$11)).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType$13.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	ptrType$18.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "lockSlow", name: "lockSlow", pkg: "sync", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "unlockSlow", name: "unlockSlow", pkg: "sync", typ: $funcType([$Int32], [], false)}];
	ptrType$11.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "rUnlockSlow", name: "rUnlockSlow", pkg: "sync", typ: $funcType([$Int32], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$10.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init("sync", [{prop: "store", name: "store", embedded: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "New", name: "New", embedded: false, exported: true, typ: funcType, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	RWMutex.init("sync", [{prop: "w", name: "w", embedded: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", embedded: false, exported: false, typ: $Int32, tag: ""}]);
	rlocker.init("sync", [{prop: "w", name: "w", embedded: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", embedded: false, exported: false, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		semWaiters = {};
		semAwoken = {};
		expunged = (new Uint8Array(8));
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, unsafeheader, math, runtime, strconv, sync, unicode, utf8, uncommonType, funcType, name, nameData, mapIter, Type, Kind, tflag, rtype, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, Value, flag, ValueError, MapIter, sliceType$1, ptrType$1, sliceType$2, sliceType$3, ptrType$2, funcType$1, sliceType$4, ptrType$3, sliceType$5, sliceType$6, sliceType$7, ptrType$4, ptrType$5, structType$3, sliceType$8, sliceType$9, ptrType$6, ptrType$7, sliceType$10, sliceType$11, ptrType$8, ptrType$9, sliceType$13, sliceType$14, ptrType$10, sliceType$15, ptrType$14, ptrType$16, sliceType$17, funcType$3, funcType$4, funcType$5, ptrType$17, arrayType$9, ptrType$18, ptrType$19, initialized, uncommonTypeMap, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, kindNames, uint8Type, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiterelem, mapiternext, maplen, cvtDirect, methodReceiver, valueInterface, ifaceE2I, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, PtrTo, implements$1, specialChannelAssignability, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, methodName, methodNameSkip, copyVal, overflowFloat32, New, convertOp, makeFloat, makeFloat32, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	unsafeheader = $packages["internal/unsafeheader"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, xcount_, moff_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this.xcount = 0;
			this.moff = 0;
			this._methods = sliceType$5.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this.xcount = xcount_;
		this.moff = moff_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$3.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, exported_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.exported = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.exported = exported_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_, last_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			this.last = null;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
		this.last = last_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, equal_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.equal = $throwNilPointerError;
			this.gcdata = ptrType$3.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.equal = equal_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$3.nil);
			this.methods = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hasher_, keysize_, valuesize_, bucketsize_, flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hasher = $throwNilPointerError;
			this.keysize = 0;
			this.valuesize = 0;
			this.bucketsize = 0;
			this.flags = 0;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hasher = hasher_;
		this.keysize = keysize_;
		this.valuesize = valuesize_;
		this.bucketsize = bucketsize_;
		this.flags = flags_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offsetEmbed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$3.nil);
			this.typ = ptrType$1.nil;
			this.offsetEmbed = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offsetEmbed = offsetEmbed_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$3.nil);
			this.fields = sliceType$7.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$13.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$10.nil;
			this.index = sliceType$13.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	MapIter = $pkg.MapIter = $newType(0, $kindStruct, "reflect.MapIter", true, "reflect", true, function(m_, it_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Value.ptr(ptrType$1.nil, 0, 0);
			this.it = 0;
			return;
		}
		this.m = m_;
		this.it = it_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$3], [ptrType$2], true);
	sliceType$4 = $sliceType($String);
	ptrType$3 = $ptrType($Uint8);
	sliceType$5 = $sliceType(method);
	sliceType$6 = $sliceType(imethod);
	sliceType$7 = $sliceType(structField);
	ptrType$4 = $ptrType(uncommonType);
	ptrType$5 = $ptrType(nameData);
	structType$3 = $structType("reflect", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
	sliceType$8 = $sliceType(ptrType$2);
	sliceType$9 = $sliceType(Value);
	ptrType$6 = $ptrType(mapIter);
	ptrType$7 = $ptrType(funcType);
	sliceType$10 = $sliceType(Type);
	sliceType$11 = $sliceType(sliceType$8);
	ptrType$8 = $ptrType(interfaceType);
	ptrType$9 = $ptrType(imethod);
	sliceType$13 = $sliceType($Int);
	sliceType$14 = $sliceType(fieldScan);
	ptrType$10 = $ptrType(structType);
	sliceType$15 = $sliceType($Uint8);
	ptrType$14 = $ptrType(runtime.Func);
	ptrType$16 = $ptrType($UnsafePointer);
	sliceType$17 = $sliceType($Int32);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	funcType$5 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	ptrType$17 = $ptrType(structField);
	arrayType$9 = $arrayType($Uintptr, 2);
	ptrType$18 = $ptrType(MapIter);
	ptrType$19 = $ptrType(ValueError);
	init = function() {
		var used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, sliceType$5.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), new name.ptr(ptrType$3.nil), sliceType$6.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), new name.ptr(ptrType$3.nil), sliceType$7.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$3.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var _1, _i, _i$1, _i$2, _i$3, _key, _ref, _ref$1, _ref$2, _ref$3, dir, exported, exported$1, f, fields, i, i$1, i$2, i$3, i$4, i$5, imethods, in$1, m, m$1, m$2, methodSet, methods, offsetEmbed, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut, xcount;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), $throwNilPointerError, ptrType$3.nil, newNameOff($clone(newName(internalStr(typ.string), "", !!(typ.exported)), name)), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = sliceType$5.nil;
				i = 0;
				while (true) {
					if (!(i < $parseInt(methodSet.length))) { break; }
					m = methodSet[i];
					exported = internalStr(m.pkg) === "";
					if (!exported) {
						i = i + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", exported), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					i = i + (1) >> 0;
				}
				xcount = ((reflectMethods.$length << 16 >>> 16));
				i$1 = 0;
				while (true) {
					if (!(i$1 < $parseInt(methodSet.length))) { break; }
					m$1 = methodSet[i$1];
					exported$1 = internalStr(m$1.pkg) === "";
					if (exported$1) {
						i$1 = i$1 + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", exported$1), name)), newTypeOff(reflectType(m$1.typ)), 0, 0));
					i$1 = i$1 + (1) >> 0;
				}
				ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), xcount, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
				ut.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref = in$1;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i$2 = _i;
					((i$2 < 0 || i$2 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$2] = reflectType(params[i$2]));
					_i++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$1 = out;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$3 = _i$1;
					((i$3 < 0 || i$3 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$3] = reflectType(results[i$3]));
					_i$1++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$6, $parseInt(methods.length));
				_ref$2 = imethods;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$4 = _i$2;
					m$2 = methods[i$4];
					imethod.copy(((i$4 < 0 || i$4 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$4]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$2.name), "", internalStr(m$2.pkg) === ""), name)), newTypeOff(reflectType(m$2.typ))));
					_i$2++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", false), name), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$7, $parseInt(fields.length));
				_ref$3 = reflectFields;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$5 = _i$3;
					f = fields[i$5];
					offsetEmbed = ((i$5 >>> 0)) << 1 >>> 0;
					if (!!(f.embedded)) {
						offsetEmbed = (offsetEmbed | (1)) >>> 0;
					}
					structField.copy(((i$5 < 0 || i$5 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$5]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), !!(f.exported)), name), reflectType(f.typ), offsetEmbed));
					_i$3++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", false), name), reflectFields));
			}
		}
		return ((typ.reflectType));
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	uncommonType.ptr.prototype.exportedMethods = function() {
		var t;
		t = this;
		return $subslice(t._methods, 0, t.xcount, t.xcount);
	};
	uncommonType.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.uncommon = function() {
		var _entry, t;
		t = this;
		return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$4.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$3.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$5.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$3.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$5.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var n;
		n = this;
		return "";
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$3.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$5.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	newName = function(n, tag, exported) {
		var _key, b, exported, n, tag;
		b = $newDataPointer(0, ptrType$3);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$3.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, exported) };
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var c, strObj;
		c = new structType$3.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var $24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$24r = new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
			$s = 10; case 10: return $24r;
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$24r$1 = new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		$s = 12; case 12: return $24r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var $24r, _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var $24r, _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$24r = _r$2.zero();
			$s = 3; case 3: return $24r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$24r = $24r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 5; case 5: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$3.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var $24r, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$24r = $24r; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$8, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$8, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$8), $externalize(jsOut, sliceType$8), $externalize(variadic, $Bool)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var $24r, _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f.$24r = $24r; $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	makeInt = function(f, bits, t) {
		var _1, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			(ptr).$set(((bits.$low << 24 >> 24)));
		} else if (_1 === (4)) {
			(ptr).$set(((bits.$low << 16 >> 16)));
		} else if ((_1 === (2)) || (_1 === (5))) {
			(ptr).$set(((bits.$low >> 0)));
		} else if (_1 === (6)) {
			(ptr).$set((new $Int64(bits.$high, bits.$low)));
		} else if (_1 === (8)) {
			(ptr).$set(((bits.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(ptr).$set(((bits.$low << 16 >>> 16)));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			(ptr).$set(((bits.$low >>> 0)));
		} else if (_1 === (11)) {
			(ptr).$set((bits));
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f._1 = _1; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapassign = function(t, m, key, val) {
		var _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapIter.ptr.prototype.skipUntilValidKey = function() {
		var iter, k;
		iter = this;
		while (true) {
			if (!(iter.i < $parseInt(iter.keys.length))) { break; }
			k = iter.keys[iter.i];
			if (!(iter.m[$externalize($internalize(k, $String), $String)] === undefined)) {
				break;
			}
			iter.i = iter.i + (1) >> 0;
		}
	};
	mapIter.prototype.skipUntilValidKey = function() { return this.$val.skipUntilValidKey(); };
	mapiterinit = function(t, m) {
		var m, t;
		return (new mapIter.ptr(t, m, $keys(m), 0, null));
	};
	mapiterkey = function(it) {
		var $24r, _r, _r$1, _r$2, it, iter, k, kv, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; kv = $f.kv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = ($pointerOfStructConversion(it, ptrType$6));
		kv = null;
		if (!(iter.last === null)) {
			kv = iter.last;
		} else {
			iter.skipUntilValidKey();
			if (iter.i === $parseInt(iter.keys.length)) {
				$s = -1; return 0;
			}
			k = iter.keys[iter.i];
			kv = iter.m[$externalize($internalize(k, $String), $String)];
			iter.last = kv;
		}
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = ($newDataPointer(kv.k, _r$2));
		$s = 4; case 4: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.kv = kv; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiterelem = function(it) {
		var $24r, _r, _r$1, _r$2, it, iter, k, kv, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; kv = $f.kv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = ($pointerOfStructConversion(it, ptrType$6));
		kv = null;
		if (!(iter.last === null)) {
			kv = iter.last;
		} else {
			iter.skipUntilValidKey();
			if (iter.i === $parseInt(iter.keys.length)) {
				$s = -1; return 0;
			}
			k = iter.keys[iter.i];
			kv = iter.m[$externalize($internalize(k, $String), $String)];
			iter.last = kv;
		}
		_r = iter.t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = ($newDataPointer(kv.v, _r$2));
		$s = 4; case 4: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterelem }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.kv = kv; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var it, iter;
		iter = ($pointerOfStructConversion(it, ptrType$6));
		iter.last = null;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var $24r, $24r$1, _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		srcVal = $clone(v, Value).object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ if (_1 === (22)) { $s = 8; continue; }
			/* */ if (_1 === (25)) { $s = 9; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24)) || (_1 === (26))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (23)) { */ case 7:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 12; continue;
			/* } else if (_1 === (22)) { */ case 8:
				_r$2 = typ.Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_r$3 === 25) { */ case 13:
					_r$4 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 17:
						val = srcVal;
						/* break; */ $s = 5; continue;
					/* } */ case 18:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 5; continue;
				/* } */ case 14:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 12; continue;
			/* } else if (_1 === (25)) { */ case 9:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 12; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24)) || (_1 === (26))) { */ case 10:
				val = v.ptr;
				$s = 12; continue;
			/* } else { */ case 11:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 12:
		case 5:
		_r$6 = typ.common(); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$24r$1 = new Value.ptr(_r$6, (val), (((new flag(v.flag).ro() | ((v.flag & 128) >>> 0)) >>> 0) | ((_r$7 >>> 0))) >>> 0);
		$s = 24; case 24: return $24r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	methodReceiver = function(op, v, i) {
		var _$40, fn, i, m, m$1, ms, op, prop, rcvr, t, tt, v, x;
		_$40 = ptrType$1.nil;
		t = ptrType$7.nil;
		fn = 0;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (tt.rtype.typeOff(m.typ).kindType);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
		} else {
			ms = v.typ.exportedMethods();
			if (((i >>> 0)) >= ((ms.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (v.typ.typeOff(m$1.mtyp).kindType);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		return [_$40, t, fn];
	};
	valueInterface = function(v, safe) {
		var _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	makeMethodValue = function(op, v) {
		var $24r, _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8)));
		}; })(fn, rcvr));
		_r = $clone(v, Value).Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = new Value.ptr(_r, (fv), (new flag(v.flag).ro() | 19) >>> 0);
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$24r = $24r; $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var $24r, _1, _r, _r$1, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 8:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 9; continue; }
					_r$1 = t.Field(i).Type.Comparable(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (!_r$1) { */ case 10:
						$s = -1; return false;
					/* } */ case 11:
					i = i + (1) >> 0;
				/* } */ $s = 8; continue; case 9:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$24r = $24r; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var _i, _i$1, _r, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
		}
		methods = t.exportedMethods();
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$10, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$10, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		mt = _r;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), (fn), fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var _r, _r$1, _r$2, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				fl = (((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				if (dst.NumMethod() === 0) {
					(target).$set(x);
				} else {
					ifaceE2I(dst, x, target);
				}
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.call = function(op, in$1) {
		var $24r, _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$7.nil;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 512) >>> 0) === 0))) {
			_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			t = (v.typ.kindType);
			fn = ($clone(v, Value).object());
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.rtype.NumIn();
		if (isSlice) {
			if (!t.rtype.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.rtype.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.rtype.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($clone(x, Value).Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = $clone(((i < 0 || i >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i]), Value).Type();
			_tmp$1 = t.rtype.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!isSlice && t.rtype.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.rtype.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.rtype.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.rtype.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x$1]));
				xt$1 = $clone(x$2, Value).Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = $clone(slice, Value).Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = $clone(_r$8, Value).Set($clone(x$2, Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$9, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.rtype.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.rtype.NumOut();
		argsArray = new ($global.Array)(t.rtype.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.rtype.In(i$2);
			_r$9 = t.rtype.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = $clone(arg, Value).assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = $clone(_r$10, Value).object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		/* } */ $s = 21; continue; case 22:
		_r$13 = callHelper(new sliceType$3([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 29; continue; }
			/* */ if (_1 === (1)) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_1 === (0)) { */ case 29:
				$s = -1; return sliceType$9.nil;
			/* } else if (_1 === (1)) { */ case 30:
				_r$14 = makeValue(t.rtype.Out(0), wrapJsObject(t.rtype.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$24r = new sliceType$9([$clone(_r$14, Value)]);
				$s = 34; case 34: return $24r;
			/* } else { */ case 31:
				ret = $makeSlice(sliceType$9, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 35:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 36; continue; }
					i$3 = _i$2;
					_r$15 = makeValue(t.rtype.Out(i$3), wrapJsObject(t.rtype.Out(i$3), results[i$3]), 0); /* */ $s = 37; case 37: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i$3] = _r$15);
					_i$2++;
				/* } */ $s = 35; continue; case 36:
				$s = -1; return ret;
			/* } */ case 32:
		case 28:
		$s = -1; return sliceType$9.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$24r = $24r; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt($clone(v, Value).object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var $24r, _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, new flag(v.flag).ro()); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$24r = $24r; $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var $24r, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if (field.embedded()) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 16; case 16: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var $24r, $24r$1, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (((((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 10; case 10: return $24r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (((384 | new flag(v.flag).ro()) >>> 0) | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 11:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 12:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$24r$1 = _r$1;
				$s = 14; case 14: return $24r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((new flag(v.flag).ro() | 8) >>> 0) | 128) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), fl$2);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else if (_1 === (26)) {
			return $clone(v, Value).object() === 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt($clone(v, Value).object().length);
		} else if (_1 === (23)) {
			return $parseInt($clone(v, Value).object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($keys($clone(v, Value).object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var _1, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value), false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var $24r, $24r$1, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 8; case 8: return $24r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), new flag(v.flag).ro()); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r$1 = _r$1;
		$s = 10; case 10: return $24r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var $24r, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), new flag(v.flag).ro()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$24r = $24r; $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(ch, nb, val) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$11([new sliceType$8([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(ch, val, nb) {
		var _r, ch, comms, nb, selectRes, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$11([new sliceType$8([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	structField.ptr.prototype.offset = function() {
		var f;
		f = this;
		return f.offsetEmbed >>> 1 >>> 0;
	};
	structField.prototype.offset = function() { return this.$val.offset(); };
	structField.ptr.prototype.embedded = function() {
		var f;
		f = this;
		return !((((f.offsetEmbed & 1) >>> 0) === 0));
	};
	structField.prototype.embedded = function() { return this.$val.embedded(); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if (((k >> 0)) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa(((k >> 0)));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul(((t.size >> 0)), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var t;
		t = this;
		return ((t.align >> 0));
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return ((t.fieldAlign >> 0));
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var t, ut;
		t = this;
		ut = t.uncommon();
		if (ut === ptrType$4.nil) {
			return sliceType$5.nil;
		}
		return ut.exportedMethods();
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			return tt.NumMethod();
		}
		return t.exportedMethods().$length;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var $24r, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, t, tt, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; i = $f.i; m = $f.m; name$1 = $f.name$1; ok = $f.ok; p = $f.p; t = $f.t; tt = $f.tt; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$4.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
		}
		_ref = ut.exportedMethods();
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), method);
			/* */ if ($clone(t.nameOff(p.name), name).name() === name$1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(t.nameOff(p.name), name).name() === name$1) { */ case 3:
				_r = t.Method(i); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$2 = $clone(_r, Method);
				_tmp$3 = true;
				Method.copy(m, _tmp$2);
				ok = _tmp$3;
				$24r = [m, ok];
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.MethodByName }; } $f.$24r = $24r; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.i = i; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.t = t; $f.tt = tt; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$4.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.hasName = function() {
		var t;
		t = this;
		return !((((t.tflag & 4) >>> 0) === 0));
	};
	rtype.prototype.hasName = function() { return this.$val.hasName(); };
	rtype.ptr.prototype.Name = function() {
		var i, s, t;
		t = this;
		if (!t.hasName()) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0 && !((s.charCodeAt(i) === 46)))) { break; }
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type " + t.String()));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type " + t.String()));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var $24r, _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f.$24r = $24r; $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var $24r, _r, name$1, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; name$1 = $f.name$1; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f.$24r = $24r; $f._r = _r; $f.name$1 = name$1; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var $24r, _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f.$24r = $24r; $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type " + t.String()));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type " + t.String()));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa(((d >> 0)));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		if (!$clone(pname, name).isExported()) {
			m.PkgPath = $clone(pname, name).pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$8.nil) {
			return [m, ok];
		}
		p = ptrType$9.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if ($clone(t.rtype.nameOff(p.name), name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructTag.prototype.Get = function(key) {
		var _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var f, i, p, t, tag, x;
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		f.Name = $clone(p.name, name).name();
		f.Anonymous = p.embedded();
		if (!$clone(p.name, name).isExported()) {
			f.PkgPath = $clone(t.pkgPath, name).name();
		}
		tag = $clone(p.name, name).tag();
		if (!(tag === "")) {
			f.Tag = (tag);
		}
		f.Offset = p.offset();
		f.Index = new sliceType$13([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		ok = false;
		t = this;
		current = new sliceType$14([]);
		next = new sliceType$14([new fieldScan.ptr(t, sliceType$13.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$10.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				if ((_entry = visited[ptrType$10.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) {
					_i++;
					/* continue; */ $s = 3; continue;
				}
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 5:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					fname = $clone(f.name, name).name();
					ntyp = ptrType$1.nil;
					/* */ if (f.embedded()) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (f.embedded()) { */ case 7:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 9; continue; }
						/* */ $s = 10; continue;
						/* if (ntyp.Kind() === 22) { */ case 9:
							_r = ntyp.Elem().common(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 10:
					/* } */ case 8:
					_r$1 = match(fname); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_r$1) { */ case 12:
						if ((_entry$1 = count[ptrType$10.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
						}
						StructField.copy(result, t$1.Field(i));
						result.Index = sliceType$13.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 5; continue;
					/* } */ case 13:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 5; continue;
					}
					styp = (ntyp.kindType);
					if ((_entry$2 = nextCount[ptrType$10.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 5; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$10.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$10.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$13.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 5; continue; case 6:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var $24r, _i, _r, _ref, _tmp, _tmp$1, _tuple, f, hasEmbeds, i, name$1, present, t, tf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasEmbeds = $f.hasEmbeds; i = $f.i; name$1 = $f.name$1; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		present = false;
		t = this;
		hasEmbeds = false;
		if (!(name$1[0] === "")) {
			_ref = t.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				if ($clone(tf.name, name).name() === name$1[0]) {
					_tmp = $clone(t.Field(i), StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
				}
				if (tf.embedded()) {
					hasEmbeds = true;
				}
				_i++;
			}
		}
		if (!hasEmbeds) {
			$s = -1; return [f, present];
		}
		_r = t.FieldByNameFunc((function(name$1) { return function(s) {
			var s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$24r = [f, present];
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f.$24r = $24r; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasEmbeds = hasEmbeds; $f.i = i; $f.name$1 = name$1; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var $24r, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r || implements$1(uu, t);
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.AssignableTo }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var $24r, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = !(_r === $throwNilPointerError);
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tmName = $clone(t.rtype.nameOff(tm.name), name);
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				vmName = $clone(V.nameOff(vm.name), name);
				if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					if (!$clone(tmName, name).isExported()) {
						tmPkgPath = $clone(tmName, name).pkgPath();
						if (tmPkgPath === "") {
							tmPkgPath = $clone(t.pkgPath, name).name();
						}
						vmPkgPath = $clone(vmName, name).pkgPath();
						if (vmPkgPath === "") {
							vmPkgPath = $clone(v.pkgPath, name).name();
						}
						if (!(tmPkgPath === vmPkgPath)) {
							j = j + (1) >> 0;
							continue;
						}
					}
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$4.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			vmName$1 = $clone(V.nameOff(vm$1.name), name);
			if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				if (!$clone(tmName$1, name).isExported()) {
					tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
					if (tmPkgPath$1 === "") {
						tmPkgPath$1 = $clone(t.pkgPath, name).name();
					}
					vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
					if (vmPkgPath$1 === "") {
						vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
					}
					if (!(tmPkgPath$1 === vmPkgPath$1)) {
						j$1 = j$1 + (1) >> 0;
						continue;
					}
				}
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	specialChannelAssignability = function(T, V) {
		var $24r, T, V, _r, _v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; T = $f.T; V = $f.V; _r = $f._r; _v = $f._v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!((V.ChanDir() === 3) && (T.Name() === "" || V.Name() === ""))) { _v = false; $s = 1; continue s; }
		_r = haveIdenticalType(T.Elem(), V.Elem(), true); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$24r = _v;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: specialChannelAssignability }; } $f.$24r = $24r; $f.T = T; $f.V = V; $f._r = _r; $f._v = _v; $f.$s = $s; $f.$r = $r; return $f;
	};
	directlyAssignable = function(T, V) {
		var $24r, T, V, _r, _r$1, _v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; T = $f.T; V = $f.V; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (T.hasName() && V.hasName() || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		if (!(T.Kind() === 18)) { _v = false; $s = 3; continue s; }
		_r = specialChannelAssignability(T, V); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return true;
		/* } */ case 2:
		_r$1 = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 6; case 6: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: directlyAssignable }; } $f.$24r = $24r; $f.T = T; $f.V = V; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var $24r, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; T = $f.T; V = $f.V; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; cmpTags = $f.cmpTags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
		_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$2 === _r$3)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$24r = _r$6;
		$s = 11; case 11: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalType }; } $f.$24r = $24r; $f.T = T; $f.V = V; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f.cmpTags = cmpTags; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var $24r, $24r$1, $24r$2, $24r$3, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _v, _v$1, _v$2, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; T = $f.T; V = $f.V; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; cmpTags = $f.cmpTags; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; kind = $f.kind; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; tf = $f.tf; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; vf = $f.vf; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$24r = _v;
				$s = 12; case 12: return $24r;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.ChanDir() === T.ChanDir())) { _v$1 = false; $s = 13; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 13:
				$24r$1 = _v$1;
				$s = 15; case 15: return $24r$1;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 16:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 17; continue; }
					_r$2 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (!_r$2) { */ case 18:
						$s = -1; return false;
					/* } */ case 19:
					i = i + (1) >> 0;
				/* } */ $s = 16; continue; case 17:
				i$1 = 0;
				/* while (true) { */ case 21:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 22; continue; }
					_r$3 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (!_r$3) { */ case 23:
						$s = -1; return false;
					/* } */ case 24:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 21; continue; case 22:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$4 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				if (!(_r$4)) { _v$2 = false; $s = 26; continue s; }
				_r$5 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_v$2 = _r$5; case 26:
				$24r$2 = _v$2;
				$s = 29; case 29: return $24r$2;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$24r$3 = _r$6;
				$s = 31; case 31: return $24r$3;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				if (!($clone(t$2.pkgPath, name).name() === $clone(v$2.pkgPath, name).name())) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 32:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$7 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 36; case 36: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					/* */ if (!_r$7) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (!_r$7) { */ case 34:
						$s = -1; return false;
					/* } */ case 35:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offsetEmbed === vf.offsetEmbed))) {
						$s = -1; return false;
					}
					_i++;
				/* } */ $s = 32; continue; case 33:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalUnderlyingType }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f.T = T; $f.V = V; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.cmpTags = cmpTags; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.kind = kind; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.tf = tf; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.vf = vf; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	flag.prototype.ro = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0))) {
			return 32;
		}
		return 0;
	};
	$ptrType(flag).prototype.ro = function() { return new flag(this.$get()).ro(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	methodName = function() {
		var _tuple, f, pc;
		_tuple = runtime.Caller(2);
		pc = _tuple[0];
		f = runtime.FuncForPC(pc);
		if (f === ptrType$14.nil) {
			return "unknown method";
		}
		return f.Name();
	};
	methodNameSkip = function() {
		var _tuple, f, pc;
		_tuple = runtime.Caller(3);
		pc = _tuple[0];
		f = runtime.FuncForPC(pc);
		if (f === ptrType$14.nil) {
			return "unknown method";
		}
		return f.Name();
	};
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((((((f & 31) >>> 0) >>> 0)) === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if ((f === 0) || !((((f & 96) >>> 0) === 0))) {
			new flag(f).mustBeExportedSlow();
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeExportedSlow = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodNameSkip(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodNameSkip() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExportedSlow = function() { return new flag(this.$get()).mustBeExportedSlow(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0)) || (((f & 256) >>> 0) === 0)) {
			new flag(f).mustBeAssignableSlow();
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	flag.prototype.mustBeAssignableSlow = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodNameSkip(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodNameSkip() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodNameSkip() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignableSlow = function() { return new flag(this.$get()).mustBeAssignableSlow(); };
	Value.ptr.prototype.Addr = function() {
		var fl, v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		fl = (v.flag & 96) >>> 0;
		return new Value.ptr(v.typ.ptrTo(), v.ptr, (fl | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(1);
		return (v.ptr).$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var $24r, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$24r = $24r; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var $24r, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f.$24r = $24r; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return ((x = (v.ptr).$get(), new $Complex128(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var $24r, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (i > 0) { */ case 7:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 11; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
					if ($clone(v, Value).IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = $clone(v, Value).Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 10:
			/* } */ case 8:
			_r$3 = $clone(v, Value).Field(x); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f.$24r = $24r; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var $24r, _r, _r$1, _tuple, f, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var $24r, _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return ((v.ptr).$get());
		} else if (_1 === (14)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (3)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (4)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (5)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (6)) {
			return (p).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var $24r, _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface($clone(v, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$24r = i;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f.$24r = $24r; $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.IsZero = function() {
		var _1, _r, _r$1, _r$2, _r$3, c, i, i$1, v, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; i = $f.i; i$1 = $f.i$1; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			_1 = new flag(v.flag).kind();
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 3; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 4; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 5; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 6; continue; }
			/* */ if (_1 === (17)) { $s = 7; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 8; continue; }
			/* */ if (_1 === (24)) { $s = 9; continue; }
			/* */ if (_1 === (25)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (1)) { */ case 2:
				$s = -1; return !$clone(v, Value).Bool();
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 3:
				$s = -1; return (x = $clone(v, Value).Int(), (x.$high === 0 && x.$low === 0));
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 4:
				$s = -1; return (x$1 = $clone(v, Value).Uint(), (x$1.$high === 0 && x$1.$low === 0));
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 5:
				$s = -1; return (x$2 = math.Float64bits($clone(v, Value).Float()), (x$2.$high === 0 && x$2.$low === 0));
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 6:
				c = $clone(v, Value).Complex();
				$s = -1; return (x$3 = math.Float64bits(c.$real), (x$3.$high === 0 && x$3.$low === 0)) && (x$4 = math.Float64bits(c.$imag), (x$4.$high === 0 && x$4.$low === 0));
			/* } else if (_1 === (17)) { */ case 7:
				i = 0;
				/* while (true) { */ case 13:
					/* if (!(i < $clone(v, Value).Len())) { break; } */ if(!(i < $clone(v, Value).Len())) { $s = 14; continue; }
					_r = $clone(v, Value).Index(i); /* */ $s = 17; case 17: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r$1 = $clone(_r, Value).IsZero(); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (!_r$1) { */ case 15:
						$s = -1; return false;
					/* } */ case 16:
					i = i + (1) >> 0;
				/* } */ $s = 13; continue; case 14:
				$s = -1; return true;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 8:
				$s = -1; return $clone(v, Value).IsNil();
			/* } else if (_1 === (24)) { */ case 9:
				$s = -1; return $clone(v, Value).Len() === 0;
			/* } else if (_1 === (25)) { */ case 10:
				i$1 = 0;
				/* while (true) { */ case 19:
					/* if (!(i$1 < $clone(v, Value).NumField())) { break; } */ if(!(i$1 < $clone(v, Value).NumField())) { $s = 20; continue; }
					_r$2 = $clone(v, Value).Field(i$1); /* */ $s = 23; case 23: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = $clone(_r$2, Value).IsZero(); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!_r$3) { */ case 21:
						$s = -1; return false;
					/* } */ case 22:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 19; continue; case 20:
				$s = -1; return true;
			/* } else { */ case 11:
				$panic(new ValueError.ptr("reflect.Value.IsZero", $clone(v, Value).Kind()));
			/* } */ case 12:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.IsZero }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.i = i; $f.i$1 = i$1; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.IsZero = function() { return this.$val.IsZero(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var _r, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = new flag((((v.flag | key.flag) >>> 0))).ro();
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		$s = -1; return copyVal(typ, fl, e);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f._r = _r; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var _r, a, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (new flag(v.flag).ro() | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$9, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = copyVal(keyType, fl, key));
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f._r = _r; $f.a = a; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	MapIter.ptr.prototype.Key = function() {
		var $24r, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, it, ktype, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; ktype = $f.ktype; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		it = this;
		if (it.it === 0) {
			$panic(new $String("MapIter.Key called before Next"));
		}
		_r = mapiterkey(it.it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 0) { */ case 1:
			$panic(new $String("MapIter.Key called on exhausted iterator"));
		/* } */ case 2:
		t = (it.m.typ.kindType);
		ktype = t.key;
		_arg = ktype;
		_arg$1 = (new flag(it.m.flag).ro() | ((ktype.Kind() >>> 0))) >>> 0;
		_r$1 = mapiterkey(it.it); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$2 = _r$1;
		_r$2 = copyVal(_arg, _arg$1, _arg$2); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 6; case 6: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MapIter.ptr.prototype.Key }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.ktype = ktype; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	MapIter.prototype.Key = function() { return this.$val.Key(); };
	MapIter.ptr.prototype.Value = function() {
		var $24r, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, it, t, vtype, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; t = $f.t; vtype = $f.vtype; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		it = this;
		if (it.it === 0) {
			$panic(new $String("MapIter.Value called before Next"));
		}
		_r = mapiterkey(it.it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 0) { */ case 1:
			$panic(new $String("MapIter.Value called on exhausted iterator"));
		/* } */ case 2:
		t = (it.m.typ.kindType);
		vtype = t.elem;
		_arg = vtype;
		_arg$1 = (new flag(it.m.flag).ro() | ((vtype.Kind() >>> 0))) >>> 0;
		_r$1 = mapiterelem(it.it); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$2 = _r$1;
		_r$2 = copyVal(_arg, _arg$1, _arg$2); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 6; case 6: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MapIter.ptr.prototype.Value }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.t = t; $f.vtype = vtype; $f.$s = $s; $f.$r = $r; return $f;
	};
	MapIter.prototype.Value = function() { return this.$val.Value(); };
	MapIter.ptr.prototype.Next = function() {
		var $24r, _r, _r$1, it, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; it = $f.it; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		it = this;
		/* */ if (it.it === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (it.it === 0) { */ case 1:
			it.it = mapiterinit(it.m.typ, $clone(it.m, Value).pointer());
			$s = 3; continue;
		/* } else { */ case 2:
			_r = mapiterkey(it.it); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 0) { */ case 4:
				$panic(new $String("MapIter.Next called on exhausted iterator"));
			/* } */ case 5:
			mapiternext(it.it);
		/* } */ case 3:
		_r$1 = mapiterkey(it.it); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = !(_r$1 === 0);
		$s = 8; case 8: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MapIter.ptr.prototype.Next }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f.it = it; $f.$s = $s; $f.$r = $r; return $f;
	};
	MapIter.prototype.Next = function() { return this.$val.Next(); };
	Value.ptr.prototype.MapRange = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(21);
		return new MapIter.ptr($clone(v, Value), 0);
	};
	Value.prototype.MapRange = function() { return this.$val.MapRange(); };
	copyVal = function(typ, fl, ptr) {
		var c, fl, ptr, typ;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, ptr);
			return new Value.ptr(typ, c, (fl | 128) >>> 0);
		}
		return new Value.ptr(typ, (ptr).$get(), fl);
	};
	Value.ptr.prototype.Method = function(i) {
		var fl, i, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0)) || ((i >>> 0)) >= ((v.typ.NumMethod() >>> 0))) {
			$panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && $clone(v, Value).IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (new flag(v.flag).ro() | (((v.flag & 128) >>> 0))) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | ((((((i >>> 0)) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		return new Value.ptr(v.typ, v.ptr, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var _r, _tuple, m, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; m = $f.m; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return $clone(v, Value).Method(m.Index);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MethodByName }; } $f._r = _r; $f._tuple = _tuple; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var $24r, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$24r = [x, ok];
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f.$24r = $24r; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, ((t.Kind() >>> 0)));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		_r = chanrecv($clone(v, Value).pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var $24r, _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = ((x.$ptr_ptr || (x.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x))));
		}
		_r$1 = chansend($clone(v, Value).pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$24r = selected;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		(v.ptr).$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		(v.ptr).$set(x);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			(v.ptr).$set((new $Complex64(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			(v.ptr).$set(($fround(x)));
		} else if (_1 === (14)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (3)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24)));
		} else if (_1 === (4)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16)));
		} else if (_1 === (5)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (6)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, elem) {
		var _r, _r$1, e, elem, k, key, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; e = $f.e; elem = $f.elem; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		if (elem.typ === ptrType$1.nil) {
			mapdelete(v.typ, $clone(v, Value).pointer(), k);
			$s = -1; return;
		}
		new flag(elem.flag).mustBeExported();
		_r$1 = $clone(elem, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		elem = _r$1;
		e = 0;
		if (!((((elem.flag & 128) >>> 0) === 0))) {
			e = elem.ptr;
		} else {
			e = ((elem.$ptr_ptr || (elem.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, elem))));
		}
		$r = mapassign(v.typ, $clone(v, Value).pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.elem = elem; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, elem) { return this.$val.SetMapIndex(key, elem); };
	Value.ptr.prototype.SetUint = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (8)) {
			(v.ptr).$set(((x.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(v.ptr).$set(((x.$low << 16 >>> 16)));
		} else if (_1 === (10)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (11)) {
			(v.ptr).$set(x);
		} else if (_1 === (12)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		(v.ptr).$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		(v.ptr).$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var $24r, _1, _r, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _1 = $f._1; _r = $f._r; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (0)) {
			$s = -1; return "<invalid Value>";
		} else if (_1 === (24)) {
			$s = -1; return (v.ptr).$get();
		}
		_r = $clone(v, Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = "<" + _r + " Value>";
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$24r = $24r; $f._1 = _1; $f._r = _r; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var $24r, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$24r = [x, ok];
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f.$24r = $24r; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var $24r, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f.$24r = $24r; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var f, i, m, m$1, ms, tt, v, x;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			return v.typ;
		}
		i = ((v.flag >> 0)) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (((i >>> 0)) >= ((tt.methods.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			return v.typ.typeOff(m.typ);
		}
		ms = v.typ.exportedMethods();
		if (((i >>> 0)) >= ((ms.$length >>> 0))) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
		return v.typ.typeOff(m$1.mtyp);
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (8)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (9)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (10)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (11)) {
			return (p).$get();
		} else if (_1 === (12)) {
			return ((x = (p).$get(), new $Uint64(0, x.constructor === Number ? x : 1)));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return (v.ptr);
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	New = function(typ) {
		var fl, ptr, t, typ;
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		t = $assertType(typ, ptrType$1);
		ptr = unsafe_New(t);
		fl = 22;
		return new Value.ptr(t.ptrTo(), ptr, fl);
	};
	$pkg.New = New;
	Value.ptr.prototype.Convert = function(t) {
		var $24r, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op($clone(v, Value), t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$24r = _r$4;
		$s = 10; case 10: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _v, _v$1, _v$2, _v$3, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ if (_1 === (18)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
				}
				$s = 9; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
				}
				$s = 9; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
				}
				$s = 9; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
				}
				$s = 9; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 12; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 12:
				/* */ if (_v) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v) { */ case 10:
						_r$1 = dst.Elem().Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
						}
					case 14:
				/* } */ case 11:
				$s = 9; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 18; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 18:
				/* */ if (_v$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_v$1) { */ case 16:
						_r$3 = src.Elem().Kind(); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
						}
					case 20:
				/* } */ case 17:
				$s = 9; continue;
			/* } else if (_1 === (18)) { */ case 8:
				if (!(dst.Kind() === 18)) { _v$2 = false; $s = 24; continue s; }
				_r$4 = specialChannelAssignability(dst, src); /* */ $s = 25; case 25: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_v$2 = _r$4; case 24:
				/* */ if (_v$2) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (_v$2) { */ case 22:
					$s = -1; return cvtDirect;
				/* } */ case 23:
			/* } */ case 9:
		case 1:
		_r$5 = haveIdenticalUnderlyingType(dst, src, false); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ if (_r$5) { $s = 26; continue; }
		/* */ $s = 27; continue;
		/* if (_r$5) { */ case 26:
			$s = -1; return cvtDirect;
		/* } */ case 27:
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$3 = false; $s = 31; continue s; }
		_r$6 = dst.Elem().common(); /* */ $s = 32; case 32: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg = _r$6;
		_r$7 = src.Elem().common(); /* */ $s = 33; case 33: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_arg$1 = _r$7;
		_r$8 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 34; case 34: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_v$3 = _r$8; case 31:
		/* */ if (_v$3) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (_v$3) { */ case 29:
			$s = -1; return cvtDirect;
		/* } */ case 30:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
			}
			$s = -1; return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			(ptr).$set(($fround(v)));
		} else if (_1 === (8)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat32 = function(f, v, t) {
		var _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		(ptr).$set(v);
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat32 }; } $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			(ptr).$set((new $Complex64(v.$real, v.$imag)));
		} else if (_1 === (16)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var _r, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ret = _r;
		$clone(ret, Value).SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f._r = _r; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var _r, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ret = _r;
		$r = $clone(ret, Value).SetBytes(v); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f._r = _r; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var _r, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ret = _r;
		$r = $clone(ret, Value).setRunes(v); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f._r = _r; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var $24r, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = $clone(v, Value).Int(), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var $24r, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), $clone(v, Value).Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var $24r, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = (new $Int64(0, $clone(v, Value).Float())), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var $24r, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), (new $Uint64(0, $clone(v, Value).Float())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var $24r, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Int())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var $24r, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Uint())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var $24r, $24r$1, _r, _r$1, _r$2, _r$3, _v, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _v = $f._v; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(v, Value).Type().Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r === 13)) { _v = false; $s = 3; continue s; }
		_r$1 = t.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1 === 13; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_r$2 = makeFloat32(new flag(v.flag).ro(), (v.ptr).$get(), t); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$24r = _r$2;
			$s = 7; case 7: return $24r;
		/* } */ case 2:
		_r$3 = makeFloat(new flag(v.flag).ro(), $clone(v, Value).Float(), t); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r$1 = _r$3;
		$s = 9; case 9: return $24r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._v = _v; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var $24r, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeComplex(new flag(v.flag).ro(), $clone(v, Value).Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var $24r, _r, s, t, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; s = $f.s; t = $f.t; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = "\xEF\xBF\xBD";
		x = $clone(v, Value).Int();
		if ((x$1 = (new $Int64(0, (((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)))), (x$1.$high === x.$high && x$1.$low === x.$low))) {
			s = ($encodeRune((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0))));
		}
		_r = makeString(new flag(v.flag).ro(), s, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f.$24r = $24r; $f._r = _r; $f.s = s; $f.t = t; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var $24r, _r, s, t, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; s = $f.s; t = $f.t; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = "\xEF\xBF\xBD";
		x = $clone(v, Value).Uint();
		if ((x$1 = (new $Uint64(0, ((x.$low >> 0)))), (x$1.$high === x.$high && x$1.$low === x.$low))) {
			s = ($encodeRune(((x.$low >> 0))));
		}
		_r = makeString(new flag(v.flag).ro(), s, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f.$24r = $24r; $f._r = _r; $f.s = s; $f.t = t; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($bytesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$15($stringToBytes(_r)));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($runesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$17($stringToRunes(_r)));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var $24r, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			(target).$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$24r = new Value.ptr(_r$4, target, (((new flag(v.flag).ro() | 128) >>> 0) | 20) >>> 0);
		$s = 9; case 9: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var $24r, _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($clone(v, Value).IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(v, Value).IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (new flag(v.flag).ro())) >>> 0;
			$s = -1; return ret;
		/* } */ case 2:
		_r$1 = $clone(v, Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I($clone(_r$1, Value), typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 6; case 6: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$4.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}];
	ptrType$7.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int, $String], [ptrType$3], false)}, {prop: "nameLen", name: "nameLen", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "reflect", typ: $funcType([], [$Int], false)}];
	ptrType$6.methods = [{prop: "skipUntilValidKey", name: "skipUntilValidKey", pkg: "reflect", typ: $funcType([], [], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$4], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "hasName", name: "hasName", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "gcSlice", name: "gcSlice", pkg: "reflect", typ: $funcType([$Uintptr, $Uintptr], [sliceType$15], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$17.methods = [{prop: "offset", name: "offset", pkg: "reflect", typ: $funcType([], [$Uintptr], false)}, {prop: "embedded", name: "embedded", pkg: "reflect", typ: $funcType([], [$Bool], false)}];
	ptrType$10.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$2], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$9], [sliceType$9], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$9], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$15], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$17], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "MapRange", name: "MapRange", pkg: "", typ: $funcType([], [ptrType$18], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$17], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "ro", name: "ro", pkg: "reflect", typ: $funcType([], [flag], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeExportedSlow", name: "mustBeExportedSlow", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignableSlow", name: "mustBeAssignableSlow", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$19.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$18.methods = [{prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([], [$Bool], false)}];
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "xcount", name: "xcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", embedded: false, exported: false, typ: sliceType$5, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", embedded: false, exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", embedded: false, exported: false, typ: ptrType$3, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("reflect", [{prop: "t", name: "t", embedded: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "last", name: "last", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$4], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", embedded: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "equal", name: "equal", embedded: false, exported: false, typ: funcType$4, tag: ""}, {prop: "gcdata", name: "gcdata", embedded: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "str", name: "str", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", embedded: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", embedded: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", embedded: false, exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", embedded: false, exported: false, typ: sliceType$6, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "key", name: "key", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hasher", name: "hasher", embedded: false, exported: false, typ: funcType$5, tag: ""}, {prop: "keysize", name: "keysize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "flags", name: "flags", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offsetEmbed", name: "offsetEmbed", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", embedded: false, exported: false, typ: sliceType$7, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", embedded: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", embedded: false, exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", embedded: false, exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: sliceType$13, tag: ""}, {prop: "Anonymous", name: "Anonymous", embedded: false, exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$10, tag: ""}, {prop: "index", name: "index", embedded: false, exported: false, typ: sliceType$13, tag: ""}]);
	Value.init("reflect", [{prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", embedded: true, exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", embedded: false, exported: true, typ: Kind, tag: ""}]);
	MapIter.init("reflect", [{prop: "m", name: "m", embedded: false, exported: false, typ: Value, tag: ""}, {prop: "it", name: "it", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unsafeheader.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		initialized = false;
		uncommonTypeMap = {};
		nameMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		jsObjectPtr = reflectType($jsObjectPtr);
		kindNames = new sliceType$4(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, reflectlite, insertionSort, swapRange, Stable, stable, symMerge, rotate;
	reflectlite = $packages["internal/reflectlite"];
	insertionSort = function(data, a, b) {
		var _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	swapRange = function(data, a, b, n) {
		var a, b, data, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; b = $f.b; data = $f.data; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			$r = data.Swap(a + i >> 0, b + i >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: swapRange }; } $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Stable = function(data) {
		var _arg, _arg$1, _r, data, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; data = $f.data; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = data;
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		$r = stable(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stable }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.data = data; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stable = Stable;
	stable = function(data, n) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, blockSize, data, m, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; a = $f.a; b = $f.b; blockSize = $f.blockSize; data = $f.data; m = $f.m; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		blockSize = 20;
		_tmp = 0;
		_tmp$1 = blockSize;
		a = _tmp;
		b = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(b <= n)) { break; } */ if(!(b <= n)) { $s = 2; continue; }
			$r = insertionSort(data, a, b); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			a = b;
			b = b + (blockSize) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = insertionSort(data, a, n); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 5:
			/* if (!(blockSize < n)) { break; } */ if(!(blockSize < n)) { $s = 6; continue; }
			_tmp$2 = 0;
			_tmp$3 = $imul(2, blockSize);
			a = _tmp$2;
			b = _tmp$3;
			/* while (true) { */ case 7:
				/* if (!(b <= n)) { break; } */ if(!(b <= n)) { $s = 8; continue; }
				$r = symMerge(data, a, a + blockSize >> 0, b); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = b;
				b = b + (($imul(2, blockSize))) >> 0;
			/* } */ $s = 7; continue; case 8:
			m = a + blockSize >> 0;
			/* */ if (m < n) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (m < n) { */ case 10:
				$r = symMerge(data, a, m, n); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
			blockSize = $imul(blockSize, (2));
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stable }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.a = a; $f.b = b; $f.blockSize = blockSize; $f.data = data; $f.m = m; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	symMerge = function(data, a, m, b) {
		var _r, _r$1, _r$2, _tmp, _tmp$1, a, b, c, data, end, h, h$1, i, i$1, j, j$1, k, k$1, m, mid, n, p, r, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; b = $f.b; c = $f.c; data = $f.data; end = $f.end; h = $f.h; h$1 = $f.h$1; i = $f.i; i$1 = $f.i$1; j = $f.j; j$1 = $f.j$1; k = $f.k; k$1 = $f.k$1; m = $f.m; mid = $f.mid; n = $f.n; p = $f.p; r = $f.r; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ((m - a >> 0) === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((m - a >> 0) === 1) { */ case 1:
			i = m;
			j = b;
			/* while (true) { */ case 3:
				/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 4; continue; }
				h = ((((((i + j >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
				_r = data.Less(h, a); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_r) { */ case 5:
					i = h + 1 >> 0;
					$s = 7; continue;
				/* } else { */ case 6:
					j = h;
				/* } */ case 7:
			/* } */ $s = 3; continue; case 4:
			k = a;
			/* while (true) { */ case 9:
				/* if (!(k < (i - 1 >> 0))) { break; } */ if(!(k < (i - 1 >> 0))) { $s = 10; continue; }
				$r = data.Swap(k, k + 1 >> 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				k = k + (1) >> 0;
			/* } */ $s = 9; continue; case 10:
			$s = -1; return;
		/* } */ case 2:
		/* */ if ((b - m >> 0) === 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - m >> 0) === 1) { */ case 12:
			i$1 = a;
			j$1 = m;
			/* while (true) { */ case 14:
				/* if (!(i$1 < j$1)) { break; } */ if(!(i$1 < j$1)) { $s = 15; continue; }
				h$1 = ((((((i$1 + j$1 >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
				_r$1 = data.Less(m, h$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!_r$1) { */ case 16:
					i$1 = h$1 + 1 >> 0;
					$s = 18; continue;
				/* } else { */ case 17:
					j$1 = h$1;
				/* } */ case 18:
			/* } */ $s = 14; continue; case 15:
			k$1 = m;
			/* while (true) { */ case 20:
				/* if (!(k$1 > i$1)) { break; } */ if(!(k$1 > i$1)) { $s = 21; continue; }
				$r = data.Swap(k$1, k$1 - 1 >> 0); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				k$1 = k$1 - (1) >> 0;
			/* } */ $s = 20; continue; case 21:
			$s = -1; return;
		/* } */ case 13:
		mid = ((((((a + b >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
		n = mid + m >> 0;
		_tmp = 0;
		_tmp$1 = 0;
		start = _tmp;
		r = _tmp$1;
		if (m > mid) {
			start = n - b >> 0;
			r = mid;
		} else {
			start = a;
			r = m;
		}
		p = n - 1 >> 0;
		/* while (true) { */ case 23:
			/* if (!(start < r)) { break; } */ if(!(start < r)) { $s = 24; continue; }
			c = ((((((start + r >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
			_r$2 = data.Less(p - c >> 0, c); /* */ $s = 28; case 28: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (!_r$2) { */ case 25:
				start = c + 1 >> 0;
				$s = 27; continue;
			/* } else { */ case 26:
				r = c;
			/* } */ case 27:
		/* } */ $s = 23; continue; case 24:
		end = n - start >> 0;
		/* */ if (start < m && m < end) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (start < m && m < end) { */ case 29:
			$r = rotate(data, start, m, end); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 30:
		/* */ if (a < start && start < mid) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (a < start && start < mid) { */ case 32:
			$r = symMerge(data, a, start, mid); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 33:
		/* */ if (mid < end && end < b) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (mid < end && end < b) { */ case 35:
			$r = symMerge(data, mid, end, b); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: symMerge }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.end = end; $f.h = h; $f.h$1 = h$1; $f.i = i; $f.i$1 = i$1; $f.j = j; $f.j$1 = j$1; $f.k = k; $f.k$1 = k$1; $f.m = m; $f.mid = mid; $f.n = n; $f.p = p; $f.r = r; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	rotate = function(data, a, m, b) {
		var a, b, data, i, j, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = m - a >> 0;
		j = b - m >> 0;
		/* while (true) { */ case 1:
			/* if (!(!((i === j)))) { break; } */ if(!(!((i === j)))) { $s = 2; continue; }
			/* */ if (i > j) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > j) { */ case 3:
				$r = swapRange(data, m - i >> 0, m, j); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i - (j) >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				$r = swapRange(data, m - i >> 0, (m + j >> 0) - i >> 0, i); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (i) >> 0;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		$r = swapRange(data, m - i >> 0, m, i); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rotate }; } $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflectlite.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/fmtsort"] = (function() {
	var $pkg = {}, $init, reflect, sort, SortedMap, ptrType, sliceType, Sort, compare, nilCompare, floatCompare, isNaN;
	reflect = $packages["reflect"];
	sort = $packages["sort"];
	SortedMap = $pkg.SortedMap = $newType(0, $kindStruct, "fmtsort.SortedMap", true, "internal/fmtsort", true, function(Key_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Key = sliceType.nil;
			this.Value = sliceType.nil;
			return;
		}
		this.Key = Key_;
		this.Value = Value_;
	});
	ptrType = $ptrType(SortedMap);
	sliceType = $sliceType(reflect.Value);
	SortedMap.ptr.prototype.Len = function() {
		var o;
		o = this;
		return o.Key.$length;
	};
	SortedMap.prototype.Len = function() { return this.$val.Len(); };
	SortedMap.ptr.prototype.Less = function(i, j) {
		var $24r, _r, i, j, o, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; i = $f.i; j = $f.j; o = $f.o; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		o = this;
		_r = compare($clone((x = o.Key, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), reflect.Value), $clone((x$1 = o.Key, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j])), reflect.Value)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r < 0;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SortedMap.ptr.prototype.Less }; } $f.$24r = $24r; $f._r = _r; $f.i = i; $f.j = j; $f.o = o; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	SortedMap.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	SortedMap.ptr.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, i, j, o, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		o = this;
		_tmp = (x = o.Key, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
		_tmp$1 = (x$1 = o.Key, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
		(x$2 = o.Key, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i] = _tmp));
		(x$3 = o.Key, ((j < 0 || j >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + j] = _tmp$1));
		_tmp$2 = (x$4 = o.Value, ((j < 0 || j >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + j]));
		_tmp$3 = (x$5 = o.Value, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i]));
		(x$6 = o.Value, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i] = _tmp$2));
		(x$7 = o.Value, ((j < 0 || j >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + j] = _tmp$3));
	};
	SortedMap.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };
	Sort = function(mapValue) {
		var _r, _r$1, _r$2, _r$3, iter, key, mapValue, n, sorted, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; iter = $f.iter; key = $f.key; mapValue = $f.mapValue; n = $f.n; sorted = $f.sorted; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(mapValue, reflect.Value).Type().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 21))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 21))) { */ case 1:
			$s = -1; return ptrType.nil;
		/* } */ case 2:
		n = $clone(mapValue, reflect.Value).Len();
		key = $makeSlice(sliceType, 0, n);
		value = $makeSlice(sliceType, 0, n);
		iter = $clone(mapValue, reflect.Value).MapRange();
		/* while (true) { */ case 4:
			_r$1 = iter.Next(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* if (!(_r$1)) { break; } */ if(!(_r$1)) { $s = 5; continue; }
			_r$2 = iter.Key(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			key = $append(key, _r$2);
			_r$3 = iter.Value(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			value = $append(value, _r$3);
		/* } */ $s = 4; continue; case 5:
		sorted = new SortedMap.ptr(key, value);
		$r = sort.Stable(sorted); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return sorted;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.iter = iter; $f.key = key; $f.mapValue = mapValue; $f.n = n; $f.sorted = sorted; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	compare = function(aVal, bVal) {
		var $24r, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, a, a$1, a$2, a$3, a$4, a$5, aType, aVal, ap, b, b$1, b$2, b$3, b$4, b$5, bType, bVal, bp, c, c$1, c$2, c$3, c$4, c$5, i, i$1, ok, ok$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; a$1 = $f.a$1; a$2 = $f.a$2; a$3 = $f.a$3; a$4 = $f.a$4; a$5 = $f.a$5; aType = $f.aType; aVal = $f.aVal; ap = $f.ap; b = $f.b; b$1 = $f.b$1; b$2 = $f.b$2; b$3 = $f.b$3; b$4 = $f.b$4; b$5 = $f.b$5; bType = $f.bType; bVal = $f.bVal; bp = $f.bp; c = $f.c; c$1 = $f.c$1; c$2 = $f.c$2; c$3 = $f.c$3; c$4 = $f.c$4; c$5 = $f.c$5; i = $f.i; i$1 = $f.i$1; ok = $f.ok; ok$1 = $f.ok$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = $clone(aVal, reflect.Value).Type();
		_tmp$1 = $clone(bVal, reflect.Value).Type();
		aType = _tmp;
		bType = _tmp$1;
		if (!($interfaceIsEqual(aType, bType))) {
			$s = -1; return -1;
		}
			_1 = $clone(aVal, reflect.Value).Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 5; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 6; continue; }
			/* */ if (_1 === (1)) { $s = 7; continue; }
			/* */ if ((_1 === (22)) || (_1 === (26))) { $s = 8; continue; }
			/* */ if (_1 === (18)) { $s = 9; continue; }
			/* */ if (_1 === (25)) { $s = 10; continue; }
			/* */ if (_1 === (17)) { $s = 11; continue; }
			/* */ if (_1 === (20)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_tmp$2 = $clone(aVal, reflect.Value).Int();
				_tmp$3 = $clone(bVal, reflect.Value).Int();
				a = _tmp$2;
				b = _tmp$3;
				if ((a.$high < b.$high || (a.$high === b.$high && a.$low < b.$low))) {
					$s = -1; return -1;
				} else if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_tmp$4 = $clone(aVal, reflect.Value).Uint();
				_tmp$5 = $clone(bVal, reflect.Value).Uint();
				a$1 = _tmp$4;
				b$1 = _tmp$5;
				if ((a$1.$high < b$1.$high || (a$1.$high === b$1.$high && a$1.$low < b$1.$low))) {
					$s = -1; return -1;
				} else if ((a$1.$high > b$1.$high || (a$1.$high === b$1.$high && a$1.$low > b$1.$low))) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if (_1 === (24)) { */ case 4:
				_r = $clone(aVal, reflect.Value).String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$6 = _r;
				_r$1 = $clone(bVal, reflect.Value).String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tmp$7 = _r$1;
				a$2 = _tmp$6;
				b$2 = _tmp$7;
				if (a$2 < b$2) {
					$s = -1; return -1;
				} else if (a$2 > b$2) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 5:
				$s = -1; return floatCompare($clone(aVal, reflect.Value).Float(), $clone(bVal, reflect.Value).Float());
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 6:
				_tmp$8 = $clone(aVal, reflect.Value).Complex();
				_tmp$9 = $clone(bVal, reflect.Value).Complex();
				a$3 = _tmp$8;
				b$3 = _tmp$9;
				c = floatCompare(a$3.$real, b$3.$real);
				if (!((c === 0))) {
					$s = -1; return c;
				}
				$s = -1; return floatCompare(a$3.$imag, b$3.$imag);
			/* } else if (_1 === (1)) { */ case 7:
				_tmp$10 = $clone(aVal, reflect.Value).Bool();
				_tmp$11 = $clone(bVal, reflect.Value).Bool();
				a$4 = _tmp$10;
				b$4 = _tmp$11;
				if (a$4 === b$4) {
					$s = -1; return 0;
				} else if (a$4) {
					$s = -1; return 1;
				} else {
					$s = -1; return -1;
				}
				$s = 14; continue;
			/* } else if ((_1 === (22)) || (_1 === (26))) { */ case 8:
				_tmp$12 = $clone(aVal, reflect.Value).Pointer();
				_tmp$13 = $clone(bVal, reflect.Value).Pointer();
				a$5 = _tmp$12;
				b$5 = _tmp$13;
				if (a$5 < b$5) {
					$s = -1; return -1;
				} else if (a$5 > b$5) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if (_1 === (18)) { */ case 9:
				_tuple = nilCompare($clone(aVal, reflect.Value), $clone(bVal, reflect.Value));
				c$1 = _tuple[0];
				ok = _tuple[1];
				if (ok) {
					$s = -1; return c$1;
				}
				_tmp$14 = $clone(aVal, reflect.Value).Pointer();
				_tmp$15 = $clone(bVal, reflect.Value).Pointer();
				ap = _tmp$14;
				bp = _tmp$15;
				if (ap < bp) {
					$s = -1; return -1;
				} else if (ap > bp) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if (_1 === (25)) { */ case 10:
				i = 0;
				/* while (true) { */ case 17:
					/* if (!(i < $clone(aVal, reflect.Value).NumField())) { break; } */ if(!(i < $clone(aVal, reflect.Value).NumField())) { $s = 18; continue; }
					_r$2 = $clone(aVal, reflect.Value).Field(i); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg = $clone(_r$2, reflect.Value);
					_r$3 = $clone(bVal, reflect.Value).Field(i); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_arg$1 = $clone(_r$3, reflect.Value);
					_r$4 = compare(_arg, _arg$1); /* */ $s = 21; case 21: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					c$2 = _r$4;
					if (!((c$2 === 0))) {
						$s = -1; return c$2;
					}
					i = i + (1) >> 0;
				/* } */ $s = 17; continue; case 18:
				$s = -1; return 0;
			/* } else if (_1 === (17)) { */ case 11:
				i$1 = 0;
				/* while (true) { */ case 22:
					/* if (!(i$1 < $clone(aVal, reflect.Value).Len())) { break; } */ if(!(i$1 < $clone(aVal, reflect.Value).Len())) { $s = 23; continue; }
					_r$5 = $clone(aVal, reflect.Value).Index(i$1); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = $clone(_r$5, reflect.Value);
					_r$6 = $clone(bVal, reflect.Value).Index(i$1); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_arg$3 = $clone(_r$6, reflect.Value);
					_r$7 = compare(_arg$2, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					c$3 = _r$7;
					if (!((c$3 === 0))) {
						$s = -1; return c$3;
					}
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 22; continue; case 23:
				$s = -1; return 0;
			/* } else if (_1 === (20)) { */ case 12:
				_tuple$1 = nilCompare($clone(aVal, reflect.Value), $clone(bVal, reflect.Value));
				c$4 = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					$s = -1; return c$4;
				}
				_r$8 = $clone(aVal, reflect.Value).Elem(); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = $clone(_r$8, reflect.Value).Type(); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = reflect.ValueOf(_r$9); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_arg$4 = $clone(_r$10, reflect.Value);
				_r$11 = $clone(bVal, reflect.Value).Elem(); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = $clone(_r$11, reflect.Value).Type(); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$13 = reflect.ValueOf(_r$12); /* */ $s = 32; case 32: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_arg$5 = $clone(_r$13, reflect.Value);
				_r$14 = compare(_arg$4, _arg$5); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				c$5 = _r$14;
				if (!((c$5 === 0))) {
					$s = -1; return c$5;
				}
				_r$15 = $clone(aVal, reflect.Value).Elem(); /* */ $s = 34; case 34: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_arg$6 = $clone(_r$15, reflect.Value);
				_r$16 = $clone(bVal, reflect.Value).Elem(); /* */ $s = 35; case 35: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_arg$7 = $clone(_r$16, reflect.Value);
				_r$17 = compare(_arg$6, _arg$7); /* */ $s = 36; case 36: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				$24r = _r$17;
				$s = 37; case 37: return $24r;
			/* } else { */ case 13:
				_r$18 = aType.String(); /* */ $s = 38; case 38: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				$panic(new $String("bad type in compare: " + _r$18));
			/* } */ case 14:
		case 1:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compare }; } $f.$24r = $24r; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.a$1 = a$1; $f.a$2 = a$2; $f.a$3 = a$3; $f.a$4 = a$4; $f.a$5 = a$5; $f.aType = aType; $f.aVal = aVal; $f.ap = ap; $f.b = b; $f.b$1 = b$1; $f.b$2 = b$2; $f.b$3 = b$3; $f.b$4 = b$4; $f.b$5 = b$5; $f.bType = bType; $f.bVal = bVal; $f.bp = bp; $f.c = c; $f.c$1 = c$1; $f.c$2 = c$2; $f.c$3 = c$3; $f.c$4 = c$4; $f.c$5 = c$5; $f.i = i; $f.i$1 = i$1; $f.ok = ok; $f.ok$1 = ok$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	nilCompare = function(aVal, bVal) {
		var aVal, bVal;
		if ($clone(aVal, reflect.Value).IsNil()) {
			if ($clone(bVal, reflect.Value).IsNil()) {
				return [0, true];
			}
			return [-1, true];
		}
		if ($clone(bVal, reflect.Value).IsNil()) {
			return [1, true];
		}
		return [0, false];
	};
	floatCompare = function(a, b) {
		var a, b;
		if (isNaN(a)) {
			return -1;
		} else if (isNaN(b)) {
			return 1;
		} else if (a < b) {
			return -1;
		} else if (a > b) {
			return 1;
		}
		return 0;
	};
	isNaN = function(a) {
		var a;
		return !((a === a));
	};
	ptrType.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	SortedMap.init("", [{prop: "Key", name: "Key", embedded: false, exported: true, typ: sliceType, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, ReaderFrom, WriterTo, RuneScanner, LimitedReader, sliceType, sliceType$1, ptrType, ptrType$2, errInvalidWrite, errWhence, errOffset, blackHolePool, Copy, copyBuffer;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", true, "io", true, null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", true, "io", true, null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	LimitedReader = $pkg.LimitedReader = $newType(0, $kindStruct, "io.LimitedReader", true, "io", true, function(R_, N_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = $ifaceNil;
			this.N = new $Int64(0, 0);
			return;
		}
		this.R = R_;
		this.N = N_;
	});
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(sliceType$1);
	ptrType$2 = $ptrType(LimitedReader);
	Copy = function(dst, src) {
		var $24r, _r, _tuple, dst, err, src, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _tuple = $f._tuple; dst = $f.dst; err = $f.err; src = $f.src; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_r = copyBuffer(dst, src, sliceType$1.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		written = _tuple[0];
		err = _tuple[1];
		$24r = [written, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$24r = $24r; $f._r = _r; $f._tuple = _tuple; $f.dst = dst; $f.err = err; $f.src = src; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	copyBuffer = function(dst, src, buf) {
		var $24r, $24r$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, buf, dst, er, err, ew, l, nr, nw, ok, ok$1, ok$2, rt, size, src, written, wt, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; buf = $f.buf; dst = $f.dst; er = $f.er; err = $f.err; ew = $f.ew; l = $f.l; nr = $f.nr; nw = $f.nw; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; rt = $f.rt; size = $f.size; src = $f.src; written = $f.written; wt = $f.wt; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = $assertType(src, WriterTo, true);
		wt = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = wt.WriteTo(dst); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			written = _tuple$1[0];
			err = _tuple$1[1];
			$24r = [written, err];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_tuple$2 = $assertType(dst, ReaderFrom, true);
		rt = _tuple$2[0];
		ok$1 = _tuple$2[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$1 = rt.ReadFrom(src); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$3 = _r$1;
			written = _tuple$3[0];
			err = _tuple$3[1];
			$24r$1 = [written, err];
			$s = 8; case 8: return $24r$1;
		/* } */ case 6:
		if (buf === sliceType$1.nil) {
			size = 32768;
			_tuple$4 = $assertType(src, ptrType$2, true);
			l = _tuple$4[0];
			ok$2 = _tuple$4[1];
			if (ok$2 && (x$2 = (new $Int64(0, size)), x$3 = l.N, (x$2.$high > x$3.$high || (x$2.$high === x$3.$high && x$2.$low > x$3.$low)))) {
				if ((x$4 = l.N, (x$4.$high < 0 || (x$4.$high === 0 && x$4.$low < 1)))) {
					size = 1;
				} else {
					size = (((x$5 = l.N, x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0));
				}
			}
			buf = $makeSlice(sliceType$1, size);
		}
		/* while (true) { */ case 9:
			_r$2 = src.Read(buf); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$5 = _r$2;
			nr = _tuple$5[0];
			er = _tuple$5[1];
			/* */ if (nr > 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (nr > 0) { */ case 12:
				_r$3 = dst.Write($subslice(buf, 0, nr)); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$6 = _r$3;
				nw = _tuple$6[0];
				ew = _tuple$6[1];
				if (nw < 0 || nr < nw) {
					nw = 0;
					if ($interfaceIsEqual(ew, $ifaceNil)) {
						ew = errInvalidWrite;
					}
				}
				written = (x$6 = (new $Int64(0, nw)), new $Int64(written.$high + x$6.$high, written.$low + x$6.$low));
				if (!($interfaceIsEqual(ew, $ifaceNil))) {
					err = ew;
					/* break; */ $s = 10; continue;
				}
				if (!((nr === nw))) {
					err = $pkg.ErrShortWrite;
					/* break; */ $s = 10; continue;
				}
			/* } */ case 13:
			if (!($interfaceIsEqual(er, $ifaceNil))) {
				if (!($interfaceIsEqual(er, $pkg.EOF))) {
					err = er;
				}
				/* break; */ $s = 10; continue;
			}
		/* } */ $s = 9; continue; case 10:
		_tmp = written;
		_tmp$1 = err;
		written = _tmp;
		err = _tmp$1;
		$s = -1; return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyBuffer }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.buf = buf; $f.dst = dst; $f.er = er; $f.err = err; $f.ew = ew; $f.l = l; $f.nr = nr; $f.nw = nw; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.rt = rt; $f.size = size; $f.src = src; $f.written = written; $f.wt = wt; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	LimitedReader.ptr.prototype.Read = function(p) {
		var _r, _tmp, _tmp$1, _tuple, err, l, n, p, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; p = $f.p; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		l = this;
		if ((x$2 = l.N, (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 0)))) {
			_tmp = 0;
			_tmp$1 = $pkg.EOF;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((x$3 = (new $Int64(0, p.$length)), x$4 = l.N, (x$3.$high > x$4.$high || (x$3.$high === x$4.$high && x$3.$low > x$4.$low)))) {
			p = $subslice(p, 0, $flatten64(l.N));
		}
		_r = l.R.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		l.N = (x$5 = l.N, x$6 = (new $Int64(0, n)), new $Int64(x$5.$high - x$6.$high, x$5.$low - x$6.$low));
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: LimitedReader.ptr.prototype.Read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.p = p; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	LimitedReader.prototype.Read = function(p) { return this.$val.Read(p); };
	ptrType$2.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}];
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	LimitedReader.init("", [{prop: "R", name: "R", embedded: false, exported: true, typ: Reader, tag: ""}, {prop: "N", name: "N", embedded: false, exported: true, typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		errInvalidWrite = errors.New("invalid write result");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		blackHolePool = new sync.Pool.ptr(sliceType.nil, (function() {
			var b, b$24ptr;
			b = $makeSlice(sliceType$1, 8192);
			return (b$24ptr || (b$24ptr = new ptrType(function() { return b; }, function($v) { b = $subslice(new sliceType$1($v.$array), $v.$offset, $v.$offset + $v.$length); })));
		}));
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/oserror"] = (function() {
	var $pkg = {}, $init, errors;
	errors = $packages["errors"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.ErrClosed = errors.New("file already closed");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, errors, js, bytealg, oserror, race, unsafeheader, runtime, sync, RawConn, SockaddrLinklayer, SockaddrNetlink, mmapper, Errno, Sockaddr, SockaddrInet4, SockaddrInet6, SockaddrUnix, Timespec, Stat_t, RawSockaddrInet4, RawSockaddrInet6, RawSockaddrUnix, RawSockaddrLinklayer, RawSockaddrNetlink, RawSockaddr, RawSockaddrAny, _Socklen, Linger, Iovec, IPMreq, IPMreqn, IPv6Mreq, Msghdr, Utsname, sliceType, sliceType$1, ptrType$2, ptrType$4, arrayType$2, ptrType$9, arrayType$3, ptrType$12, arrayType$5, arrayType$6, arrayType$9, arrayType$10, arrayType$11, arrayType$12, ptrType$19, ptrType$20, ptrType$23, ptrType$24, funcType, funcType$1, ptrType$26, ptrType$28, mapType, funcType$2, funcType$3, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$34, arrayType$24, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envs, mapper, errEAGAIN, errEINVAL, errENOENT, ioSync, ioSync$24ptr, errors$1, init, printWarning, printToConsole, indexByte, runtime_envs, syscallByName, Syscall, Syscall6, RawSyscall, BytePtrFromString, CloseOnExec, SetNonblock, msanRead, msanWrite, itoa, uitoa, anyToSockaddr, Accept, Accept4, SetsockoptIPMreqn, Recvmsg, SendmsgN, ReadDirent, Lstat, errnoErr, Read, Write, GetsockoptInt, Recvfrom, Sendto, SetsockoptByte, SetsockoptInt, SetsockoptInet4Addr, SetsockoptIPMreq, SetsockoptIPv6Mreq, SetsockoptLinger, faketimeWrite, Close, Dup, Fchdir, Fchmod, fcntl, Fsync, Getdents, read, Uname, write, munmap, Fchown, Fstat, Ftruncate, Pread, Pwrite, Seek, Shutdown, accept, accept4, fstatat, getsockopt, setsockopt, recvfrom, sendto, recvmsg, sendmsg, mmap;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	bytealg = $packages["internal/bytealg"];
	oserror = $packages["internal/oserror"];
	race = $packages["internal/race"];
	unsafeheader = $packages["internal/unsafeheader"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	RawConn = $pkg.RawConn = $newType(8, $kindInterface, "syscall.RawConn", true, "syscall", true, null);
	SockaddrLinklayer = $pkg.SockaddrLinklayer = $newType(0, $kindStruct, "syscall.SockaddrLinklayer", true, "syscall", true, function(Protocol_, Ifindex_, Hatype_, Pkttype_, Halen_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Protocol = 0;
			this.Ifindex = 0;
			this.Hatype = 0;
			this.Pkttype = 0;
			this.Halen = 0;
			this.Addr = arrayType$2.zero();
			this.raw = new RawSockaddrLinklayer.ptr(0, 0, 0, 0, 0, 0, arrayType$2.zero());
			return;
		}
		this.Protocol = Protocol_;
		this.Ifindex = Ifindex_;
		this.Hatype = Hatype_;
		this.Pkttype = Pkttype_;
		this.Halen = Halen_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrNetlink = $pkg.SockaddrNetlink = $newType(0, $kindStruct, "syscall.SockaddrNetlink", true, "syscall", true, function(Family_, Pad_, Pid_, Groups_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Pad = 0;
			this.Pid = 0;
			this.Groups = 0;
			this.raw = new RawSockaddrNetlink.ptr(0, 0, 0, 0);
			return;
		}
		this.Family = Family_;
		this.Pad = Pad_;
		this.Pid = Pid_;
		this.Groups = Groups_;
		this.raw = raw_;
	});
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", true, "syscall", false, function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	Sockaddr = $pkg.Sockaddr = $newType(8, $kindInterface, "syscall.Sockaddr", true, "syscall", true, null);
	SockaddrInet4 = $pkg.SockaddrInet4 = $newType(0, $kindStruct, "syscall.SockaddrInet4", true, "syscall", true, function(Port_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.Addr = arrayType$10.zero();
			this.raw = new RawSockaddrInet4.ptr(0, 0, arrayType$10.zero(), arrayType$2.zero());
			return;
		}
		this.Port = Port_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrInet6 = $pkg.SockaddrInet6 = $newType(0, $kindStruct, "syscall.SockaddrInet6", true, "syscall", true, function(Port_, ZoneId_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.ZoneId = 0;
			this.Addr = arrayType$3.zero();
			this.raw = new RawSockaddrInet6.ptr(0, 0, 0, arrayType$3.zero(), 0);
			return;
		}
		this.Port = Port_;
		this.ZoneId = ZoneId_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrUnix = $pkg.SockaddrUnix = $newType(0, $kindStruct, "syscall.SockaddrUnix", true, "syscall", true, function(Name_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.raw = new RawSockaddrUnix.ptr(0, arrayType$9.zero());
			return;
		}
		this.Name = Name_;
		this.raw = raw_;
	});
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", true, "syscall", true, function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Dev_, Ino_, Nlink_, Mode_, Uid_, Gid_, X__pad0_, Rdev_, Size_, Blksize_, Blocks_, Atim_, Mtim_, Ctim_, X__unused_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = new $Uint64(0, 0);
			this.Ino = new $Uint64(0, 0);
			this.Nlink = new $Uint64(0, 0);
			this.Mode = 0;
			this.Uid = 0;
			this.Gid = 0;
			this.X__pad0 = 0;
			this.Rdev = new $Uint64(0, 0);
			this.Size = new $Int64(0, 0);
			this.Blksize = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Atim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.X__unused = arrayType$6.zero();
			return;
		}
		this.Dev = Dev_;
		this.Ino = Ino_;
		this.Nlink = Nlink_;
		this.Mode = Mode_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.X__pad0 = X__pad0_;
		this.Rdev = Rdev_;
		this.Size = Size_;
		this.Blksize = Blksize_;
		this.Blocks = Blocks_;
		this.Atim = Atim_;
		this.Mtim = Mtim_;
		this.Ctim = Ctim_;
		this.X__unused = X__unused_;
	});
	RawSockaddrInet4 = $pkg.RawSockaddrInet4 = $newType(0, $kindStruct, "syscall.RawSockaddrInet4", true, "syscall", true, function(Family_, Port_, Addr_, Zero_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Port = 0;
			this.Addr = arrayType$10.zero();
			this.Zero = arrayType$2.zero();
			return;
		}
		this.Family = Family_;
		this.Port = Port_;
		this.Addr = Addr_;
		this.Zero = Zero_;
	});
	RawSockaddrInet6 = $pkg.RawSockaddrInet6 = $newType(0, $kindStruct, "syscall.RawSockaddrInet6", true, "syscall", true, function(Family_, Port_, Flowinfo_, Addr_, Scope_id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Port = 0;
			this.Flowinfo = 0;
			this.Addr = arrayType$3.zero();
			this.Scope_id = 0;
			return;
		}
		this.Family = Family_;
		this.Port = Port_;
		this.Flowinfo = Flowinfo_;
		this.Addr = Addr_;
		this.Scope_id = Scope_id_;
	});
	RawSockaddrUnix = $pkg.RawSockaddrUnix = $newType(0, $kindStruct, "syscall.RawSockaddrUnix", true, "syscall", true, function(Family_, Path_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Path = arrayType$9.zero();
			return;
		}
		this.Family = Family_;
		this.Path = Path_;
	});
	RawSockaddrLinklayer = $pkg.RawSockaddrLinklayer = $newType(0, $kindStruct, "syscall.RawSockaddrLinklayer", true, "syscall", true, function(Family_, Protocol_, Ifindex_, Hatype_, Pkttype_, Halen_, Addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Protocol = 0;
			this.Ifindex = 0;
			this.Hatype = 0;
			this.Pkttype = 0;
			this.Halen = 0;
			this.Addr = arrayType$2.zero();
			return;
		}
		this.Family = Family_;
		this.Protocol = Protocol_;
		this.Ifindex = Ifindex_;
		this.Hatype = Hatype_;
		this.Pkttype = Pkttype_;
		this.Halen = Halen_;
		this.Addr = Addr_;
	});
	RawSockaddrNetlink = $pkg.RawSockaddrNetlink = $newType(0, $kindStruct, "syscall.RawSockaddrNetlink", true, "syscall", true, function(Family_, Pad_, Pid_, Groups_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Pad = 0;
			this.Pid = 0;
			this.Groups = 0;
			return;
		}
		this.Family = Family_;
		this.Pad = Pad_;
		this.Pid = Pid_;
		this.Groups = Groups_;
	});
	RawSockaddr = $pkg.RawSockaddr = $newType(0, $kindStruct, "syscall.RawSockaddr", true, "syscall", true, function(Family_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Data = arrayType$11.zero();
			return;
		}
		this.Family = Family_;
		this.Data = Data_;
	});
	RawSockaddrAny = $pkg.RawSockaddrAny = $newType(0, $kindStruct, "syscall.RawSockaddrAny", true, "syscall", true, function(Addr_, Pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Addr = new RawSockaddr.ptr(0, arrayType$11.zero());
			this.Pad = arrayType$12.zero();
			return;
		}
		this.Addr = Addr_;
		this.Pad = Pad_;
	});
	_Socklen = $pkg._Socklen = $newType(4, $kindUint32, "syscall._Socklen", true, "syscall", false, null);
	Linger = $pkg.Linger = $newType(0, $kindStruct, "syscall.Linger", true, "syscall", true, function(Onoff_, Linger_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Onoff = 0;
			this.Linger = 0;
			return;
		}
		this.Onoff = Onoff_;
		this.Linger = Linger_;
	});
	Iovec = $pkg.Iovec = $newType(0, $kindStruct, "syscall.Iovec", true, "syscall", true, function(Base_, Len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Base = ptrType$2.nil;
			this.Len = new $Uint64(0, 0);
			return;
		}
		this.Base = Base_;
		this.Len = Len_;
	});
	IPMreq = $pkg.IPMreq = $newType(0, $kindStruct, "syscall.IPMreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType$10.zero();
			this.Interface = arrayType$10.zero();
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	IPMreqn = $pkg.IPMreqn = $newType(0, $kindStruct, "syscall.IPMreqn", true, "syscall", true, function(Multiaddr_, Address_, Ifindex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType$10.zero();
			this.Address = arrayType$10.zero();
			this.Ifindex = 0;
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Address = Address_;
		this.Ifindex = Ifindex_;
	});
	IPv6Mreq = $pkg.IPv6Mreq = $newType(0, $kindStruct, "syscall.IPv6Mreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType$3.zero();
			this.Interface = 0;
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	Msghdr = $pkg.Msghdr = $newType(0, $kindStruct, "syscall.Msghdr", true, "syscall", true, function(Name_, Namelen_, Pad_cgo_0_, Iov_, Iovlen_, Control_, Controllen_, Flags_, Pad_cgo_1_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = ptrType$2.nil;
			this.Namelen = 0;
			this.Pad_cgo_0 = arrayType$10.zero();
			this.Iov = ptrType$20.nil;
			this.Iovlen = new $Uint64(0, 0);
			this.Control = ptrType$2.nil;
			this.Controllen = new $Uint64(0, 0);
			this.Flags = 0;
			this.Pad_cgo_1 = arrayType$10.zero();
			return;
		}
		this.Name = Name_;
		this.Namelen = Namelen_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Iov = Iov_;
		this.Iovlen = Iovlen_;
		this.Control = Control_;
		this.Controllen = Controllen_;
		this.Flags = Flags_;
		this.Pad_cgo_1 = Pad_cgo_1_;
	});
	Utsname = $pkg.Utsname = $newType(0, $kindStruct, "syscall.Utsname", true, "syscall", true, function(Sysname_, Nodename_, Release_, Version_, Machine_, Domainname_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sysname = arrayType$24.zero();
			this.Nodename = arrayType$24.zero();
			this.Release = arrayType$24.zero();
			this.Version = arrayType$24.zero();
			this.Machine = arrayType$24.zero();
			this.Domainname = arrayType$24.zero();
			return;
		}
		this.Sysname = Sysname_;
		this.Nodename = Nodename_;
		this.Release = Release_;
		this.Version = Version_;
		this.Machine = Machine_;
		this.Domainname = Domainname_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	ptrType$4 = $ptrType($Int32);
	arrayType$2 = $arrayType($Uint8, 8);
	ptrType$9 = $ptrType($Uint16);
	arrayType$3 = $arrayType($Uint8, 16);
	ptrType$12 = $ptrType(SockaddrNetlink);
	arrayType$5 = $arrayType($Uint8, 32);
	arrayType$6 = $arrayType($Int64, 3);
	arrayType$9 = $arrayType($Int8, 108);
	arrayType$10 = $arrayType($Uint8, 4);
	arrayType$11 = $arrayType($Int8, 14);
	arrayType$12 = $arrayType($Int8, 96);
	ptrType$19 = $ptrType(_Socklen);
	ptrType$20 = $ptrType(Iovec);
	ptrType$23 = $ptrType(sliceType);
	ptrType$24 = $ptrType($Int64);
	funcType = $funcType([$Uintptr], [], false);
	funcType$1 = $funcType([$Uintptr], [$Bool], false);
	ptrType$26 = $ptrType(SockaddrLinklayer);
	ptrType$28 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType$2 = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$3 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$29 = $ptrType(SockaddrInet4);
	ptrType$30 = $ptrType(SockaddrInet6);
	ptrType$31 = $ptrType(SockaddrUnix);
	ptrType$32 = $ptrType(Timespec);
	ptrType$34 = $ptrType(Msghdr);
	arrayType$24 = $arrayType($Int8, 65);
	init = function() {
		$flushConsole = (function() {
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize(($bytesToString(lineBuffer)), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = indexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize(($bytesToString($subslice(lineBuffer, 0, i))), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	indexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	runtime_envs = function() {
		var envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscallByName = function(name) {
		var $24r, $24r$1, name, require, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; name = $f.name; require = $f.require; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			$recover();
		}), []]);
		/* */ if (syscallModule === null) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (syscallModule === null) { */ case 1:
			/* */ if (alreadyTriedToLoad) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (alreadyTriedToLoad) { */ case 3:
				$24r = null;
				$s = 5; case 5: return $24r;
			/* } */ case 4:
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		/* } */ case 2:
		$24r$1 = syscallModule[$externalize(name, $String)];
		$s = 6; case 6: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return null; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: syscallByName }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.name = name; $f.require = require; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Syscall = function(trap, a1, a2, a3) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; a1 = $f.a1; a2 = $f.a2; a3 = $f.a3; array = $f.array; err = $f.err; f = $f.f; r = $f.r; r1 = $f.r1; r2 = $f.r2; slice = $f.slice; trap = $f.trap; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r1 = 0;
		r2 = 0;
		err = 0;
		_r = syscallByName("Syscall"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = _r;
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			$s = -1; return [r1, r2, err];
		}
		if ((trap === 1) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = (($parseInt(array.length) >>> 0));
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			$s = -1; return [r1, r2, err];
		}
		if (trap === 231) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = ((minusOne >>> 0));
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		$s = -1; return [r1, r2, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Syscall }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f.a1 = a1; $f.a2 = a2; $f.a3 = a3; $f.array = array; $f.err = err; $f.f = f; $f.r = r; $f.r1 = r1; $f.r2 = r2; $f.slice = slice; $f.trap = trap; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; a1 = $f.a1; a2 = $f.a2; a3 = $f.a3; a4 = $f.a4; a5 = $f.a5; a6 = $f.a6; err = $f.err; f = $f.f; r = $f.r; r1 = $f.r1; r2 = $f.r2; trap = $f.trap; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r1 = 0;
		r2 = 0;
		err = 0;
		_r = syscallByName("Syscall6"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = _r;
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			$s = -1; return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = ((minusOne >>> 0));
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		$s = -1; return [r1, r2, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Syscall6 }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.a1 = a1; $f.a2 = a2; $f.a3 = a3; $f.a4 = a4; $f.a5 = a5; $f.a6 = a6; $f.err = err; $f.f = f; $f.r = r; $f.r1 = r1; $f.r2 = r2; $f.trap = trap; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Syscall6 = Syscall6;
	RawSyscall = function(trap, a1, a2, a3) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, err, f, r, r1, r2, trap, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; a1 = $f.a1; a2 = $f.a2; a3 = $f.a3; err = $f.err; f = $f.f; r = $f.r; r1 = $f.r1; r2 = $f.r2; trap = $f.trap; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r1 = 0;
		r2 = 0;
		err = 0;
		_r = syscallByName("Syscall"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = _r;
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			$s = -1; return [r1, r2, err];
		}
		printWarning();
		_tmp$3 = ((minusOne >>> 0));
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		$s = -1; return [r1, r2, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: RawSyscall }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.a1 = a1; $f.a2 = a2; $f.a3 = a3; $f.err = err; $f.f = f; $f.r = r; $f.r1 = r1; $f.r2 = r2; $f.trap = trap; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.RawSyscall = RawSyscall;
	BytePtrFromString = function(s) {
		var _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = (new sliceType($stringToBytes(s)));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [((array)), $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	CloseOnExec = function(fd) {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fcntl(fd, 2, 1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CloseOnExec }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.CloseOnExec = CloseOnExec;
	SetNonblock = function(fd, nonblocking) {
		var _r, _r$1, _tuple, _tuple$1, err, fd, flag, nonblocking, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; fd = $f.fd; flag = $f.flag; nonblocking = $f.nonblocking; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = fcntl(fd, 3, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		flag = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			$s = -1; return err;
		}
		if (nonblocking) {
			flag = flag | (2048);
		} else {
			flag = (flag & ~(2048)) >> 0;
		}
		_r$1 = fcntl(fd, 4, flag); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		err = _tuple$1[1];
		err = err;
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetNonblock }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.fd = fd; $f.flag = flag; $f.nonblocking = nonblocking; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetNonblock = SetNonblock;
	msanRead = function(addr, len) {
		var addr, len;
	};
	msanWrite = function(addr, len) {
		var addr, len;
	};
	itoa = function(val) {
		var val;
		if (val < 0) {
			return "-" + uitoa(((-val >>> 0)));
		}
		return uitoa(((val >>> 0)));
	};
	uitoa = function(val) {
		var _q, _r, buf, i, val;
		buf = arrayType$5.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((val + 48 >>> 0) << 24 >>> 24)));
		return ($bytesToString($subslice(new sliceType(buf), i)));
	};
	Timespec.ptr.prototype.Unix = function() {
		var _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = (ts.Sec);
		_tmp$1 = (ts.Nsec);
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var ts, x, x$1;
		ts = this;
		return (x = $mul64((ts.Sec), new $Int64(0, 1000000000)), x$1 = (ts.Nsec), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	SockaddrInet4.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Family = 2;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$9(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(16);
		return [(_array), 16, $ifaceNil];
	};
	SockaddrInet4.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrInet6.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Family = 10;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$9(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		sa.raw.Scope_id = sa.ZoneId;
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(28);
		return [(_array), 28, $ifaceNil];
	};
	SockaddrInet6.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrUnix.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, n, name, sa, sl, x;
		sa = this;
		name = sa.Name;
		n = name.length;
		if (n > 108) {
			return [0, 0, new Errno(22)];
		}
		if ((n === 108) && !((name.charCodeAt(0) === 64))) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Family = 1;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			(x = sa.raw.Path, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = ((name.charCodeAt(i) << 24 >> 24))));
			i = i + (1) >> 0;
		}
		sl = 2;
		if (n > 0) {
			sl = sl + ((((n >>> 0)) + 1 >>> 0)) >>> 0;
		}
		if (sa.raw.Path[0] === 64) {
			sa.raw.Path[0] = 0;
			sl = sl - (1) >>> 0;
		}
		_array = new Uint8Array(110);
		return [(_array), sl, $ifaceNil];
	};
	SockaddrUnix.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrLinklayer.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, sa, x, x$1;
		sa = this;
		if (sa.Ifindex < 0 || sa.Ifindex > 2147483647) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Family = 17;
		sa.raw.Protocol = sa.Protocol;
		sa.raw.Ifindex = ((sa.Ifindex >> 0));
		sa.raw.Hatype = sa.Hatype;
		sa.raw.Pkttype = sa.Pkttype;
		sa.raw.Halen = sa.Halen;
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			(x$1 = sa.raw.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = sa.Addr, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(20);
		return [(_array), 20, $ifaceNil];
	};
	SockaddrLinklayer.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrNetlink.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, sa;
		sa = this;
		sa.raw.Family = 16;
		sa.raw.Pad = sa.Pad;
		sa.raw.Pid = sa.Pid;
		sa.raw.Groups = sa.Groups;
		_array = new Uint8Array(12);
		return [(_array), 12, $ifaceNil];
	};
	SockaddrNetlink.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	anyToSockaddr = function(rsa) {
		var _1, _array, _array$1, _array$2, _array$3, _array$4, _array$5, _array$6, _array$7, _array$8, _array$9, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7, _struct$8, _struct$9, _view, _view$1, _view$2, _view$3, _view$4, _view$5, _view$6, _view$7, _view$8, _view$9, bytes, i, i$1, i$2, n, p, p$1, pp, pp$1, pp$2, pp$3, pp$4, rsa, sa, sa$1, sa$2, sa$3, sa$4, x, x$1, x$2, x$3, x$4, x$5, x$6;
		_1 = rsa.Addr.Family;
		if (_1 === (16)) {
			_array$1 = new Uint8Array(112);
			pp = ((_array = (_array$1), _struct = new RawSockaddrNetlink.ptr(0, 0, 0, 0), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Family = _view.getUint16(0, true), _struct.Pad = _view.getUint16(2, true), _struct.Pid = _view.getUint32(4, true), _struct.Groups = _view.getUint32(8, true), _struct));
			_struct$1 = rsa, _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Family = _view$1.getUint16(0, true), _struct$1.Addr.Data = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 16, _array$1.buffer.byteLength));
			sa = new SockaddrNetlink.ptr(0, 0, 0, 0, new RawSockaddrNetlink.ptr(0, 0, 0, 0));
			sa.Family = pp.Family;
			sa.Pad = pp.Pad;
			sa.Pid = pp.Pid;
			sa.Groups = pp.Groups;
			return [sa, $ifaceNil];
		} else if (_1 === (17)) {
			_array$3 = new Uint8Array(112);
			pp$1 = ((_array$2 = (_array$3), _struct$2 = new RawSockaddrLinklayer.ptr(0, 0, 0, 0, 0, 0, arrayType$2.zero()), _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Family = _view$2.getUint16(0, true), _struct$2.Protocol = _view$2.getUint16(2, true), _struct$2.Ifindex = _view$2.getInt32(4, true), _struct$2.Hatype = _view$2.getUint16(8, true), _struct$2.Pkttype = _view$2.getUint8(10, true), _struct$2.Halen = _view$2.getUint8(11, true), _struct$2.Addr = new ($nativeArray($kindUint8))(_array$2.buffer, $min(_array$2.byteOffset + 12, _array$2.buffer.byteLength)), _struct$2));
			_struct$3 = rsa, _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Addr.Family = _view$3.getUint16(0, true), _struct$3.Addr.Data = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 2, _array$3.buffer.byteLength)), _struct$3.Pad = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 16, _array$3.buffer.byteLength));
			sa$1 = new SockaddrLinklayer.ptr(0, 0, 0, 0, 0, arrayType$2.zero(), new RawSockaddrLinklayer.ptr(0, 0, 0, 0, 0, 0, arrayType$2.zero()));
			sa$1.Protocol = pp$1.Protocol;
			sa$1.Ifindex = ((pp$1.Ifindex >> 0));
			sa$1.Hatype = pp$1.Hatype;
			sa$1.Pkttype = pp$1.Pkttype;
			sa$1.Halen = pp$1.Halen;
			i = 0;
			while (true) {
				if (!(i < 8)) { break; }
				(x$1 = sa$1.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = pp$1.Addr, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
				i = i + (1) >> 0;
			}
			return [sa$1, $ifaceNil];
		} else if (_1 === (1)) {
			_array$5 = new Uint8Array(112);
			pp$2 = ((_array$4 = (_array$5), _struct$4 = new RawSockaddrUnix.ptr(0, arrayType$9.zero()), _view$4 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Family = _view$4.getUint16(0, true), _struct$4.Path = new ($nativeArray($kindInt8))(_array$4.buffer, $min(_array$4.byteOffset + 2, _array$4.buffer.byteLength)), _struct$4));
			_struct$5 = rsa, _view$5 = new DataView(_array$5.buffer, _array$5.byteOffset), _struct$5.Addr.Family = _view$5.getUint16(0, true), _struct$5.Addr.Data = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 2, _array$5.buffer.byteLength)), _struct$5.Pad = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 16, _array$5.buffer.byteLength));
			sa$2 = new SockaddrUnix.ptr("", new RawSockaddrUnix.ptr(0, arrayType$9.zero()));
			if (pp$2.Path[0] === 0) {
				pp$2.Path[0] = 64;
			}
			n = 0;
			while (true) {
				if (!(n < 108 && !(((x$2 = pp$2.Path, ((n < 0 || n >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[n])) === 0)))) { break; }
				n = n + (1) >> 0;
			}
			bytes = $subslice(new sliceType((($sliceToArray(new sliceType(pp$2.Path))))), 0, n);
			sa$2.Name = ($bytesToString(bytes));
			return [sa$2, $ifaceNil];
		} else if (_1 === (2)) {
			_array$7 = new Uint8Array(112);
			pp$3 = ((_array$6 = (_array$7), _struct$6 = new RawSockaddrInet4.ptr(0, 0, arrayType$10.zero(), arrayType$2.zero()), _view$6 = new DataView(_array$6.buffer, _array$6.byteOffset), _struct$6.Family = _view$6.getUint16(0, true), _struct$6.Port = _view$6.getUint16(2, true), _struct$6.Addr = new ($nativeArray($kindUint8))(_array$6.buffer, $min(_array$6.byteOffset + 4, _array$6.buffer.byteLength)), _struct$6.Zero = new ($nativeArray($kindUint8))(_array$6.buffer, $min(_array$6.byteOffset + 8, _array$6.buffer.byteLength)), _struct$6));
			_struct$7 = rsa, _view$7 = new DataView(_array$7.buffer, _array$7.byteOffset), _struct$7.Addr.Family = _view$7.getUint16(0, true), _struct$7.Addr.Data = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 2, _array$7.buffer.byteLength)), _struct$7.Pad = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 16, _array$7.buffer.byteLength));
			sa$3 = new SockaddrInet4.ptr(0, arrayType$10.zero(), new RawSockaddrInet4.ptr(0, 0, arrayType$10.zero(), arrayType$2.zero()));
			p = (((pp$3.$ptr_Port || (pp$3.$ptr_Port = new ptrType$9(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$3)))));
			sa$3.Port = ((((p.nilCheck, p[0]) >> 0)) << 8 >> 0) + (((p.nilCheck, p[1]) >> 0)) >> 0;
			i$1 = 0;
			while (true) {
				if (!(i$1 < 4)) { break; }
				(x$4 = sa$3.Addr, ((i$1 < 0 || i$1 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[i$1] = (x$3 = pp$3.Addr, ((i$1 < 0 || i$1 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i$1]))));
				i$1 = i$1 + (1) >> 0;
			}
			return [sa$3, $ifaceNil];
		} else if (_1 === (10)) {
			_array$9 = new Uint8Array(112);
			pp$4 = ((_array$8 = (_array$9), _struct$8 = new RawSockaddrInet6.ptr(0, 0, 0, arrayType$3.zero(), 0), _view$8 = new DataView(_array$8.buffer, _array$8.byteOffset), _struct$8.Family = _view$8.getUint16(0, true), _struct$8.Port = _view$8.getUint16(2, true), _struct$8.Flowinfo = _view$8.getUint32(4, true), _struct$8.Addr = new ($nativeArray($kindUint8))(_array$8.buffer, $min(_array$8.byteOffset + 8, _array$8.buffer.byteLength)), _struct$8.Scope_id = _view$8.getUint32(24, true), _struct$8));
			_struct$9 = rsa, _view$9 = new DataView(_array$9.buffer, _array$9.byteOffset), _struct$9.Addr.Family = _view$9.getUint16(0, true), _struct$9.Addr.Data = new ($nativeArray($kindInt8))(_array$9.buffer, $min(_array$9.byteOffset + 2, _array$9.buffer.byteLength)), _struct$9.Pad = new ($nativeArray($kindInt8))(_array$9.buffer, $min(_array$9.byteOffset + 16, _array$9.buffer.byteLength));
			sa$4 = new SockaddrInet6.ptr(0, 0, arrayType$3.zero(), new RawSockaddrInet6.ptr(0, 0, 0, arrayType$3.zero(), 0));
			p$1 = (((pp$4.$ptr_Port || (pp$4.$ptr_Port = new ptrType$9(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$4)))));
			sa$4.Port = ((((p$1.nilCheck, p$1[0]) >> 0)) << 8 >> 0) + (((p$1.nilCheck, p$1[1]) >> 0)) >> 0;
			sa$4.ZoneId = pp$4.Scope_id;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 16)) { break; }
				(x$6 = sa$4.Addr, ((i$2 < 0 || i$2 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i$2] = (x$5 = pp$4.Addr, ((i$2 < 0 || i$2 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i$2]))));
				i$2 = i$2 + (1) >> 0;
			}
			return [sa$4, $ifaceNil];
		}
		return [$ifaceNil, new Errno(97)];
	};
	Accept = function(fd) {
		var _r, _r$1, _tuple, _tuple$1, err, fd, len, nfd, rsa, sa, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; fd = $f.fd; len = $f.len; nfd = $f.nfd; rsa = $f.rsa; sa = $f.sa; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		len = [len];
		rsa = [rsa];
		nfd = 0;
		sa = $ifaceNil;
		err = $ifaceNil;
		rsa[0] = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, arrayType$11.zero()), arrayType$12.zero());
		len[0] = 112;
		_r = accept(fd, rsa[0], (len.$ptr || (len.$ptr = new ptrType$19(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, len)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		nfd = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [nfd, sa, err];
		}
		_tuple$1 = anyToSockaddr(rsa[0]);
		sa = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = Close(nfd); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			nfd = 0;
		/* } */ case 3:
		$s = -1; return [nfd, sa, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Accept }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.fd = fd; $f.len = len; $f.nfd = nfd; $f.rsa = rsa; $f.sa = sa; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Accept = Accept;
	Accept4 = function(fd, flags) {
		var _r, _r$1, _tuple, _tuple$1, err, fd, flags, len, nfd, rsa, sa, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; fd = $f.fd; flags = $f.flags; len = $f.len; nfd = $f.nfd; rsa = $f.rsa; sa = $f.sa; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		len = [len];
		rsa = [rsa];
		nfd = 0;
		sa = $ifaceNil;
		err = $ifaceNil;
		rsa[0] = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, arrayType$11.zero()), arrayType$12.zero());
		len[0] = 112;
		_r = accept4(fd, rsa[0], (len.$ptr || (len.$ptr = new ptrType$19(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, len))), flags); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		nfd = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [nfd, sa, err];
		}
		if (len[0] > 112) {
			$panic(new $String("RawSockaddrAny too small"));
		}
		_tuple$1 = anyToSockaddr(rsa[0]);
		sa = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = Close(nfd); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			nfd = 0;
		/* } */ case 3:
		$s = -1; return [nfd, sa, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Accept4 }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.fd = fd; $f.flags = flags; $f.len = len; $f.nfd = nfd; $f.rsa = rsa; $f.sa = sa; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Accept4 = Accept4;
	SetsockoptIPMreqn = function(fd, level, opt, mreq) {
		var $24r, _array, _r, _struct, _view, err, fd, level, mreq, opt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _array = $f._array; _r = $f._r; _struct = $f._struct; _view = $f._view; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; opt = $f.opt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_array = new Uint8Array(12);
		_r = setsockopt(fd, level, opt, (_array), 12); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Address = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 4, _array.buffer.byteLength)), _struct.Ifindex = _view.getInt32(8, true);
		err = _r;
		$24r = err;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetsockoptIPMreqn }; } $f.$24r = $24r; $f._array = _array; $f._r = _r; $f._struct = _struct; $f._view = _view; $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.opt = opt; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetsockoptIPMreqn = SetsockoptIPMreqn;
	Recvmsg = function(fd, p, oob, flags) {
		var _array, _r, _r$1, _struct, _tuple, _tuple$1, _tuple$2, _view, dummy, err, fd, flags, from, iov, msg, n, oob, oobn, p, recvflags, rsa, sockType, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _array = $f._array; _r = $f._r; _r$1 = $f._r$1; _struct = $f._struct; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _view = $f._view; dummy = $f.dummy; err = $f.err; fd = $f.fd; flags = $f.flags; from = $f.from; iov = $f.iov; msg = $f.msg; n = $f.n; oob = $f.oob; oobn = $f.oobn; p = $f.p; recvflags = $f.recvflags; rsa = $f.rsa; sockType = $f.sockType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dummy = [dummy];
		iov = [iov];
		msg = [msg];
		rsa = [rsa];
		n = 0;
		oobn = 0;
		recvflags = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		msg[0] = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$10.zero(), ptrType$20.nil, new $Uint64(0, 0), ptrType$2.nil, new $Uint64(0, 0), 0, arrayType$10.zero());
		rsa[0] = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, arrayType$11.zero()), arrayType$12.zero());
		_array = new Uint8Array(112);
		msg[0].Name = ((_array));
		_struct = rsa[0], _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Family = _view.getUint16(0, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		msg[0].Namelen = 112;
		iov[0] = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov[0].Base = $indexPtr(p.$array, p.$offset + 0, ptrType$2);
			iov[0].SetLen(p.$length);
		}
		dummy[0] = 0;
		/* */ if (oob.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (oob.$length > 0) { */ case 1:
			/* */ if (p.$length === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.$length === 0) { */ case 3:
				sockType = 0;
				_r = GetsockoptInt(fd, 1, 3); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				sockType = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [n, oobn, recvflags, from, err];
				}
				if (!((sockType === 2))) {
					iov[0].Base = (dummy.$ptr || (dummy.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dummy)));
					iov[0].SetLen(1);
				}
			/* } */ case 4:
			msg[0].Control = $indexPtr(oob.$array, oob.$offset + 0, ptrType$2);
			msg[0].SetControllen(oob.$length);
		/* } */ case 2:
		msg[0].Iov = iov[0];
		msg[0].Iovlen = new $Uint64(0, 1);
		_r$1 = recvmsg(fd, msg[0], flags); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		n = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [n, oobn, recvflags, from, err];
		}
		oobn = ((msg[0].Controllen.$low >> 0));
		recvflags = ((msg[0].Flags >> 0));
		if (!((rsa[0].Addr.Family === 0))) {
			_tuple$2 = anyToSockaddr(rsa[0]);
			from = _tuple$2[0];
			err = _tuple$2[1];
		}
		$s = -1; return [n, oobn, recvflags, from, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Recvmsg }; } $f._array = _array; $f._r = _r; $f._r$1 = _r$1; $f._struct = _struct; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._view = _view; $f.dummy = dummy; $f.err = err; $f.fd = fd; $f.flags = flags; $f.from = from; $f.iov = iov; $f.msg = msg; $f.n = n; $f.oob = oob; $f.oobn = oobn; $f.p = p; $f.recvflags = recvflags; $f.rsa = rsa; $f.sockType = sockType; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Recvmsg = Recvmsg;
	SendmsgN = function(fd, p, oob, to, flags) {
		var _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, dummy, err, err$1, fd, flags, iov, msg, n, oob, p, ptr, salen, sockType, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; dummy = $f.dummy; err = $f.err; err$1 = $f.err$1; fd = $f.fd; flags = $f.flags; iov = $f.iov; msg = $f.msg; n = $f.n; oob = $f.oob; p = $f.p; ptr = $f.ptr; salen = $f.salen; sockType = $f.sockType; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dummy = [dummy];
		iov = [iov];
		msg = [msg];
		n = 0;
		err = $ifaceNil;
		ptr = 0;
		salen = 0;
		/* */ if (!($interfaceIsEqual(to, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(to, $ifaceNil))) { */ case 1:
			err$1 = $ifaceNil;
			_r = to.sockaddr(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			ptr = _tuple[0];
			salen = _tuple[1];
			err$1 = _tuple[2];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = err$1;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		msg[0] = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$10.zero(), ptrType$20.nil, new $Uint64(0, 0), ptrType$2.nil, new $Uint64(0, 0), 0, arrayType$10.zero());
		msg[0].Name = (ptr);
		msg[0].Namelen = ((salen >>> 0));
		iov[0] = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov[0].Base = $indexPtr(p.$array, p.$offset + 0, ptrType$2);
			iov[0].SetLen(p.$length);
		}
		dummy[0] = 0;
		/* */ if (oob.$length > 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (oob.$length > 0) { */ case 4:
			/* */ if (p.$length === 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (p.$length === 0) { */ case 6:
				sockType = 0;
				_r$1 = GetsockoptInt(fd, 1, 3); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				sockType = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$2 = 0;
					_tmp$3 = err;
					n = _tmp$2;
					err = _tmp$3;
					$s = -1; return [n, err];
				}
				if (!((sockType === 2))) {
					iov[0].Base = (dummy.$ptr || (dummy.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dummy)));
					iov[0].SetLen(1);
				}
			/* } */ case 7:
			msg[0].Control = $indexPtr(oob.$array, oob.$offset + 0, ptrType$2);
			msg[0].SetControllen(oob.$length);
		/* } */ case 5:
		msg[0].Iov = iov[0];
		msg[0].Iovlen = new $Uint64(0, 1);
		_r$2 = sendmsg(fd, msg[0], flags); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		n = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$4 = 0;
			_tmp$5 = err;
			n = _tmp$4;
			err = _tmp$5;
			$s = -1; return [n, err];
		}
		if (oob.$length > 0 && (p.$length === 0)) {
			n = 0;
		}
		_tmp$6 = n;
		_tmp$7 = $ifaceNil;
		n = _tmp$6;
		err = _tmp$7;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: SendmsgN }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.dummy = dummy; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.flags = flags; $f.iov = iov; $f.msg = msg; $f.n = n; $f.oob = oob; $f.p = p; $f.ptr = ptr; $f.salen = salen; $f.sockType = sockType; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SendmsgN = SendmsgN;
	ReadDirent = function(fd, buf) {
		var $24r, _r, _tuple, buf, err, fd, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; fd = $f.fd; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Getdents(fd, buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$24r = [n, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadDirent }; } $f.$24r = $24r; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.fd = fd; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadDirent = ReadDirent;
	Lstat = function(path, stat) {
		var $24r, _r, err, path, stat, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; err = $f.err; path = $f.path; stat = $f.stat; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = fstatat(-100, path, stat, 256); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		$24r = err;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Lstat }; } $f.$24r = $24r; $f._r = _r; $f.err = err; $f.path = path; $f.stat = stat; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Lstat = Lstat;
	Iovec.ptr.prototype.SetLen = function(length) {
		var iov, length;
		iov = this;
		iov.Len = (new $Uint64(0, length));
	};
	Iovec.prototype.SetLen = function(length) { return this.$val.SetLen(length); };
	Msghdr.ptr.prototype.SetControllen = function(length) {
		var length, msghdr;
		msghdr = this;
		msghdr.Controllen = (new $Uint64(0, length));
	};
	Msghdr.prototype.SetControllen = function(length) { return this.$val.SetControllen(length); };
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var $24r, $24r$1, $24r$2, _array, _key, _r, _struct, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _view, addr, b, data, err, errno, fd, flags, hdr, length, m, offset, p, prot, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; _array = $f._array; _key = $f._key; _r = $f._r; _struct = $f._struct; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _view = $f._view; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; hdr = $f.hdr; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		b = [b];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		/* */ if (length <= 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (length <= 0) { */ case 1:
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			$24r = [data, err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		_r = m.mmap(0, ((length >>> 0)), prot, flags, fd, offset); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		/* */ if (!($interfaceIsEqual(errno, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(errno, $ifaceNil))) { */ case 5:
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			$24r$1 = [data, err];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		b[0] = sliceType.nil;
		hdr = ((_array = ((b.$ptr || (b.$ptr = new ptrType$23(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, b)))), _struct = new unsafeheader.Slice.ptr(0, 0, 0), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getInt(4, true), _struct.Cap = _view.getInt(8, true), _struct));
		hdr.Data = (addr);
		hdr.Cap = length;
		hdr.Len = length;
		p = $indexPtr(b[0].$array, b[0].$offset + (b[0].$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b[0] };
		_tmp$4 = b[0];
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		$24r$2 = [data, err];
		$s = 9; case 9: return $24r$2;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f._array = _array; $f._key = _key; $f._r = _r; $f._struct = _struct; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._view = _view; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.hdr = hdr; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var $24r, $24r$1, $24r$2, $24r$3, _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		/* */ if ((data.$length === 0) || !((data.$length === data.$capacity))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((data.$length === 0) || !((data.$length === data.$capacity))) { */ case 1:
			err = new Errno(22);
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		/* */ if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) { */ case 5:
			err = new Errno(22);
			$24r$1 = err;
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		_r = m.munmap((($sliceToArray(b))), ((b.$length >>> 0))); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		/* */ if (!($interfaceIsEqual(errno, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(errno, $ifaceNil))) { */ case 9:
			err = errno;
			$24r$2 = err;
			$s = 11; case 11: return $24r$2;
		/* } */ case 10:
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		$24r$3 = err;
		$s = 12; case 12: return $24r$3;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var e, s;
		e = this.$val;
		if (0 <= ((e >> 0)) && ((e >> 0)) < 133) {
			s = ((e < 0 || e >= errors$1.length) ? ($throwRuntimeError("index out of range"), undefined) : errors$1[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa(((e >> 0)));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Is = function(target) {
		var _1, e, target;
		e = this.$val;
		_1 = target;
		if ($interfaceIsEqual(_1, (oserror.ErrPermission))) {
			return (e === 13) || (e === 1);
		} else if ($interfaceIsEqual(_1, (oserror.ErrExist))) {
			return (e === 17) || (e === 39);
		} else if ($interfaceIsEqual(_1, (oserror.ErrNotExist))) {
			return e === 2;
		}
		return false;
	};
	$ptrType(Errno).prototype.Is = function(target) { return new Errno(this.$get()).Is(target); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 23) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val;
		return (e === 11) || (e === 11) || (e === 110);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (11)) {
			return errEAGAIN;
		} else if (_1 === (22)) {
			return errEINVAL;
		} else if (_1 === (2)) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var _r, _tuple, err, fd, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; fd = $f.fd; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = read(fd, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (false) {
			if (n > 0) {
				race.WriteRange(($sliceToArray(p)), n);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				race.Acquire(((ioSync$24ptr || (ioSync$24ptr = new ptrType$24(function() { return ioSync; }, function($v) { ioSync = $v; })))));
			}
		}
		if (false && n > 0) {
			msanWrite(($sliceToArray(p)), n);
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Read }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.fd = fd; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var _r, _tmp, _tmp$1, _tuple, err, fd, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; fd = $f.fd; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge(((ioSync$24ptr || (ioSync$24ptr = new ptrType$24(function() { return ioSync; }, function($v) { ioSync = $v; })))));
		}
		/* */ if (false && ((fd === 1) || (fd === 2))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false && ((fd === 1) || (fd === 2))) { */ case 1:
			n = faketimeWrite(fd, p);
			if (n < 0) {
				_tmp = 0;
				_tmp$1 = errnoErr(((-n >>> 0)));
				n = _tmp;
				err = _tmp$1;
			}
			$s = 3; continue;
		/* } else { */ case 2:
			_r = write(fd, p); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
		/* } */ case 3:
		if (false && n > 0) {
			race.ReadRange(($sliceToArray(p)), n);
		}
		if (false && n > 0) {
			msanRead(($sliceToArray(p)), n);
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.fd = fd; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Write = Write;
	GetsockoptInt = function(fd, level, opt) {
		var _r, _tmp, _tmp$1, err, fd, level, n, opt, vallen, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; err = $f.err; fd = $f.fd; level = $f.level; n = $f.n; opt = $f.opt; vallen = $f.vallen; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = [n];
		vallen = [vallen];
		value = 0;
		err = $ifaceNil;
		n[0] = 0;
		vallen[0] = 4;
		_r = getsockopt(fd, level, opt, ((n.$ptr || (n.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, n)))), (vallen.$ptr || (vallen.$ptr = new ptrType$19(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, vallen)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		_tmp = ((n[0] >> 0));
		_tmp$1 = err;
		value = _tmp;
		err = _tmp$1;
		$s = -1; return [value, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: GetsockoptInt }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.err = err; $f.fd = fd; $f.level = level; $f.n = n; $f.opt = opt; $f.vallen = vallen; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.GetsockoptInt = GetsockoptInt;
	Recvfrom = function(fd, p, flags) {
		var _r, _tuple, _tuple$1, err, fd, flags, from, len, n, p, rsa, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; fd = $f.fd; flags = $f.flags; from = $f.from; len = $f.len; n = $f.n; p = $f.p; rsa = $f.rsa; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		len = [len];
		rsa = [rsa];
		n = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		rsa[0] = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, arrayType$11.zero()), arrayType$12.zero());
		len[0] = 112;
		_r = recvfrom(fd, p, flags, rsa[0], (len.$ptr || (len.$ptr = new ptrType$19(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, len)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [n, from, err];
		}
		if (!((rsa[0].Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa[0]);
			from = _tuple$1[0];
			err = _tuple$1[1];
		}
		$s = -1; return [n, from, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Recvfrom }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.fd = fd; $f.flags = flags; $f.from = from; $f.len = len; $f.n = n; $f.p = p; $f.rsa = rsa; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Recvfrom = Recvfrom;
	Sendto = function(fd, p, flags, to) {
		var $24r, _r, _r$1, _tuple, err, fd, flags, n, p, ptr, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; fd = $f.fd; flags = $f.flags; n = $f.n; p = $f.p; ptr = $f.ptr; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = to.sockaddr(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ptr = _tuple[0];
		n = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			$s = -1; return err;
		}
		_r$1 = sendto(fd, p, flags, ptr, n); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$24r = err;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sendto }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.fd = fd; $f.flags = flags; $f.n = n; $f.p = p; $f.ptr = ptr; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sendto = Sendto;
	SetsockoptByte = function(fd, level, opt, value) {
		var $24r, _r, err, fd, level, opt, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; err = $f.err; fd = $f.fd; level = $f.level; opt = $f.opt; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = [value];
		err = $ifaceNil;
		_r = setsockopt(fd, level, opt, ((value.$ptr || (value.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value)))), 1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		$24r = err;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetsockoptByte }; } $f.$24r = $24r; $f._r = _r; $f.err = err; $f.fd = fd; $f.level = level; $f.opt = opt; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetsockoptByte = SetsockoptByte;
	SetsockoptInt = function(fd, level, opt, value) {
		var $24r, _r, err, fd, level, n, opt, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; err = $f.err; fd = $f.fd; level = $f.level; n = $f.n; opt = $f.opt; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = [n];
		err = $ifaceNil;
		n[0] = ((value >> 0));
		_r = setsockopt(fd, level, opt, ((n.$ptr || (n.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, n)))), 4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		$24r = err;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetsockoptInt }; } $f.$24r = $24r; $f._r = _r; $f.err = err; $f.fd = fd; $f.level = level; $f.n = n; $f.opt = opt; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetsockoptInt = SetsockoptInt;
	SetsockoptInet4Addr = function(fd, level, opt, value) {
		var $24r, _r, err, fd, level, opt, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; err = $f.err; fd = $f.fd; level = $f.level; opt = $f.opt; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = setsockopt(fd, level, opt, ($sliceToArray(new sliceType(value))), 4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		$24r = err;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetsockoptInet4Addr }; } $f.$24r = $24r; $f._r = _r; $f.err = err; $f.fd = fd; $f.level = level; $f.opt = opt; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetsockoptInet4Addr = SetsockoptInet4Addr;
	SetsockoptIPMreq = function(fd, level, opt, mreq) {
		var $24r, _array, _r, _struct, _view, err, fd, level, mreq, opt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _array = $f._array; _r = $f._r; _struct = $f._struct; _view = $f._view; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; opt = $f.opt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_array = new Uint8Array(8);
		_r = setsockopt(fd, level, opt, (_array), 8); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 4, _array.buffer.byteLength));
		err = _r;
		$24r = err;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetsockoptIPMreq }; } $f.$24r = $24r; $f._array = _array; $f._r = _r; $f._struct = _struct; $f._view = _view; $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.opt = opt; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetsockoptIPMreq = SetsockoptIPMreq;
	SetsockoptIPv6Mreq = function(fd, level, opt, mreq) {
		var $24r, _array, _r, _struct, _view, err, fd, level, mreq, opt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _array = $f._array; _r = $f._r; _struct = $f._struct; _view = $f._view; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; opt = $f.opt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_array = new Uint8Array(20);
		_r = setsockopt(fd, level, opt, (_array), 20); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = _view.getUint32(16, true);
		err = _r;
		$24r = err;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetsockoptIPv6Mreq }; } $f.$24r = $24r; $f._array = _array; $f._r = _r; $f._struct = _struct; $f._view = _view; $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.opt = opt; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetsockoptIPv6Mreq = SetsockoptIPv6Mreq;
	SetsockoptLinger = function(fd, level, opt, l) {
		var $24r, _array, _r, _struct, _view, err, fd, l, level, opt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _array = $f._array; _r = $f._r; _struct = $f._struct; _view = $f._view; err = $f.err; fd = $f.fd; l = $f.l; level = $f.level; opt = $f.opt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_array = new Uint8Array(8);
		_r = setsockopt(fd, level, opt, (_array), 8); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = l, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Onoff = _view.getInt32(0, true), _struct.Linger = _view.getInt32(4, true);
		err = _r;
		$24r = err;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetsockoptLinger }; } $f.$24r = $24r; $f._array = _array; $f._r = _r; $f._struct = _struct; $f._view = _view; $f.err = err; $f.fd = fd; $f.l = l; $f.level = level; $f.opt = opt; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetsockoptLinger = SetsockoptLinger;
	faketimeWrite = function(fd, p) {
		var fd, p;
		$panic(new $String("not implemented"));
	};
	Close = function(fd) {
		var _r, _tuple, e1, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = Syscall(3, ((fd >>> 0)), 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Close }; } $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Close = Close;
	Dup = function(oldfd) {
		var _r, _tuple, e1, err, fd, oldfd, r0, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; oldfd = $f.oldfd; r0 = $f.r0; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = 0;
		err = $ifaceNil;
		_r = Syscall(32, ((oldfd >>> 0)), 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		fd = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [fd, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Dup }; } $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.oldfd = oldfd; $f.r0 = r0; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Dup = Dup;
	Fchdir = function(fd) {
		var _r, _tuple, e1, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = Syscall(81, ((fd >>> 0)), 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fchdir }; } $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var _r, _tuple, e1, err, fd, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = Syscall(91, ((fd >>> 0)), ((mode >>> 0)), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fchmod }; } $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fchmod = Fchmod;
	fcntl = function(fd, cmd, arg) {
		var _r, _tuple, arg, cmd, e1, err, fd, r0, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; arg = $f.arg; cmd = $f.cmd; e1 = $f.e1; err = $f.err; fd = $f.fd; r0 = $f.r0; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = 0;
		err = $ifaceNil;
		_r = Syscall(72, ((fd >>> 0)), ((cmd >>> 0)), ((arg >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		val = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [val, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: fcntl }; } $f._r = _r; $f._tuple = _tuple; $f.arg = arg; $f.cmd = cmd; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.r0 = r0; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Fsync = function(fd) {
		var _r, _tuple, e1, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = Syscall(74, ((fd >>> 0)), 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fsync }; } $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fsync = Fsync;
	Getdents = function(fd, buf) {
		var _p0, _r, _tuple, buf, e1, err, fd, n, r0, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _p0 = $f._p0; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; e1 = $f.e1; err = $f.err; fd = $f.fd; n = $f.n; r0 = $f.r0; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_r = Syscall(217, ((fd >>> 0)), (_p0), ((buf.$length >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Getdents }; } $f._p0 = _p0; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.n = n; $f.r0 = r0; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Getdents = Getdents;
	read = function(fd, p) {
		var _p0, _r, _tuple, e1, err, fd, n, p, r0, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _p0 = $f._p0; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; n = $f.n; p = $f.p; r0 = $f.r0; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_r = Syscall(0, ((fd >>> 0)), (_p0), ((p.$length >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: read }; } $f._p0 = _p0; $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.n = n; $f.p = p; $f.r0 = r0; $f.$s = $s; $f.$r = $r; return $f;
	};
	Uname = function(buf) {
		var _array, _r, _struct, _tuple, _view, buf, e1, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _array = $f._array; _r = $f._r; _struct = $f._struct; _tuple = $f._tuple; _view = $f._view; buf = $f.buf; e1 = $f.e1; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_array = new Uint8Array(390);
		_r = RawSyscall(63, ((_array)), 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = buf, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Sysname = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Nodename = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 65, _array.buffer.byteLength)), _struct.Release = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 130, _array.buffer.byteLength)), _struct.Version = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 195, _array.buffer.byteLength)), _struct.Machine = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 260, _array.buffer.byteLength)), _struct.Domainname = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 325, _array.buffer.byteLength));
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Uname }; } $f._array = _array; $f._r = _r; $f._struct = _struct; $f._tuple = _tuple; $f._view = _view; $f.buf = buf; $f.e1 = e1; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Uname = Uname;
	write = function(fd, p) {
		var _p0, _r, _tuple, e1, err, fd, n, p, r0, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _p0 = $f._p0; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; n = $f.n; p = $f.p; r0 = $f.r0; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_r = Syscall(1, ((fd >>> 0)), (_p0), ((p.$length >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: write }; } $f._p0 = _p0; $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.n = n; $f.p = p; $f.r0 = r0; $f.$s = $s; $f.$r = $r; return $f;
	};
	munmap = function(addr, length) {
		var _r, _tuple, addr, e1, err, length, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; addr = $f.addr; e1 = $f.e1; err = $f.err; length = $f.length; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = Syscall(11, (addr), (length), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: munmap }; } $f._r = _r; $f._tuple = _tuple; $f.addr = addr; $f.e1 = e1; $f.err = err; $f.length = length; $f.$s = $s; $f.$r = $r; return $f;
	};
	Fchown = function(fd, uid, gid) {
		var _r, _tuple, e1, err, fd, gid, uid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; gid = $f.gid; uid = $f.uid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = Syscall(93, ((fd >>> 0)), ((uid >>> 0)), ((gid >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fchown }; } $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var _array, _r, _struct, _tuple, _view, e1, err, fd, stat, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _array = $f._array; _r = $f._r; _struct = $f._struct; _tuple = $f._tuple; _view = $f._view; e1 = $f.e1; err = $f.err; fd = $f.fd; stat = $f.stat; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_r = Syscall(5, ((fd >>> 0)), ((_array)), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fstat }; } $f._array = _array; $f._r = _r; $f._struct = _struct; $f._tuple = _tuple; $f._view = _view; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.stat = stat; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fstat = Fstat;
	Ftruncate = function(fd, length) {
		var _r, _tuple, e1, err, fd, length, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; length = $f.length; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = Syscall(77, ((fd >>> 0)), ((length.$low >>> 0)), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Ftruncate }; } $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.length = length; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Ftruncate = Ftruncate;
	Pread = function(fd, p, offset) {
		var _p0, _r, _tuple, e1, err, fd, n, offset, p, r0, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _p0 = $f._p0; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; n = $f.n; offset = $f.offset; p = $f.p; r0 = $f.r0; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_r = Syscall6(17, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((offset.$low >>> 0)), 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pread }; } $f._p0 = _p0; $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.n = n; $f.offset = offset; $f.p = p; $f.r0 = r0; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var _p0, _r, _tuple, e1, err, fd, n, offset, p, r0, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _p0 = $f._p0; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; n = $f.n; offset = $f.offset; p = $f.p; r0 = $f.r0; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_r = Syscall6(18, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((offset.$low >>> 0)), 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pwrite }; } $f._p0 = _p0; $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.n = n; $f.offset = offset; $f.p = p; $f.r0 = r0; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Pwrite = Pwrite;
	Seek = function(fd, offset, whence) {
		var _r, _tuple, e1, err, fd, off, offset, r0, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; off = $f.off; offset = $f.offset; r0 = $f.r0; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		off = new $Int64(0, 0);
		err = $ifaceNil;
		_r = Syscall(8, ((fd >>> 0)), ((offset.$low >>> 0)), ((whence >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		off = (new $Int64(0, r0.constructor === Number ? r0 : 1));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [off, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Seek }; } $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.off = off; $f.offset = offset; $f.r0 = r0; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Seek = Seek;
	Shutdown = function(fd, how) {
		var _r, _tuple, e1, err, fd, how, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; fd = $f.fd; how = $f.how; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = Syscall(48, ((fd >>> 0)), ((how >>> 0)), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Shutdown }; } $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.how = how; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Shutdown = Shutdown;
	accept = function(s, rsa, addrlen) {
		var _array, _r, _struct, _tuple, _view, addrlen, e1, err, fd, r0, rsa, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _array = $f._array; _r = $f._r; _struct = $f._struct; _tuple = $f._tuple; _view = $f._view; addrlen = $f.addrlen; e1 = $f.e1; err = $f.err; fd = $f.fd; r0 = $f.r0; rsa = $f.rsa; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = 0;
		err = $ifaceNil;
		_array = new Uint8Array(112);
		_r = Syscall(43, ((s >>> 0)), ((_array)), ((addrlen))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Family = _view.getUint16(0, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		fd = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [fd, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: accept }; } $f._array = _array; $f._r = _r; $f._struct = _struct; $f._tuple = _tuple; $f._view = _view; $f.addrlen = addrlen; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.r0 = r0; $f.rsa = rsa; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	accept4 = function(s, rsa, addrlen, flags) {
		var _array, _r, _struct, _tuple, _view, addrlen, e1, err, fd, flags, r0, rsa, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _array = $f._array; _r = $f._r; _struct = $f._struct; _tuple = $f._tuple; _view = $f._view; addrlen = $f.addrlen; e1 = $f.e1; err = $f.err; fd = $f.fd; flags = $f.flags; r0 = $f.r0; rsa = $f.rsa; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = 0;
		err = $ifaceNil;
		_array = new Uint8Array(112);
		_r = Syscall6(288, ((s >>> 0)), ((_array)), ((addrlen)), ((flags >>> 0)), 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Family = _view.getUint16(0, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		fd = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [fd, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: accept4 }; } $f._array = _array; $f._r = _r; $f._struct = _struct; $f._tuple = _tuple; $f._view = _view; $f.addrlen = addrlen; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.flags = flags; $f.r0 = r0; $f.rsa = rsa; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	fstatat = function(fd, path, stat, flags) {
		var _array, _p0, _r, _struct, _tuple, _tuple$1, _view, e1, err, fd, flags, path, stat, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _array = $f._array; _p0 = $f._p0; _r = $f._r; _struct = $f._struct; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _view = $f._view; e1 = $f.e1; err = $f.err; fd = $f.fd; flags = $f.flags; path = $f.path; stat = $f.stat; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_array = new Uint8Array(144);
		_r = Syscall6(262, ((fd >>> 0)), ((_p0)), ((_array)), ((flags >>> 0)), 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		_tuple$1 = _r;
		e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fstatat }; } $f._array = _array; $f._p0 = _p0; $f._r = _r; $f._struct = _struct; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._view = _view; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.flags = flags; $f.path = path; $f.stat = stat; $f.$s = $s; $f.$r = $r; return $f;
	};
	getsockopt = function(s, level, name, val, vallen) {
		var _r, _tuple, e1, err, level, name, s, val, vallen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; level = $f.level; name = $f.name; s = $f.s; val = $f.val; vallen = $f.vallen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = Syscall6(55, ((s >>> 0)), ((level >>> 0)), ((name >>> 0)), (val), ((vallen)), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getsockopt }; } $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.level = level; $f.name = name; $f.s = s; $f.val = val; $f.vallen = vallen; $f.$s = $s; $f.$r = $r; return $f;
	};
	setsockopt = function(s, level, name, val, vallen) {
		var _r, _tuple, e1, err, level, name, s, val, vallen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e1 = $f.e1; err = $f.err; level = $f.level; name = $f.name; s = $f.s; val = $f.val; vallen = $f.vallen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = Syscall6(54, ((s >>> 0)), ((level >>> 0)), ((name >>> 0)), (val), (vallen), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: setsockopt }; } $f._r = _r; $f._tuple = _tuple; $f.e1 = e1; $f.err = err; $f.level = level; $f.name = name; $f.s = s; $f.val = val; $f.vallen = vallen; $f.$s = $s; $f.$r = $r; return $f;
	};
	recvfrom = function(fd, p, flags, from, fromlen) {
		var _array, _p0, _r, _struct, _tuple, _view, e1, err, fd, flags, from, fromlen, n, p, r0, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _array = $f._array; _p0 = $f._p0; _r = $f._r; _struct = $f._struct; _tuple = $f._tuple; _view = $f._view; e1 = $f.e1; err = $f.err; fd = $f.fd; flags = $f.flags; from = $f.from; fromlen = $f.fromlen; n = $f.n; p = $f.p; r0 = $f.r0; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_array = new Uint8Array(112);
		_r = Syscall6(45, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((flags >>> 0)), ((_array)), ((fromlen))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = from, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Family = _view.getUint16(0, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: recvfrom }; } $f._array = _array; $f._p0 = _p0; $f._r = _r; $f._struct = _struct; $f._tuple = _tuple; $f._view = _view; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.flags = flags; $f.from = from; $f.fromlen = fromlen; $f.n = n; $f.p = p; $f.r0 = r0; $f.$s = $s; $f.$r = $r; return $f;
	};
	sendto = function(s, buf, flags, to, addrlen) {
		var _p0, _r, _tuple, addrlen, buf, e1, err, flags, s, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _p0 = $f._p0; _r = $f._r; _tuple = $f._tuple; addrlen = $f.addrlen; buf = $f.buf; e1 = $f.e1; err = $f.err; flags = $f.flags; s = $f.s; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_r = Syscall6(44, ((s >>> 0)), (_p0), ((buf.$length >>> 0)), ((flags >>> 0)), (to), ((addrlen >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sendto }; } $f._p0 = _p0; $f._r = _r; $f._tuple = _tuple; $f.addrlen = addrlen; $f.buf = buf; $f.e1 = e1; $f.err = err; $f.flags = flags; $f.s = s; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	recvmsg = function(s, msg, flags) {
		var _array, _r, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _array = $f._array; _r = $f._r; _struct = $f._struct; _tuple = $f._tuple; _view = $f._view; e1 = $f.e1; err = $f.err; flags = $f.flags; msg = $f.msg; n = $f.n; r0 = $f.r0; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(48);
		_r = Syscall(47, ((s >>> 0)), ((_array)), ((flags >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Controllen = new $Uint64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Flags = _view.getInt32(40, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 44, _array.buffer.byteLength));
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: recvmsg }; } $f._array = _array; $f._r = _r; $f._struct = _struct; $f._tuple = _tuple; $f._view = _view; $f.e1 = e1; $f.err = err; $f.flags = flags; $f.msg = msg; $f.n = n; $f.r0 = r0; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	sendmsg = function(s, msg, flags) {
		var _array, _r, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _array = $f._array; _r = $f._r; _struct = $f._struct; _tuple = $f._tuple; _view = $f._view; e1 = $f.e1; err = $f.err; flags = $f.flags; msg = $f.msg; n = $f.n; r0 = $f.r0; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(48);
		_r = Syscall(46, ((s >>> 0)), ((_array)), ((flags >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Controllen = new $Uint64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Flags = _view.getInt32(40, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 44, _array.buffer.byteLength));
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: sendmsg }; } $f._array = _array; $f._r = _r; $f._struct = _struct; $f._tuple = _tuple; $f._view = _view; $f.e1 = e1; $f.err = err; $f.flags = flags; $f.msg = msg; $f.n = n; $f.r0 = r0; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	mmap = function(addr, length, prot, flags, fd, offset) {
		var _r, _tuple, addr, e1, err, fd, flags, length, offset, prot, r0, xaddr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; addr = $f.addr; e1 = $f.e1; err = $f.err; fd = $f.fd; flags = $f.flags; length = $f.length; offset = $f.offset; prot = $f.prot; r0 = $f.r0; xaddr = $f.xaddr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		xaddr = 0;
		err = $ifaceNil;
		_r = Syscall6(9, (addr), (length), ((prot >>> 0)), ((flags >>> 0)), ((fd >>> 0)), ((offset.$low >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r0 = _tuple[0];
		e1 = _tuple[2];
		xaddr = (r0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		$s = -1; return [xaddr, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: mmap }; } $f._r = _r; $f._tuple = _tuple; $f.addr = addr; $f.e1 = e1; $f.err = err; $f.fd = fd; $f.flags = flags; $f.length = length; $f.offset = offset; $f.prot = prot; $f.r0 = r0; $f.xaddr = xaddr; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$26.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$12.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$28.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Is", name: "Is", pkg: "", typ: $funcType([$error], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$29.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$30.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$31.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$32.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	ptrType$20.methods = [{prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$34.methods = [{prop: "SetControllen", name: "SetControllen", pkg: "", typ: $funcType([$Int], [], false)}];
	RawConn.init([{prop: "Control", name: "Control", pkg: "", typ: $funcType([funcType], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([funcType$1], [$error], false)}]);
	SockaddrLinklayer.init("syscall", [{prop: "Protocol", name: "Protocol", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Ifindex", name: "Ifindex", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Hatype", name: "Hatype", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pkttype", name: "Pkttype", embedded: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Halen", name: "Halen", embedded: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: arrayType$2, tag: ""}, {prop: "raw", name: "raw", embedded: false, exported: false, typ: RawSockaddrLinklayer, tag: ""}]);
	SockaddrNetlink.init("syscall", [{prop: "Family", name: "Family", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pad", name: "Pad", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pid", name: "Pid", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Groups", name: "Groups", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "raw", name: "raw", embedded: false, exported: false, typ: RawSockaddrNetlink, tag: ""}]);
	mmapper.init("syscall", [{prop: "Mutex", name: "Mutex", embedded: true, exported: true, typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", embedded: false, exported: false, typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", embedded: false, exported: false, typ: funcType$2, tag: ""}, {prop: "munmap", name: "munmap", embedded: false, exported: false, typ: funcType$3, tag: ""}]);
	Sockaddr.init([{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}]);
	SockaddrInet4.init("syscall", [{prop: "Port", name: "Port", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: arrayType$10, tag: ""}, {prop: "raw", name: "raw", embedded: false, exported: false, typ: RawSockaddrInet4, tag: ""}]);
	SockaddrInet6.init("syscall", [{prop: "Port", name: "Port", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "ZoneId", name: "ZoneId", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: arrayType$3, tag: ""}, {prop: "raw", name: "raw", embedded: false, exported: false, typ: RawSockaddrInet6, tag: ""}]);
	SockaddrUnix.init("syscall", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "raw", name: "raw", embedded: false, exported: false, typ: RawSockaddrUnix, tag: ""}]);
	Timespec.init("", [{prop: "Sec", name: "Sec", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", embedded: false, exported: true, typ: $Int64, tag: ""}]);
	Stat_t.init("", [{prop: "Dev", name: "Dev", embedded: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Ino", name: "Ino", embedded: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Nlink", name: "Nlink", embedded: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Mode", name: "Mode", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Uid", name: "Uid", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "X__pad0", name: "X__pad0", embedded: false, exported: true, typ: $Int32, tag: ""}, {prop: "Rdev", name: "Rdev", embedded: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Size", name: "Size", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Atim", name: "Atim", embedded: false, exported: true, typ: Timespec, tag: ""}, {prop: "Mtim", name: "Mtim", embedded: false, exported: true, typ: Timespec, tag: ""}, {prop: "Ctim", name: "Ctim", embedded: false, exported: true, typ: Timespec, tag: ""}, {prop: "X__unused", name: "X__unused", embedded: false, exported: true, typ: arrayType$6, tag: ""}]);
	RawSockaddrInet4.init("", [{prop: "Family", name: "Family", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Port", name: "Port", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: arrayType$10, tag: ""}, {prop: "Zero", name: "Zero", embedded: false, exported: true, typ: arrayType$2, tag: ""}]);
	RawSockaddrInet6.init("", [{prop: "Family", name: "Family", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Port", name: "Port", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Flowinfo", name: "Flowinfo", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: arrayType$3, tag: ""}, {prop: "Scope_id", name: "Scope_id", embedded: false, exported: true, typ: $Uint32, tag: ""}]);
	RawSockaddrUnix.init("", [{prop: "Family", name: "Family", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Path", name: "Path", embedded: false, exported: true, typ: arrayType$9, tag: ""}]);
	RawSockaddrLinklayer.init("", [{prop: "Family", name: "Family", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Protocol", name: "Protocol", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Ifindex", name: "Ifindex", embedded: false, exported: true, typ: $Int32, tag: ""}, {prop: "Hatype", name: "Hatype", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pkttype", name: "Pkttype", embedded: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Halen", name: "Halen", embedded: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: arrayType$2, tag: ""}]);
	RawSockaddrNetlink.init("", [{prop: "Family", name: "Family", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pad", name: "Pad", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pid", name: "Pid", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Groups", name: "Groups", embedded: false, exported: true, typ: $Uint32, tag: ""}]);
	RawSockaddr.init("", [{prop: "Family", name: "Family", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Data", name: "Data", embedded: false, exported: true, typ: arrayType$11, tag: ""}]);
	RawSockaddrAny.init("", [{prop: "Addr", name: "Addr", embedded: false, exported: true, typ: RawSockaddr, tag: ""}, {prop: "Pad", name: "Pad", embedded: false, exported: true, typ: arrayType$12, tag: ""}]);
	Linger.init("", [{prop: "Onoff", name: "Onoff", embedded: false, exported: true, typ: $Int32, tag: ""}, {prop: "Linger", name: "Linger", embedded: false, exported: true, typ: $Int32, tag: ""}]);
	Iovec.init("", [{prop: "Base", name: "Base", embedded: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Len", name: "Len", embedded: false, exported: true, typ: $Uint64, tag: ""}]);
	IPMreq.init("", [{prop: "Multiaddr", name: "Multiaddr", embedded: false, exported: true, typ: arrayType$10, tag: ""}, {prop: "Interface", name: "Interface", embedded: false, exported: true, typ: arrayType$10, tag: ""}]);
	IPMreqn.init("", [{prop: "Multiaddr", name: "Multiaddr", embedded: false, exported: true, typ: arrayType$10, tag: ""}, {prop: "Address", name: "Address", embedded: false, exported: true, typ: arrayType$10, tag: ""}, {prop: "Ifindex", name: "Ifindex", embedded: false, exported: true, typ: $Int32, tag: ""}]);
	IPv6Mreq.init("", [{prop: "Multiaddr", name: "Multiaddr", embedded: false, exported: true, typ: arrayType$3, tag: ""}, {prop: "Interface", name: "Interface", embedded: false, exported: true, typ: $Uint32, tag: ""}]);
	Msghdr.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Namelen", name: "Namelen", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", embedded: false, exported: true, typ: arrayType$10, tag: ""}, {prop: "Iov", name: "Iov", embedded: false, exported: true, typ: ptrType$20, tag: ""}, {prop: "Iovlen", name: "Iovlen", embedded: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Control", name: "Control", embedded: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Controllen", name: "Controllen", embedded: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Flags", name: "Flags", embedded: false, exported: true, typ: $Int32, tag: ""}, {prop: "Pad_cgo_1", name: "Pad_cgo_1", embedded: false, exported: true, typ: arrayType$10, tag: ""}]);
	Utsname.init("", [{prop: "Sysname", name: "Sysname", embedded: false, exported: true, typ: arrayType$24, tag: ""}, {prop: "Nodename", name: "Nodename", embedded: false, exported: true, typ: arrayType$24, tag: ""}, {prop: "Release", name: "Release", embedded: false, exported: true, typ: arrayType$24, tag: ""}, {prop: "Version", name: "Version", embedded: false, exported: true, typ: arrayType$24, tag: ""}, {prop: "Machine", name: "Machine", embedded: false, exported: true, typ: arrayType$24, tag: ""}, {prop: "Domainname", name: "Domainname", embedded: false, exported: true, typ: arrayType$24, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = oserror.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unsafeheader.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		$pkg.ForkLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(11);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors$1 = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "no such device or address", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource temporarily unavailable", "cannot allocate memory", "permission denied", "bad address", "block device required", "device or resource busy", "file exists", "invalid cross-device link", "no such device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "numerical result out of range", "resource deadlock avoided", "file name too long", "no locks available", "function not implemented", "directory not empty", "too many levels of symbolic links", "", "no message of desired type", "identifier removed", "channel number out of range", "level 2 not synchronized", "level 3 halted", "level 3 reset", "link number out of range", "protocol driver not attached", "no CSI structure available", "level 2 halted", "invalid exchange", "invalid request descriptor", "exchange full", "no anode", "invalid request code", "invalid slot", "", "bad font file format", "device not a stream", "no data available", "timer expired", "out of streams resources", "machine is not on the network", "package not installed", "object is remote", "link has been severed", "advertise error", "srmount error", "communication error on send", "protocol error", "multihop attempted", "RFS specific error", "bad message", "value too large for defined data type", "name not unique on network", "file descriptor in bad state", "remote address changed", "can not access a needed shared library", "accessing a corrupted shared library", ".lib section in a.out corrupted", "attempting to link in too many shared libraries", "cannot exec a shared library directly", "invalid or incomplete multibyte or wide character", "interrupted system call should be restarted", "streams pipe error", "too many users", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol", "address already in use", "cannot assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "transport endpoint is already connected", "transport endpoint is not connected", "cannot send after transport endpoint shutdown", "too many references: cannot splice", "connection timed out", "connection refused", "host is down", "no route to host", "operation already in progress", "operation now in progress", "stale NFS file handle", "structure needs cleaning", "not a XENIX named type file", "no XENIX semaphores available", "is a named type file", "remote I/O error", "disk quota exceeded", "no medium found", "wrong medium type", "operation canceled", "required key not available", "key has expired", "key has been revoked", "key was rejected by service", "owner died", "state not recoverable", "operation not possible due to RF-kill"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/syscall/unix"] = (function() {
	var $pkg = {}, $init, atomic, syscall, IsNonblock, CopyFileRange;
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	IsNonblock = function(fd) {
		var _tmp, _tmp$1, err, fd, nonblocking;
		nonblocking = false;
		err = $ifaceNil;
		_tmp = false;
		_tmp$1 = $ifaceNil;
		nonblocking = _tmp;
		err = _tmp$1;
		return [nonblocking, err];
	};
	$pkg.IsNonblock = IsNonblock;
	CopyFileRange = function(rfd, roff, wfd, woff, len, flags) {
		var _r, _tuple, err, errno, flags, len, n, r1, rfd, roff, wfd, woff, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; errno = $f.errno; flags = $f.flags; len = $f.len; n = $f.n; r1 = $f.r1; rfd = $f.rfd; roff = $f.roff; wfd = $f.wfd; woff = $f.woff; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = syscall.Syscall6(0, ((rfd >>> 0)), ((roff)), ((wfd >>> 0)), ((woff)), ((len >>> 0)), ((flags >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r1 = _tuple[0];
		errno = _tuple[2];
		n = ((r1 >> 0));
		if (!((errno === 0))) {
			err = new syscall.Errno(errno);
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CopyFileRange }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.errno = errno; $f.flags = flags; $f.len = len; $f.n = n; $f.r1 = r1; $f.rfd = rfd; $f.roff = roff; $f.wfd = wfd; $f.woff = woff; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.CopyFileRange = CopyFileRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = atomic.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.FcntlSyscall = 72;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Once, funcType$1, ptrType$4;
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	funcType$1 = $funcType([], [], false);
	ptrType$4 = $ptrType(Once);
	Once.ptr.prototype.Do = function(f) {
		var f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		/* */ if (o[0].done) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (o[0].done) { */ case 1:
			$s = 3; case 3: return;
		/* } */ case 2:
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType$4.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, ruleKind, rule, sliceType, sliceType$1, ptrType, sliceType$2, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$2, arrayType$3, ptrType$4, ptrType$7, zoneSources, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, daysBefore, startNano, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, errLocation, badData, x, init, initLocal, itoa, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, getnum3, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseSignedOffset, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, lessThanHalf, absDate, daysIn, daysSinceEpoch, runtimeNano, unixTime, Unix, isLeap, norm, Date, div, FixedZone, tzset, tzsetName, tzsetOffset, tzsetRule, tzsetNum, tzruleTime;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(wall_, ext_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wall = new $Uint64(0, 0);
			this.ext = new $Int64(0, 0);
			this.loc = ptrType$2.nil;
			return;
		}
		this.wall = wall_;
		this.ext = ext_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, extend_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.extend = "";
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.extend = extend_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	ruleKind = $pkg.ruleKind = $newType(4, $kindInt, "time.ruleKind", true, "time", false, null);
	rule = $pkg.rule = $newType(0, $kindStruct, "time.rule", true, "time", false, function(kind_, day_, week_, mon_, time_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.kind = 0;
			this.day = 0;
			this.week = 0;
			this.mon = 0;
			this.time = 0;
			return;
		}
		this.kind = kind_;
		this.day = day_;
		this.week = week_;
		this.mon = mon_;
		this.time = time_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(Location);
	arrayType$3 = $arrayType($Uint8, 32);
	ptrType$4 = $ptrType(ParseError);
	ptrType$7 = $ptrType(Time);
	init = function() {
		$unused(Unix(new $Int64(0, 0), new $Int64(0, 0)));
	};
	initLocal = function() {
		var _q, _r, d, min, offset, z;
		localLoc.name = "Local";
		z = new zone.ptr("", 0, false);
		d = new ($global.Date)();
		offset = $imul(($parseInt(d.getTimezoneOffset()) >> 0), -1);
		z.offset = $imul(offset, 60);
		z.name = "UTC";
		if (offset < 0) {
			z.name = z.name + ("-");
			offset = $imul(offset, (-1));
		} else {
			z.name = z.name + ("+");
		}
		z.name = z.name + (itoa((_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))));
		min = (_r = offset % 60, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (!((min === 0))) {
			z.name = z.name + (":" + itoa(min));
		}
		localLoc.zone = new sliceType([$clone(z, zone)]);
	};
	itoa = function(i) {
		var i;
		if (i < 10) {
			return $substring("0123456789", i, (i + 1 >> 0));
		}
		return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", ($imul(i, 2)), (($imul(i, 2)) + 2 >> 0));
	};
	startsWithLowerCase = function(str) {
		var c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$87, _tmp$88, _tmp$89, _tmp$9, _tmp$90, _tmp$91, _tmp$92, c, ch, i, j, layout, prefix, std, std$1, suffix, x$1;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = ((layout.charCodeAt(i) >> 0));
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 23;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x$1 = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x$1 < 0 || x$1 >= std0x.length) ? ($throwRuntimeError("index out of range"), undefined) : std0x[x$1]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 48) && (layout.charCodeAt((i + 2 >> 0)) === 50)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 267;
					_tmp$20 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$21 = $substring(layout, 0, i);
					_tmp$22 = 524;
					_tmp$23 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$21;
					std = _tmp$22;
					suffix = _tmp$23;
					return [prefix, std, suffix];
				}
				_tmp$24 = $substring(layout, 0, i);
				_tmp$25 = 259;
				_tmp$26 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$24;
				std = _tmp$25;
				suffix = _tmp$26;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$27 = $substring(layout, 0, i);
					_tmp$28 = 275;
					_tmp$29 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$27;
					std = _tmp$28;
					suffix = _tmp$29;
					return [prefix, std, suffix];
				}
				_tmp$30 = $substring(layout, 0, i);
				_tmp$31 = 263;
				_tmp$32 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$30;
				std = _tmp$31;
				suffix = _tmp$32;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$33 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$34 = 275;
						_tmp$35 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$33;
						std = _tmp$34;
						suffix = _tmp$35;
						return [prefix, std, suffix];
					}
					_tmp$36 = $substring(layout, 0, i);
					_tmp$37 = 264;
					_tmp$38 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$36;
					std = _tmp$37;
					suffix = _tmp$38;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 95) && (layout.charCodeAt((i + 2 >> 0)) === 50)) {
					_tmp$39 = $substring(layout, 0, i);
					_tmp$40 = 266;
					_tmp$41 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$39;
					std = _tmp$40;
					suffix = _tmp$41;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 525;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$45 = $substring(layout, 0, i);
				_tmp$46 = 527;
				_tmp$47 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$45;
				std = _tmp$46;
				suffix = _tmp$47;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$48 = $substring(layout, 0, i);
				_tmp$49 = 529;
				_tmp$50 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$48;
				std = _tmp$49;
				suffix = _tmp$50;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 533;
					_tmp$53 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 534;
					_tmp$56 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 30;
					_tmp$59 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 33;
					_tmp$62 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 32;
					_tmp$68 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 31;
					_tmp$71 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 25;
					_tmp$74 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 28;
					_tmp$77 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$81 = $substring(layout, 0, i);
					_tmp$82 = 27;
					_tmp$83 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$81;
					std = _tmp$82;
					suffix = _tmp$83;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$84 = $substring(layout, 0, i);
					_tmp$85 = 26;
					_tmp$86 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$84;
					std = _tmp$85;
					suffix = _tmp$86;
					return [prefix, std, suffix];
				}
			} else if (_1 === (46)) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 34;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 35;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$87 = $substring(layout, 0, i);
						_tmp$88 = std$1;
						_tmp$89 = $substring(layout, j);
						prefix = _tmp$87;
						std = _tmp$88;
						suffix = _tmp$89;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$90 = layout;
		_tmp$91 = 0;
		_tmp$92 = "";
		prefix = _tmp$90;
		std = _tmp$91;
		suffix = _tmp$92;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x$1, width) {
		var _q, b, buf, i, q, u, w, width, x$1;
		u = ((x$1 >>> 0));
		if (x$1 < 0) {
			b = $append(b, 45);
			u = ((-x$1 >>> 0));
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + u >>> 0) << 24 >>> 24)));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, neg, q, rem, s, x$1;
		x$1 = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple = leadingInt(s);
		q = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		x$1 = (((q.$low + ((q.$high >> 31) * 4294967296)) >> 0));
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x$1 = _tmp;
			err = _tmp$1;
			return [x$1, err];
		}
		if (neg) {
			x$1 = -x$1;
		}
		_tmp$2 = x$1;
		_tmp$3 = $ifaceNil;
		x$1 = _tmp$2;
		err = _tmp$3;
		return [x$1, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var _q, _r, b, buf, n, nanosec, start, trim, u, x$1;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[start] = ((((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$1])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, m0, m1, m2, s, sign, t, wid, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; buf = $f.buf; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; s = $f.s; sign = $f.sign; t = $f.t; wid = $f.wid; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			m2 = ((x$3 = t.ext, new $Uint64(x$3.$high, x$3.$low)));
			sign = 43;
			if ((x$4 = t.ext, (x$4.$high < 0 || (x$4.$high === 0 && x$4.$low < 0)))) {
				sign = 45;
				m2 = new $Uint64(-m2.$high, -m2.$low);
			}
			_tmp = $div64(m2, new $Uint64(0, 1000000000), false);
			_tmp$1 = $div64(m2, new $Uint64(0, 1000000000), true);
			m1 = _tmp;
			m2 = _tmp$1;
			_tmp$2 = $div64(m1, new $Uint64(0, 1000000000), false);
			_tmp$3 = $div64(m1, new $Uint64(0, 1000000000), true);
			m0 = _tmp$2;
			m1 = _tmp$3;
			buf = sliceType$3.nil;
			buf = $appendSlice(buf, " m=");
			buf = $append(buf, sign);
			wid = 0;
			if (!((m0.$high === 0 && m0.$low === 0))) {
				buf = appendInt(buf, ((m0.$low >> 0)), 0);
				wid = 9;
			}
			buf = appendInt(buf, ((m1.$low >> 0)), wid);
			buf = $append(buf, 46);
			buf = appendInt(buf, ((m2.$low >> 0)), 9);
			s = s + (($bytesToString(buf)));
		}
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.buf = buf; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.s = s; $f.sign = sign; $f.t = t; $f.wid = wid; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var _r, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r = $clone(t, Time).AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f._r = _r; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var _1, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, _tuple$3, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, yday, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; yday = $f.yday; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		abs = _tuple[2];
		year = -1;
		month = 0;
		day = 0;
		yday = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$2 = absDate(abs, true);
				year = _tuple$2[0];
				month = _tuple$2[1];
				day = _tuple$2[2];
				yday = _tuple$2[3];
				yday = yday + (1) >> 0;
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$3 = absClock(abs);
				hour = _tuple$3[0];
				min = _tuple$3[1];
				sec = _tuple$3[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (276)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$1 = y % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (275)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, ((month >> 0)), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, ((month >> 0)), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (266)) {
					if (yday < 100) {
						b = $append(b, 32);
						if (yday < 10) {
							b = $append(b, 32);
						}
					}
					b = appendInt(b, yday, 0);
				} else if (_1 === (267)) {
					b = appendInt(b, yday, 3);
				} else if (_1 === (524)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (525)) {
					hr = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (526)) {
					hr$1 = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (529)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (530)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (533)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (534)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (24)) || (_1 === (27)) || (_1 === (25)) || (_1 === (26)) || (_1 === (28)) || (_1 === (29)) || (_1 === (32)) || (_1 === (30)) || (_1 === (31)) || (_1 === (33))) {
					if ((offset === 0) && ((std === 24) || (std === 27) || (std === 25) || (std === 26) || (std === 28))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 27) || (std === 32) || (std === 28) || (std === 33)) {
						b = $append(b, 58);
					}
					if (!((std === 31)) && !((std === 26))) {
						b = appendInt(b, (_r$4 = zone$1 % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 25) || (std === 30) || (std === 33) || (std === 28)) {
						if ((std === 33) || (std === 28)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$5 = absoffset % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (23)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$6 = zone$2 % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (34)) || (_1 === (35))) {
					b = formatNano(b, (($clone(t, Time).Nanosecond() >>> 0)), std >> 16 >> 0, (std & 65535) === 35);
				}
			}
		}
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.yday = yday; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), $substring(s, 1), $ifaceNil];
		}
		return [($imul((((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), 10)) + (((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0)) >> 0, $substring(s, 2), $ifaceNil];
	};
	getnum3 = function(s, fixed) {
		var _tmp, _tmp$1, fixed, i, n, s;
		_tmp = 0;
		_tmp$1 = 0;
		n = _tmp;
		i = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < 3 && isDigit(s, i))) { break; }
			n = ($imul(n, 10)) + (((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0)) >> 0;
			i = i + (1) >> 0;
		}
		if ((i === 0) || fixed && !((i === 3))) {
			return [0, s, errBad];
		}
		return [n, $substring(s, i), $ifaceNil];
	};
	cutspace = function(s) {
		var s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var $24r, _r, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$24r = $24r; $f._r = _r; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var $24r, $24r$1, _1, _2, _3, _4, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, d, day, defaultLocation, err, hold, hour, hour$1, hr, i, i$1, layout, local, m, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x$1, x$2, x$3, yday, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; d = $f.d; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hold = $f.hold; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; i$1 = $f.i$1; layout = $f.layout; local = $f.local; m = $f.m; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; yday = $f.yday; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = -1;
		day = -1;
		yday = -1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$2.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple = nextStdChunk(layout);
			prefix = _tuple[0];
			std = _tuple[1];
			suffix = _tuple[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$1 = skip(value, prefix);
			value = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + quote(value))];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (276)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					hold = value;
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$2 = atoi(p);
					year = _tuple$2[0];
					err = _tuple$2[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						value = hold;
					} else if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (275)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
				} else if (_1 === (258)) {
					_tuple$4 = lookup(shortMonthNames, value);
					month = _tuple$4[0];
					value = _tuple$4[1];
					err = _tuple$4[2];
					month = month + (1) >> 0;
				} else if (_1 === (257)) {
					_tuple$5 = lookup(longMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
					month = month + (1) >> 0;
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$6 = getnum(value, std === 260);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
					if ($interfaceIsEqual(err, $ifaceNil) && (month <= 0 || 12 < month)) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$7 = lookup(shortDayNames, value);
					value = _tuple$7[1];
					err = _tuple$7[2];
				} else if (_1 === (261)) {
					_tuple$8 = lookup(longDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$9 = getnum(value, std === 265);
					day = _tuple$9[0];
					value = _tuple$9[1];
					err = _tuple$9[2];
				} else if ((_1 === (266)) || (_1 === (267))) {
					i = 0;
					while (true) {
						if (!(i < 2)) { break; }
						if ((std === 266) && value.length > 0 && (value.charCodeAt(0) === 32)) {
							value = $substring(value, 1);
						}
						i = i + (1) >> 0;
					}
					_tuple$10 = getnum3(value, std === 267);
					yday = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
				} else if (_1 === (524)) {
					_tuple$11 = getnum(value, false);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$12 = getnum(value, std === 526);
					hour = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$13 = getnum(value, std === 528);
					min = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (529)) || (_1 === (530))) {
					_tuple$14 = getnum(value, std === 530);
					sec = _tuple$14[0];
					value = _tuple$14[1];
					err = _tuple$14[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
						break;
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$15 = nextStdChunk(layout);
						std = _tuple$15[1];
						std = std & (65535);
						if ((std === 34) || (std === 35)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$16 = parseNanoseconds(value, n);
						nsec = _tuple$16[0];
						rangeErrString = _tuple$16[1];
						err = _tuple$16[2];
						value = $substring(value, n);
					}
				} else if (_1 === (533)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (534)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (24)) || (_1 === (27)) || (_1 === (25)) || (_1 === (26)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31)) || (_1 === (32)) || (_1 === (30)) || (_1 === (33))) {
					if (((std === 24) || (std === 26) || (std === 27)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 27) || (std === 32)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 31) || (std === 26)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 28) || (std === 33)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 25) || (std === 30)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$17 = atoi(hour$1);
					hr = _tuple$17[0];
					err = _tuple$17[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(min$1);
						mm = _tuple$18[0];
						err = _tuple$18[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$19 = atoi(seconds);
						ss = _tuple$19[0];
						err = _tuple$19[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (23)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$20 = parseTimeZone(value);
					n$1 = _tuple$20[0];
					ok = _tuple$20[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (34)) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$21 = parseNanoseconds(value, ndigit);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, ndigit);
				} else if (_1 === (35)) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i$1 = 0;
					while (true) {
						if (!(i$1 < 9 && (i$1 + 1 >> 0) < value.length && 48 <= value.charCodeAt((i$1 + 1 >> 0)) && value.charCodeAt((i$1 + 1 >> 0)) <= 57)) { break; }
						i$1 = i$1 + (1) >> 0;
					}
					_tuple$22 = parseNanoseconds(value, 1 + i$1 >> 0);
					nsec = _tuple$22[0];
					rangeErrString = _tuple$22[1];
					err = _tuple$22[2];
					value = $substring(value, (1 + i$1 >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (yday >= 0) {
			d = 0;
			m = 0;
			if (isLeap(year)) {
				if (yday === 60) {
					m = 2;
					d = 29;
				} else if (yday > 60) {
					yday = yday - (1) >> 0;
				}
			}
			if (yday < 1 || yday > 365) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day-of-year out of range")];
			}
			if (m === 0) {
				m = (_q = ((yday - 1 >> 0)) / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
				if (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) >> 0)) < yday) {
					m = m + (1) >> 0;
				}
				d = yday - (((x$1 = m - 1 >> 0, ((x$1 < 0 || x$1 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$1])) >> 0)) >> 0;
			}
			if (month >= 0 && !((month === m))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day-of-year does not match month")];
			}
			month = m;
			if (day >= 0 && !((day === d))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day-of-year does not match day")];
			}
			day = d;
		} else {
			if (month < 0) {
				month = 1;
			}
			if (day < 0) {
				day = 1;
			}
		}
		if (day < 1 || day > daysIn(((month >> 0)), year)) {
			$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$2.nil)) { */ case 1:
			_r = Date(year, ((month >> 0)), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = [_r, $ifaceNil];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((zoneOffset === -1))) { */ case 5:
			_r$1 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			t = $clone(_r$1, Time);
			t.addSec((x$2 = (new $Int64(0, zoneOffset)), new $Int64(-x$2.$high, -x$2.$low)));
			_r$2 = local.lookup(t.unixSec()); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$23 = _r$2;
			name = _tuple$23[0];
			offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.setLoc(local);
				$s = -1; return [t, $ifaceNil];
			}
			t.setLoc(FixedZone(zoneName, zoneOffset));
			$s = -1; return [t, $ifaceNil];
		/* } */ case 6:
		/* */ if (!(zoneName === "")) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!(zoneName === "")) { */ case 9:
			_r$3 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			t$1 = $clone(_r$3, Time);
			_r$4 = local.lookupName(zoneName, t$1.unixSec()); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$24 = _r$4;
			offset$1 = _tuple$24[0];
			ok$1 = _tuple$24[1];
			if (ok$1) {
				t$1.addSec((x$3 = (new $Int64(0, offset$1)), new $Int64(-x$3.$high, -x$3.$low)));
				t$1.setLoc(local);
				$s = -1; return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$25 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$25[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.setLoc(FixedZone(zoneName, offset$1));
			$s = -1; return [t$1, $ifaceNil];
		/* } */ case 10:
		_r$5 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$24r$1 = [_r$5, $ifaceNil];
		$s = 14; case 14: return $24r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.d = d; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hold = hold; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.i$1 = i$1; $f.layout = layout; $f.local = local; $f.m = m; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.yday = yday; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, ok$1, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		if ((value.charCodeAt(0) === 43) || (value.charCodeAt(0) === 45)) {
			length = parseSignedOffset(value);
			ok$1 = length > 0;
			_tmp$6 = length;
			_tmp$7 = ok$1;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$8 = 0;
			_tmp$9 = false;
			length = _tmp$8;
			ok = _tmp$9;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$10 = 5;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if ((value.charCodeAt(3) === 84) || $substring(value, 0, 4) === "WITA") {
				_tmp$12 = 4;
				_tmp$13 = true;
				length = _tmp$12;
				ok = _tmp$13;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$14 = 3;
			_tmp$15 = true;
			length = _tmp$14;
			ok = _tmp$15;
			return [length, ok];
		}
		_tmp$16 = 0;
		_tmp$17 = false;
		length = _tmp$16;
		ok = _tmp$17;
		return [length, ok];
	};
	parseGMT = function(value) {
		var value;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		return 3 + parseSignedOffset(value) >> 0;
	};
	parseSignedOffset = function(value) {
		var _tuple, err, rem, sign, value, x$1;
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 0;
		}
		_tuple = leadingInt($substring(value, 1));
		x$1 = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil)) || $substring(value, 1) === rem) {
			return 0;
		}
		if (sign === 45) {
			x$1 = new $Int64(-x$1.$high, -x$1.$low);
		}
		if ((x$1.$high < -1 || (x$1.$high === -1 && x$1.$low < 4294967273)) || (0 < x$1.$high || (0 === x$1.$high && 23 < x$1.$low))) {
			return 0;
		}
		return value.length - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var _tuple, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple = atoi($substring(value, 1, nbytes));
		ns = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x$1, x$2, x$3, x$4;
		x$1 = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x$1.$high > 214748364 || (x$1.$high === 214748364 && x$1.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x$1 = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x$1, rem, err];
			}
			x$1 = (x$2 = (x$3 = $mul64(x$1, new $Int64(0, 10)), x$4 = (new $Int64(0, c)), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), new $Int64(x$2.$high - 0, x$2.$low - 48));
			if ((x$1.$high < 0 || (x$1.$high === 0 && x$1.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x$1 = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x$1, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x$1;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x$1 = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x$1, rem, err];
	};
	Time.ptr.prototype.nsec = function() {
		var t, x$1;
		t = this;
		return (((x$1 = t.wall, new $Uint64(x$1.$high & 0, (x$1.$low & 1073741823) >>> 0)).$low >> 0));
	};
	Time.prototype.nsec = function() { return this.$val.nsec(); };
	Time.ptr.prototype.sec = function() {
		var t, x$1, x$2, x$3, x$4;
		t = this;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$3 = ((x$4 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$4.$high, x$4.$low))), new $Int64(13 + x$3.$high, 3618733952 + x$3.$low));
		}
		return t.ext;
	};
	Time.prototype.sec = function() { return this.$val.sec(); };
	Time.ptr.prototype.unixSec = function() {
		var t, x$1;
		t = this;
		return (x$1 = t.sec(), new $Int64(x$1.$high + -15, x$1.$low + 2288912640));
	};
	Time.prototype.unixSec = function() { return this.$val.unixSec(); };
	Time.ptr.prototype.addSec = function(d) {
		var d, dsec, sec, t, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			sec = ((x$3 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$3.$high, x$3.$low)));
			dsec = new $Int64(sec.$high + d.$high, sec.$low + d.$low);
			if ((0 < dsec.$high || (0 === dsec.$high && 0 <= dsec.$low)) && (dsec.$high < 1 || (dsec.$high === 1 && dsec.$low <= 4294967295))) {
				t.wall = (x$4 = (x$5 = (x$6 = t.wall, new $Uint64(x$6.$high & 0, (x$6.$low & 1073741823) >>> 0)), x$7 = $shiftLeft64((new $Uint64(dsec.$high, dsec.$low)), 30), new $Uint64(x$5.$high | x$7.$high, (x$5.$low | x$7.$low) >>> 0)), new $Uint64(x$4.$high | 2147483648, (x$4.$low | 0) >>> 0));
				return;
			}
			t.stripMono();
		}
		t.ext = (x$8 = t.ext, x$9 = d, new $Int64(x$8.$high + x$9.$high, x$8.$low + x$9.$low));
	};
	Time.prototype.addSec = function(d) { return this.$val.addSec(d); };
	Time.ptr.prototype.setLoc = function(loc) {
		var loc, t;
		t = this;
		if (loc === utcLoc) {
			loc = ptrType$2.nil;
		}
		t.stripMono();
		t.loc = loc;
	};
	Time.prototype.setLoc = function(loc) { return this.$val.setLoc(loc); };
	Time.ptr.prototype.stripMono = function() {
		var t, x$1, x$2, x$3, x$4;
		t = this;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			t.ext = t.sec();
			t.wall = (x$3 = t.wall, x$4 = new $Uint64(0, 1073741823), new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0));
		}
	};
	Time.prototype.stripMono = function() { return this.$val.stripMono(); };
	Time.ptr.prototype.After = function(u) {
		var t, ts, u, us, x$1, x$2, x$3, x$4, x$5, x$6;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$5 = t.ext, x$6 = u.ext, (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)));
		}
		ts = t.sec();
		us = u.sec();
		return (ts.$high > us.$high || (ts.$high === us.$high && ts.$low > us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() > u.nsec();
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var t, ts, u, us, x$1, x$2, x$3, x$4, x$5, x$6;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$5 = t.ext, x$6 = u.ext, (x$5.$high < x$6.$high || (x$5.$high === x$6.$high && x$5.$low < x$6.$low)));
		}
		ts = t.sec();
		us = u.sec();
		return (ts.$high < us.$high || (ts.$high === us.$high && ts.$low < us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() < u.nsec();
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var t, u, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$5 = t.ext, x$6 = u.ext, (x$5.$high === x$6.$high && x$5.$low === x$6.$low));
		}
		return (x$7 = t.sec(), x$8 = u.sec(), (x$7.$high === x$8.$high && x$7.$low === x$8.$low)) && (t.nsec() === u.nsec());
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var buf, m, n, x$1;
		m = this.$val;
		if (1 <= m && m <= 12) {
			return (x$1 = m - 1 >> 0, ((x$1 < 0 || x$1 >= longMonthNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : longMonthNames.$array[longMonthNames.$offset + x$1]));
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, m)));
		return "%!Month(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var buf, d, n;
		d = this.$val;
		if (0 <= d && d <= 6) {
			return ((d < 0 || d >= longDayNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : longDayNames.$array[longDayNames.$offset + d]);
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, d)));
		return "%!Weekday(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var t, x$1;
		t = this;
		return (x$1 = t.sec(), (x$1.$high === 0 && x$1.$low === 0)) && (t.nsec() === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var _r, _r$1, _tuple, l, offset, sec, t, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = (new $Int64(0, l.cacheZone.offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				offset = _tuple[1];
				sec = (x$4 = (new $Int64(0, offset)), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return ((x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var _r, _r$1, _tuple, abs, l, name, offset, sec, t, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$1 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				name = _tuple[0];
				offset = _tuple[1];
			/* } */ case 9:
			sec = (x$3 = (new $Int64(0, offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = ((x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low)));
		$s = -1; return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var _r, _tuple, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		$s = -1; return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var _r, _tuple, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		$s = -1; return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var _r, _tuple, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		month = _tuple[1];
		$s = -1; return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f._r = _r; $f._tuple = _tuple; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var _r, _tuple, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		day = _tuple[2];
		$s = -1; return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var $24r, _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absWeekday(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return (((_q = ((sec.$low >> 0)) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
	};
	Time.ptr.prototype.ISOWeek = function() {
		var _q, _r, _tmp, _tmp$1, _tuple, abs, d, t, week, x$1, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; abs = $f.abs; d = $f.d; t = $f.t; week = $f.week; x$1 = $f.x$1; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		abs = _r;
		d = 4 - absWeekday(abs) >> 0;
		if (d === 4) {
			d = -3;
		}
		abs = (x$1 = $mul64((new $Uint64(0, d)), new $Uint64(0, 86400)), new $Uint64(abs.$high + x$1.$high, abs.$low + x$1.$low));
		_tuple = absDate(abs, false);
		year = _tuple[0];
		yday = _tuple[3];
		_tmp = year;
		_tmp$1 = (_q = yday / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
		year = _tmp;
		week = _tmp$1;
		$s = -1; return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f._q = _q; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.abs = abs; $f.d = d; $f.t = t; $f.week = week; $f.x$1 = x$1; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var $24r, _r, _r$1, _tuple, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absClock(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		hour = _tuple[0];
		min = _tuple[1];
		sec = _tuple[2];
		$24r = [hour, min, sec];
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = (($div64(abs, new $Uint64(0, 86400), true).$low >> 0));
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var $24r, _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = (_q = (($div64(_r, new $Uint64(0, 86400), true).$low >> 0)) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f.$24r = $24r; $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var $24r, _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = (_q = (($div64(_r, new $Uint64(0, 3600), true).$low >> 0)) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f.$24r = $24r; $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var $24r, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = (($div64(_r, new $Uint64(0, 60), true).$low >> 0));
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var t;
		t = this;
		return ((t.nsec() >> 0));
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var _r, _tuple, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		yday = _tuple[3];
		$s = -1; return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var _tuple, _tuple$1, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$3.zero();
		w = 32;
		u = (new $Uint64(d.$high, d.$low));
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
			}
			_tuple = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple[0];
			u = _tuple[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
		}
		return ($bytesToString($subslice(new sliceType$3(buf), w)));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = (((digit.$low << 24 >>> 24)) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = ((($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24)) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return (new $Int64(d.$high, d.$low));
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Microseconds = function() {
		var d;
		d = this;
		return $div64((new $Int64(d.$high, d.$low)), new $Int64(0, 1000), false);
	};
	$ptrType(Duration).prototype.Microseconds = function() { return this.$get().Microseconds(); };
	Duration.prototype.Milliseconds = function() {
		var d;
		d = this;
		return $div64((new $Int64(d.$high, d.$low)), new $Int64(0, 1000000), false);
	};
	$ptrType(Duration).prototype.Milliseconds = function() { return this.$get().Milliseconds(); };
	Duration.prototype.Seconds = function() {
		var d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return ($flatten64(sec)) + ($flatten64(nsec)) / 1e+09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return ($flatten64(min)) + ($flatten64(nsec)) / 6e+10;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return ($flatten64(hour)) + ($flatten64(nsec)) / 3.6e+12;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Duration.prototype.Truncate = function(m) {
		var d, m, x$1;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		return (x$1 = $div64(d, m, true), new Duration(d.$high - x$1.$high, d.$low - x$1.$low));
	};
	$ptrType(Duration).prototype.Truncate = function(m) { return this.$get().Truncate(m); };
	lessThanHalf = function(x$1, y) {
		var x$1, x$2, x$3, x$4, x$5, y;
		return (x$2 = (x$3 = (new $Uint64(x$1.$high, x$1.$low)), x$4 = (new $Uint64(x$1.$high, x$1.$low)), new $Uint64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), x$5 = (new $Uint64(y.$high, y.$low)), (x$2.$high < x$5.$high || (x$2.$high === x$5.$high && x$2.$low < x$5.$low)));
	};
	Duration.prototype.Round = function(m) {
		var d, d1, d1$1, m, r, x$1, x$2;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		r = $div64(d, m, true);
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
			r = new Duration(-r.$high, -r.$low);
			if (lessThanHalf(r, m)) {
				return new Duration(d.$high + r.$high, d.$low + r.$low);
			}
			d1 = (x$1 = new Duration(d.$high - m.$high, d.$low - m.$low), new Duration(x$1.$high + r.$high, x$1.$low + r.$low));
			if ((d1.$high < d.$high || (d1.$high === d.$high && d1.$low < d.$low))) {
				return d1;
			}
			return new Duration(-2147483648, 0);
		}
		if (lessThanHalf(r, m)) {
			return new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		d1$1 = (x$2 = new Duration(d.$high + m.$high, d.$low + m.$low), new Duration(x$2.$high - r.$high, x$2.$low - r.$low));
		if ((d1$1.$high > d.$high || (d1$1.$high === d.$high && d1$1.$low > d.$low))) {
			return d1$1;
		}
		return new Duration(2147483647, 4294967295);
	};
	$ptrType(Duration).prototype.Round = function(m) { return this.$get().Round(m); };
	Time.ptr.prototype.Add = function(d) {
		var d, dsec, nsec, t, te, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		dsec = ((x$1 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$1.$high, x$1.$low)));
		nsec = t.nsec() + (((x$2 = $div64(d, new Duration(0, 1000000000), true), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0)) >> 0;
		if (nsec >= 1000000000) {
			dsec = (x$3 = new $Int64(0, 1), new $Int64(dsec.$high + x$3.$high, dsec.$low + x$3.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			dsec = (x$4 = new $Int64(0, 1), new $Int64(dsec.$high - x$4.$high, dsec.$low - x$4.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.wall = (x$5 = (x$6 = t.wall, new $Uint64(x$6.$high & ~0, (x$6.$low & ~1073741823) >>> 0)), x$7 = (new $Uint64(0, nsec)), new $Uint64(x$5.$high | x$7.$high, (x$5.$low | x$7.$low) >>> 0));
		t.addSec(dsec);
		if (!((x$8 = (x$9 = t.wall, new $Uint64(x$9.$high & 2147483648, (x$9.$low & 0) >>> 0)), (x$8.$high === 0 && x$8.$low === 0)))) {
			te = (x$10 = t.ext, x$11 = (new $Int64(d.$high, d.$low)), new $Int64(x$10.$high + x$11.$high, x$10.$low + x$11.$low));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (x$12 = t.ext, (te.$high > x$12.$high || (te.$high === x$12.$high && te.$low > x$12.$low))) || (d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (x$13 = t.ext, (te.$high < x$13.$high || (te.$high === x$13.$high && te.$low < x$13.$low)))) {
				t.stripMono();
			} else {
				t.ext = te;
			}
		}
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var d, d$1, t, te, u, ue, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			te = t.ext;
			ue = u.ext;
			d = ((x$5 = new $Int64(te.$high - ue.$high, te.$low - ue.$low), new Duration(x$5.$high, x$5.$low)));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (te.$high > ue.$high || (te.$high === ue.$high && te.$low > ue.$low))) {
				return new Duration(2147483647, 4294967295);
			}
			if ((d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (te.$high < ue.$high || (te.$high === ue.$high && te.$low < ue.$low))) {
				return new Duration(-2147483648, 0);
			}
			return d;
		}
		d$1 = (x$6 = $mul64(((x$7 = (x$8 = t.sec(), x$9 = u.sec(), new $Int64(x$8.$high - x$9.$high, x$8.$low - x$9.$low)), new Duration(x$7.$high, x$7.$low))), new Duration(0, 1000000000)), x$10 = (new Duration(0, (t.nsec() - u.nsec() >> 0))), new Duration(x$6.$high + x$10.$high, x$6.$low + x$10.$low));
		if ($clone($clone(u, Time).Add(d$1), Time).Equal($clone(t, Time))) {
			return d$1;
		} else if ($clone(t, Time).Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months, days) {
		var $24r, _r, _r$1, _r$2, _tuple, _tuple$1, day, days, hour, min, month, months, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; day = $f.day; days = $f.days; hour = $f.hour; min = $f.min; month = $f.month; months = $f.months; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		_r$1 = $clone(t, Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		_r$2 = Date(year + years >> 0, month + ((months >> 0)) >> 0, day + days >> 0, hour, min, sec, ((t.nsec() >> 0)), $clone(t, Time).Location()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 4; case 4: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.day = day; $f.days = days; $f.hour = hour; $f.min = min; $f.month = month; $f.months = months; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months, days) { return this.$val.AddDate(years, months, days); };
	Time.ptr.prototype.date = function(full) {
		var $24r, _r, _r$1, _tuple, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absDate(_r, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		$24r = [year, month, day, yday];
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var _q, abs, begin, d, day, end, full, month, n, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x$1 = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x$1.$high, d.$low - x$1.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$2 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$2.$high, n.$low - x$2.$low));
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$3.$high, y.$low + x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$4.$high, d.$low - x$4.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$5.$high, y.$low + x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$6.$high, d.$low - x$6.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$7 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$7.$high, n.$low - x$7.$low));
		y = (x$8 = n, new $Uint64(y.$high + x$8.$high, y.$low + x$8.$low));
		d = (x$9 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$9.$high, d.$low - x$9.$low));
		year = (((x$10 = (x$11 = (new $Int64(y.$high, y.$low)), new $Int64(x$11.$high + -69, x$11.$low + 4075721025)), x$10.$low + ((x$10.$high >> 31) * 4294967296)) >> 0));
		yday = ((d.$low >> 0));
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = (((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		end = (((x$12 = month + 1 >> 0, ((x$12 < 0 || x$12 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$12])) >> 0));
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = ((((month < 0 || month >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[month]) >> 0));
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var m, x$1, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) - (x$1 = m - 1 >> 0, ((x$1 < 0 || x$1 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$1])) >> 0) >> 0));
	};
	daysSinceEpoch = function(year) {
		var d, n, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, year;
		y = ((x$1 = (x$2 = (new $Int64(0, year)), new $Int64(x$2.$high - -69, x$2.$low - 4075721025)), new $Uint64(x$1.$high, x$1.$low)));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$3 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$4 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$4.$high, y.$low - x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$5.$high, d.$low + x$5.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$6 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$6.$high, y.$low - x$6.$low));
		d = (x$7 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		n = y;
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		return d;
	};
	runtimeNano = function() {
		$throwRuntimeError("native function not implemented: time.runtimeNano");
	};
	unixTime = function(sec, nsec) {
		var nsec, sec;
		return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 14, sec.$low + 2006054656), $pkg.Local);
	};
	Time.ptr.prototype.UTC = function() {
		var t;
		t = this;
		t.setLoc(utcLoc);
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var t;
		t = this;
		t.setLoc($pkg.Local);
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var loc, t;
		t = this;
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.setLoc(loc);
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var l, t;
		t = this;
		l = t.loc;
		if (l === ptrType$2.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var _r, _tuple, name, offset, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; name = $f.name; offset = $f.offset; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = this;
		_r = t.loc.lookup(t.unixSec()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		$s = -1; return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f._r = _r; $f._tuple = _tuple; $f.name = name; $f.offset = offset; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var t;
		t = this;
		return t.unixSec();
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var t, x$1, x$2;
		t = this;
		return (x$1 = $mul64((t.unixSec()), new $Int64(0, 1000000000)), x$2 = (new $Int64(0, t.nsec())), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var _q, _r, _r$1, _tuple, enc, nsec, offset, offsetMin, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; enc = $f.enc; nsec = $f.nsec; offset = $f.offset; offsetMin = $f.offsetMin; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		offsetMin = 0;
		/* */ if ($clone(t, Time).Location() === $pkg.UTC) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(t, Time).Location() === $pkg.UTC) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $clone(t, Time).Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			offset = _tuple[1];
			if (!(((_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0))) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = ((offset << 16 >> 16));
		/* } */ case 3:
		sec = t.sec();
		nsec = t.nsec();
		enc = new sliceType$3([1, (($shiftRightInt64(sec, 56).$low << 24 >>> 24)), (($shiftRightInt64(sec, 48).$low << 24 >>> 24)), (($shiftRightInt64(sec, 40).$low << 24 >>> 24)), (($shiftRightInt64(sec, 32).$low << 24 >>> 24)), (($shiftRightInt64(sec, 24).$low << 24 >>> 24)), (($shiftRightInt64(sec, 16).$low << 24 >>> 24)), (($shiftRightInt64(sec, 8).$low << 24 >>> 24)), ((sec.$low << 24 >>> 24)), (((nsec >> 24 >> 0) << 24 >>> 24)), (((nsec >> 16 >> 0) << 24 >>> 24)), (((nsec >> 8 >> 0) << 24 >>> 24)), ((nsec << 24 >>> 24)), (((offsetMin >> 8 << 16 >> 16) << 24 >>> 24)), ((offsetMin << 24 >>> 24))]);
		$s = -1; return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.enc = enc; $f.nsec = nsec; $f.offset = offset; $f.offsetMin = offsetMin; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data) {
		var _r, _tuple, buf, data, localoff, nsec, offset, sec, t, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; data = $f.data; localoff = $f.localoff; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; t = $f.t; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		sec = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (x$7 = (new $Int64(0, (7 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 7]))), x$8 = $shiftLeft64((new $Int64(0, (6 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 6]))), 8), new $Int64(x$7.$high | x$8.$high, (x$7.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Int64(0, (5 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 5]))), 16), new $Int64(x$6.$high | x$9.$high, (x$6.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Int64(0, (4 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 4]))), 24), new $Int64(x$5.$high | x$10.$high, (x$5.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Int64(0, (3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]))), 32), new $Int64(x$4.$high | x$11.$high, (x$4.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Int64(0, (2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]))), 40), new $Int64(x$3.$high | x$12.$high, (x$3.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Int64(0, (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]))), 48), new $Int64(x$2.$high | x$13.$high, (x$2.$low | x$13.$low) >>> 0)), x$14 = $shiftLeft64((new $Int64(0, (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))), 56), new $Int64(x$1.$high | x$14.$high, (x$1.$low | x$14.$low) >>> 0));
		buf = $subslice(buf, 8);
		nsec = (((((3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]) >> 0)) | ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0)) << 8 >> 0)) | ((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) >> 0)) << 16 >> 0)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) >> 0)) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) << 16 >> 16)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) << 16 >> 16)) << 8 << 16 >> 16)) >> 0)), 60);
		Time.copy(t, new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil));
		t.wall = (new $Uint64(0, nsec));
		t.ext = sec;
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.setLoc(utcLoc);
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $pkg.Local.lookup(t.unixSec()); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			localoff = _tuple[1];
			if (offset === localoff) {
				t.setLoc($pkg.Local);
			} else {
				t.setLoc(FixedZone("", offset));
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.data = data; $f.localoff = localoff; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data) { return this.$val.UnmarshalBinary(data); };
	Time.ptr.prototype.GobEncode = function() {
		var $24r, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f.$24r = $24r; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data) {
		var $24r, _r, data, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; data = $f.data; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.UnmarshalBinary(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f.$24r = $24r; $f._r = _r; $f.data = data; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data) { return this.$val.GobDecode(data); };
	Time.ptr.prototype.MarshalJSON = function() {
		var _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data) {
		var _r, _tuple, data, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (($bytesToString(data)) === "null") {
			$s = -1; return $ifaceNil;
		}
		err = $ifaceNil;
		_r = Parse("\"2006-01-02T15:04:05Z07:00\"", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data) { return this.$val.UnmarshalJSON(data); };
	Time.ptr.prototype.MarshalText = function() {
		var $24r, _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = [_r$1, $ifaceNil];
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data) {
		var _r, _tuple, data, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r = Parse("2006-01-02T15:04:05Z07:00", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data) { return this.$val.UnmarshalText(data); };
	Unix = function(sec, nsec) {
		var n, nsec, sec, x$1, x$2, x$3, x$4;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x$1 = n, new $Int64(sec.$high + x$1.$high, sec.$low + x$1.$low));
			nsec = (x$2 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$2.$high, nsec.$low - x$2.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$3 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$3.$high, nsec.$low + x$3.$low));
				sec = (x$4 = new $Int64(0, 1), new $Int64(sec.$high - x$4.$high, sec.$low - x$4.$low));
			}
		}
		return unixTime(sec, (((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0)));
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var _r, _r$1, _r$2, year;
		return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, abs, d, day, end, hour, loc, m, min, month, nsec, offset, sec, start, t, unix, utc, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; t = $f.t; unix = $f.unix; utc = $f.utc; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = ((month >> 0)) - 1 >> 0;
		_tuple = norm(year, m, 12);
		year = _tuple[0];
		m = _tuple[1];
		month = ((m >> 0)) + 1 >> 0;
		_tuple$1 = norm(sec, nsec, 1000000000);
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		_tuple$2 = norm(min, sec, 60);
		min = _tuple$2[0];
		sec = _tuple$2[1];
		_tuple$3 = norm(hour, min, 60);
		hour = _tuple$3[0];
		min = _tuple$3[1];
		_tuple$4 = norm(day, hour, 24);
		day = _tuple$4[0];
		hour = _tuple$4[1];
		d = daysSinceEpoch(year);
		d = (x$1 = (new $Uint64(0, (x$2 = month - 1 >> 0, ((x$2 < 0 || x$2 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$2])))), new $Uint64(d.$high + x$1.$high, d.$low + x$1.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$3 = new $Uint64(0, 1), new $Uint64(d.$high + x$3.$high, d.$low + x$3.$low));
		}
		d = (x$4 = (new $Uint64(0, (day - 1 >> 0))), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$5 = (new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0))), new $Uint64(abs.$high + x$5.$high, abs.$low + x$5.$low));
		unix = (x$6 = (new $Int64(abs.$high, abs.$low)), new $Int64(x$6.$high + -2147483647, x$6.$low + 3844486912));
		_r = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$5 = _r;
		offset = _tuple$5[1];
		start = _tuple$5[2];
		end = _tuple$5[3];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$7 = (new $Int64(0, offset)), new $Int64(unix.$high - x$7.$high, unix.$low - x$7.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$1 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$6 = _r$1;
					offset = _tuple$6[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$2 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$7 = _r$2;
					offset = _tuple$7[1];
				/* } */ case 7:
			case 4:
			unix = (x$8 = (new $Int64(0, offset)), new $Int64(unix.$high - x$8.$high, unix.$low - x$8.$low));
		/* } */ case 3:
		t = $clone(unixTime(unix, ((nsec >> 0))), Time);
		t.setLoc(loc);
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.t = t; $f.unix = unix; $f.utc = utc; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		if (lessThanHalf(r, d)) {
			return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
		}
		return $clone(t, Time).Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, sec$1, t, tmp, u0, u0x, u1, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = t.nsec();
		sec = t.sec();
		if ((sec.$high < 0 || (sec.$high === 0 && sec.$low < 0))) {
			neg = true;
			sec = new $Int64(-sec.$high, -sec.$low);
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				sec = (x$1 = new $Int64(0, 1), new $Int64(sec.$high - x$1.$high, sec.$low - x$1.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$2 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$2.$high === 0 && x$2.$low === 0))) {
			qmod2 = (((_q = nsec / (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) & 1;
			r = (new Duration(0, (_r = nsec % (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
		} else if ((x$3 = $div64(d, new Duration(0, 1000000000), true), (x$3.$high === 0 && x$3.$low === 0))) {
			d1 = ((x$4 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$4.$high, x$4.$low)));
			qmod2 = (((x$5 = $div64(sec, d1, false), x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0)) & 1;
			r = (x$6 = $mul64(((x$7 = $div64(sec, d1, true), new Duration(x$7.$high, x$7.$low))), new Duration(0, 1000000000)), x$8 = (new Duration(0, nsec)), new Duration(x$6.$high + x$8.$high, x$6.$low + x$8.$low));
		} else {
			sec$1 = (new $Uint64(sec.$high, sec.$low));
			tmp = $mul64(($shiftRightUint64(sec$1, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec$1.$high & 0, (sec$1.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$9 = new $Uint64(0, 1), new $Uint64(u1.$high + x$9.$high, u1.$low + x$9.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$10 = (new $Uint64(0, nsec)), new $Uint64(u0.$high + x$10.$high, u0.$low + x$10.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$11 = new $Uint64(0, 1), new $Uint64(u1.$high + x$11.$high, u1.$low + x$11.$low));
			}
			d1$1 = (new $Uint64(d.$high, d.$low));
			while (true) {
				if (!(!((x$12 = $shiftRightUint64(d1$1, 63), (x$12.$high === 0 && x$12.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$13 = new $Uint64(0, 1), new $Uint64(u1.$high - x$13.$high, u1.$low - x$13.$low));
					}
					u1 = (x$14 = d1$1, new $Uint64(u1.$high - x$14.$high, u1.$low - x$14.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$15 = (new $Uint64(d.$high, d.$low)), (d0.$high === x$15.$high && d0.$low === x$15.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$16 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$16.$high, (d0.$low | x$16.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = (new Duration(u0.$high, u0.$low));
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$2.nil) {
			$s = -1; return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var $24r, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r.name;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f.$24r = $24r; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var l, name, offset, x$1;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), "", new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x$1 = l.zone, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, eend, ename, end, eoffset, estart, hi, l, lim, lo, m, name, offset, ok, sec, start, tx, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; eend = $f.eend; ename = $f.ename; end = $f.end; eoffset = $f.eoffset; estart = $f.estart; hi = $f.hi; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; ok = $f.ok; sec = $f.sec; start = $f.start; tx = $f.tx; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			$s = -1; return [name, offset, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			start = l.cacheStart;
			end = l.cacheEnd;
			$s = -1; return [name, offset, start, end];
		}
		if ((l.tx.$length === 0) || (x$3 = (x$4 = l.tx, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])).when, (sec.$high < x$3.$high || (sec.$high === x$3.$high && sec.$low < x$3.$low)))) {
			zone$2 = (x$5 = l.zone, x$6 = l.lookupFirstZone(), ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6]));
			name = zone$2.name;
			offset = zone$2.offset;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$7 = l.tx, (0 >= x$7.$length ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			$s = -1; return [name, offset, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$8 = l.zone, x$9 = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).index, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9]));
		name = zone$3.name;
		offset = zone$3.offset;
		start = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).when;
		if ((lo === (tx.$length - 1 >> 0)) && !(l.extend === "")) {
			_tuple = tzset(l.extend, end, sec);
			ename = _tuple[0];
			eoffset = _tuple[1];
			estart = _tuple[2];
			eend = _tuple[3];
			ok = _tuple[5];
			if (ok) {
				_tmp = ename;
				_tmp$1 = eoffset;
				_tmp$2 = estart;
				_tmp$3 = eend;
				name = _tmp;
				offset = _tmp$1;
				start = _tmp$2;
				end = _tmp$3;
				$s = -1; return [name, offset, start, end];
			}
		}
		$s = -1; return [name, offset, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f._q = _q; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.eend = eend; $f.ename = ename; $f.end = end; $f.eoffset = eoffset; $f.estart = estart; $f.hi = hi; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.ok = ok; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var _i, _ref, l, x$1, x$2, x$3, x$4, x$5, x$6, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x$1 = l.zone, x$2 = (x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).index, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])).isDST) {
			zi = (((x$4 = l.tx, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])).index >> 0)) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$5 = l.zone, ((zi < 0 || zi >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$6 = l.zone, ((zi$1 < 0 || zi$1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	tzset = function(s, initEnd, sec) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, abs, d, dstIsDST, dstName, dstOffset, end, endRule, endSec, initEnd, isDST, name, offset, ok, s, sec, start, startRule, startSec, stdIsDST, stdName, stdOffset, x$1, x$2, x$3, x$4, x$5, x$6, yday, year, ysec;
		name = "";
		offset = 0;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		isDST = false;
		ok = false;
		_tmp = "";
		_tmp$1 = "";
		stdName = _tmp;
		dstName = _tmp$1;
		_tmp$2 = 0;
		_tmp$3 = 0;
		stdOffset = _tmp$2;
		dstOffset = _tmp$3;
		_tuple = tzsetName(s);
		stdName = _tuple[0];
		s = _tuple[1];
		ok = _tuple[2];
		if (ok) {
			_tuple$1 = tzsetOffset(s);
			stdOffset = _tuple$1[0];
			s = _tuple$1[1];
			ok = _tuple$1[2];
		}
		if (!ok) {
			_tmp$4 = "";
			_tmp$5 = 0;
			_tmp$6 = new $Int64(0, 0);
			_tmp$7 = new $Int64(0, 0);
			_tmp$8 = false;
			_tmp$9 = false;
			name = _tmp$4;
			offset = _tmp$5;
			start = _tmp$6;
			end = _tmp$7;
			isDST = _tmp$8;
			ok = _tmp$9;
			return [name, offset, start, end, isDST, ok];
		}
		stdOffset = -stdOffset;
		if ((s.length === 0) || (s.charCodeAt(0) === 44)) {
			_tmp$10 = stdName;
			_tmp$11 = stdOffset;
			_tmp$12 = initEnd;
			_tmp$13 = new $Int64(2147483647, 4294967295);
			_tmp$14 = false;
			_tmp$15 = true;
			name = _tmp$10;
			offset = _tmp$11;
			start = _tmp$12;
			end = _tmp$13;
			isDST = _tmp$14;
			ok = _tmp$15;
			return [name, offset, start, end, isDST, ok];
		}
		_tuple$2 = tzsetName(s);
		dstName = _tuple$2[0];
		s = _tuple$2[1];
		ok = _tuple$2[2];
		if (ok) {
			if ((s.length === 0) || (s.charCodeAt(0) === 44)) {
				dstOffset = stdOffset + 3600 >> 0;
			} else {
				_tuple$3 = tzsetOffset(s);
				dstOffset = _tuple$3[0];
				s = _tuple$3[1];
				ok = _tuple$3[2];
				dstOffset = -dstOffset;
			}
		}
		if (!ok) {
			_tmp$16 = "";
			_tmp$17 = 0;
			_tmp$18 = new $Int64(0, 0);
			_tmp$19 = new $Int64(0, 0);
			_tmp$20 = false;
			_tmp$21 = false;
			name = _tmp$16;
			offset = _tmp$17;
			start = _tmp$18;
			end = _tmp$19;
			isDST = _tmp$20;
			ok = _tmp$21;
			return [name, offset, start, end, isDST, ok];
		}
		if (s.length === 0) {
			s = ",M3.2.0,M11.1.0";
		}
		if (!((s.charCodeAt(0) === 44)) && !((s.charCodeAt(0) === 59))) {
			_tmp$22 = "";
			_tmp$23 = 0;
			_tmp$24 = new $Int64(0, 0);
			_tmp$25 = new $Int64(0, 0);
			_tmp$26 = false;
			_tmp$27 = false;
			name = _tmp$22;
			offset = _tmp$23;
			start = _tmp$24;
			end = _tmp$25;
			isDST = _tmp$26;
			ok = _tmp$27;
			return [name, offset, start, end, isDST, ok];
		}
		s = $substring(s, 1);
		_tmp$28 = new rule.ptr(0, 0, 0, 0, 0);
		_tmp$29 = new rule.ptr(0, 0, 0, 0, 0);
		startRule = $clone(_tmp$28, rule);
		endRule = $clone(_tmp$29, rule);
		_tuple$4 = tzsetRule(s);
		rule.copy(startRule, _tuple$4[0]);
		s = _tuple$4[1];
		ok = _tuple$4[2];
		if (!ok || (s.length === 0) || !((s.charCodeAt(0) === 44))) {
			_tmp$30 = "";
			_tmp$31 = 0;
			_tmp$32 = new $Int64(0, 0);
			_tmp$33 = new $Int64(0, 0);
			_tmp$34 = false;
			_tmp$35 = false;
			name = _tmp$30;
			offset = _tmp$31;
			start = _tmp$32;
			end = _tmp$33;
			isDST = _tmp$34;
			ok = _tmp$35;
			return [name, offset, start, end, isDST, ok];
		}
		s = $substring(s, 1);
		_tuple$5 = tzsetRule(s);
		rule.copy(endRule, _tuple$5[0]);
		s = _tuple$5[1];
		ok = _tuple$5[2];
		if (!ok || s.length > 0) {
			_tmp$36 = "";
			_tmp$37 = 0;
			_tmp$38 = new $Int64(0, 0);
			_tmp$39 = new $Int64(0, 0);
			_tmp$40 = false;
			_tmp$41 = false;
			name = _tmp$36;
			offset = _tmp$37;
			start = _tmp$38;
			end = _tmp$39;
			isDST = _tmp$40;
			ok = _tmp$41;
			return [name, offset, start, end, isDST, ok];
		}
		_tuple$6 = absDate(((x$1 = (x$2 = new $Int64(sec.$high + 14, sec.$low + 2006054656), new $Int64(x$2.$high + 2147483631, x$2.$low + 2739393024)), new $Uint64(x$1.$high, x$1.$low))), false);
		year = _tuple$6[0];
		yday = _tuple$6[3];
		ysec = (x$3 = (new $Int64(0, ($imul(yday, 86400)))), x$4 = $div64(sec, new $Int64(0, 86400), true), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
		d = daysSinceEpoch(year);
		abs = ((x$5 = $mul64(d, new $Uint64(0, 86400)), new $Int64(x$5.$high, x$5.$low)));
		abs = (x$6 = new $Int64(-2147483647, 3844486912), new $Int64(abs.$high + x$6.$high, abs.$low + x$6.$low));
		startSec = (new $Int64(0, tzruleTime(year, $clone(startRule, rule), stdOffset)));
		endSec = (new $Int64(0, tzruleTime(year, $clone(endRule, rule), dstOffset)));
		_tmp$42 = true;
		_tmp$43 = false;
		dstIsDST = _tmp$42;
		stdIsDST = _tmp$43;
		if ((endSec.$high < startSec.$high || (endSec.$high === startSec.$high && endSec.$low < startSec.$low))) {
			_tmp$44 = endSec;
			_tmp$45 = startSec;
			startSec = _tmp$44;
			endSec = _tmp$45;
			_tmp$46 = dstName;
			_tmp$47 = stdName;
			stdName = _tmp$46;
			dstName = _tmp$47;
			_tmp$48 = dstOffset;
			_tmp$49 = stdOffset;
			stdOffset = _tmp$48;
			dstOffset = _tmp$49;
			_tmp$50 = dstIsDST;
			_tmp$51 = stdIsDST;
			stdIsDST = _tmp$50;
			dstIsDST = _tmp$51;
		}
		if ((ysec.$high < startSec.$high || (ysec.$high === startSec.$high && ysec.$low < startSec.$low))) {
			_tmp$52 = stdName;
			_tmp$53 = stdOffset;
			_tmp$54 = abs;
			_tmp$55 = new $Int64(startSec.$high + abs.$high, startSec.$low + abs.$low);
			_tmp$56 = stdIsDST;
			_tmp$57 = true;
			name = _tmp$52;
			offset = _tmp$53;
			start = _tmp$54;
			end = _tmp$55;
			isDST = _tmp$56;
			ok = _tmp$57;
			return [name, offset, start, end, isDST, ok];
		} else if ((ysec.$high > endSec.$high || (ysec.$high === endSec.$high && ysec.$low >= endSec.$low))) {
			_tmp$58 = stdName;
			_tmp$59 = stdOffset;
			_tmp$60 = new $Int64(endSec.$high + abs.$high, endSec.$low + abs.$low);
			_tmp$61 = new $Int64(abs.$high + 0, abs.$low + 31536000);
			_tmp$62 = stdIsDST;
			_tmp$63 = true;
			name = _tmp$58;
			offset = _tmp$59;
			start = _tmp$60;
			end = _tmp$61;
			isDST = _tmp$62;
			ok = _tmp$63;
			return [name, offset, start, end, isDST, ok];
		} else {
			_tmp$64 = dstName;
			_tmp$65 = dstOffset;
			_tmp$66 = new $Int64(startSec.$high + abs.$high, startSec.$low + abs.$low);
			_tmp$67 = new $Int64(endSec.$high + abs.$high, endSec.$low + abs.$low);
			_tmp$68 = dstIsDST;
			_tmp$69 = true;
			name = _tmp$64;
			offset = _tmp$65;
			start = _tmp$66;
			end = _tmp$67;
			isDST = _tmp$68;
			ok = _tmp$69;
			return [name, offset, start, end, isDST, ok];
		}
	};
	tzsetName = function(s) {
		var _1, _i, _i$1, _ref, _ref$1, _rune, _rune$1, i, i$1, r, r$1, s;
		if (s.length === 0) {
			return ["", "", false];
		}
		if (!((s.charCodeAt(0) === 60))) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				r = _rune[0];
				_1 = r;
				if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55)) || (_1 === (56)) || (_1 === (57)) || (_1 === (44)) || (_1 === (45)) || (_1 === (43))) {
					if (i < 3) {
						return ["", "", false];
					}
					return [$substring(s, 0, i), $substring(s, i), true];
				}
				_i += _rune[1];
			}
			if (s.length < 3) {
				return ["", "", false];
			}
			return [s, "", true];
		} else {
			_ref$1 = s;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.length)) { break; }
				_rune$1 = $decodeRune(_ref$1, _i$1);
				i$1 = _i$1;
				r$1 = _rune$1[0];
				if (r$1 === 62) {
					return [$substring(s, 1, i$1), $substring(s, (i$1 + 1 >> 0)), true];
				}
				_i$1 += _rune$1[1];
			}
			return ["", "", false];
		}
	};
	tzsetOffset = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, hours, mins, neg, off, offset, ok, rest, s, secs;
		offset = 0;
		rest = "";
		ok = false;
		if (s.length === 0) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = false;
			offset = _tmp;
			rest = _tmp$1;
			ok = _tmp$2;
			return [offset, rest, ok];
		}
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = $substring(s, 1);
		} else if (s.charCodeAt(0) === 45) {
			s = $substring(s, 1);
			neg = true;
		}
		hours = 0;
		_tuple = tzsetNum(s, 0, 168);
		hours = _tuple[0];
		s = _tuple[1];
		ok = _tuple[2];
		if (!ok) {
			_tmp$3 = 0;
			_tmp$4 = "";
			_tmp$5 = false;
			offset = _tmp$3;
			rest = _tmp$4;
			ok = _tmp$5;
			return [offset, rest, ok];
		}
		off = $imul(hours, 3600);
		if ((s.length === 0) || !((s.charCodeAt(0) === 58))) {
			if (neg) {
				off = -off;
			}
			_tmp$6 = off;
			_tmp$7 = s;
			_tmp$8 = true;
			offset = _tmp$6;
			rest = _tmp$7;
			ok = _tmp$8;
			return [offset, rest, ok];
		}
		mins = 0;
		_tuple$1 = tzsetNum($substring(s, 1), 0, 59);
		mins = _tuple$1[0];
		s = _tuple$1[1];
		ok = _tuple$1[2];
		if (!ok) {
			_tmp$9 = 0;
			_tmp$10 = "";
			_tmp$11 = false;
			offset = _tmp$9;
			rest = _tmp$10;
			ok = _tmp$11;
			return [offset, rest, ok];
		}
		off = off + (($imul(mins, 60))) >> 0;
		if ((s.length === 0) || !((s.charCodeAt(0) === 58))) {
			if (neg) {
				off = -off;
			}
			_tmp$12 = off;
			_tmp$13 = s;
			_tmp$14 = true;
			offset = _tmp$12;
			rest = _tmp$13;
			ok = _tmp$14;
			return [offset, rest, ok];
		}
		secs = 0;
		_tuple$2 = tzsetNum($substring(s, 1), 0, 59);
		secs = _tuple$2[0];
		s = _tuple$2[1];
		ok = _tuple$2[2];
		if (!ok) {
			_tmp$15 = 0;
			_tmp$16 = "";
			_tmp$17 = false;
			offset = _tmp$15;
			rest = _tmp$16;
			ok = _tmp$17;
			return [offset, rest, ok];
		}
		off = off + (secs) >> 0;
		if (neg) {
			off = -off;
		}
		_tmp$18 = off;
		_tmp$19 = s;
		_tmp$20 = true;
		offset = _tmp$18;
		rest = _tmp$19;
		ok = _tmp$20;
		return [offset, rest, ok];
	};
	tzsetRule = function(s) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, day, day$1, jday, mon, offset, ok, r, s, week;
		r = new rule.ptr(0, 0, 0, 0, 0);
		if (s.length === 0) {
			return [new rule.ptr(0, 0, 0, 0, 0), "", false];
		}
		ok = false;
		if (s.charCodeAt(0) === 74) {
			jday = 0;
			_tuple = tzsetNum($substring(s, 1), 1, 365);
			jday = _tuple[0];
			s = _tuple[1];
			ok = _tuple[2];
			if (!ok) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			r.kind = 0;
			r.day = jday;
		} else if (s.charCodeAt(0) === 77) {
			mon = 0;
			_tuple$1 = tzsetNum($substring(s, 1), 1, 12);
			mon = _tuple$1[0];
			s = _tuple$1[1];
			ok = _tuple$1[2];
			if (!ok || (s.length === 0) || !((s.charCodeAt(0) === 46))) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			week = 0;
			_tuple$2 = tzsetNum($substring(s, 1), 1, 5);
			week = _tuple$2[0];
			s = _tuple$2[1];
			ok = _tuple$2[2];
			if (!ok || (s.length === 0) || !((s.charCodeAt(0) === 46))) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			day = 0;
			_tuple$3 = tzsetNum($substring(s, 1), 0, 6);
			day = _tuple$3[0];
			s = _tuple$3[1];
			ok = _tuple$3[2];
			if (!ok) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			r.kind = 2;
			r.day = day;
			r.week = week;
			r.mon = mon;
		} else {
			day$1 = 0;
			_tuple$4 = tzsetNum(s, 0, 365);
			day$1 = _tuple$4[0];
			s = _tuple$4[1];
			ok = _tuple$4[2];
			if (!ok) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			r.kind = 1;
			r.day = day$1;
		}
		if ((s.length === 0) || !((s.charCodeAt(0) === 47))) {
			r.time = 7200;
			return [r, s, true];
		}
		_tuple$5 = tzsetOffset($substring(s, 1));
		offset = _tuple$5[0];
		s = _tuple$5[1];
		ok = _tuple$5[2];
		if (!ok) {
			return [new rule.ptr(0, 0, 0, 0, 0), "", false];
		}
		r.time = offset;
		return [r, s, true];
	};
	tzsetNum = function(s, min, max) {
		var _i, _ref, _rune, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, i, max, min, num, ok, r, rest, s;
		num = 0;
		rest = "";
		ok = false;
		if (s.length === 0) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = false;
			num = _tmp;
			rest = _tmp$1;
			ok = _tmp$2;
			return [num, rest, ok];
		}
		num = 0;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			if (r < 48 || r > 57) {
				if ((i === 0) || num < min) {
					_tmp$3 = 0;
					_tmp$4 = "";
					_tmp$5 = false;
					num = _tmp$3;
					rest = _tmp$4;
					ok = _tmp$5;
					return [num, rest, ok];
				}
				_tmp$6 = num;
				_tmp$7 = $substring(s, i);
				_tmp$8 = true;
				num = _tmp$6;
				rest = _tmp$7;
				ok = _tmp$8;
				return [num, rest, ok];
			}
			num = $imul(num, (10));
			num = num + ((((r >> 0)) - 48 >> 0)) >> 0;
			if (num > max) {
				_tmp$9 = 0;
				_tmp$10 = "";
				_tmp$11 = false;
				num = _tmp$9;
				rest = _tmp$10;
				ok = _tmp$11;
				return [num, rest, ok];
			}
			_i += _rune[1];
		}
		if (num < min) {
			_tmp$12 = 0;
			_tmp$13 = "";
			_tmp$14 = false;
			num = _tmp$12;
			rest = _tmp$13;
			ok = _tmp$14;
			return [num, rest, ok];
		}
		_tmp$15 = num;
		_tmp$16 = "";
		_tmp$17 = true;
		num = _tmp$15;
		rest = _tmp$16;
		ok = _tmp$17;
		return [num, rest, ok];
	};
	tzruleTime = function(year, r, off) {
		var _1, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, d, dow, i, m1, off, r, s, x$1, year, yy0, yy1, yy2;
		s = 0;
		_1 = r.kind;
		if (_1 === (0)) {
			s = $imul(((r.day - 1 >> 0)), 86400);
			if (isLeap(year) && r.day >= 60) {
				s = s + (86400) >> 0;
			}
		} else if (_1 === (1)) {
			s = $imul(r.day, 86400);
		} else if (_1 === (2)) {
			m1 = (_r = ((r.mon + 9 >> 0)) % 12, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			yy0 = year;
			if (r.mon <= 2) {
				yy0 = yy0 - (1) >> 0;
			}
			yy1 = (_q = yy0 / 100, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			yy2 = (_r$1 = yy0 % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			dow = (_r$2 = (((((((_q$1 = ((($imul(26, m1)) - 2 >> 0)) / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0) + yy2 >> 0) + (_q$2 = yy2 / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) + (_q$3 = yy1 / 4, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) - ($imul(2, yy1)) >> 0)) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
			if (dow < 0) {
				dow = dow + (7) >> 0;
			}
			d = r.day - dow >> 0;
			if (d < 0) {
				d = d + (7) >> 0;
			}
			i = 1;
			while (true) {
				if (!(i < r.week)) { break; }
				if ((d + 7 >> 0) >= daysIn(((r.mon >> 0)), year)) {
					break;
				}
				d = d + (7) >> 0;
				i = i + (1) >> 0;
			}
			d = d + ((((x$1 = r.mon - 1 >> 0, ((x$1 < 0 || x$1 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$1])) >> 0))) >> 0;
			if (isLeap(year) && r.mon > 2) {
				d = d + (1) >> 0;
			}
			s = $imul(d, 86400);
		}
		return (s + r.time >> 0) - off >> 0;
	};
	Location.ptr.prototype.lookupName = function(name, unix) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i$1, l, nam, name, offset, offset$1, ok, unix, x$1, x$2, x$3, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; i = $f.i; i$1 = $f.i$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		ok = false;
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x$1 = l.zone, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$1 = l.lookup((x$2 = (new $Int64(0, zone$1.offset)), new $Int64(unix.$high - x$2.$high, unix.$low - x$2.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				nam = _tuple[0];
				offset$1 = _tuple[1];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = true;
					offset = _tmp;
					ok = _tmp$1;
					$s = -1; return [offset, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$3 = l.zone, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$2 = zone$2.offset;
				_tmp$3 = true;
				offset = _tmp$2;
				ok = _tmp$3;
				$s = -1; return [offset, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.i = i; $f.i$1 = i$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$2], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$7.methods = [{prop: "nsec", name: "nsec", pkg: "time", typ: $funcType([], [$Int32], false)}, {prop: "sec", name: "sec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "unixSec", name: "unixSec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "addSec", name: "addSec", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "setLoc", name: "setLoc", pkg: "time", typ: $funcType([ptrType$2], [], false)}, {prop: "stripMono", name: "stripMono", pkg: "time", typ: $funcType([], [], false)}, {prop: "setMono", name: "setMono", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "mono", name: "mono", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Microseconds", name: "Microseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Milliseconds", name: "Milliseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Duration], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Duration], false)}];
	ptrType$2.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool], false)}];
	ParseError.init("", [{prop: "Layout", name: "Layout", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", embedded: false, exported: true, typ: $String, tag: ""}]);
	Time.init("time", [{prop: "wall", name: "wall", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "ext", name: "ext", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "loc", name: "loc", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	Location.init("time", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "extend", name: "extend", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "cacheStart", name: "cacheStart", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", embedded: false, exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	rule.init("time", [{prop: "kind", name: "kind", embedded: false, exported: false, typ: ruleKind, tag: ""}, {prop: "day", name: "day", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "week", name: "week", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "mon", name: "mon", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "time", name: "time", embedded: false, exported: false, typ: $Int, tag: ""}]);
	$pkg.$initLinknames = function() {
		runtimeNano = $linknames["runtime.nanotime"];
};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, "", new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		zoneSources = new sliceType$2([runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
		std0x = $toNativeArray($kindInt, [260, 265, 526, 528, 530, 276]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		startNano = (x = runtimeNano(), new $Int64(x.$high - 0, x.$low - 1));
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, "", new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		errLocation = errors.New("time: invalid location name");
		badData = errors.New("malformed time zone information");
		$unused(new sliceType$2(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]));
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/poll"] = (function() {
	var $pkg = {}, $init, errors, unix, io, atomic, syscall, time, pollDesc, DeadlineExceededError, fdMutex, FD, ptrType, chanType, sliceType, arrayType, arrayType$1, ptrType$1, ptrType$2, ptrType$3, ptrType$4, arrayType$2, sliceType$2, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, funcType, sliceType$3, ptrType$12, funcType$1, ptrType$13, ptrType$14, ptrType$15, ptrType$16, sliceType$4, ptrType$17, semWaiters, copyFileRangeSupported, copyFileRangeSupported$24ptr, tryDupCloexec, tryDupCloexec$24ptr, runtime_Semacquire, runtime_Semrelease, kernelVersion, CopyFileRange, copyFileRange, fcntl, errClosing, consume, ignoringEINTR, DupCloseOnExec, dupCloseOnExecOld, ignoringEINTRIO, writev, newIovecWithBase, accept;
	errors = $packages["errors"];
	unix = $packages["internal/syscall/unix"];
	io = $packages["io"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	pollDesc = $pkg.pollDesc = $newType(0, $kindStruct, "poll.pollDesc", true, "internal/poll", false, function(closing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.closing = false;
			return;
		}
		this.closing = closing_;
	});
	DeadlineExceededError = $pkg.DeadlineExceededError = $newType(0, $kindStruct, "poll.DeadlineExceededError", true, "internal/poll", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	fdMutex = $pkg.fdMutex = $newType(0, $kindStruct, "poll.fdMutex", true, "internal/poll", false, function(state_, rsema_, wsema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = new $Uint64(0, 0);
			this.rsema = 0;
			this.wsema = 0;
			return;
		}
		this.state = state_;
		this.rsema = rsema_;
		this.wsema = wsema_;
	});
	FD = $pkg.FD = $newType(0, $kindStruct, "poll.FD", true, "internal/poll", true, function(fdmu_, Sysfd_, pd_, iovecs_, csema_, isBlocking_, IsStream_, ZeroReadIsEOF_, isFile_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fdmu = new fdMutex.ptr(new $Uint64(0, 0), 0, 0);
			this.Sysfd = 0;
			this.pd = new pollDesc.ptr(false);
			this.iovecs = ptrType$7.nil;
			this.csema = 0;
			this.isBlocking = 0;
			this.IsStream = false;
			this.ZeroReadIsEOF = false;
			this.isFile = false;
			return;
		}
		this.fdmu = fdmu_;
		this.Sysfd = Sysfd_;
		this.pd = pd_;
		this.iovecs = iovecs_;
		this.csema = csema_;
		this.isBlocking = isBlocking_;
		this.IsStream = IsStream_;
		this.ZeroReadIsEOF = ZeroReadIsEOF_;
		this.isFile = isFile_;
	});
	ptrType = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType = $sliceType(chanType);
	arrayType = $arrayType($Int8, 65);
	arrayType$1 = $arrayType($Int, 2);
	ptrType$1 = $ptrType($Int32);
	ptrType$2 = $ptrType($Int64);
	ptrType$3 = $ptrType($Uint64);
	ptrType$4 = $ptrType($Uint8);
	arrayType$2 = $arrayType($Uint8, 4);
	sliceType$2 = $sliceType(syscall.Iovec);
	ptrType$7 = $ptrType(sliceType$2);
	ptrType$8 = $ptrType(FD);
	ptrType$9 = $ptrType(pollDesc);
	ptrType$10 = $ptrType(DeadlineExceededError);
	ptrType$11 = $ptrType(fdMutex);
	funcType = $funcType([$Uintptr], [], false);
	sliceType$3 = $sliceType($Uint8);
	ptrType$12 = $ptrType(syscall.Stat_t);
	funcType$1 = $funcType([$Uintptr], [$Bool], false);
	ptrType$13 = $ptrType(syscall.Linger);
	ptrType$14 = $ptrType(syscall.IPMreqn);
	ptrType$15 = $ptrType(syscall.IPMreq);
	ptrType$16 = $ptrType(syscall.IPv6Mreq);
	sliceType$4 = $sliceType(sliceType$3);
	ptrType$17 = $ptrType(sliceType$4);
	pollDesc.ptr.prototype.init = function(fd) {
		var fd, pd;
		pd = this;
		return $ifaceNil;
	};
	pollDesc.prototype.init = function(fd) { return this.$val.init(fd); };
	pollDesc.ptr.prototype.close = function() {
		var pd;
		pd = this;
	};
	pollDesc.prototype.close = function() { return this.$val.close(); };
	pollDesc.ptr.prototype.evict = function() {
		var pd;
		pd = this;
		pd.closing = true;
	};
	pollDesc.prototype.evict = function() { return this.$val.evict(); };
	pollDesc.ptr.prototype.prepare = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $ifaceNil;
	};
	pollDesc.prototype.prepare = function(mode, isFile) { return this.$val.prepare(mode, isFile); };
	pollDesc.ptr.prototype.prepareRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(114, isFile);
	};
	pollDesc.prototype.prepareRead = function(isFile) { return this.$val.prepareRead(isFile); };
	pollDesc.ptr.prototype.prepareWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(119, isFile);
	};
	pollDesc.prototype.prepareWrite = function(isFile) { return this.$val.prepareWrite(isFile); };
	pollDesc.ptr.prototype.wait = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $pkg.ErrDeadlineExceeded;
	};
	pollDesc.prototype.wait = function(mode, isFile) { return this.$val.wait(mode, isFile); };
	pollDesc.ptr.prototype.waitRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(114, isFile);
	};
	pollDesc.prototype.waitRead = function(isFile) { return this.$val.waitRead(isFile); };
	pollDesc.ptr.prototype.waitWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(119, isFile);
	};
	pollDesc.prototype.waitWrite = function(isFile) { return this.$val.waitWrite(isFile); };
	pollDesc.ptr.prototype.pollable = function() {
		return true;
	};
	pollDesc.prototype.pollable = function() { return this.$val.pollable(); };
	FD.ptr.prototype.SetDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	FD.ptr.prototype.SetReadDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	FD.ptr.prototype.SetWriteDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	runtime_Semacquire = function(s) {
		var _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType.keyFor(s)], _entry !== undefined ? _entry.v : sliceType.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType.keyFor(s)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	kernelVersion = function() {
		var _1, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, err, major, minor, rl, uname, value, values, vi, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; c = $f.c; err = $f.err; major = $f.major; minor = $f.minor; rl = $f.rl; uname = $f.uname; value = $f.value; values = $f.values; vi = $f.vi; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		uname = [uname];
		major = 0;
		minor = 0;
		uname[0] = new syscall.Utsname.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType.zero());
		_r = syscall.Uname(uname[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [major, minor];
		}
		rl = $clone(uname[0].Release, arrayType);
		values = arrayType$1.zero();
		vi = 0;
		value = 0;
		_ref = rl;
		_i = 0;
		while (true) {
			if (!(_i < 65)) { break; }
			c = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			if (48 <= c && c <= 57) {
				value = (($imul(value, 10))) + (((c - 48 << 24 >> 24) >> 0)) >> 0;
			} else {
				((vi < 0 || vi >= values.length) ? ($throwRuntimeError("index out of range"), undefined) : values[vi] = value);
				vi = vi + (1) >> 0;
				if (vi >= 2) {
					break;
				}
				value = 0;
			}
			_i++;
		}
		_1 = vi;
		if (_1 === (0)) {
			_tmp = 0;
			_tmp$1 = 0;
			major = _tmp;
			minor = _tmp$1;
			$s = -1; return [major, minor];
		} else if (_1 === (1)) {
			_tmp$2 = values[0];
			_tmp$3 = 0;
			major = _tmp$2;
			minor = _tmp$3;
			$s = -1; return [major, minor];
		} else if (_1 === (2)) {
			_tmp$4 = values[0];
			_tmp$5 = values[1];
			major = _tmp$4;
			minor = _tmp$5;
			$s = -1; return [major, minor];
		}
		$s = -1; return [major, minor];
		/* */ } return; } if ($f === undefined) { $f = { $blk: kernelVersion }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.c = c; $f.err = err; $f.major = major; $f.minor = minor; $f.rl = rl; $f.uname = uname; $f.value = value; $f.values = values; $f.vi = vi; $f.$s = $s; $f.$r = $r; return $f;
	};
	CopyFileRange = function(dst, src, remain) {
		var _1, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, dst, err, err$1, handled, major, max, minor, n, remain, src, supported, written, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dst = $f.dst; err = $f.err; err$1 = $f.err$1; handled = $f.handled; major = $f.major; max = $f.max; minor = $f.minor; n = $f.n; remain = $f.remain; src = $f.src; supported = $f.supported; written = $f.written; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		handled = false;
		err = $ifaceNil;
		supported = atomic.LoadInt32((copyFileRangeSupported$24ptr || (copyFileRangeSupported$24ptr = new ptrType$1(function() { return copyFileRangeSupported; }, function($v) { copyFileRangeSupported = $v; }))));
		/* */ if (supported === 0) { $s = 1; continue; }
		/* */ if (supported === -1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (supported === 0) { */ case 1:
			_tmp = new $Int64(0, 0);
			_tmp$1 = false;
			_tmp$2 = $ifaceNil;
			written = _tmp;
			handled = _tmp$1;
			err = _tmp$2;
			$s = -1; return [written, handled, err];
		/* } else if (supported === -1) { */ case 2:
			_r = kernelVersion(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			major = _tuple[0];
			minor = _tuple[1];
			if (major > 5 || ((major === 5) && minor >= 3)) {
				atomic.StoreInt32((copyFileRangeSupported$24ptr || (copyFileRangeSupported$24ptr = new ptrType$1(function() { return copyFileRangeSupported; }, function($v) { copyFileRangeSupported = $v; }))), 1);
			} else {
				atomic.StoreInt32((copyFileRangeSupported$24ptr || (copyFileRangeSupported$24ptr = new ptrType$1(function() { return copyFileRangeSupported; }, function($v) { copyFileRangeSupported = $v; }))), 0);
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = false;
				_tmp$5 = $ifaceNil;
				written = _tmp$3;
				handled = _tmp$4;
				err = _tmp$5;
				$s = -1; return [written, handled, err];
			}
		/* } */ case 3:
		/* while (true) { */ case 5:
			/* if (!((remain.$high > 0 || (remain.$high === 0 && remain.$low > 0)))) { break; } */ if(!((remain.$high > 0 || (remain.$high === 0 && remain.$low > 0)))) { $s = 6; continue; }
			max = remain;
			if ((max.$high > 0 || (max.$high === 0 && max.$low > 1073741824))) {
				max = new $Int64(0, 1073741824);
			}
			_r$1 = copyFileRange(dst, src, (((max.$low + ((max.$high >> 31) * 4294967296)) >> 0))); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			n = _tuple$1[0];
			err$1 = _tuple$1[1];
			_1 = err$1;
			if ($interfaceIsEqual(_1, new syscall.Errno((38)))) {
				atomic.StoreInt32((copyFileRangeSupported$24ptr || (copyFileRangeSupported$24ptr = new ptrType$1(function() { return copyFileRangeSupported; }, function($v) { copyFileRangeSupported = $v; }))), 0);
				_tmp$6 = new $Int64(0, 0);
				_tmp$7 = false;
				_tmp$8 = $ifaceNil;
				written = _tmp$6;
				handled = _tmp$7;
				err = _tmp$8;
				$s = -1; return [written, handled, err];
			} else if ($interfaceIsEqual(_1, new syscall.Errno((18))) || $interfaceIsEqual(_1, new syscall.Errno((22))) || $interfaceIsEqual(_1, new syscall.Errno((5))) || $interfaceIsEqual(_1, new syscall.Errno((95))) || $interfaceIsEqual(_1, new syscall.Errno((1)))) {
				_tmp$9 = new $Int64(0, 0);
				_tmp$10 = false;
				_tmp$11 = $ifaceNil;
				written = _tmp$9;
				handled = _tmp$10;
				err = _tmp$11;
				$s = -1; return [written, handled, err];
			} else if ($interfaceIsEqual(_1, $ifaceNil)) {
				if ((n.$high === 0 && n.$low === 0)) {
					if ((written.$high === 0 && written.$low === 0)) {
						_tmp$12 = new $Int64(0, 0);
						_tmp$13 = false;
						_tmp$14 = $ifaceNil;
						written = _tmp$12;
						handled = _tmp$13;
						err = _tmp$14;
						$s = -1; return [written, handled, err];
					}
					_tmp$15 = written;
					_tmp$16 = true;
					_tmp$17 = $ifaceNil;
					written = _tmp$15;
					handled = _tmp$16;
					err = _tmp$17;
					$s = -1; return [written, handled, err];
				}
				remain = (x = n, new $Int64(remain.$high - x.$high, remain.$low - x.$low));
				written = (x$1 = n, new $Int64(written.$high + x$1.$high, written.$low + x$1.$low));
			} else {
				_tmp$18 = written;
				_tmp$19 = true;
				_tmp$20 = err$1;
				written = _tmp$18;
				handled = _tmp$19;
				err = _tmp$20;
				$s = -1; return [written, handled, err];
			}
		/* } */ $s = 5; continue; case 6:
		_tmp$21 = written;
		_tmp$22 = true;
		_tmp$23 = $ifaceNil;
		written = _tmp$21;
		handled = _tmp$22;
		err = _tmp$23;
		$s = -1; return [written, handled, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CopyFileRange }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dst = dst; $f.err = err; $f.err$1 = err$1; $f.handled = handled; $f.major = major; $f.max = max; $f.minor = minor; $f.n = n; $f.remain = remain; $f.src = src; $f.supported = supported; $f.written = written; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.CopyFileRange = CopyFileRange;
	copyFileRange = function(dst, src, max) {
		var $24r, $24r$1, $24r$2, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, dst, err, err$1, err$2, max, n, src, written, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; dst = $f.dst; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; max = $f.max; n = $f.n; src = $f.src; written = $f.written; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_r = dst.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err$1 = _r;
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 2:
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			written = _tmp;
			err = _tmp$1;
			$24r = [written, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(dst, "writeUnlock"), []]);
		_r$1 = src.readLock(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err$2 = _r$1;
		/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 6:
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err$2;
			written = _tmp$2;
			err = _tmp$3;
			$24r$1 = [written, err];
			$s = 8; case 8: return $24r$1;
		/* } */ case 7:
		$deferred.push([$methodVal(src, "readUnlock"), []]);
		n = 0;
		/* while (true) { */ case 9:
			_r$2 = unix.CopyFileRange(src.Sysfd, ptrType$2.nil, dst.Sysfd, ptrType$2.nil, max, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			n = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, new syscall.Errno(4)))) {
				/* break; */ $s = 10; continue;
			}
		/* } */ $s = 9; continue; case 10:
		_tmp$4 = (new $Int64(0, n));
		_tmp$5 = err;
		written = _tmp$4;
		err = _tmp$5;
		$24r$2 = [written, err];
		$s = 12; case 12: return $24r$2;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [written, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: copyFileRange }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.dst = dst; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.max = max; $f.n = n; $f.src = src; $f.written = written; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	fcntl = function(fd, cmd, arg) {
		var _r, _tuple, arg, cmd, e, fd, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; arg = $f.arg; cmd = $f.cmd; e = $f.e; fd = $f.fd; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = syscall.Syscall(unix.FcntlSyscall, ((fd >>> 0)), ((cmd >>> 0)), ((arg >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		e = _tuple[2];
		if (!((e === 0))) {
			$s = -1; return [((r >> 0)), new syscall.Errno((e))];
		}
		$s = -1; return [((r >> 0)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: fcntl }; } $f._r = _r; $f._tuple = _tuple; $f.arg = arg; $f.cmd = cmd; $f.e = e; $f.fd = fd; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	errClosing = function(isFile) {
		var isFile;
		if (isFile) {
			return $pkg.ErrFileClosing;
		}
		return $pkg.ErrNetClosing;
	};
	DeadlineExceededError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "i/o timeout";
	};
	DeadlineExceededError.prototype.Error = function() { return this.$val.Error(); };
	DeadlineExceededError.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return true;
	};
	DeadlineExceededError.prototype.Timeout = function() { return this.$val.Timeout(); };
	DeadlineExceededError.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return true;
	};
	DeadlineExceededError.prototype.Temporary = function() { return this.$val.Temporary(); };
	consume = function(v, n) {
		var ln0, n, v, x, x$1, x$2, x$3;
		while (true) {
			if (!(v.$get().$length > 0)) { break; }
			ln0 = (new $Int64(0, (x = v.$get(), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).$length));
			if ((ln0.$high > n.$high || (ln0.$high === n.$high && ln0.$low > n.$low))) {
				(x$2 = v.$get(), (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0] = $subslice((x$1 = v.$get(), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $flatten64(n))));
				return;
			}
			n = (x$3 = ln0, new $Int64(n.$high - x$3.$high, n.$low - x$3.$low));
			v.$set($subslice((v.$get()), 1));
		}
	};
	FD.ptr.prototype.Fsync = function() {
		var $24r, $24r$1, _r, err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd) { return function $b() {
			var $24r$1, _r, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r$1 = $f.$24r$1; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = syscall.Fsync(fd[0].Sysfd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$24r$1 = $24r$1; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
		}; })(fd)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fsync }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fsync = function() { return this.$val.Fsync(); };
	fdMutex.ptr.prototype.incref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(old.$high + 0, old.$low + 8);
			if ((x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return true;
			}
		}
	};
	fdMutex.prototype.incref = function() { return this.$val.incref(); };
	fdMutex.ptr.prototype.increfAndClose = function() {
		var mu, new$1, old, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; mu = $f.mu; new$1 = $f.new$1; old = $f.old; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = (x$1 = new $Uint64(old.$high | 0, (old.$low | 1) >>> 0), new $Uint64(x$1.$high + 0, x$1.$low + 8));
			if ((x$2 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$2.$high === 0 && x$2.$low === 0))) {
				$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
			}
			new$1 = (x$3 = new $Uint64(2147483647, 4286578688), new $Uint64(new$1.$high & ~x$3.$high, (new$1.$low & ~x$3.$low) >>> 0));
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* while (true) { */ case 5:
					/* if (!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { break; } */ if(!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { $s = 6; continue; }
					old = (x$5 = new $Uint64(0, 8388608), new $Uint64(old.$high - x$5.$high, old.$low - x$5.$low));
					$r = runtime_Semrelease((mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ $s = 5; continue; case 6:
				/* while (true) { */ case 8:
					/* if (!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { break; } */ if(!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { $s = 9; continue; }
					old = (x$7 = new $Uint64(2048, 0), new $Uint64(old.$high - x$7.$high, old.$low - x$7.$low));
					$r = runtime_Semrelease((mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ $s = 8; continue; case 9:
				$s = -1; return true;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.increfAndClose }; } $f.mu = mu; $f.new$1 = new$1; $f.old = old; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.increfAndClose = function() { return this.$val.increfAndClose(); };
	fdMutex.ptr.prototype.decref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x.$high === 0 && x.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = new $Uint64(old.$high - 0, old.$low - 8);
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return (x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$1.$high === 0 && x$1.$low === 1));
			}
		}
	};
	fdMutex.prototype.decref = function() { return this.$val.decref(); };
	fdMutex.ptr.prototype.rwlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; mu = $f.mu; mutexBit = $f.mutexBit; mutexMask = $f.mutexMask; mutexSema = $f.mutexSema; mutexWait = $f.mutexWait; new$1 = $f.new$1; old = $f.old; read = $f.read; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = new $Uint64(0, 0);
			if ((x$1 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				new$1 = (x$2 = new $Uint64(old.$high | mutexBit.$high, (old.$low | mutexBit.$low) >>> 0), new $Uint64(x$2.$high + 0, x$2.$low + 8));
				if ((x$3 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$3.$high === 0 && x$3.$low === 0))) {
					$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
				}
			} else {
				new$1 = new $Uint64(old.$high + mutexWait.$high, old.$low + mutexWait.$low);
				if ((x$4 = new $Uint64(new$1.$high & mutexMask.$high, (new$1.$low & mutexMask.$low) >>> 0), (x$4.$high === 0 && x$4.$low === 0))) {
					$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
				}
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				if ((x$5 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0))) {
					$s = -1; return true;
				}
				$r = runtime_Semacquire(mutexSema); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.rwlock }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.mu = mu; $f.mutexBit = mutexBit; $f.mutexMask = mutexMask; $f.mutexSema = mutexSema; $f.mutexWait = mutexWait; $f.new$1 = new$1; $f.old = old; $f.read = read; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.rwlock = function(read) { return this.$val.rwlock(read); };
	fdMutex.ptr.prototype.rwunlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; mu = $f.mu; mutexBit = $f.mutexBit; mutexMask = $f.mutexMask; mutexSema = $f.mutexSema; mutexWait = $f.mutexWait; new$1 = $f.new$1; old = $f.old; read = $f.read; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x.$high === 0 && x.$low === 0)) || (x$1 = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$2 = new $Uint64(old.$high & ~mutexBit.$high, (old.$low & ~mutexBit.$low) >>> 0), new $Uint64(x$2.$high - 0, x$2.$low - 8));
			if (!((x$3 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$3.$high === 0 && x$3.$low === 0)))) {
				new$1 = (x$4 = mutexWait, new $Uint64(new$1.$high - x$4.$high, new$1.$low - x$4.$low));
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* */ if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { */ case 5:
					$r = runtime_Semrelease(mutexSema); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				$s = -1; return (x$6 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$6.$high === 0 && x$6.$low === 1));
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.rwunlock }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.mu = mu; $f.mutexBit = mutexBit; $f.mutexMask = mutexMask; $f.mutexSema = mutexSema; $f.mutexWait = mutexWait; $f.new$1 = new$1; $f.old = old; $f.read = read; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.rwunlock = function(read) { return this.$val.rwunlock(read); };
	FD.ptr.prototype.incref = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.incref()) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.incref = function() { return this.$val.incref(); };
	FD.ptr.prototype.decref = function() {
		var $24r, _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.decref()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.decref()) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.decref }; } $f.$24r = $24r; $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.decref = function() { return this.$val.decref(); };
	FD.ptr.prototype.readLock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.readLock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.readLock = function() { return this.$val.readLock(); };
	FD.ptr.prototype.readUnlock = function() {
		var _r, _r$1, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.readUnlock }; } $f._r = _r; $f._r$1 = _r$1; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.readUnlock = function() { return this.$val.readUnlock(); };
	FD.ptr.prototype.writeLock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.writeLock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.writeLock = function() { return this.$val.writeLock(); };
	FD.ptr.prototype.writeUnlock = function() {
		var _r, _r$1, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.writeUnlock }; } $f._r = _r; $f._r$1 = _r$1; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.writeUnlock = function() { return this.$val.writeUnlock(); };
	FD.ptr.prototype.eofError = function(n, err) {
		var err, fd, n;
		fd = this;
		if ((n === 0) && $interfaceIsEqual(err, $ifaceNil) && fd.ZeroReadIsEOF) {
			return io.EOF;
		}
		return err;
	};
	FD.prototype.eofError = function(n, err) { return this.$val.eofError(n, err); };
	FD.ptr.prototype.Shutdown = function(how) {
		var $24r, $24r$1, _r, err, fd, how, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; how = $f.how; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.Shutdown(fd.Sysfd, how); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Shutdown }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.how = how; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Shutdown = function(how) { return this.$val.Shutdown(how); };
	FD.ptr.prototype.Fchown = function(uid, gid) {
		var $24r, $24r$1, _r, err, fd, gid, uid, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; gid = $f.gid; uid = $f.uid; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		gid = [gid];
		uid = [uid];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, gid, uid) { return function $b() {
			var $24r$1, _r, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r$1 = $f.$24r$1; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = syscall.Fchown(fd[0].Sysfd, uid[0], gid[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$24r$1 = $24r$1; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
		}; })(fd, gid, uid)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchown }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchown = function(uid, gid) { return this.$val.Fchown(uid, gid); };
	FD.ptr.prototype.Ftruncate = function(size) {
		var $24r, $24r$1, _r, err, fd, size, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; size = $f.size; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		size = [size];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, size) { return function $b() {
			var $24r$1, _r, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r$1 = $f.$24r$1; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = syscall.Ftruncate(fd[0].Sysfd, size[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$24r$1 = $24r$1; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
		}; })(fd, size)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Ftruncate }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.size = size; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Ftruncate = function(size) { return this.$val.Ftruncate(size); };
	FD.ptr.prototype.RawControl = function(f) {
		var $24r, $24r$1, err, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; err = $f.err; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		$r = f(((fd.Sysfd >>> 0))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$24r$1 = $ifaceNil;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawControl }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.err = err; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawControl = function(f) { return this.$val.RawControl(f); };
	ignoringEINTR = function(fn) {
		var _r, err, fn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; fn = $f.fn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_r = fn(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, new syscall.Errno(4)))) {
				$s = -1; return err;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ignoringEINTR }; } $f._r = _r; $f.err = err; $f.fn = fn; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.ptr.prototype.Init = function(net, pollable) {
		var err, fd, net, pollable;
		fd = this;
		if (net === "file") {
			fd.isFile = true;
		}
		if (!pollable) {
			fd.isBlocking = 1;
			return $ifaceNil;
		}
		err = fd.pd.init(fd);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			fd.isBlocking = 1;
		}
		return err;
	};
	FD.prototype.Init = function(net, pollable) { return this.$val.Init(net, pollable); };
	FD.ptr.prototype.destroy = function() {
		var _r, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		fd.pd.close();
		_r = $pkg.CloseFunc(fd.Sysfd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		fd.Sysfd = -1;
		$r = runtime_Semrelease((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.destroy }; } $f._r = _r; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.destroy = function() { return this.$val.destroy(); };
	FD.ptr.prototype.Close = function() {
		var _r, _r$1, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.increfAndClose(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		fd.pd.evict();
		_r$1 = fd.decref(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		/* */ if (fd.isBlocking === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (fd.isBlocking === 0) { */ case 5:
			$r = runtime_Semacquire((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Close }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Close = function() { return this.$val.Close(); };
	FD.ptr.prototype.SetBlocking = function() {
		var $24r, $24r$1, _r, err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		atomic.StoreUint32((fd.$ptr_isBlocking || (fd.$ptr_isBlocking = new ptrType(function() { return this.$target.isBlocking; }, function($v) { this.$target.isBlocking = $v; }, fd))), 1);
		_r = syscall.SetNonblock(fd.Sysfd, false); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetBlocking }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetBlocking = function() { return this.$val.SetBlocking(); };
	FD.ptr.prototype.Read = function(p) {
		var $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, _tuple, err, err$1, err$2, fd, n, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		/* */ if (p.$length === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.$length === 0) { */ case 5:
			$24r$1 = [0, $ifaceNil];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 8:
			$24r$2 = [0, err$1];
			$s = 10; case 10: return $24r$2;
		/* } */ case 9:
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		/* while (true) { */ case 11:
			_r$1 = ignoringEINTRIO(syscall.Read, fd.Sysfd, p); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 11; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$3 = [n, err$2];
			$s = 14; case 14: return $24r$3;
		/* } */ $s = 11; continue; case 12:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Read }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Read = function(p) { return this.$val.Read(p); };
	FD.ptr.prototype.Pread = function(p, off) {
		var _r, _r$1, _tuple, err, err$1, fd, n, off, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; off = $f.off; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		n = 0;
		err$1 = $ifaceNil;
		/* while (true) { */ case 1:
			_r = syscall.Pread(fd.Sysfd, p, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, new syscall.Errno(4)))) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			n = 0;
		}
		_r$1 = fd.decref(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		err$1 = fd.eofError(n, err$1);
		$s = -1; return [n, err$1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pread }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.off = off; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Pread = function(p, off) { return this.$val.Pread(p, off); };
	FD.ptr.prototype.ReadFrom = function(p) {
		var $24r, $24r$1, $24r$2, _r, _r$1, _tuple, err, err$1, err$2, fd, n, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, $ifaceNil, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, $ifaceNil, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = syscall.Recvfrom(fd.Sysfd, p, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			sa = _tuple[1];
			err$2 = _tuple[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, sa, err$2];
			$s = 11; case 11: return $24r$2;
		/* } */ $s = 8; continue; case 9:
		$s = -1; return [0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadFrom }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadFrom = function(p) { return this.$val.ReadFrom(p); };
	FD.ptr.prototype.ReadMsg = function(p, oob) {
		var $24r, $24r$1, $24r$2, _r, _r$1, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; flags = $f.flags; n = $f.n; oob = $f.oob; oobn = $f.oobn; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, 0, $ifaceNil, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, 0, $ifaceNil, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = syscall.Recvmsg(fd.Sysfd, p, oob, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			oobn = _tuple[1];
			flags = _tuple[2];
			sa = _tuple[3];
			err$2 = _tuple[4];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, oobn, flags, sa, err$2];
			$s = 11; case 11: return $24r$2;
		/* } */ $s = 8; continue; case 9:
		$s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadMsg }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.flags = flags; $f.n = n; $f.oob = oob; $f.oobn = oobn; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadMsg = function(p, oob) { return this.$val.ReadMsg(p, oob); };
	FD.ptr.prototype.Write = function(p) {
		var $24r, $24r$1, $24r$2, $24r$3, $24r$4, _r, _r$1, _tuple, err, err$1, err$2, fd, max, n, nn, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; $24r$4 = $f.$24r$4; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		nn = 0;
		/* while (true) { */ case 8:
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_r$1 = ignoringEINTRIO(syscall.Write, fd.Sysfd, $subslice(p, nn, max)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			err$2 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			/* */ if (nn === p.$length) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (nn === p.$length) { */ case 11:
				$24r$2 = [nn, err$2];
				$s = 13; case 13: return $24r$2;
			/* } */ case 12:
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 14:
				$24r$3 = [nn, err$2];
				$s = 16; case 16: return $24r$3;
			/* } */ case 15:
			/* */ if (n === 0) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (n === 0) { */ case 17:
				$24r$4 = [nn, io.ErrUnexpectedEOF];
				$s = 19; case 19: return $24r$4;
			/* } */ case 18:
		/* } */ $s = 8; continue; case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Write }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f.$24r$4 = $24r$4; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Write = function(p) { return this.$val.Write(p); };
	FD.ptr.prototype.Pwrite = function(p, off) {
		var $24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, fd, max, n, nn, off, p, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; off = $f.off; p = $f.p; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [0, err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		nn = 0;
		/* while (true) { */ case 4:
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_r = syscall.Pwrite(fd.Sysfd, $subslice(p, nn, max), (x = (new $Int64(0, nn)), new $Int64(off.$high + x.$high, off.$low + x.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err$1 = _tuple[1];
			if ($interfaceIsEqual(err$1, new syscall.Errno(4))) {
				/* continue; */ $s = 4; continue;
			}
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			/* */ if (nn === p.$length) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (nn === p.$length) { */ case 7:
				$24r$1 = [nn, err$1];
				$s = 9; case 9: return $24r$1;
			/* } */ case 8:
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 10:
				$24r$2 = [nn, err$1];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			/* */ if (n === 0) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (n === 0) { */ case 13:
				$24r$3 = [nn, io.ErrUnexpectedEOF];
				$s = 15; case 15: return $24r$3;
			/* } */ case 14:
		/* } */ $s = 4; continue; case 5:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pwrite }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.off = off; $f.p = p; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Pwrite = function(p, off) { return this.$val.Pwrite(p, off); };
	FD.ptr.prototype.WriteTo = function(p, sa) {
		var $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, err, err$1, err$2, fd, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = syscall.Sendto(fd.Sysfd, p, 0, sa); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err$2 = _r$1;
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 11:
				$24r$2 = [0, err$2];
				$s = 13; case 13: return $24r$2;
			/* } */ case 12:
			$24r$3 = [p.$length, $ifaceNil];
			$s = 14; case 14: return $24r$3;
		/* } */ $s = 8; continue; case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteTo }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteTo = function(p, sa) { return this.$val.WriteTo(p, sa); };
	FD.ptr.prototype.WriteMsg = function(p, oob, sa) {
		var $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; oob = $f.oob; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = syscall.SendmsgN(fd.Sysfd, p, oob, sa, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 11:
				$24r$2 = [n, 0, err$2];
				$s = 13; case 13: return $24r$2;
			/* } */ case 12:
			$24r$3 = [n, oob.$length, err$2];
			$s = 14; case 14: return $24r$3;
		/* } */ $s = 8; continue; case 9:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteMsg }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.oob = oob; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteMsg = function(p, oob, sa) { return this.$val.WriteMsg(p, oob, sa); };
	FD.ptr.prototype.Accept = function() {
		var $24r, $24r$1, $24r$2, $24r$3, _1, _r, _r$1, _tuple, err, err$1, err$2, errcall, fd, rsa, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; errcall = $f.errcall; fd = $f.fd; rsa = $f.rsa; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [-1, $ifaceNil, "", err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [-1, $ifaceNil, "", err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = accept(fd.Sysfd); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			s = _tuple[0];
			rsa = _tuple[1];
			errcall = _tuple[2];
			err$2 = _tuple[3];
			/* */ if ($interfaceIsEqual(err$2, $ifaceNil)) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ($interfaceIsEqual(err$2, $ifaceNil)) { */ case 11:
				$24r$2 = [s, rsa, "", err$2];
				$s = 13; case 13: return $24r$2;
			/* } */ case 12:
			_1 = err$2;
			if ($interfaceIsEqual(_1, new syscall.Errno((4)))) {
				/* continue; */ $s = 8; continue;
			} else if ($interfaceIsEqual(_1, new syscall.Errno((11)))) {
				if (fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			} else if ($interfaceIsEqual(_1, new syscall.Errno((103)))) {
				/* continue; */ $s = 8; continue;
			}
			$24r$3 = [-1, $ifaceNil, errcall, err$2];
			$s = 14; case 14: return $24r$3;
		/* } */ $s = 8; continue; case 9:
		$s = -1; return [0, $ifaceNil, "", $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Accept }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.errcall = errcall; $f.fd = fd; $f.rsa = rsa; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Accept = function() { return this.$val.Accept(); };
	FD.ptr.prototype.Seek = function(offset, whence) {
		var $24r, $24r$1, _r, err, fd, offset, whence, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; offset = $f.offset; whence = $f.whence; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [new $Int64(0, 0), err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.Seek(fd.Sysfd, offset, whence); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Seek }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.offset = offset; $f.whence = whence; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	FD.ptr.prototype.ReadDirent = function(buf) {
		var $24r, $24r$1, _r, _tuple, buf, err, err$1, fd, n, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [0, err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		/* while (true) { */ case 4:
			_r = ignoringEINTRIO(syscall.ReadDirent, fd.Sysfd, buf); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$1, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$1 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$1, $ifaceNil)) {
						/* continue; */ $s = 4; continue;
					}
				}
			}
			$24r$1 = [n, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadDirent }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadDirent = function(buf) { return this.$val.ReadDirent(buf); };
	FD.ptr.prototype.Fchmod = function(mode) {
		var $24r, $24r$1, _r, err, fd, mode, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; mode = $f.mode; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		mode = [mode];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, mode) { return function $b() {
			var $24r$1, _r, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r$1 = $f.$24r$1; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = syscall.Fchmod(fd[0].Sysfd, mode[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$24r$1 = $24r$1; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
		}; })(fd, mode)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchmod }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.mode = mode; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchmod = function(mode) { return this.$val.Fchmod(mode); };
	FD.ptr.prototype.Fchdir = function() {
		var $24r, $24r$1, _r, err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.Fchdir(fd.Sysfd); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchdir }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchdir = function() { return this.$val.Fchdir(); };
	FD.ptr.prototype.Fstat = function(s) {
		var $24r, $24r$1, _r, err, fd, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		s = [s];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, s) { return function $b() {
			var $24r$1, _r, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r$1 = $f.$24r$1; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = syscall.Fstat(fd[0].Sysfd, s[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$24r$1 = $24r$1; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
		}; })(fd, s)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fstat }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fstat = function(s) { return this.$val.Fstat(s); };
	DupCloseOnExec = function(fd) {
		var $24r, _1, _r, _r$1, _tuple, e1, fd, r0, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; e1 = $f.e1; fd = $f.fd; r0 = $f.r0; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (true && (atomic.LoadInt32((tryDupCloexec$24ptr || (tryDupCloexec$24ptr = new ptrType$1(function() { return tryDupCloexec; }, function($v) { tryDupCloexec = $v; })))) === 1)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (true && (atomic.LoadInt32((tryDupCloexec$24ptr || (tryDupCloexec$24ptr = new ptrType$1(function() { return tryDupCloexec; }, function($v) { tryDupCloexec = $v; })))) === 1)) { */ case 1:
			_r = fcntl(fd, 1030, 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			r0 = _tuple[0];
			e1 = _tuple[1];
			if ($interfaceIsEqual(e1, $ifaceNil)) {
				$s = -1; return [r0, "", $ifaceNil];
			}
			_1 = $assertType(e1, syscall.Errno);
			if ((_1 === (22)) || (_1 === (38))) {
				atomic.StoreInt32((tryDupCloexec$24ptr || (tryDupCloexec$24ptr = new ptrType$1(function() { return tryDupCloexec; }, function($v) { tryDupCloexec = $v; }))), 0);
			} else {
				$s = -1; return [-1, "fcntl", e1];
			}
		/* } */ case 2:
		_r$1 = dupCloseOnExecOld(fd); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 5; case 5: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DupCloseOnExec }; } $f.$24r = $24r; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.e1 = e1; $f.fd = fd; $f.r0 = r0; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DupCloseOnExec = DupCloseOnExec;
	dupCloseOnExecOld = function(fd) {
		var $24r, $24r$1, _r, _tuple, err, fd, newfd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; _tuple = $f._tuple; err = $f.err; fd = $f.fd; newfd = $f.newfd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = syscall.ForkLock.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(syscall.ForkLock, "RUnlock"), []]);
		_r = syscall.Dup(fd); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		newfd = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:
			$24r = [-1, "dup", err];
			$s = 5; case 5: return $24r;
		/* } */ case 4:
		$r = syscall.CloseOnExec(newfd); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$24r$1 = [newfd, "", $ifaceNil];
		$s = 7; case 7: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: dupCloseOnExecOld }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.fd = fd; $f.newfd = newfd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.ptr.prototype.Dup = function() {
		var $24r, $24r$1, _r, err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [-1, "", err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = DupCloseOnExec(fd.Sysfd); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Dup }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Dup = function() { return this.$val.Dup(); };
	FD.ptr.prototype.WaitWrite = function() {
		var fd;
		fd = this;
		return fd.pd.waitWrite(fd.isFile);
	};
	FD.prototype.WaitWrite = function() { return this.$val.WaitWrite(); };
	FD.ptr.prototype.WriteOnce = function(p) {
		var $24r, $24r$1, _r, _r$1, err, fd, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; _r$1 = $f._r$1; err = $f.err; fd = $f.fd; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		_r$1 = ignoringEINTRIO(syscall.Write, fd.Sysfd, p); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r$1 = _r$1;
		$s = 6; case 6: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteOnce }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.fd = fd; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteOnce = function(p) { return this.$val.WriteOnce(p); };
	FD.ptr.prototype.RawRead = function(f) {
		var $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = err;
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = err$1;
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_r$1) { */ case 10:
				$24r$2 = $ifaceNil;
				$s = 13; case 13: return $24r$2;
			/* } */ case 11:
			err$2 = fd.pd.waitRead(fd.isFile);
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 14:
				$24r$3 = err$2;
				$s = 16; case 16: return $24r$3;
			/* } */ case 15:
		/* } */ $s = 8; continue; case 9:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawRead }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawRead = function(f) { return this.$val.RawRead(f); };
	FD.ptr.prototype.RawWrite = function(f) {
		var $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = err;
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = err$1;
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_r$1) { */ case 10:
				$24r$2 = $ifaceNil;
				$s = 13; case 13: return $24r$2;
			/* } */ case 11:
			err$2 = fd.pd.waitWrite(fd.isFile);
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 14:
				$24r$3 = err$2;
				$s = 16; case 16: return $24r$3;
			/* } */ case 15:
		/* } */ $s = 8; continue; case 9:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawWrite }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawWrite = function(f) { return this.$val.RawWrite(f); };
	ignoringEINTRIO = function(fn, fd, p) {
		var _r, _tuple, err, fd, fn, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; fd = $f.fd; fn = $f.fn; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_r = fn(fd, p); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, new syscall.Errno(4)))) {
				$s = -1; return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ignoringEINTRIO }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.fd = fd; $f.fn = fn; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	writev = function(fd, iovecs) {
		var _r, _tuple, e, fd, iovecs, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; e = $f.e; fd = $f.fd; iovecs = $f.iovecs; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		e = 0;
		/* while (true) { */ case 1:
			_r = syscall.Syscall(20, ((fd >>> 0)), (($sliceToArray(iovecs))), ((iovecs.$length >>> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			r = _tuple[0];
			e = _tuple[2];
			if (!((e === 4))) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		if (!((e === 0))) {
			$s = -1; return [r, new syscall.Errno(e)];
		}
		$s = -1; return [r, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: writev }; } $f._r = _r; $f._tuple = _tuple; $f.e = e; $f.fd = fd; $f.iovecs = iovecs; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	newIovecWithBase = function(base) {
		var base;
		return new syscall.Iovec.ptr(base, new $Uint64(0, 0));
	};
	accept = function(s) {
		var _1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, err, ns, s, sa, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; ns = $f.ns; s = $f.s; sa = $f.sa; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.Accept4Func(s, 526336); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ns = _tuple[0];
		sa = _tuple[1];
		err = _tuple[2];
		_1 = err;
		if ($interfaceIsEqual(_1, $ifaceNil)) {
			$s = -1; return [ns, sa, "", $ifaceNil];
		} else if ($interfaceIsEqual(_1, new syscall.Errno((38)))) {
		} else if ($interfaceIsEqual(_1, new syscall.Errno((22)))) {
		} else if ($interfaceIsEqual(_1, new syscall.Errno((13)))) {
		} else if ($interfaceIsEqual(_1, new syscall.Errno((14)))) {
		} else {
			$s = -1; return [-1, sa, "accept4", err];
		}
		_r$1 = $pkg.AcceptFunc(s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		ns = _tuple$1[0];
		sa = _tuple$1[1];
		err = _tuple$1[2];
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 3:
			$r = syscall.CloseOnExec(ns); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "accept", err];
		}
		_r$2 = syscall.SetNonblock(ns, true); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 7:
			_r$3 = $pkg.CloseFunc(ns); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$s = -1; return [-1, $ifaceNil, "setnonblock", err];
		/* } */ case 8:
		$s = -1; return [ns, sa, "", $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: accept }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.ns = ns; $f.s = s; $f.sa = sa; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.ptr.prototype.SetsockoptInt = function(level, name, arg) {
		var $24r, $24r$1, _r, arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.SetsockoptInt(fd.Sysfd, level, name, arg); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInt }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInt = function(level, name, arg) { return this.$val.SetsockoptInt(level, name, arg); };
	FD.ptr.prototype.SetsockoptInet4Addr = function(level, name, arg) {
		var $24r, $24r$1, _r, arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.SetsockoptInet4Addr(fd.Sysfd, level, name, $clone(arg, arrayType$2)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInet4Addr }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInet4Addr = function(level, name, arg) { return this.$val.SetsockoptInet4Addr(level, name, arg); };
	FD.ptr.prototype.SetsockoptLinger = function(level, name, l) {
		var $24r, $24r$1, _r, err, fd, l, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; l = $f.l; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.SetsockoptLinger(fd.Sysfd, level, name, l); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptLinger }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.l = l; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptLinger = function(level, name, l) { return this.$val.SetsockoptLinger(level, name, l); };
	FD.ptr.prototype.SetsockoptIPMreqn = function(level, name, mreq) {
		var $24r, $24r$1, _r, err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.SetsockoptIPMreqn(fd.Sysfd, level, name, mreq); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPMreqn }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPMreqn = function(level, name, mreq) { return this.$val.SetsockoptIPMreqn(level, name, mreq); };
	FD.ptr.prototype.SetsockoptByte = function(level, name, arg) {
		var $24r, $24r$1, _r, arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.SetsockoptByte(fd.Sysfd, level, name, arg); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptByte }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptByte = function(level, name, arg) { return this.$val.SetsockoptByte(level, name, arg); };
	FD.ptr.prototype.SetsockoptIPMreq = function(level, name, mreq) {
		var $24r, $24r$1, _r, err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.SetsockoptIPMreq(fd.Sysfd, level, name, mreq); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPMreq }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPMreq = function(level, name, mreq) { return this.$val.SetsockoptIPMreq(level, name, mreq); };
	FD.ptr.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) {
		var $24r, $24r$1, _r, err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; _r = $f._r; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.SetsockoptIPv6Mreq(fd.Sysfd, level, name, mreq); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPv6Mreq }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f._r = _r; $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) { return this.$val.SetsockoptIPv6Mreq(level, name, mreq); };
	FD.ptr.prototype.Writev = function(v) {
		var $24r, $24r$1, $24r$2, _i, _i$1, _r, _r$1, _ref, _ref$1, _tuple, chunk, err, err$1, err$2, fd, i, iovecs, maxVec, n, v, wrote, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; chunk = $f.chunk; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; i = $f.i; iovecs = $f.iovecs; maxVec = $f.maxVec; n = $f.n; v = $f.v; wrote = $f.wrote; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [new $Int64(0, 0), err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [new $Int64(0, 0), err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		iovecs = sliceType$2.nil;
		if (!(fd.iovecs === ptrType$7.nil)) {
			iovecs = fd.iovecs.$get();
		}
		maxVec = 1024;
		n = new $Int64(0, 0);
		err$2 = $ifaceNil;
		/* while (true) { */ case 8:
			/* if (!(v.$get().$length > 0)) { break; } */ if(!(v.$get().$length > 0)) { $s = 9; continue; }
			iovecs = $subslice(iovecs, 0, 0);
			_ref = v.$get();
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				chunk = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (chunk.$length === 0) {
					_i++;
					continue;
				}
				iovecs = $append(iovecs, newIovecWithBase($indexPtr(chunk.$array, chunk.$offset + 0, ptrType$4)));
				if (fd.IsStream && chunk.$length > 1073741824) {
					(x = iovecs.$length - 1 >> 0, ((x < 0 || x >= iovecs.$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs.$array[iovecs.$offset + x])).SetLen(1073741824);
					break;
				}
				(x$1 = iovecs.$length - 1 >> 0, ((x$1 < 0 || x$1 >= iovecs.$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs.$array[iovecs.$offset + x$1])).SetLen(chunk.$length);
				if (iovecs.$length === maxVec) {
					break;
				}
				_i++;
			}
			if (iovecs.$length === 0) {
				/* break; */ $s = 9; continue;
			}
			if (fd.iovecs === ptrType$7.nil) {
				fd.iovecs = $newDataPointer(sliceType$2.nil, ptrType$7);
			}
			fd.iovecs.$set(iovecs);
			wrote = 0;
			_r$1 = writev(fd.Sysfd, iovecs); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			wrote = _tuple[0];
			err$2 = _tuple[1];
			if (wrote === 4294967295) {
				wrote = 0;
			}
			$r = $pkg.TestHookDidWritev(((wrote >> 0))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = (x$2 = (new $Int64(0, wrote.constructor === Number ? wrote : 1)), new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			consume(v, (new $Int64(0, wrote.constructor === Number ? wrote : 1)));
			_ref$1 = iovecs;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i = _i$1;
				syscall.Iovec.copy(((i < 0 || i >= iovecs.$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs.$array[iovecs.$offset + i]), new syscall.Iovec.ptr(ptrType$4.nil, new $Uint64(0, 0)));
				_i$1++;
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				if ($interfaceIsEqual(err$2, new syscall.Errno(11))) {
					err$2 = fd.pd.waitWrite(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
				/* break; */ $s = 9; continue;
			}
			if ((n.$high === 0 && n.$low === 0)) {
				err$2 = io.ErrUnexpectedEOF;
				/* break; */ $s = 9; continue;
			}
		/* } */ $s = 8; continue; case 9:
		$24r$2 = [n, err$2];
		$s = 12; case 12: return $24r$2;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Writev }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.chunk = chunk; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.i = i; $f.iovecs = iovecs; $f.maxVec = maxVec; $f.n = n; $f.v = v; $f.wrote = wrote; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Writev = function(v) { return this.$val.Writev(v); };
	ptrType$9.methods = [{prop: "init", name: "init", pkg: "internal/poll", typ: $funcType([ptrType$8], [$error], false)}, {prop: "close", name: "close", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "evict", name: "evict", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "prepare", name: "prepare", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "prepareRead", name: "prepareRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "prepareWrite", name: "prepareWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "wait", name: "wait", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "waitRead", name: "waitRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitWrite", name: "waitWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitCanceled", name: "waitCanceled", pkg: "internal/poll", typ: $funcType([$Int], [], false)}, {prop: "pollable", name: "pollable", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}];
	ptrType$10.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$11.methods = [{prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "increfAndClose", name: "increfAndClose", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "rwlock", name: "rwlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}, {prop: "rwunlock", name: "rwunlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}];
	ptrType$8.methods = [{prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "Fsync", name: "Fsync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readLock", name: "readLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readUnlock", name: "readUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "writeLock", name: "writeLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "writeUnlock", name: "writeUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "eofError", name: "eofError", pkg: "internal/poll", typ: $funcType([$Int, $error], [$error], false)}, {prop: "Shutdown", name: "Shutdown", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "Fchown", name: "Fchown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Ftruncate", name: "Ftruncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "RawControl", name: "RawControl", pkg: "", typ: $funcType([funcType], [$error], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([$String, $Bool], [$error], false)}, {prop: "destroy", name: "destroy", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "SetBlocking", name: "SetBlocking", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "Pread", name: "Pread", pkg: "", typ: $funcType([sliceType$3, $Int64], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([sliceType$3], [$Int, syscall.Sockaddr, $error], false)}, {prop: "ReadMsg", name: "ReadMsg", pkg: "", typ: $funcType([sliceType$3, sliceType$3], [$Int, $Int, $Int, syscall.Sockaddr, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "Pwrite", name: "Pwrite", pkg: "", typ: $funcType([sliceType$3, $Int64], [$Int, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([sliceType$3, syscall.Sockaddr], [$Int, $error], false)}, {prop: "WriteMsg", name: "WriteMsg", pkg: "", typ: $funcType([sliceType$3, sliceType$3, syscall.Sockaddr], [$Int, $Int, $error], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([], [$Int, syscall.Sockaddr, $String, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "ReadDirent", name: "ReadDirent", pkg: "", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "Fchmod", name: "Fchmod", pkg: "", typ: $funcType([$Uint32], [$error], false)}, {prop: "Fchdir", name: "Fchdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fstat", name: "Fstat", pkg: "", typ: $funcType([ptrType$12], [$error], false)}, {prop: "Dup", name: "Dup", pkg: "", typ: $funcType([], [$Int, $String, $error], false)}, {prop: "WaitWrite", name: "WaitWrite", pkg: "", typ: $funcType([], [$error], false)}, {prop: "WriteOnce", name: "WriteOnce", pkg: "", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "RawRead", name: "RawRead", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "RawWrite", name: "RawWrite", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "SetsockoptInt", name: "SetsockoptInt", pkg: "", typ: $funcType([$Int, $Int, $Int], [$error], false)}, {prop: "SetsockoptInet4Addr", name: "SetsockoptInet4Addr", pkg: "", typ: $funcType([$Int, $Int, arrayType$2], [$error], false)}, {prop: "SetsockoptLinger", name: "SetsockoptLinger", pkg: "", typ: $funcType([$Int, $Int, ptrType$13], [$error], false)}, {prop: "SetsockoptIPMreqn", name: "SetsockoptIPMreqn", pkg: "", typ: $funcType([$Int, $Int, ptrType$14], [$error], false)}, {prop: "SetsockoptByte", name: "SetsockoptByte", pkg: "", typ: $funcType([$Int, $Int, $Uint8], [$error], false)}, {prop: "SetsockoptIPMreq", name: "SetsockoptIPMreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$15], [$error], false)}, {prop: "SetsockoptIPv6Mreq", name: "SetsockoptIPv6Mreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$16], [$error], false)}, {prop: "Writev", name: "Writev", pkg: "", typ: $funcType([ptrType$17], [$Int64, $error], false)}];
	pollDesc.init("internal/poll", [{prop: "closing", name: "closing", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	DeadlineExceededError.init("", []);
	fdMutex.init("internal/poll", [{prop: "state", name: "state", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "rsema", name: "rsema", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "wsema", name: "wsema", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	FD.init("internal/poll", [{prop: "fdmu", name: "fdmu", embedded: false, exported: false, typ: fdMutex, tag: ""}, {prop: "Sysfd", name: "Sysfd", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "pd", name: "pd", embedded: false, exported: false, typ: pollDesc, tag: ""}, {prop: "iovecs", name: "iovecs", embedded: false, exported: false, typ: ptrType$7, tag: ""}, {prop: "csema", name: "csema", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "isBlocking", name: "isBlocking", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "IsStream", name: "IsStream", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "ZeroReadIsEOF", name: "ZeroReadIsEOF", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "isFile", name: "isFile", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unix.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		semWaiters = {};
		copyFileRangeSupported = -1;
		$pkg.ErrNetClosing = errors.New("use of closed network connection");
		$pkg.ErrFileClosing = errors.New("use of closed file");
		$pkg.ErrNoDeadline = errors.New("file type does not support deadline");
		$pkg.ErrDeadlineExceeded = new DeadlineExceededError.ptr();
		$pkg.ErrNotPollable = errors.New("not pollable");
		$pkg.TestHookDidWritev = (function(wrote) {
			var wrote;
		});
		tryDupCloexec = 1;
		$pkg.Accept4Func = syscall.Accept4;
		$pkg.CloseFunc = syscall.Close;
		$pkg.AcceptFunc = syscall.Accept;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/syscall/execenv"] = (function() {
	var $pkg = {}, $init, syscall;
	syscall = $packages["syscall"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = syscall.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/testlog"] = (function() {
	var $pkg = {}, $init, sync, atomic, Interface, ptrType, logger, Logger, Stat;
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	Interface = $pkg.Interface = $newType(8, $kindInterface, "testlog.Interface", true, "internal/testlog", true, null);
	ptrType = $ptrType(Interface);
	Logger = function() {
		var impl;
		impl = logger.Load();
		if ($interfaceIsEqual(impl, $ifaceNil)) {
			return $ifaceNil;
		}
		return $assertType(impl, ptrType).$get();
	};
	$pkg.Logger = Logger;
	Stat = function(name) {
		var log, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; log = $f.log; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		log = Logger();
		/* */ if (!($interfaceIsEqual(log, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(log, $ifaceNil))) { */ case 1:
			$r = log.Stat(name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stat }; } $f.log = log; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stat = Stat;
	Interface.init([{prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Getenv", name: "Getenv", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Open", name: "Open", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([$String], [], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		logger = new atomic.Value.ptr($ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path"] = (function() {
	var $pkg = {}, $init, errors, bytealg, utf8;
	errors = $packages["errors"];
	bytealg = $packages["internal/bytealg"];
	utf8 = $packages["unicode/utf8"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io/fs"] = (function() {
	var $pkg = {}, $init, errors, oserror, io, path, sort, time, utf8, DirEntry, FileInfo, FileMode, PathError, arrayType, sliceType, interfaceType, ptrType, errInvalid, errPermission, errExist, errNotExist, errClosed;
	errors = $packages["errors"];
	oserror = $packages["internal/oserror"];
	io = $packages["io"];
	path = $packages["path"];
	sort = $packages["sort"];
	time = $packages["time"];
	utf8 = $packages["unicode/utf8"];
	DirEntry = $pkg.DirEntry = $newType(8, $kindInterface, "fs.DirEntry", true, "io/fs", true, null);
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "fs.FileInfo", true, "io/fs", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "fs.FileMode", true, "io/fs", true, null);
	PathError = $pkg.PathError = $newType(0, $kindStruct, "fs.PathError", true, "io/fs", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	arrayType = $arrayType($Uint8, 32);
	sliceType = $sliceType($Uint8);
	interfaceType = $interfaceType([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	ptrType = $ptrType(PathError);
	errInvalid = function() {
		return oserror.ErrInvalid;
	};
	errPermission = function() {
		return oserror.ErrPermission;
	};
	errExist = function() {
		return oserror.ErrExist;
	};
	errNotExist = function() {
		return oserror.ErrNotExist;
	};
	errClosed = function() {
		return oserror.ErrClosed;
	};
	FileMode.prototype.String = function() {
		var _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType.zero();
		w = 0;
		_ref = "dalTLDpSugct?";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = (((31 - i >> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c << 24 >>> 24)));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = (((8 - i$1 >> 0) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c$1 << 24 >>> 24)));
			} else {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return ($bytesToString($subslice(new sliceType(buf), 0, w)));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val;
		return ((m & 2401763328) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	FileMode.prototype.Type = function() {
		var m;
		m = this.$val;
		return (m & 2401763328) >>> 0;
	};
	$ptrType(FileMode).prototype.Type = function() { return new FileMode(this.$get()).Type(); };
	PathError.ptr.prototype.Error = function() {
		var $24r, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = e.Op + " " + e.Path + ": " + _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f.$24r = $24r; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	PathError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	PathError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	PathError.ptr.prototype.Timeout = function() {
		var $24r, _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, interfaceType, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$24r = _v;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Timeout }; } $f.$24r = $24r; $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Timeout = function() { return this.$val.Timeout(); };
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	DirEntry.init([{prop: "Info", name: "Info", pkg: "", typ: $funcType([], [FileInfo, $error], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [FileMode], false)}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	PathError.init("", [{prop: "Op", name: "Op", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = oserror.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = path.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalid = errInvalid();
		$pkg.ErrPermission = errPermission();
		$pkg.ErrExist = errExist();
		$pkg.ErrNotExist = errNotExist();
		$pkg.ErrClosed = errClosed();
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, oserror, poll, execenv, unix, testlog, io, fs, runtime, sort, sync, atomic, syscall, time, readdirMode, dirInfo, timeout, SyscallError, LinkError, onlyWriter, file, unixDirent, rawConn, File, fileStat, sliceType, ptrType, ptrType$1, sliceType$1, sliceType$2, ptrType$2, sliceType$3, ptrType$3, ptrType$4, sliceType$6, ptrType$12, arrayType$1, ptrType$13, funcType$1, ptrType$14, ptrType$16, ptrType$17, ptrType$19, funcType$2, funcType$3, ptrType$20, testingForceReadDirLstat, errWriteAtInAppendMode, lstat, pollCopyFileRange, errPatternHasSeparator, _r, _r$1, _r$2, runtime_args, init, readInt, readIntBE, readIntLE, direntIno, direntReclen, direntNamlen, direntType, errNoDeadline, errDeadlineExceeded, NewSyscallError, IsNotExist, underlyingErrorIs, underlyingError, genericReadFrom, sigpipe, syscallMode, ignoringEINTR, NewFile, newFile, epipecheck, newUnixDirent, basename, init$1, newRawConn, Lstat, fillFileStatFromSys, timespecToTime, lstatNolog;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	oserror = $packages["internal/oserror"];
	poll = $packages["internal/poll"];
	execenv = $packages["internal/syscall/execenv"];
	unix = $packages["internal/syscall/unix"];
	testlog = $packages["internal/testlog"];
	io = $packages["io"];
	fs = $packages["io/fs"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	readdirMode = $pkg.readdirMode = $newType(4, $kindInt, "os.readdirMode", true, "os", false, null);
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$3.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	timeout = $pkg.timeout = $newType(8, $kindInterface, "os.timeout", true, "os", false, null);
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	onlyWriter = $pkg.onlyWriter = $newType(0, $kindStruct, "os.onlyWriter", true, "os", false, function(Writer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Writer = $ifaceNil;
			return;
		}
		this.Writer = Writer_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(pfd_, name_, dirinfo_, nonblock_, stdoutOrErr_, appendMode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pfd = new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), 0, new poll.pollDesc.ptr(false), ptrType$12.nil, 0, 0, false, false, false);
			this.name = "";
			this.dirinfo = ptrType$2.nil;
			this.nonblock = false;
			this.stdoutOrErr = false;
			this.appendMode = false;
			return;
		}
		this.pfd = pfd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.nonblock = nonblock_;
		this.stdoutOrErr = stdoutOrErr_;
		this.appendMode = appendMode_;
	});
	unixDirent = $pkg.unixDirent = $newType(0, $kindStruct, "os.unixDirent", true, "os", false, function(parent_, name_, typ_, info_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parent = "";
			this.name = "";
			this.typ = 0;
			this.info = $ifaceNil;
			return;
		}
		this.parent = parent_;
		this.name = name_;
		this.typ = typ_;
		this.info = info_;
	});
	rawConn = $pkg.rawConn = $newType(0, $kindStruct, "os.rawConn", true, "os", false, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$1.nil;
			return;
		}
		this.file = file_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$13.nil;
			return;
		}
		this.file = file_;
	});
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$16.nil);
			this.sys = new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero());
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(fs.PathError);
	ptrType$1 = $ptrType(File);
	sliceType$1 = $sliceType(fs.FileInfo);
	sliceType$2 = $sliceType(fs.DirEntry);
	ptrType$2 = $ptrType(dirInfo);
	sliceType$3 = $sliceType($Uint8);
	ptrType$3 = $ptrType(LinkError);
	ptrType$4 = $ptrType(SyscallError);
	sliceType$6 = $sliceType(syscall.Iovec);
	ptrType$12 = $ptrType(sliceType$6);
	arrayType$1 = $arrayType($Int64, 3);
	ptrType$13 = $ptrType(file);
	funcType$1 = $funcType([ptrType$13], [$error], false);
	ptrType$14 = $ptrType(io.LimitedReader);
	ptrType$16 = $ptrType(time.Location);
	ptrType$17 = $ptrType(fileStat);
	ptrType$19 = $ptrType(unixDirent);
	funcType$2 = $funcType([$Uintptr], [], false);
	funcType$3 = $funcType([$Uintptr], [$Bool], false);
	ptrType$20 = $ptrType(rawConn);
	runtime_args = function() {
		return $pkg.Args;
	};
	init = function() {
		var argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	File.ptr.prototype.Readdir = function(n) {
		var _r$3, _tuple, err, f, infos, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; err = $f.err; f = $f.f; infos = $f.infos; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$1.nil) {
			$s = -1; return [sliceType$1.nil, $pkg.ErrInvalid];
		}
		_r$3 = f.readdir(n, 2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		infos = _tuple[2];
		err = _tuple[3];
		if (infos === sliceType$1.nil) {
			infos = new sliceType$1([]);
		}
		$s = -1; return [infos, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.infos = infos; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, f, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			$s = -1; return [names, err];
		}
		_r$3 = f.readdir(n, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		names = _tuple[0];
		err = _tuple[3];
		if (names === sliceType.nil) {
			names = new sliceType([]);
		}
		_tmp$2 = names;
		_tmp$3 = err;
		names = _tmp$2;
		err = _tmp$3;
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdirnames }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	File.ptr.prototype.ReadDir = function(n) {
		var _r$3, _tuple, dirents, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; dirents = $f.dirents; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$1.nil) {
			$s = -1; return [sliceType$2.nil, $pkg.ErrInvalid];
		}
		_r$3 = f.readdir(n, 1); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		dirents = _tuple[1];
		err = _tuple[3];
		if (dirents === sliceType$2.nil) {
			dirents = new sliceType$2([]);
		}
		$s = -1; return [dirents, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.ReadDir }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.dirents = dirents; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.ReadDir = function(n) { return this.$val.ReadDir(n); };
	dirInfo.ptr.prototype.close = function() {
		var d;
		d = this;
	};
	dirInfo.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.readdir = function(n, mode) {
		var _i, _r$3, _r$4, _r$5, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, buf, c, d, de, dirents, err, err$1, err$2, errno, f, i, info, infos, ino, mode, n, name, names, namlen, ok, rec, reclen, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; buf = $f.buf; c = $f.c; d = $f.d; de = $f.de; dirents = $f.dirents; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; errno = $f.errno; f = $f.f; i = $f.i; info = $f.info; infos = $f.infos; ino = $f.ino; mode = $f.mode; n = $f.n; name = $f.name; names = $f.names; namlen = $f.namlen; ok = $f.ok; rec = $f.rec; reclen = $f.reclen; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		dirents = sliceType$2.nil;
		infos = sliceType$1.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType$2.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$3.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$3, 8192);
		}
		d = f.file.dirinfo;
		if (n === 0) {
			n = -1;
		}
		/* while (true) { */ case 1:
			/* if (!(!((n === 0)))) { break; } */ if(!(!((n === 0)))) { $s = 2; continue; }
			/* */ if (d.bufp >= d.nbuf) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.bufp >= d.nbuf) { */ case 3:
				d.bufp = 0;
				errno = $ifaceNil;
				_r$3 = f.file.pfd.ReadDirent(d.buf); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple = _r$3;
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				runtime.KeepAlive(f);
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = dirents;
					_tmp$2 = infos;
					_tmp$3 = new fs.PathError.ptr("readdirent", f.file.name, errno);
					names = _tmp;
					dirents = _tmp$1;
					infos = _tmp$2;
					err = _tmp$3;
					$s = -1; return [names, dirents, infos, err];
				}
				if (d.nbuf <= 0) {
					/* break; */ $s = 2; continue;
				}
			/* } */ case 4:
			buf = $subslice(d.buf, d.bufp, d.nbuf);
			_tuple$1 = direntReclen(buf);
			reclen = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok || (x = (new $Uint64(0, buf.$length)), (reclen.$high > x.$high || (reclen.$high === x.$high && reclen.$low > x.$low)))) {
				/* break; */ $s = 2; continue;
			}
			rec = $subslice(buf, 0, $flatten64(reclen));
			d.bufp = d.bufp + (((reclen.$low >> 0))) >> 0;
			_tuple$2 = direntIno(rec);
			ino = _tuple$2[0];
			ok = _tuple$2[1];
			if (!ok) {
				/* break; */ $s = 2; continue;
			}
			if ((ino.$high === 0 && ino.$low === 0)) {
				/* continue; */ $s = 1; continue;
			}
			_tuple$3 = direntNamlen(rec);
			namlen = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok || (x$1 = new $Uint64(0 + namlen.$high, 19 + namlen.$low), x$2 = (new $Uint64(0, rec.$length)), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
				/* break; */ $s = 2; continue;
			}
			name = $subslice(rec, 19, $flatten64(new $Uint64(0 + namlen.$high, 19 + namlen.$low)));
			_ref = name;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (c === 0) {
					name = $subslice(name, 0, i);
					break;
				}
				_i++;
			}
			if (($bytesToString(name)) === "." || ($bytesToString(name)) === "..") {
				/* continue; */ $s = 1; continue;
			}
			if (n > 0) {
				n = n - (1) >> 0;
			}
			/* */ if (mode === 0) { $s = 6; continue; }
			/* */ if (mode === 1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (mode === 0) { */ case 6:
				names = $append(names, ($bytesToString(name)));
				$s = 9; continue;
			/* } else if (mode === 1) { */ case 7:
				_r$4 = newUnixDirent(f.file.name, ($bytesToString(name)), direntType(rec)); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$4 = _r$4;
				de = _tuple$4[0];
				err$1 = _tuple$4[1];
				if (IsNotExist(err$1)) {
					/* continue; */ $s = 1; continue;
				}
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$4 = sliceType.nil;
					_tmp$5 = dirents;
					_tmp$6 = sliceType$1.nil;
					_tmp$7 = err$1;
					names = _tmp$4;
					dirents = _tmp$5;
					infos = _tmp$6;
					err = _tmp$7;
					$s = -1; return [names, dirents, infos, err];
				}
				dirents = $append(dirents, de);
				$s = 9; continue;
			/* } else { */ case 8:
				_r$5 = lstat(f.file.name + "/" + ($bytesToString(name))); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$5 = _r$5;
				info = _tuple$5[0];
				err$2 = _tuple$5[1];
				if (IsNotExist(err$2)) {
					/* continue; */ $s = 1; continue;
				}
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					_tmp$8 = sliceType.nil;
					_tmp$9 = sliceType$2.nil;
					_tmp$10 = infos;
					_tmp$11 = err$2;
					names = _tmp$8;
					dirents = _tmp$9;
					infos = _tmp$10;
					err = _tmp$11;
					$s = -1; return [names, dirents, infos, err];
				}
				infos = $append(infos, info);
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		if (n > 0 && (((names.$length + dirents.$length >> 0) + infos.$length >> 0) === 0)) {
			_tmp$12 = sliceType.nil;
			_tmp$13 = sliceType$2.nil;
			_tmp$14 = sliceType$1.nil;
			_tmp$15 = io.EOF;
			names = _tmp$12;
			dirents = _tmp$13;
			infos = _tmp$14;
			err = _tmp$15;
			$s = -1; return [names, dirents, infos, err];
		}
		_tmp$16 = names;
		_tmp$17 = dirents;
		_tmp$18 = infos;
		_tmp$19 = $ifaceNil;
		names = _tmp$16;
		dirents = _tmp$17;
		infos = _tmp$18;
		err = _tmp$19;
		$s = -1; return [names, dirents, infos, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.buf = buf; $f.c = c; $f.d = d; $f.de = de; $f.dirents = dirents; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.errno = errno; $f.f = f; $f.i = i; $f.info = info; $f.infos = infos; $f.ino = ino; $f.mode = mode; $f.n = n; $f.name = name; $f.names = names; $f.namlen = namlen; $f.ok = ok; $f.rec = rec; $f.reclen = reclen; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n, mode) { return this.$val.readdir(n, mode); };
	readInt = function(b, off, size) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, off, ok, size, u;
		u = new $Uint64(0, 0);
		ok = false;
		if (b.$length < (((off + size >>> 0) >> 0))) {
			_tmp = new $Uint64(0, 0);
			_tmp$1 = false;
			u = _tmp;
			ok = _tmp$1;
			return [u, ok];
		}
		if (false) {
			_tmp$2 = readIntBE($subslice(b, off), size);
			_tmp$3 = true;
			u = _tmp$2;
			ok = _tmp$3;
			return [u, ok];
		}
		_tmp$4 = readIntLE($subslice(b, off), size);
		_tmp$5 = true;
		u = _tmp$4;
		ok = _tmp$5;
		return [u, ok];
	};
	readIntBE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), x$1 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), x$5 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$15 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	readIntLE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$1 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$5 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$15 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	direntIno = function(buf) {
		var buf;
		return readInt(buf, 0, 8);
	};
	direntReclen = function(buf) {
		var buf;
		return readInt(buf, 16, 2);
	};
	direntNamlen = function(buf) {
		var _tuple, buf, ok, reclen;
		_tuple = direntReclen(buf);
		reclen = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return [new $Uint64(0, 0), false];
		}
		return [new $Uint64(reclen.$high - 0, reclen.$low - 19), true];
	};
	direntType = function(buf) {
		var _1, buf, off, typ;
		off = 18;
		if (off >= ((buf.$length >>> 0))) {
			return 4294967295;
		}
		typ = ((off < 0 || off >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + off]);
		_1 = typ;
		if (_1 === (6)) {
			return 67108864;
		} else if (_1 === (2)) {
			return 69206016;
		} else if (_1 === (4)) {
			return 2147483648;
		} else if (_1 === (1)) {
			return 33554432;
		} else if (_1 === (10)) {
			return 134217728;
		} else if (_1 === (8)) {
			return 0;
		} else if (_1 === (12)) {
			return 16777216;
		}
		return 4294967295;
	};
	errNoDeadline = function() {
		return poll.ErrNoDeadline;
	};
	errDeadlineExceeded = function() {
		return poll.ErrDeadlineExceeded;
	};
	SyscallError.ptr.prototype.Error = function() {
		var $24r, _r$3, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$3 = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = e.Syscall + ": " + _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f.$24r = $24r; $f._r$3 = _r$3; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	SyscallError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	SyscallError.ptr.prototype.Timeout = function() {
		var $24r, _r$3, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, timeout, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r$3 = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3; case 1:
		$24r = _v;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Timeout }; } $f.$24r = $24r; $f._r$3 = _r$3; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Timeout = function() { return this.$val.Timeout(); };
	NewSyscallError = function(syscall$1, err) {
		var err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var err;
		return underlyingErrorIs(err, $pkg.ErrNotExist);
	};
	$pkg.IsNotExist = IsNotExist;
	underlyingErrorIs = function(err, target) {
		var _tuple, e, err, ok, target;
		err = underlyingError(err);
		if ($interfaceIsEqual(err, target)) {
			return true;
		}
		_tuple = $assertType(err, syscall.Errno, true);
		e = _tuple[0];
		ok = _tuple[1];
		return ok && new syscall.Errno(e).Is(target);
	};
	underlyingError = function(err) {
		var _ref, err, err$1, err$2, err$3;
		_ref = err;
		if ($assertType(_ref, ptrType, true)[1]) {
			err$1 = _ref.$val;
			return err$1.Err;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			err$2 = _ref.$val;
			return err$2.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			err$3 = _ref.$val;
			return err$3.Err;
		}
		return err;
	};
	File.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var $24r, _r$3, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$3 = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = e.Op + " " + e.Old + " " + e.New + ": " + _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f.$24r = $24r; $f._r$3 = _r$3; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	LinkError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	LinkError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	File.ptr.prototype.Read = function(b) {
		var _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r$3 = f.read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		e = _tuple[1];
		_tmp$2 = n;
		_tmp$3 = f.wrapErr("read", e);
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Read }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new fs.PathError.ptr("readat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r$3 = f.pread(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("read", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.ReadAt }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.ReadFrom = function(r) {
		var $24r, _r$3, _r$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, e, err, err$1, f, handled, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; handled = $f.handled; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r$3 = f.readFrom(r); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		handled = _tuple[1];
		e = _tuple[2];
		/* */ if (!handled) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!handled) { */ case 2:
			_r$4 = genericReadFrom(f, r); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$24r = [n, err];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_tmp$2 = n;
		_tmp$3 = f.wrapErr("write", e);
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.ReadFrom }; } $f.$24r = $24r; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.handled = handled; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	genericReadFrom = function(f, r) {
		var $24r, _r$3, f, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; f = $f.f; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = io.Copy((x = new onlyWriter.ptr(f), new x.constructor.elem(x)), r); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: genericReadFrom }; } $f.$24r = $24r; $f._r$3 = _r$3; $f.f = f; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.ptr.prototype.Write = function(b) {
		var _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r$3 = f.write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = f.wrapErr("write", e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Write }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if (f.file.appendMode) {
			_tmp$2 = 0;
			_tmp$3 = errWriteAtInAppendMode;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$4 = 0;
			_tmp$5 = new fs.PathError.ptr("writeat", f.file.name, errors.New("negative offset"));
			n = _tmp$4;
			err = _tmp$5;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r$3 = f.pwrite(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("write", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteAt }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; offset = $f.offset; r = $f.r; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("seek");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			ret = _tmp;
			err = _tmp$1;
			$s = -1; return [ret, err];
		}
		_r$3 = f.seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$2.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = f.wrapErr("seek", e);
			ret = _tmp$2;
			err = _tmp$3;
			$s = -1; return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Seek }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.offset = offset; $f.r = r; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var $24r, _r$3, _tuple, err, f, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.Write((new sliceType$3($stringToBytes(s)))); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		$24r = [n, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteString }; } $f.$24r = $24r; $f._r$3 = _r$3; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.wrapErr = function(op, err) {
		var err, f, op;
		f = this;
		if ($interfaceIsEqual(err, $ifaceNil) || $interfaceIsEqual(err, io.EOF)) {
			return err;
		}
		if ($interfaceIsEqual(err, poll.ErrFileClosing)) {
			err = $pkg.ErrClosed;
		}
		return new fs.PathError.ptr(op, f.file.name, err);
	};
	File.prototype.wrapErr = function(op, err) { return this.$val.wrapErr(op, err); };
	File.ptr.prototype.Chmod = function(mode) {
		var $24r, _r$3, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r$3 = f.chmod(mode); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chmod }; } $f.$24r = $24r; $f._r$3 = _r$3; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.SetDeadline = function(t) {
		var f, t;
		f = this;
		return f.setDeadline($clone(t, time.Time));
	};
	File.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	File.ptr.prototype.SetReadDeadline = function(t) {
		var f, t;
		f = this;
		return f.setReadDeadline($clone(t, time.Time));
	};
	File.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	File.ptr.prototype.SetWriteDeadline = function(t) {
		var f, t;
		f = this;
		return f.setWriteDeadline($clone(t, time.Time));
	};
	File.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	File.ptr.prototype.SyscallConn = function() {
		var _returncast, err, f;
		f = this;
		err = f.checkValid("SyscallConn");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, err];
		}
		_returncast = newRawConn(f);
		return [_returncast[0], _returncast[1]];
	};
	File.prototype.SyscallConn = function() { return this.$val.SyscallConn(); };
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	File.ptr.prototype.Close = function() {
		var $24r, _r$3, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$1.nil) {
			$s = -1; return $pkg.ErrInvalid;
		}
		_r$3 = f.file.close(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Close }; } $f.$24r = $24r; $f._r$3 = _r$3; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	File.ptr.prototype.read = function(b) {
		var _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.read }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Pread(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pread }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.write }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Pwrite(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pwrite }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	syscallMode = function(i) {
		var i, o;
		o = 0;
		o = (o | (((new fs.FileMode(i).Perm() >>> 0)))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.chmod = function(mode) {
		var _r$3, e, err, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; e = $f.e; err = $f.err; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chmod");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fchmod(syscallMode(mode)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chmod", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.chmod }; } $f._r$3 = _r$3; $f.e = e; $f.err = err; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.chmod = function(mode) { return this.$val.chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var _r$3, e, err, f, gid, uid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; e = $f.e; err = $f.err; f = $f.f; gid = $f.gid; uid = $f.uid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chown");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fchown(uid, gid); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chown", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chown }; } $f._r$3 = _r$3; $f.e = e; $f.err = err; $f.f = f; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var _r$3, e, err, f, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; e = $f.e; err = $f.err; f = $f.f; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("truncate");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Ftruncate(size); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("truncate", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Truncate }; } $f._r$3 = _r$3; $f.e = e; $f.err = err; $f.f = f; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var _r$3, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("sync");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fsync(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("sync", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Sync }; } $f._r$3 = _r$3; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Chdir = function() {
		var _r$3, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chdir");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fchdir(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chdir", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chdir }; } $f._r$3 = _r$3; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	File.ptr.prototype.setDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetDeadline($clone(t, time.Time));
	};
	File.prototype.setDeadline = function(t) { return this.$val.setDeadline(t); };
	File.ptr.prototype.setReadDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetReadDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetReadDeadline($clone(t, time.Time));
	};
	File.prototype.setReadDeadline = function(t) { return this.$val.setReadDeadline(t); };
	File.ptr.prototype.setWriteDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetWriteDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetWriteDeadline($clone(t, time.Time));
	};
	File.prototype.setWriteDeadline = function(t) { return this.$val.setWriteDeadline(t); };
	File.ptr.prototype.checkValid = function(op) {
		var f, op;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		return $ifaceNil;
	};
	File.prototype.checkValid = function(op) { return this.$val.checkValid(op); };
	ignoringEINTR = function(fn) {
		var _r$3, err, fn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; err = $f.err; fn = $f.fn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_r$3 = fn(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err = _r$3;
			if (!($interfaceIsEqual(err, new syscall.Errno(4)))) {
				$s = -1; return err;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ignoringEINTR }; } $f._r$3 = _r$3; $f.err = err; $f.fn = fn; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.ptr.prototype.Fd = function() {
		var _r$3, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$1.nil) {
			$s = -1; return 4294967295;
		}
		/* */ if (f.file.nonblock) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.file.nonblock) { */ case 1:
			_r$3 = f.file.pfd.SetBlocking(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 2:
		$s = -1; return ((f.file.pfd.Sysfd >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Fd }; } $f._r$3 = _r$3; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var $24r, _r$3, _tuple, err, fd, kind, name, nb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; _tuple = $f._tuple; err = $f.err; fd = $f.fd; kind = $f.kind; name = $f.name; nb = $f.nb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		kind = 0;
		_tuple = unix.IsNonblock(((fd >> 0)));
		nb = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil) && nb) {
			kind = 3;
		}
		_r$3 = newFile(fd, name, kind); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewFile }; } $f.$24r = $24r; $f._r$3 = _r$3; $f._tuple = _tuple; $f.err = err; $f.fd = fd; $f.kind = kind; $f.name = name; $f.nb = nb; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewFile = NewFile;
	newFile = function(fd, name, kind) {
		var _1, _r$3, _r$4, err, err$1, err$2, f, fd, fdi, kind, name, pollable, st, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; fdi = $f.fdi; kind = $f.kind; name = $f.name; pollable = $f.pollable; st = $f.st; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fdi = [fdi];
		st = [st];
		fdi[0] = ((fd >> 0));
		if (fdi[0] < 0) {
			$s = -1; return ptrType$1.nil;
		}
		f = new File.ptr(new file.ptr(new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), fdi[0], new poll.pollDesc.ptr(false), ptrType$12.nil, 0, 0, true, true, false), name, ptrType$2.nil, false, (fdi[0] === 1) || (fdi[0] === 2), false));
		pollable = (kind === 1) || (kind === 2) || (kind === 3);
		/* */ if (kind === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (kind === 1) { */ case 1:
				_1 = "linux";
				/* */ if (_1 === ("darwin") || _1 === ("ios") || _1 === ("dragonfly") || _1 === ("freebsd") || _1 === ("netbsd") || _1 === ("openbsd")) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (_1 === ("darwin") || _1 === ("ios") || _1 === ("dragonfly") || _1 === ("freebsd") || _1 === ("netbsd") || _1 === ("openbsd")) { */ case 4:
					st[0] = new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero());
					_r$3 = ignoringEINTR((function(fdi, st) { return function $b() {
						var $24r, _r$3, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						_r$3 = syscall.Fstat(fdi[0], st[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						$24r = _r$3;
						$s = 2; case 2: return $24r;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$24r = $24r; $f._r$3 = _r$3; $f.$s = $s; $f.$r = $r; return $f;
					}; })(fdi, st)); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					err = _r$3;
					typ = (st[0].Mode & 61440) >>> 0;
					if ($interfaceIsEqual(err, $ifaceNil) && ((typ === 32768) || (typ === 16384))) {
						pollable = false;
					}
					if (false && (typ === 4096)) {
						pollable = false;
					}
				/* } */ case 5:
			case 3:
		/* } */ case 2:
		err$1 = f.file.pfd.Init("file", pollable);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 7; continue; }
		/* */ if (pollable) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 7:
			$s = 9; continue;
		/* } else if (pollable) { */ case 8:
			_r$4 = syscall.SetNonblock(fdi[0], true); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err$2 = _r$4;
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				f.file.nonblock = true;
			}
		/* } */ case 9:
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$13, "close")));
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newFile }; } $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.fdi = fdi; $f.kind = kind; $f.name = name; $f.pollable = pollable; $f.st = st; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	epipecheck = function(file$1, e) {
		var e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32)) && file$1.file.stdoutOrErr) {
			sigpipe();
		}
	};
	file.ptr.prototype.close = function() {
		var _r$3, e, err, file$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; e = $f.e; err = $f.err; file$1 = $f.file$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		file$1 = this;
		if (file$1 === ptrType$13.nil) {
			$s = -1; return new syscall.Errno(22);
		}
		if (!(file$1.dirinfo === ptrType$2.nil)) {
			file$1.dirinfo.close();
		}
		err = $ifaceNil;
		_r$3 = file$1.pfd.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, poll.ErrFileClosing)) {
				e = $pkg.ErrClosed;
			}
			err = new fs.PathError.ptr("close", file$1.name, e);
		}
		runtime.SetFinalizer(file$1, $ifaceNil);
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: file.ptr.prototype.close }; } $f._r$3 = _r$3; $f.e = e; $f.err = err; $f.file$1 = file$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.seek = function(offset, whence) {
		var _r$3, _tmp, _tmp$1, _tuple, err, f, offset, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; offset = $f.offset; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		if (!(f.file.dirinfo === ptrType$2.nil)) {
			f.file.dirinfo.close();
			f.file.dirinfo = ptrType$2.nil;
		}
		_r$3 = f.file.pfd.Seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ret = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = ret;
		_tmp$1 = err;
		ret = _tmp;
		err = _tmp$1;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.seek }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.offset = offset; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	unixDirent.ptr.prototype.Name = function() {
		var d;
		d = this;
		return d.name;
	};
	unixDirent.prototype.Name = function() { return this.$val.Name(); };
	unixDirent.ptr.prototype.IsDir = function() {
		var d;
		d = this;
		return new fs.FileMode(d.typ).IsDir();
	};
	unixDirent.prototype.IsDir = function() { return this.$val.IsDir(); };
	unixDirent.ptr.prototype.Type = function() {
		var d;
		d = this;
		return d.typ;
	};
	unixDirent.prototype.Type = function() { return this.$val.Type(); };
	unixDirent.ptr.prototype.Info = function() {
		var $24r, _r$3, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!($interfaceIsEqual(d.info, $ifaceNil))) {
			$s = -1; return [d.info, $ifaceNil];
		}
		_r$3 = lstat(d.parent + "/" + d.name); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: unixDirent.ptr.prototype.Info }; } $f.$24r = $24r; $f._r$3 = _r$3; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	unixDirent.prototype.Info = function() { return this.$val.Info(); };
	newUnixDirent = function(parent, name, typ) {
		var _r$3, _r$4, _r$5, _tuple, err, info, name, parent, typ, ude, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; err = $f.err; info = $f.info; name = $f.name; parent = $f.parent; typ = $f.typ; ude = $f.ude; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ude = new unixDirent.ptr(parent, name, typ, $ifaceNil);
		if (!((typ === 4294967295)) && !testingForceReadDirLstat) {
			$s = -1; return [ude, $ifaceNil];
		}
		_r$3 = lstat(parent + "/" + name); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		info = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		_r$4 = info.Mode(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = new fs.FileMode(_r$4).Type(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		ude.typ = _r$5;
		ude.info = info;
		$s = -1; return [ude, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: newUnixDirent }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.err = err; $f.info = info; $f.name = name; $f.parent = parent; $f.typ = typ; $f.ude = ude; $f.$s = $s; $f.$r = $r; return $f;
	};
	basename = function(name) {
		var i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$1 = function() {
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	rawConn.ptr.prototype.Control = function(f) {
		var _r$3, c, err, err$1, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; c = $f.c; err = $f.err; err$1 = $f.err$1; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		err = c.file.checkValid("SyscallConn.Control");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = c.file.file.pfd.RawControl(f); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err$1 = _r$3;
		runtime.KeepAlive(c.file);
		$s = -1; return err$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rawConn.ptr.prototype.Control }; } $f._r$3 = _r$3; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	rawConn.prototype.Control = function(f) { return this.$val.Control(f); };
	rawConn.ptr.prototype.Read = function(f) {
		var _r$3, c, err, err$1, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; c = $f.c; err = $f.err; err$1 = $f.err$1; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		err = c.file.checkValid("SyscallConn.Read");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = c.file.file.pfd.RawRead(f); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err$1 = _r$3;
		runtime.KeepAlive(c.file);
		$s = -1; return err$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rawConn.ptr.prototype.Read }; } $f._r$3 = _r$3; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	rawConn.prototype.Read = function(f) { return this.$val.Read(f); };
	rawConn.ptr.prototype.Write = function(f) {
		var _r$3, c, err, err$1, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; c = $f.c; err = $f.err; err$1 = $f.err$1; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		err = c.file.checkValid("SyscallConn.Write");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = c.file.file.pfd.RawWrite(f); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err$1 = _r$3;
		runtime.KeepAlive(c.file);
		$s = -1; return err$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rawConn.ptr.prototype.Write }; } $f._r$3 = _r$3; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	rawConn.prototype.Write = function(f) { return this.$val.Write(f); };
	newRawConn = function(file$1) {
		var file$1;
		return [new rawConn.ptr(file$1), $ifaceNil];
	};
	File.ptr.prototype.readFrom = function(r) {
		var _r$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, err, f, handled, lr, ok, r, remain, src, written, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; f = $f.f; handled = $f.handled; lr = $f.lr; ok = $f.ok; r = $f.r; remain = $f.remain; src = $f.src; written = $f.written; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		handled = false;
		err = $ifaceNil;
		f = this;
		if (f.file.appendMode) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = false;
			_tmp$2 = $ifaceNil;
			written = _tmp;
			handled = _tmp$1;
			err = _tmp$2;
			$s = -1; return [written, handled, err];
		}
		remain = new $Int64(1073741824, 0);
		_tuple = $assertType(r, ptrType$14, true);
		lr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp$3 = lr.N;
			_tmp$4 = lr.R;
			remain = _tmp$3;
			r = _tmp$4;
			if ((remain.$high < 0 || (remain.$high === 0 && remain.$low <= 0))) {
				_tmp$5 = new $Int64(0, 0);
				_tmp$6 = true;
				_tmp$7 = $ifaceNil;
				written = _tmp$5;
				handled = _tmp$6;
				err = _tmp$7;
				$s = -1; return [written, handled, err];
			}
		}
		_tuple$1 = $assertType(r, ptrType$1, true);
		src = _tuple$1[0];
		ok = _tuple$1[1];
		if (!ok) {
			_tmp$8 = new $Int64(0, 0);
			_tmp$9 = false;
			_tmp$10 = $ifaceNil;
			written = _tmp$8;
			handled = _tmp$9;
			err = _tmp$10;
			$s = -1; return [written, handled, err];
		}
		if (!($interfaceIsEqual(src.checkValid("ReadFrom"), $ifaceNil))) {
			_tmp$11 = new $Int64(0, 0);
			_tmp$12 = false;
			_tmp$13 = $ifaceNil;
			written = _tmp$11;
			handled = _tmp$12;
			err = _tmp$13;
			$s = -1; return [written, handled, err];
		}
		_r$3 = pollCopyFileRange(f.file.pfd, src.file.pfd, remain); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$2 = _r$3;
		written = _tuple$2[0];
		handled = _tuple$2[1];
		err = _tuple$2[2];
		if (!(lr === ptrType$14.nil)) {
			lr.N = (x = lr.N, x$1 = written, new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
		}
		_tmp$14 = written;
		_tmp$15 = handled;
		_tmp$16 = NewSyscallError("copy_file_range", err);
		written = _tmp$14;
		handled = _tmp$15;
		err = _tmp$16;
		$s = -1; return [written, handled, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readFrom }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.f = f; $f.handled = handled; $f.lr = lr; $f.ok = ok; $f.r = r; $f.remain = remain; $f.src = src; $f.written = written; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readFrom = function(r) { return this.$val.readFrom(r); };
	Lstat = function(name) {
		var $24r, _r$3, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = testlog.Stat(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = lstatNolog(name); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Lstat }; } $f.$24r = $24r; $f._r$3 = _r$3; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Lstat = Lstat;
	fillFileStatFromSys = function(fs$1, name) {
		var _1, fs$1, name;
		fs$1.name = basename(name);
		fs$1.size = fs$1.sys.Size;
		time.Time.copy(fs$1.modTime, timespecToTime($clone(fs$1.sys.Mtim, syscall.Timespec)));
		fs$1.mode = ((((fs$1.sys.Mode & 511) >>> 0) >>> 0));
		_1 = (fs$1.sys.Mode & 61440) >>> 0;
		if (_1 === (24576)) {
			fs$1.mode = (fs$1.mode | (67108864)) >>> 0;
		} else if (_1 === (8192)) {
			fs$1.mode = (fs$1.mode | (69206016)) >>> 0;
		} else if (_1 === (16384)) {
			fs$1.mode = (fs$1.mode | (2147483648)) >>> 0;
		} else if (_1 === (4096)) {
			fs$1.mode = (fs$1.mode | (33554432)) >>> 0;
		} else if (_1 === (40960)) {
			fs$1.mode = (fs$1.mode | (134217728)) >>> 0;
		} else if (_1 === (32768)) {
		} else if (_1 === (49152)) {
			fs$1.mode = (fs$1.mode | (16777216)) >>> 0;
		}
		if (!((((fs$1.sys.Mode & 1024) >>> 0) === 0))) {
			fs$1.mode = (fs$1.mode | (4194304)) >>> 0;
		}
		if (!((((fs$1.sys.Mode & 2048) >>> 0) === 0))) {
			fs$1.mode = (fs$1.mode | (8388608)) >>> 0;
		}
		if (!((((fs$1.sys.Mode & 512) >>> 0) === 0))) {
			fs$1.mode = (fs$1.mode | (1048576)) >>> 0;
		}
	};
	timespecToTime = function(ts) {
		var ts;
		return time.Unix((ts.Sec), (ts.Nsec));
	};
	File.ptr.prototype.Stat = function() {
		var _r$3, err, f, fs$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; err = $f.err; f = $f.f; fs$1 = $f.fs$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fs$1 = [fs$1];
		f = this;
		if (f === ptrType$1.nil) {
			$s = -1; return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs$1[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$16.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero()));
		_r$3 = f.file.pfd.Fstat(fs$1[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new fs.PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs$1[0], f.file.name);
		$s = -1; return [fs$1[0], $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Stat }; } $f._r$3 = _r$3; $f.err = err; $f.f = f; $f.fs$1 = fs$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	lstatNolog = function(name) {
		var _r$3, err, fs$1, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; err = $f.err; fs$1 = $f.fs$1; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fs$1 = [fs$1];
		name = [name];
		fs$1[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$16.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero()));
		_r$3 = ignoringEINTR((function(fs$1, name) { return function $b() {
			var $24r, _r$3, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r$3 = $f._r$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$3 = syscall.Lstat(name[0], fs$1[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$24r = _r$3;
			$s = 2; case 2: return $24r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$24r = $24r; $f._r$3 = _r$3; $f.$s = $s; $f.$r = $r; return $f;
		}; })(fs$1, name)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new fs.PathError.ptr("lstat", name[0], err)];
		}
		fillFileStatFromSys(fs$1[0], name[0]);
		$s = -1; return [fs$1[0], $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: lstatNolog }; } $f._r$3 = _r$3; $f.err = err; $f.fs$1 = fs$1; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	fileStat.ptr.prototype.Name = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var fs$1;
		fs$1 = this;
		return new fs.FileMode(fs$1.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$13.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	ptrType$19.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [fs.FileMode], false)}, {prop: "Info", name: "Info", pkg: "", typ: $funcType([], [fs.FileInfo, $error], false)}];
	ptrType$20.methods = [{prop: "Control", name: "Control", pkg: "", typ: $funcType([funcType$2], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([funcType$3], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([funcType$3], [$error], false)}];
	ptrType$1.methods = [{prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "ReadDir", name: "ReadDir", pkg: "", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int, readdirMode], [sliceType, sliceType$2, sliceType$1, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$3, $Int64], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$3, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "wrapErr", name: "wrapErr", pkg: "os", typ: $funcType([$String, $error], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([fs.FileMode], [$error], false)}, {prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SyscallConn", name: "SyscallConn", pkg: "", typ: $funcType([], [syscall.RawConn, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$3, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$3, $Int64], [$Int, $error], false)}, {prop: "chmod", name: "chmod", pkg: "os", typ: $funcType([fs.FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "setDeadline", name: "setDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setReadDeadline", name: "setReadDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setWriteDeadline", name: "setWriteDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "checkValid", name: "checkValid", pkg: "os", typ: $funcType([$String], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "readFrom", name: "readFrom", pkg: "os", typ: $funcType([io.Reader], [$Int64, $Bool, $error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [fs.FileInfo, $error], false)}];
	ptrType$17.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [fs.FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	dirInfo.init("os", [{prop: "buf", name: "buf", embedded: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "nbuf", name: "nbuf", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", embedded: false, exported: false, typ: $Int, tag: ""}]);
	timeout.init([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	SyscallError.init("", [{prop: "Syscall", name: "Syscall", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	LinkError.init("", [{prop: "Op", name: "Op", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Old", name: "Old", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "New", name: "New", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	onlyWriter.init("", [{prop: "Writer", name: "Writer", embedded: true, exported: true, typ: io.Writer, tag: ""}]);
	file.init("os", [{prop: "pfd", name: "pfd", embedded: false, exported: false, typ: poll.FD, tag: ""}, {prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "nonblock", name: "nonblock", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "stdoutOrErr", name: "stdoutOrErr", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "appendMode", name: "appendMode", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	unixDirent.init("os", [{prop: "parent", name: "parent", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: fs.FileMode, tag: ""}, {prop: "info", name: "info", embedded: false, exported: false, typ: fs.FileInfo, tag: ""}]);
	rawConn.init("os", [{prop: "file", name: "file", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	File.init("os", [{prop: "file", name: "file", embedded: true, exported: false, typ: ptrType$13, tag: ""}]);
	fileStat.init("os", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", embedded: false, exported: false, typ: fs.FileMode, tag: ""}, {prop: "modTime", name: "modTime", embedded: false, exported: false, typ: time.Time, tag: ""}, {prop: "sys", name: "sys", embedded: false, exported: false, typ: syscall.Stat_t, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = oserror.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = poll.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = execenv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unix.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = testlog.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fs.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		testingForceReadDirLstat = false;
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = fs.ErrInvalid;
		$pkg.ErrNotExist = fs.ErrNotExist;
		$pkg.ErrClosed = fs.ErrClosed;
		$pkg.ErrNoDeadline = errNoDeadline();
		$pkg.ErrDeadlineExceeded = errDeadlineExceeded();
		$pkg.ErrProcessDone = errors.New("os: process already finished");
		errWriteAtInAppendMode = errors.New("os: invalid use of WriteAt on file opened with O_APPEND");
		_r = NewFile(((syscall.Stdin >>> 0)), "/dev/stdin"); /* */ $s = 16; case 16: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$pkg.Stdin = _r;
		_r$1 = NewFile(((syscall.Stdout >>> 0)), "/dev/stdout"); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$pkg.Stdout = _r$1;
		_r$2 = NewFile(((syscall.Stderr >>> 0)), "/dev/stderr"); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$pkg.Stderr = _r$2;
		pollCopyFileRange = poll.CopyFileRange;
		errPatternHasSeparator = errors.New("pattern contains path separator");
		lstat = Lstat;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, fmtsort, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, scanError, ss, ssave, sliceType, ptrType, ptrType$1, arrayType, arrayType$1, sliceType$1, sliceType$2, arrayType$2, ptrType$2, ptrType$5, ptrType$26, funcType, ppFree, space, ssFree, complexError, boolError, newPrinter, Sprintf, getField, tooLarge, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	fmtsort = $packages["internal/fmtsort"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_, wrapErrs_, wrappedErr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			this.wrapErrs = false;
			this.wrappedErr = $ifaceNil;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
		this.wrapErrs = wrapErrs_;
		this.wrappedErr = wrappedErr_;
	});
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType = $arrayType($Uint8, 68);
	arrayType$1 = $arrayType($Uint16, 2);
	sliceType$1 = $sliceType(arrayType$1);
	sliceType$2 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 6);
	ptrType$2 = $ptrType(pp);
	ptrType$5 = $ptrType(ss);
	ptrType$26 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	fmt.ptr.prototype.clearflags = function() {
		var f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? ($throwRuntimeError("index out of range"), undefined) : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.write(b);
		} else {
			f.buf.write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.writeString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.writeString(s);
		} else {
			f.buf.writeString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmtBoolean = function(v) {
		var f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmtBoolean = function(v) { return this.$val.fmtBoolean(v); };
	fmt.ptr.prototype.fmtUnicode = function(u) {
		var buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint(((u.$low >> 0)))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen(((u.$low >> 0)))) >> 0;
			utf8.EncodeRune($subslice(buf, i), ((u.$low >> 0)));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmtUnicode = function(u) { return this.$val.fmtUnicode(u); };
	fmt.ptr.prototype.fmtInteger = function(u, base, isSigned, verb, digits) {
		var _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, verb, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = (new $Int64(u.$high, u.$low)), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24)));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (2)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 98);
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			} else if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (verb === 79) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 111);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmtInteger = function(u, base, isSigned, verb, digits) { return this.$val.fmtInteger(u, base, isSigned, verb, digits); };
	fmt.ptr.prototype.truncateString = function(s) {
		var _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncateString = function(s) { return this.$val.truncateString(s); };
	fmt.ptr.prototype.truncate = function(b) {
		var _tuple, b, f, i, n, wid;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			i = 0;
			while (true) {
				if (!(i < b.$length)) { break; }
				n = n - (1) >> 0;
				if (n < 0) {
					return $subslice(b, 0, i);
				}
				wid = 1;
				if (((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) >= 128) {
					_tuple = utf8.DecodeRune($subslice(b, i));
					wid = _tuple[1];
				}
				i = i + (wid) >> 0;
			}
		}
		return b;
	};
	fmt.prototype.truncate = function(b) { return this.$val.truncate(b); };
	fmt.ptr.prototype.fmtS = function(s) {
		var f, s;
		f = this;
		s = f.truncateString(s);
		f.padString(s);
	};
	fmt.prototype.fmtS = function(s) { return this.$val.fmtS(s); };
	fmt.ptr.prototype.fmtBs = function(b) {
		var b, f;
		f = this;
		b = f.truncate(b);
		f.pad(b);
	};
	fmt.prototype.fmtBs = function(b) { return this.$val.fmtBs(b); };
	fmt.ptr.prototype.fmtSbx = function(s, b, digits) {
		var b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmtSbx = function(s, b, digits) { return this.$val.fmtSbx(s, b, digits); };
	fmt.ptr.prototype.fmtSx = function(s, digits) {
		var digits, f, s;
		f = this;
		f.fmtSbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmtSx = function(s, digits) { return this.$val.fmtSx(s, digits); };
	fmt.ptr.prototype.fmtBx = function(b, digits) {
		var b, digits, f;
		f = this;
		f.fmtSbx("", b, digits);
	};
	fmt.prototype.fmtBx = function(b, digits) { return this.$val.fmtBx(b, digits); };
	fmt.ptr.prototype.fmtQ = function(s) {
		var buf, f, s;
		f = this;
		s = f.truncateString(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmtQ = function(s) { return this.$val.fmtQ(s); };
	fmt.ptr.prototype.fmtC = function(c) {
		var buf, c, f, r, w;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	fmt.ptr.prototype.fmtQc = function(c) {
		var buf, c, f, r;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmtQc = function(c) { return this.$val.fmtQc(c); };
	fmt.ptr.prototype.fmtFloat = function(v, size, verb, prec) {
		var _1, _2, digits, f, hasDecimalPoint, i, num, oldZero, prec, sawNonzeroDigit, size, tail, tailBuf, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, ((verb << 24 >>> 24)), prec, size);
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.sharp && !((verb === 98))) {
			digits = 0;
			_1 = verb;
			if ((_1 === (118)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120))) {
				digits = prec;
				if (digits === -1) {
					digits = 6;
				}
			}
			tailBuf = arrayType$2.zero();
			tail = $subslice(new sliceType$2(tailBuf), 0, 0);
			hasDecimalPoint = false;
			sawNonzeroDigit = false;
			i = 1;
			while (true) {
				if (!(i < num.$length)) { break; }
				switch (0) { default:
					_2 = ((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]);
					if (_2 === (46)) {
						hasDecimalPoint = true;
					} else if ((_2 === (112)) || (_2 === (80))) {
						tail = $appendSlice(tail, $subslice(num, i));
						num = $subslice(num, 0, i);
					} else if ((_2 === (101)) || (_2 === (69))) {
						if (!((verb === 120)) && !((verb === 88))) {
							tail = $appendSlice(tail, $subslice(num, i));
							num = $subslice(num, 0, i);
							break;
						}
						if (!((((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]) === 48))) {
							sawNonzeroDigit = true;
						}
						if (sawNonzeroDigit) {
							digits = digits - (1) >> 0;
						}
					} else {
						if (!((((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]) === 48))) {
							sawNonzeroDigit = true;
						}
						if (sawNonzeroDigit) {
							digits = digits - (1) >> 0;
						}
					}
				}
				i = i + (1) >> 0;
			}
			if (!hasDecimalPoint) {
				if ((num.$length === 2) && ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 48)) {
					digits = digits - (1) >> 0;
				}
				num = $append(num, 46);
			}
			while (true) {
				if (!(digits > 0)) { break; }
				num = $append(num, 48);
				digits = digits - (1) >> 0;
			}
			num = $appendSlice(num, tail);
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.writeByte((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmtFloat = function(v, size, verb, prec) { return this.$val.fmtFloat(v, size, verb, prec); };
	$ptrType(buffer).prototype.write = function(p) {
		var b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.writeString = function(s) {
		var b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.writeByte = function(c) {
		var b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.writeRune = function(r) {
		var b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), ((r << 24 >>> 24))));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.wrapErrs = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var p;
		p = this;
		if (p.buf.$capacity > 65536) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		p.wrappedErr = $ifaceNil;
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	pp.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, err, p, ret, s;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(s);
		_tmp = s.length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Sprintf = function(format, a) {
		var _r, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f._r = _r; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	getField = function(v, i) {
		var _r, _r$1, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(v, reflect.Value).Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { */ case 2:
			_r$1 = $clone(val, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + (((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0)) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var _r, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!$clone(v, reflect.Value).IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
			$s = -1; return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(63);
		_r = $clone(v, reflect.Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(63);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f._r = _r; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var _r, _r$1, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if ($clone(p.value, reflect.Value).IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if ($clone(p.value, reflect.Value).IsValid()) { */ case 3:
				_r$1 = $clone(p.value, reflect.Value).Type().String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(61);
				$r = p.printValue($clone(p.value, reflect.Value), 118, 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
		p.erroring = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmtBoolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmtInteger(v, 16, false, 118, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var _1, isSigned, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; isSigned = $f.isSigned; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if ((_1 === (111)) || (_1 === (79))) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmtInteger(v, 10, isSigned, verb, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmtInteger(v, 10, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmtInteger(v, 2, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if ((_1 === (111)) || (_1 === (79))) { */ case 5:
				p.fmt.fmtInteger(v, 8, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmtInteger(v, 16, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmtInteger(v, 16, isSigned, verb, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmtC(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				p.fmt.fmtQc(v);
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmtUnicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInteger }; } $f._1 = _1; $f.isSigned = isSigned; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var _1, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmtFloat(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88))) { */ case 3:
				p.fmt.fmtFloat(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmtFloat(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmtFloat(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat }; } $f._1 = _1; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var _1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; oldPlus = $f.oldPlus; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f.oldPlus = oldPlus; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmtQ(v);
				} else {
					p.fmt.fmtS(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmtS(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmtSx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmtSx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmtQ(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; i = $f.i; i$1 = $f.i$1; p = $f.p; typeString = $f.typeString; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						}
						p.fmt0x64((new $Uint64(0, c)), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
						p.fmt.fmtInteger((new $Uint64(0, c$1)), 10, false, verb, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmtBs(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmtBx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmtBx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmtQ(($bytesToString(v)));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r, reflect.Value), verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.typeString = typeString; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var _1, _2, _r, p, u, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; p = $f.p; u = $f.u; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		u = 0;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = $clone(value, reflect.Value).Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(40);
					_r = $clone(value, reflect.Value).Type().String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("nil");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger((new $Uint64(0, u.constructor === Number ? u : 1)), false, verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f.p = p; $f.u = u; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb, method) {
		var _r, arg, err, method, oldFlags, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arg = $f.arg; err = $f.err; method = $f.method; oldFlags = $f.oldFlags; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if (($clone(v, reflect.Value).Kind() === 22) && $clone(v, reflect.Value).IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
				$s = -1; return;
			}
			if (p.panicking) {
				$panic(err);
			}
			oldFlags = $clone(p.fmt.fmtFlags, fmtFlags);
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(PANIC=");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(method);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(" method: ");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
			fmtFlags.copy(p.fmt.fmtFlags, oldFlags);
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f._r = _r; $f.arg = arg; $f.err = err; $f.method = method; $f.oldFlags = oldFlags; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb, method) { return this.$val.catchPanic(arg, verb, method); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var $24r, $24r$1, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, err, formatter, handled, ok, ok$1, ok$2, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; $24r$1 = $f.$24r$1; $24r$2 = $f.$24r$2; $24r$3 = $f.$24r$3; $24r$4 = $f.$24r$4; $24r$5 = $f.$24r$5; $24r$6 = $f.$24r$6; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		/* */ if (p.erroring) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.erroring) { */ case 1:
			$24r = handled;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		/* */ if (verb === 119) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (verb === 119) { */ case 4:
			_tuple = $assertType(p.arg, $error, true);
			err = _tuple[0];
			ok = _tuple[1];
			/* */ if (!ok || !p.wrapErrs || !($interfaceIsEqual(p.wrappedErr, $ifaceNil))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!ok || !p.wrapErrs || !($interfaceIsEqual(p.wrappedErr, $ifaceNil))) { */ case 6:
				p.wrappedErr = $ifaceNil;
				p.wrapErrs = false;
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				handled = true;
				$24r$1 = handled;
				$s = 9; case 9: return $24r$1;
			/* } */ case 7:
			p.wrappedErr = err;
			verb = 118;
		/* } */ case 5:
		_tuple$1 = $assertType(p.arg, Formatter, true);
		formatter = _tuple$1[0];
		ok$1 = _tuple$1[1];
		/* */ if (ok$1) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (ok$1) { */ case 10:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "Format"]]);
			$r = formatter.Format(p, verb); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$24r$2 = handled;
			$s = 13; case 13: return $24r$2;
		/* } */ case 11:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 14:
			_tuple$2 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$2[0];
			ok$2 = _tuple$2[1];
			/* */ if (ok$2) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (ok$2) { */ case 17:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "GoString"]]);
				_r = stringer.GoString(); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmtS(_r); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$24r$3 = handled;
				$s = 21; case 21: return $24r$3;
			/* } */ case 18:
			$s = 16; continue;
		/* } else { */ case 15:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 23:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 25; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 25:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "Error"]]);
						_r$1 = v.Error(); /* */ $s = 28; case 28: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$24r$4 = handled;
						$s = 30; case 30: return $24r$4;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 26:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "String"]]);
						_r$2 = v$1.String(); /* */ $s = 31; case 31: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$24r$5 = handled;
						$s = 33; case 33: return $24r$5;
					/* } */ case 27:
				/* } */ case 24:
			case 22:
		/* } */ case 16:
		handled = false;
		$24r$6 = handled;
		$s = 34; case 34: return $24r$6;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f.$24r = $24r; $f.$24r$1 = $24r$1; $f.$24r$2 = $24r$2; $f.$24r$3 = $24r$3; $f.$24r$4 = $24r$4; $f.$24r$5 = $24r$5; $f.$24r$6 = $24r$6; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; arg = $f.arg; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmtS(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer($clone(_r$1, reflect.Value), 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat((f$1), 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex((new $Complex128(f$3.$real, f$3.$imag)), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$5)), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$6)), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$7)), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$8)), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(f$9.$high, f$9.$low)), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$10)), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$11)), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$12)), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$13)), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$15.constructor === Number ? f$15 : 1)), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			/* */ if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { */ case 55:
				_r$2 = $clone(f$18, reflect.Value).Interface(); /* */ $s = 57; case 57: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				p.arg = _r$2;
				_r$3 = p.handleMethods(verb); /* */ $s = 60; case 60: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (_r$3) { */ case 58:
					$s = -1; return;
				/* } */ case 59:
			/* } */ case 56:
			$r = p.printValue($clone(f$18, reflect.Value), verb, 0); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$4 = p.handleMethods(verb); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if (!_r$4) { */ case 62:
				_r$5 = reflect.ValueOf(f$19); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r$5, reflect.Value), verb, 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.arg = arg; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var _1, _2, _3, _4, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, name, p, sorted, t, value, value$1, verb, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; key = $f.key; name = $f.name; p = $f.p; sorted = $f.sorted; t = $f.t; value = $f.value; value$1 = $f.value$1; verb = $f.verb; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { */ case 1:
			_r = $clone(value, reflect.Value).Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool($clone(f, reflect.Value).Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger(((x = $clone(f, reflect.Value).Int(), new $Uint64(x.$high, x.$low))), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger($clone(f, reflect.Value).Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = $clone(f, reflect.Value).String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = $clone(f, reflect.Value).Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$3); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if ($clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("map[");
				/* } */ case 44:
				_r$4 = fmtsort.Sort($clone(f, reflect.Value)); /* */ $s = 47; case 47: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				sorted = _r$4;
				_ref = sorted.Key;
				_i = 0;
				/* while (true) { */ case 48:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 49; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
					}
					$r = p.printValue($clone(key, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(58);
					$r = p.printValue($clone((x$1 = sorted.Value, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), reflect.Value), verb, depth + 1 >> 0); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 48; continue; case 49:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 52; continue; }
				/* */ $s = 53; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 52:
					_r$5 = $clone(f, reflect.Value).Type().String(); /* */ $s = 54; case 54: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$5); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 53:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
				i$1 = 0;
				/* while (true) { */ case 56:
					/* if (!(i$1 < $clone(f, reflect.Value).NumField())) { break; } */ if(!(i$1 < $clone(f, reflect.Value).NumField())) { $s = 57; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 58; continue; }
					/* */ $s = 59; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 58:
						_r$6 = $clone(f, reflect.Value).Type().Field(i$1); /* */ $s = 60; case 60: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						name = _r$6.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(58);
						}
					/* } */ case 59:
					_r$7 = getField($clone(f, reflect.Value), i$1); /* */ $s = 61; case 61: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$7, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 56; continue; case 57:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$8 = $clone(f, reflect.Value).Elem(); /* */ $s = 63; case 63: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				value$1 = _r$8;
				/* */ if (!$clone(value$1, reflect.Value).IsValid()) { $s = 64; continue; }
				/* */ $s = 65; continue;
				/* if (!$clone(value$1, reflect.Value).IsValid()) { */ case 64:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 67; continue; }
					/* */ $s = 68; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 67:
						_r$9 = $clone(f, reflect.Value).Type().String(); /* */ $s = 70; case 70: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$9); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = 69; continue;
					/* } else { */ case 68:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
					/* } */ case 69:
					$s = 66; continue;
				/* } else { */ case 65:
					$r = p.printValue($clone(value$1, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 66:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 74; continue; }
					/* */ $s = 75; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 74:
						t = $clone(f, reflect.Value).Type();
						_r$10 = t.Elem(); /* */ $s = 78; case 78: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_r$11 = _r$10.Kind(); /* */ $s = 79; case 79: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						/* */ if (_r$11 === 8) { $s = 76; continue; }
						/* */ $s = 77; continue;
						/* if (_r$11 === 8) { */ case 76:
							bytes = sliceType$2.nil;
							/* */ if ($clone(f, reflect.Value).Kind() === 23) { $s = 80; continue; }
							/* */ if ($clone(f, reflect.Value).CanAddr()) { $s = 81; continue; }
							/* */ $s = 82; continue;
							/* if ($clone(f, reflect.Value).Kind() === 23) { */ case 80:
								_r$12 = $clone(f, reflect.Value).Bytes(); /* */ $s = 84; case 84: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
								bytes = _r$12;
								$s = 83; continue;
							/* } else if ($clone(f, reflect.Value).CanAddr()) { */ case 81:
								_r$13 = $clone(f, reflect.Value).Slice(0, $clone(f, reflect.Value).Len()); /* */ $s = 85; case 85: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
								_r$14 = $clone(_r$13, reflect.Value).Bytes(); /* */ $s = 86; case 86: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
								bytes = _r$14;
								$s = 83; continue;
							/* } else { */ case 82:
								bytes = $makeSlice(sliceType$2, $clone(f, reflect.Value).Len());
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 87:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 88; continue; }
									i$2 = _i$1;
									_r$15 = $clone(f, reflect.Value).Index(i$2); /* */ $s = 89; case 89: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
									_r$16 = $clone(_r$15, reflect.Value).Uint(); /* */ $s = 90; case 90: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i$2] = ((_r$16.$low << 24 >>> 24)));
									_i$1++;
								/* } */ $s = 87; continue; case 88:
							/* } */ case 83:
							_arg = bytes;
							_arg$1 = verb;
							_r$17 = t.String(); /* */ $s = 91; case 91: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
							_arg$2 = _r$17;
							$r = p.fmtBytes(_arg, _arg$1, _arg$2); /* */ $s = 92; case 92: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 77:
					/* } */ case 75:
				case 73:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 93; continue; }
				/* */ $s = 94; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 93:
					_r$18 = $clone(f, reflect.Value).Type().String(); /* */ $s = 96; case 96: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$18); /* */ $s = 97; case 97: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (($clone(f, reflect.Value).Kind() === 23) && $clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
					i$3 = 0;
					/* while (true) { */ case 98:
						/* if (!(i$3 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$3 < $clone(f, reflect.Value).Len())) { $s = 99; continue; }
						if (i$3 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						}
						_r$19 = $clone(f, reflect.Value).Index(i$3); /* */ $s = 100; case 100: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$19, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 101; case 101: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$3 = i$3 + (1) >> 0;
					/* } */ $s = 98; continue; case 99:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
					$s = 95; continue;
				/* } else { */ case 94:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(91);
					i$4 = 0;
					/* while (true) { */ case 102:
						/* if (!(i$4 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$4 < $clone(f, reflect.Value).Len())) { $s = 103; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
						_r$20 = $clone(f, reflect.Value).Index(i$4); /* */ $s = 104; case 104: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$20, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					/* } */ $s = 102; continue; case 103:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(93);
				/* } */ case 95:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { $s = 106; continue; }
				/* */ $s = 107; continue;
				/* if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { */ case 106:
						_r$21 = $clone(f, reflect.Value).Elem(); /* */ $s = 109; case 109: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						a = _r$21;
						_4 = $clone(a, reflect.Value).Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 110; continue; }
						/* */ $s = 111; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 110:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(38);
							$r = p.printValue($clone(a, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 112; case 112: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 111:
					case 108:
				/* } */ case 107:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 113; case 113: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType($clone(f, reflect.Value)); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.key = key; $f.name = name; $f.p = p; $f.sorted = sorted; $f.t = t; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = $clone(v, reflect.Value).Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = $clone(v, reflect.Value).Int();
						if ((x = (new $Int64(0, (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)))), (x.$high === n.$high && x.$low === n.$low))) {
							num = (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0));
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = $clone(v, reflect.Value).Uint();
						if ((x$1 = (new $Int64(n$1.$high, n$1.$low)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = (new $Uint64(0, ((n$1.$low >> 0)))), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = ((n$1.$low >> 0));
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var _1, _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, size, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; i$1 = $f.i$1; lasti = $f.lasti; p = $f.p; size = $f.size; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), ((c >> 0))); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tmp = ((format.charCodeAt(i) >> 0));
			_tmp$1 = 1;
			verb = _tmp;
			size = _tmp$1;
			if (verb >= 128) {
				_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
				verb = _tuple$7[0];
				size = _tuple$7[1];
			}
			i = i + (size) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			/* } */ $s = 37; continue; case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.i$1 = i$1; $f.lasti = lasti; $f.p = p; $f.size = size; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	ss.ptr.prototype.Read = function(buf) {
		var _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var _r, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var _r, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $24r, _r, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$24r = [tok, err[0]];
		$s = 2; case 2: return $24r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f.$24r = $24r; $f._r = _r; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = ((r << 16 >>> 16));
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType$1);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var r;
		return !isSpace(r);
	};
	ss.ptr.prototype.free = function(old) {
		var old, s;
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.SkipSpace = function() {
		var _r, _r$1, _r$2, _v, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			if (r === 10) {
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
			}
			/* */ if (!isSpace(r)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!isSpace(r)) { */ case 8:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var _r, _r$1, _r$2, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.SkipSpace(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).writeRune(r);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var _r, _r$1, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f._r = _r; $f._r$1 = _r$1; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$26.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmtBoolean", name: "fmtBoolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmtUnicode", name: "fmtUnicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $Int32, $String], [], false)}, {prop: "truncateString", name: "truncateString", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([sliceType$2], [sliceType$2], false)}, {prop: "fmtS", name: "fmtS", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmtBs", name: "fmtBs", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "fmtSbx", name: "fmtSbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmtSx", name: "fmtSx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmtBx", name: "fmtBx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmtQ", name: "fmtQ", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmtC", name: "fmtC", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmtQc", name: "fmtQc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$1.methods = [{prop: "write", name: "write", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "writeString", name: "writeString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "writeByte", name: "writeByte", pkg: "fmt", typ: $funcType([$Uint8], [], false)}, {prop: "writeRune", name: "writeRune", pkg: "fmt", typ: $funcType([$Int32], [], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32, $String], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanPercent", name: "scanPercent", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType], [$Int, $error], false)}];
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "fmtFlags", embedded: true, exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", embedded: false, exported: false, typ: arrayType, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", embedded: false, exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", embedded: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", embedded: false, exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", embedded: false, exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "wrapErrs", name: "wrapErrs", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "wrappedErr", name: "wrappedErr", embedded: false, exported: false, typ: $error, tag: ""}]);
	scanError.init("fmt", [{prop: "err", name: "err", embedded: false, exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", embedded: false, exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", embedded: false, exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "ssave", embedded: true, exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", embedded: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmtsort.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ppFree = new sync.Pool.ptr(sliceType.nil, (function() {
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero()), false, false, false, false, false, $ifaceNil);
		}));
		space = new sliceType$1([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(sliceType.nil, (function() {
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall/js"] = (function() {
	var $pkg = {}, $init, js, reflect, Type, Func, Error, Value, ValueError, Wrapper, funcType, arrayType, sliceType, mapType, sliceType$1, ptrType, ptrType$1, ptrType$2, id, instanceOf, getValueType, Global, Null, Undefined, FuncOf, objectToValue, init, ValueOf, convertArgs;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	reflect = $packages["reflect"];
	Type = $pkg.Type = $newType(4, $kindInt, "js.Type", true, "syscall/js", true, null);
	Func = $pkg.Func = $newType(0, $kindStruct, "js.Func", true, "syscall/js", true, function(Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new Value.ptr(null, false, arrayType.zero());
			return;
		}
		this.Value = Value_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "syscall/js", true, function(Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new Value.ptr(null, false, arrayType.zero());
			return;
		}
		this.Value = Value_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "js.Value", true, "syscall/js", true, function(v_, inited_, _$2_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = null;
			this.inited = false;
			this._$2 = arrayType.zero();
			return;
		}
		this.v = v_;
		this.inited = inited_;
		this._$2 = _$2_;
	});
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "js.ValueError", true, "syscall/js", true, function(Method_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Type = 0;
			return;
		}
		this.Method = Method_;
		this.Type = Type_;
	});
	Wrapper = $pkg.Wrapper = $newType(8, $kindInterface, "js.Wrapper", true, "syscall/js", true, null);
	funcType = $funcType([], [], false);
	arrayType = $arrayType(funcType, 0);
	sliceType = $sliceType(Value);
	mapType = $mapType($String, $emptyInterface);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType = $ptrType(js.Error);
	ptrType$1 = $ptrType(js.Object);
	ptrType$2 = $ptrType(ValueError);
	Type.prototype.String = function() {
		var _1, t;
		t = this.$val;
		_1 = t;
		if (_1 === (0)) {
			return "undefined";
		} else if (_1 === (1)) {
			return "null";
		} else if (_1 === (2)) {
			return "boolean";
		} else if (_1 === (3)) {
			return "number";
		} else if (_1 === (4)) {
			return "string";
		} else if (_1 === (5)) {
			return "symbol";
		} else if (_1 === (6)) {
			return "object";
		} else if (_1 === (7)) {
			return "function";
		} else {
			$panic(new $String("bad type"));
		}
	};
	$ptrType(Type).prototype.String = function() { return new Type(this.$get()).String(); };
	Type.prototype.isObject = function() {
		var t;
		t = this.$val;
		return (t === 6) || (t === 7);
	};
	$ptrType(Type).prototype.isObject = function() { return new Type(this.$get()).isObject(); };
	Global = function() {
		return objectToValue($global);
	};
	$pkg.Global = Global;
	Null = function() {
		return objectToValue(null);
	};
	$pkg.Null = Null;
	Undefined = function() {
		return objectToValue(undefined);
	};
	$pkg.Undefined = Undefined;
	Func.ptr.prototype.Release = function() {
		var f;
		f = this;
		$exportedFunctions = ($parseInt($exportedFunctions) >> 0) - 1 >> 0;
		Value.copy(f.Value, Null());
	};
	Func.prototype.Release = function() { return this.$val.Release(); };
	FuncOf = function(fn) {
		var fn;
		$exportedFunctions = ($parseInt($exportedFunctions) >> 0) + 1 >> 0;
		return new Func.ptr($clone(objectToValue(js.MakeFunc((function $b(this$1, args) {
			var $24r, _i, _r, _ref, a, args, i, this$1, vargs, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _i = $f._i; _r = $f._r; _ref = $f._ref; a = $f.a; args = $f.args; i = $f.i; this$1 = $f.this$1; vargs = $f.vargs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			vargs = $makeSlice(sliceType, args.$length);
			_ref = args;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				Value.copy(((i < 0 || i >= vargs.$length) ? ($throwRuntimeError("index out of range"), undefined) : vargs.$array[vargs.$offset + i]), objectToValue(a));
				_i++;
			}
			_r = fn($clone(objectToValue(this$1), Value), vargs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 2; case 2: return $24r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$24r = $24r; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.a = a; $f.args = args; $f.i = i; $f.this$1 = this$1; $f.vargs = vargs; $f.$s = $s; $f.$r = $r; return $f;
		}))), Value));
	};
	$pkg.FuncOf = FuncOf;
	Error.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "JavaScript error: " + $clone($clone(e.Value, Value).Get("message"), Value).String();
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	objectToValue = function(obj) {
		var obj;
		if (obj === undefined) {
			return new Value.ptr(null, false, arrayType.zero());
		}
		return new Value.ptr(obj, true, arrayType.zero());
	};
	init = function() {
		if (!($global === null)) {
			id = $global.eval($externalize("(function(x) { return x; })", $String));
			instanceOf = $global.eval($externalize("(function(x, y) { return x instanceof y; })", $String));
			getValueType = $global.eval($externalize("(function(x) {\n  if (typeof(x) === \"undefined\") {\n    return 0; // TypeUndefined\n  }\n  if (x === null) {\n    return 1; // TypeNull\n  }\n  if (typeof(x) === \"boolean\") {\n    return 2; // TypeBoolean\n  }\n  if (typeof(x) === \"number\") {\n    return 3; // TypeNumber\n  }\n  if (typeof(x) === \"string\") {\n    return 4; // TypeString\n  }\n  if (typeof(x) === \"symbol\") {\n    return 5; // TypeSymbol\n  }\n  if (typeof(x) === \"function\") {\n    return 7; // TypeFunction\n  }\n  return 6; // TypeObject\n})", $String));
		}
	};
	ValueOf = function(x) {
		var $24r, _r, _r$1, _ref, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, Wrapper, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, Value, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, Func, true)[1]) { $s = 3; continue; }
		/* */ if (_ref === $ifaceNil) { $s = 4; continue; }
		/* */ if ($assertType(_ref, $Bool, true)[1] || $assertType(_ref, $Int, true)[1] || $assertType(_ref, $Int8, true)[1] || $assertType(_ref, $Int16, true)[1] || $assertType(_ref, $Int32, true)[1] || $assertType(_ref, $Int64, true)[1] || $assertType(_ref, $Uint, true)[1] || $assertType(_ref, $Uint8, true)[1] || $assertType(_ref, $Uint16, true)[1] || $assertType(_ref, $Uint32, true)[1] || $assertType(_ref, $Uint64, true)[1] || $assertType(_ref, $Float32, true)[1] || $assertType(_ref, $Float64, true)[1] || $assertType(_ref, $UnsafePointer, true)[1] || $assertType(_ref, $String, true)[1] || $assertType(_ref, mapType, true)[1] || $assertType(_ref, sliceType$1, true)[1]) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($assertType(_ref, Wrapper, true)[1]) { */ case 1:
			x$1 = _ref;
			_r = x$1.JSValue(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 9; case 9: return $24r;
		/* } else if ($assertType(_ref, Value, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, Value);
			$s = -1; return x$2;
		/* } else if ($assertType(_ref, Func, true)[1]) { */ case 3:
			x$3 = $clone(_ref.$val, Func);
			$s = -1; return x$3.Value;
		/* } else if (_ref === $ifaceNil) { */ case 4:
			x$4 = _ref;
			$s = -1; return Null();
		/* } else if ($assertType(_ref, $Bool, true)[1] || $assertType(_ref, $Int, true)[1] || $assertType(_ref, $Int8, true)[1] || $assertType(_ref, $Int16, true)[1] || $assertType(_ref, $Int32, true)[1] || $assertType(_ref, $Int64, true)[1] || $assertType(_ref, $Uint, true)[1] || $assertType(_ref, $Uint8, true)[1] || $assertType(_ref, $Uint16, true)[1] || $assertType(_ref, $Uint32, true)[1] || $assertType(_ref, $Uint64, true)[1] || $assertType(_ref, $Float32, true)[1] || $assertType(_ref, $Float64, true)[1] || $assertType(_ref, $UnsafePointer, true)[1] || $assertType(_ref, $String, true)[1] || $assertType(_ref, mapType, true)[1] || $assertType(_ref, sliceType$1, true)[1]) { */ case 5:
			x$5 = _ref;
			$s = -1; return objectToValue(id($externalize(x$5, $emptyInterface)));
		/* } else { */ case 6:
			x$6 = _ref;
			_r$1 = reflect.TypeOf(x$6).String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String("invalid arg: " + _r$1));
		/* } */ case 7:
		$s = -1; return new Value.ptr(null, false, arrayType.zero());
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	Value.ptr.prototype.internal = function() {
		var v;
		v = this;
		if (!v.inited) {
			return undefined;
		}
		return v.v;
	};
	Value.prototype.internal = function() { return this.$val.internal(); };
	Value.ptr.prototype.Bool = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 2))) {
			$panic(new ValueError.ptr("Value.Bool", vType));
		}
		return !!($clone(v, Value).internal());
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	convertArgs = function(args) {
		var _i, _r, _ref, arg, args, newArgs, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; arg = $f.arg; args = $f.args; newArgs = $f.newArgs; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		newArgs = new sliceType$1([]);
		_ref = args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = $clone(_r, Value);
			newArgs = $append(newArgs, new $jsObjectPtr($clone(v, Value).internal()));
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return newArgs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertArgs }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.arg = arg; $f.args = args; $f.newArgs = newArgs; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.ptr.prototype.Call = function(m, args) {
		var $24r, _r, _r$1, args, m, obj, propType, v, vType, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; args = $f.args; m = $f.m; obj = $f.obj; propType = $f.propType; v = $f.v; vType = $f.vType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 6)) && !((vType === 7))) {
			$panic(new ValueError.ptr("Value.Call", vType));
		}
		propType = $clone($clone(v, Value).Get(m), Value).Type();
		if (!((propType === 7))) {
			$panic(new $String("js: Value.Call: property " + m + " is not a function, got " + new Type(propType).String()));
		}
		_r = convertArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = objectToValue((obj = $clone(v, Value).internal(), obj[$externalize(m, $String)].apply(obj, $externalize(_r, sliceType$1)))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f.args = args; $f.m = m; $f.obj = obj; $f.propType = propType; $f.v = v; $f.vType = vType; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(m, args) { return this.$val.Call(m, args); };
	Value.ptr.prototype.Float = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 3))) {
			$panic(new ValueError.ptr("Value.Float", vType));
		}
		return $parseFloat($clone(v, Value).internal());
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Get = function(p) {
		var p, v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Get", vType));
		}
		return objectToValue($clone(v, Value).internal()[$externalize(p, $String)]);
	};
	Value.prototype.Get = function(p) { return this.$val.Get(p); };
	Value.ptr.prototype.Index = function(i) {
		var i, v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Index", vType));
		}
		return objectToValue($clone(v, Value).internal()[i]);
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.Int = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 3))) {
			$panic(new ValueError.ptr("Value.Int", vType));
		}
		return $parseInt($clone(v, Value).internal()) >> 0;
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.InstanceOf = function(t) {
		var t, v;
		v = this;
		return !!(instanceOf($clone(v, Value).internal(), $clone(t, Value).internal()));
	};
	Value.prototype.InstanceOf = function(t) { return this.$val.InstanceOf(t); };
	Value.ptr.prototype.Invoke = function(args) {
		var $24r, _r, _r$1, args, v, vType, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; args = $f.args; v = $f.v; vType = $f.vType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 7))) {
			$panic(new ValueError.ptr("Value.Invoke", vType));
		}
		_r = convertArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = objectToValue($clone(v, Value).internal().apply(undefined, $externalize(_r, sliceType$1))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Invoke }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f.args = args; $f.v = v; $f.vType = vType; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Value.ptr.prototype.JSValue = function() {
		var v;
		v = this;
		return v;
	};
	Value.prototype.JSValue = function() { return this.$val.JSValue(); };
	Value.ptr.prototype.Length = function() {
		var v;
		v = this;
		return $parseInt($clone(v, Value).internal().length);
	};
	Value.prototype.Length = function() { return this.$val.Length(); };
	Value.ptr.prototype.New = function(args) {
		var $24r, _r, _r$1, args, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; args = $f.args; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		v = [v];
		v[0] = this;
		$deferred.push([(function(v) { return function() {
			var _tuple, err, jsErr, ok, vType, x;
			err = $recover();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				return;
			}
			vType = $clone(v[0], Value).Type();
			if (!((vType === 7))) {
				$panic(new ValueError.ptr("Value.New", vType));
			}
			_tuple = $assertType(err, ptrType, true);
			jsErr = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				$panic((x = new Error.ptr($clone(objectToValue(jsErr.Object), Value)), new x.constructor.elem(x)));
			}
			$panic(err);
		}; })(v), []]);
		_r = convertArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = objectToValue(new ($global.Function.prototype.bind.apply($clone(v[0], Value).internal(), [undefined].concat($externalize(_r, sliceType$1))))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return new Value.ptr(null, false, arrayType.zero()); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Value.ptr.prototype.New }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f.args = args; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Value.prototype.New = function(args) { return this.$val.New(args); };
	Value.ptr.prototype.Set = function(p, x) {
		var _r, p, v, vType, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; v = $f.v; vType = $f.vType; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Set", vType));
		}
		_r = convertArgs(new sliceType$1([x])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$clone(v, Value).internal()[$externalize(p, $String)] = $externalize((x$1 = _r, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $emptyInterface);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f._r = _r; $f.p = p; $f.v = v; $f.vType = vType; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(p, x) { return this.$val.Set(p, x); };
	Value.ptr.prototype.SetIndex = function(i, x) {
		var _r, i, v, vType, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; v = $f.v; vType = $f.vType; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.SetIndex", vType));
		}
		_r = convertArgs(new sliceType$1([x])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$clone(v, Value).internal()[i] = $externalize((x$1 = _r, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $emptyInterface);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetIndex }; } $f._r = _r; $f.i = i; $f.v = v; $f.vType = vType; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetIndex = function(i, x) { return this.$val.SetIndex(i, x); };
	Value.ptr.prototype.String = function() {
		var _1, v;
		v = this;
		_1 = $clone(v, Value).Type();
		if (_1 === (4)) {
			return $internalize($clone(v, Value).internal(), $String);
		} else if (_1 === (0)) {
			return "<undefined>";
		} else if (_1 === (1)) {
			return "<null>";
		} else if (_1 === (2)) {
			return "<boolean: " + $internalize($clone(v, Value).internal(), $String) + ">";
		} else if (_1 === (3)) {
			return "<number: " + $internalize($clone(v, Value).internal(), $String) + ">";
		} else if (_1 === (5)) {
			return "<symbol>";
		} else if (_1 === (6)) {
			return "<object>";
		} else if (_1 === (7)) {
			return "<function>";
		} else {
			$panic(new $String("bad type"));
		}
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.Truthy = function() {
		var v;
		v = this;
		return !!($clone(v, Value).internal());
	};
	Value.prototype.Truthy = function() { return this.$val.Truthy(); };
	Value.ptr.prototype.Type = function() {
		var v;
		v = this;
		return ((($parseInt(getValueType($clone(v, Value).internal())) >> 0) >> 0));
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.IsNull = function() {
		var v;
		v = this;
		return $clone(v, Value).Type() === 1;
	};
	Value.prototype.IsNull = function() { return this.$val.IsNull(); };
	Value.ptr.prototype.IsUndefined = function() {
		var v;
		v = this;
		return !v.inited;
	};
	Value.prototype.IsUndefined = function() { return this.$val.IsUndefined(); };
	Value.ptr.prototype.IsNaN = function() {
		var v;
		v = this;
		return !!($global.isNaN($clone(v, Value).internal()));
	};
	Value.prototype.IsNaN = function() { return this.$val.IsNaN(); };
	Value.ptr.prototype.Delete = function(p) {
		var p, v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Delete", vType));
		}
		delete $clone(v, Value).internal()[$externalize(p, $String)];
	};
	Value.prototype.Delete = function(p) { return this.$val.Delete(p); };
	Value.ptr.prototype.Equal = function(w) {
		var v, w;
		v = this;
		return $clone(v, Value).internal() === $clone(w, Value).internal();
	};
	Value.prototype.Equal = function(w) { return this.$val.Equal(w); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "syscall/js: call of " + e.Method + " on " + new Type(e.Type).String();
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	Type.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "isObject", name: "isObject", pkg: "syscall/js", typ: $funcType([], [$Bool], false)}];
	Func.methods = [{prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}];
	Error.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Value.methods = [{prop: "internal", name: "internal", pkg: "syscall/js", typ: $funcType([], [ptrType$1], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType$1], [Value], true)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "InstanceOf", name: "InstanceOf", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType$1], [Value], true)}, {prop: "JSValue", name: "JSValue", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType$1], [Value], true)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Truthy", name: "Truthy", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "IsNull", name: "IsNull", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsUndefined", name: "IsUndefined", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsNaN", name: "IsNaN", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Value], [$Bool], false)}];
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Func.init("", [{prop: "Value", name: "Value", embedded: true, exported: true, typ: Value, tag: ""}]);
	Error.init("", [{prop: "Value", name: "Value", embedded: true, exported: true, typ: Value, tag: ""}]);
	Value.init("syscall/js", [{prop: "v", name: "v", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "inited", name: "inited", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "_$2", name: "_", embedded: false, exported: false, typ: arrayType, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}]);
	Wrapper.init([{prop: "JSValue", name: "JSValue", pkg: "", typ: $funcType([], [Value], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		id = null;
		instanceOf = null;
		getValueType = null;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty"] = (function() {
	var $pkg = {}, $init, reflect, js, Core, Component, Copier, Mounter, Unmounter, Keyer, ComponentOrHTML, RenderSkipper, HTML, List, KeyedList, batchRenderer, ElementMismatchError, InvalidTargetError, jsFunc, jsObject, Event, jsFuncImpl, wrappedObject, EventListener, MarkupOrChild, Applyer, markupFunc, MarkupList, sliceType, sliceType$1, ptrType, sliceType$2, ptrType$1, sliceType$3, sliceType$4, funcType, arrayType, structType, sliceType$5, sliceType$6, ptrType$2, sliceType$7, ptrType$3, mapType, mapType$1, mapType$2, mapType$3, ptrType$4, mapType$4, funcType$1, ptrType$5, funcType$2, batch, isTest, globalValue, Tag, Text, extractHTML, sameType, copyComponent, copyProps, render, renderComponent, mountUnmount, mount, unmount, requestAnimationFrame, RenderBody, renderIntoNode, SetTitle, AddStylesheet, toLower, global, undefined$1, funcOf, wrapObject, unwrap, init, tinyGoAssertCopier, replaceNode, apply, Style, Property, Class, mustValidateClassNames, containsSpace, Markup;
	reflect = $packages["reflect"];
	js = $packages["syscall/js"];
	Core = $pkg.Core = $newType(0, $kindStruct, "vecty.Core", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, function(prevRenderComponent_, prevRender_, mounted_, unmounted_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.prevRenderComponent = $ifaceNil;
			this.prevRender = $ifaceNil;
			this.mounted = false;
			this.unmounted = false;
			return;
		}
		this.prevRenderComponent = prevRenderComponent_;
		this.prevRender = prevRender_;
		this.mounted = mounted_;
		this.unmounted = unmounted_;
	});
	Component = $pkg.Component = $newType(8, $kindInterface, "vecty.Component", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, null);
	Copier = $pkg.Copier = $newType(8, $kindInterface, "vecty.Copier", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, null);
	Mounter = $pkg.Mounter = $newType(8, $kindInterface, "vecty.Mounter", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, null);
	Unmounter = $pkg.Unmounter = $newType(8, $kindInterface, "vecty.Unmounter", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, null);
	Keyer = $pkg.Keyer = $newType(8, $kindInterface, "vecty.Keyer", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, null);
	ComponentOrHTML = $pkg.ComponentOrHTML = $newType(8, $kindInterface, "vecty.ComponentOrHTML", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, null);
	RenderSkipper = $pkg.RenderSkipper = $newType(8, $kindInterface, "vecty.RenderSkipper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, null);
	HTML = $pkg.HTML = $newType(0, $kindStruct, "vecty.HTML", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, function(node_, namespace_, tag_, text_, innerHTML_, classes_, styles_, dataset_, properties_, attributes_, eventListeners_, children_, key_, keyedChildren_, insertBeforeNode_, lastRenderedChild_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.node = $ifaceNil;
			this.namespace = "";
			this.tag = "";
			this.text = "";
			this.innerHTML = "";
			this.classes = false;
			this.styles = false;
			this.dataset = false;
			this.properties = false;
			this.attributes = false;
			this.eventListeners = sliceType$3.nil;
			this.children = sliceType$4.nil;
			this.key = $ifaceNil;
			this.keyedChildren = false;
			this.insertBeforeNode = $ifaceNil;
			this.lastRenderedChild = ptrType.nil;
			return;
		}
		this.node = node_;
		this.namespace = namespace_;
		this.tag = tag_;
		this.text = text_;
		this.innerHTML = innerHTML_;
		this.classes = classes_;
		this.styles = styles_;
		this.dataset = dataset_;
		this.properties = properties_;
		this.attributes = attributes_;
		this.eventListeners = eventListeners_;
		this.children = children_;
		this.key = key_;
		this.keyedChildren = keyedChildren_;
		this.insertBeforeNode = insertBeforeNode_;
		this.lastRenderedChild = lastRenderedChild_;
	});
	List = $pkg.List = $newType(12, $kindSlice, "vecty.List", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, null);
	KeyedList = $pkg.KeyedList = $newType(0, $kindStruct, "vecty.KeyedList", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, function(html_, key_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.html = ptrType.nil;
			this.key = $ifaceNil;
			return;
		}
		this.html = html_;
		this.key = key_;
	});
	batchRenderer = $pkg.batchRenderer = $newType(0, $kindStruct, "vecty.batchRenderer", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", false, function(batch_, idx_, scheduled_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.batch = sliceType.nil;
			this.idx = false;
			this.scheduled = false;
			return;
		}
		this.batch = batch_;
		this.idx = idx_;
		this.scheduled = scheduled_;
	});
	ElementMismatchError = $pkg.ElementMismatchError = $newType(0, $kindStruct, "vecty.ElementMismatchError", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, function(method_, got_, want_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.method = "";
			this.got = "";
			this.want = "";
			return;
		}
		this.method = method_;
		this.got = got_;
		this.want = want_;
	});
	InvalidTargetError = $pkg.InvalidTargetError = $newType(0, $kindStruct, "vecty.InvalidTargetError", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, function(method_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.method = "";
			return;
		}
		this.method = method_;
	});
	jsFunc = $pkg.jsFunc = $newType(8, $kindInterface, "vecty.jsFunc", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", false, null);
	jsObject = $pkg.jsObject = $newType(8, $kindInterface, "vecty.jsObject", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", false, null);
	Event = $pkg.Event = $newType(0, $kindStruct, "vecty.Event", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, function(Value_, Target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new js.Value.ptr(null, false, arrayType.zero());
			this.Target = new js.Value.ptr(null, false, arrayType.zero());
			return;
		}
		this.Value = Value_;
		this.Target = Target_;
	});
	jsFuncImpl = $pkg.jsFuncImpl = $newType(0, $kindStruct, "vecty.jsFuncImpl", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", false, function(f_, goFunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = new js.Func.ptr(new js.Value.ptr(null, false, arrayType.zero()));
			this.goFunc = $throwNilPointerError;
			return;
		}
		this.f = f_;
		this.goFunc = goFunc_;
	});
	wrappedObject = $pkg.wrappedObject = $newType(0, $kindStruct, "vecty.wrappedObject", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", false, function(j_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.j = new js.Value.ptr(null, false, arrayType.zero());
			return;
		}
		this.j = j_;
	});
	EventListener = $pkg.EventListener = $newType(0, $kindStruct, "vecty.EventListener", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, function(Name_, Listener_, callPreventDefault_, callStopPropagation_, wrapper_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Listener = $throwNilPointerError;
			this.callPreventDefault = false;
			this.callStopPropagation = false;
			this.wrapper = $ifaceNil;
			return;
		}
		this.Name = Name_;
		this.Listener = Listener_;
		this.callPreventDefault = callPreventDefault_;
		this.callStopPropagation = callStopPropagation_;
		this.wrapper = wrapper_;
	});
	MarkupOrChild = $pkg.MarkupOrChild = $newType(8, $kindInterface, "vecty.MarkupOrChild", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, null);
	Applyer = $pkg.Applyer = $newType(8, $kindInterface, "vecty.Applyer", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, null);
	markupFunc = $pkg.markupFunc = $newType(4, $kindFunc, "vecty.markupFunc", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", false, null);
	MarkupList = $pkg.MarkupList = $newType(0, $kindStruct, "vecty.MarkupList", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", true, function(list_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.list = sliceType$7.nil;
			return;
		}
		this.list = list_;
	});
	sliceType = $sliceType(Component);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType = $ptrType(HTML);
	sliceType$2 = $sliceType(Mounter);
	ptrType$1 = $ptrType(EventListener);
	sliceType$3 = $sliceType(ptrType$1);
	sliceType$4 = $sliceType(ComponentOrHTML);
	funcType = $funcType([], [], false);
	arrayType = $arrayType(funcType, 0);
	structType = $structType("", []);
	sliceType$5 = $sliceType(MarkupOrChild);
	sliceType$6 = $sliceType(jsObject);
	ptrType$2 = $ptrType(jsFuncImpl);
	sliceType$7 = $sliceType(Applyer);
	ptrType$3 = $ptrType(Core);
	mapType = $mapType($String, structType);
	mapType$1 = $mapType($String, $String);
	mapType$2 = $mapType($String, $emptyInterface);
	mapType$3 = $mapType($emptyInterface, ComponentOrHTML);
	ptrType$4 = $ptrType(batchRenderer);
	mapType$4 = $mapType(Component, $Int);
	funcType$1 = $funcType([jsObject, sliceType$6], [$emptyInterface], false);
	ptrType$5 = $ptrType(Event);
	funcType$2 = $funcType([ptrType$5], [], false);
	Core.ptr.prototype.Context = function() {
		var c;
		c = this;
		return c;
	};
	Core.prototype.Context = function() { return this.$val.Context(); };
	HTML.ptr.prototype.Key = function() {
		var h;
		h = this;
		return h.key;
	};
	HTML.prototype.Key = function() { return this.$val.Key(); };
	HTML.ptr.prototype.createNode = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
			/* */ if (!(h.tag === "") && !(h.text === "")) { $s = 2; continue; }
			/* */ if (h.tag === "" && !(h.innerHTML === "")) { $s = 3; continue; }
			/* */ if (!(h.tag === "") && h.namespace === "") { $s = 4; continue; }
			/* */ if (!(h.tag === "") && !(h.namespace === "")) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!(h.tag === "") && !(h.text === "")) { */ case 2:
				$panic(new $String("vecty: internal error (only one of HTML.tag or HTML.text may be set)"));
				$s = 7; continue;
			/* } else if (h.tag === "" && !(h.innerHTML === "")) { */ case 3:
				$panic(new $String("vecty: only HTML may have UnsafeHTML attribute"));
				$s = 7; continue;
			/* } else if (!(h.tag === "") && h.namespace === "") { */ case 4:
				_r = global().Get("document"); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = _r.Call("createElement", new sliceType$1([new $String(h.tag)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				h.node = _r$1;
				$s = 7; continue;
			/* } else if (!(h.tag === "") && !(h.namespace === "")) { */ case 5:
				_r$2 = global().Get("document"); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Call("createElementNS", new sliceType$1([new $String(h.namespace), new $String(h.tag)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				h.node = _r$3;
				$s = 7; continue;
			/* } else { */ case 6:
				_r$4 = global().Get("document"); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = _r$4.Call("createTextNode", new sliceType$1([new $String(h.text)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				h.node = _r$5;
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.createNode }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.createNode = function() { return this.$val.createNode(); };
	HTML.ptr.prototype.reconcileText = function(prev) {
		var h, prev, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; h = $f.h; prev = $f.prev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		h.node = prev.node;
		/* */ if (!(h.text === prev.text)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(h.text === prev.text)) { */ case 1:
			$r = h.node.Set("nodeValue", new $String(h.text)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.reconcileText }; } $f.h = h; $f.prev = prev; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.reconcileText = function(prev) { return this.$val.reconcileText(prev); };
	HTML.ptr.prototype.reconcile = function(prev) {
		var $24r, _r, _r$1, h, prev, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; h = $f.h; prev = $f.prev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
			/* */ if (!(prev === ptrType.nil) && h.tag === "" && prev.tag === "") { $s = 2; continue; }
			/* */ if (!(prev === ptrType.nil) && !(h.tag === "") && !(prev.tag === "") && h.tag === prev.tag && h.namespace === prev.namespace) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(prev === ptrType.nil) && h.tag === "" && prev.tag === "") { */ case 2:
				$r = h.reconcileText(prev); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return sliceType$2.nil;
			/* } else if (!(prev === ptrType.nil) && !(h.tag === "") && !(prev.tag === "") && h.tag === prev.tag && h.namespace === prev.namespace) { */ case 3:
				h.node = prev.node;
				$s = 5; continue;
			/* } else { */ case 4:
				if (prev === ptrType.nil) {
					prev = new HTML.ptr($ifaceNil, "", "", "", "", false, false, false, false, false, sliceType$3.nil, sliceType$4.nil, $ifaceNil, false, $ifaceNil, ptrType.nil);
				}
				$r = h.createNode(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
		case 1:
		_r = h.node.Equal(prev.node); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!_r) { */ case 8:
			$r = h.reconcileProperties(new HTML.ptr($ifaceNil, "", "", "", "", false, false, false, false, false, sliceType$3.nil, sliceType$4.nil, $ifaceNil, false, $ifaceNil, ptrType.nil)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 10; continue;
		/* } else { */ case 9:
			$r = h.reconcileProperties(prev); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 10:
		_r$1 = h.reconcileChildren(prev); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 15; case 15: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.reconcile }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f.h = h; $f.prev = prev; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.reconcile = function(prev) { return this.$val.reconcile(prev); };
	HTML.ptr.prototype.reconcileProperties = function(prev) {
		var _1, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _tuple, classList, dataset, h, l, l$1, l$2, name, name$1, name$2, name$3, name$4, ok, oldValue, oldValue$1, prev, style, value, value$1, value$2, value$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _keys$4 = $f._keys$4; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _tuple = $f._tuple; classList = $f.classList; dataset = $f.dataset; h = $f.h; l = $f.l; l$1 = $f.l$1; l$2 = $f.l$2; name = $f.name; name$1 = $f.name$1; name$2 = $f.name$2; name$3 = $f.name$3; name$4 = $f.name$4; ok = $f.ok; oldValue = $f.oldValue; oldValue$1 = $f.oldValue$1; prev = $f.prev; style = $f.style; value = $f.value; value$1 = $f.value$1; value$2 = $f.value$2; value$3 = $f.value$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		_r = h.node.Equal(prev.node); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = h.removeProperties(prev); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		h.tinyGoCannotIterateNilMaps();
		_ref = h.eventListeners;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			l = [l];
			l$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			l[0] = l$1;
			l[0].wrapper = funcOf((function(l) { return function $b(this$1, args) {
				var _r$1, _r$2, _r$3, args, jsEvent, this$1, x, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; args = $f.args; jsEvent = $f.jsEvent; this$1 = $f.this$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				jsEvent = (0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]);
				/* */ if (l[0].callPreventDefault) { $s = 1; continue; }
				/* */ $s = 2; continue;
				/* if (l[0].callPreventDefault) { */ case 1:
					_r$1 = jsEvent.Call("preventDefault", new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
				/* } */ case 2:
				/* */ if (l[0].callStopPropagation) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (l[0].callStopPropagation) { */ case 4:
					_r$2 = jsEvent.Call("stopPropagation", new sliceType$1([])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
				/* } */ case 5:
				_r$3 = jsEvent.Get("target"); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = l[0].Listener(new Event.ptr($clone($assertType(jsEvent, wrappedObject).j, js.Value), $clone($assertType(_r$3, wrappedObject).j, js.Value))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return (x = undefined$1(), new x.constructor.elem(x));
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.args = args; $f.jsEvent = jsEvent; $f.this$1 = this$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
			}; })(l));
			_i++;
		/* } */ $s = 5; continue; case 6:
		_ref$1 = h.properties;
		_i$1 = 0;
		_keys = $keys(_ref$1);
		/* while (true) { */ case 7:
			/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 8; continue; }
			_entry = _ref$1[_keys[_i$1]];
			if (_entry === undefined) {
				_i$1++;
				/* continue; */ $s = 7; continue;
			}
			name = _entry.k;
			value = _entry.v;
			oldValue = $ifaceNil;
				_1 = name;
				/* */ if (_1 === ("value")) { $s = 10; continue; }
				/* */ if (_1 === ("checked")) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_1 === ("value")) { */ case 10:
					_r$1 = h.node.Get("value"); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = _r$1.String(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					oldValue = new $String(_r$2);
					$s = 13; continue;
				/* } else if (_1 === ("checked")) { */ case 11:
					_r$3 = h.node.Get("checked"); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = _r$3.Bool(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					oldValue = new $Bool(_r$4);
					$s = 13; continue;
				/* } else { */ case 12:
					oldValue = (_entry$1 = prev.properties[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : $ifaceNil);
				/* } */ case 13:
			case 9:
			/* */ if (!($interfaceIsEqual(value, oldValue))) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (!($interfaceIsEqual(value, oldValue))) { */ case 18:
				$r = h.node.Set(name, value); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 19:
			_i$1++;
		/* } */ $s = 7; continue; case 8:
		_ref$2 = h.attributes;
		_i$2 = 0;
		_keys$1 = $keys(_ref$2);
		/* while (true) { */ case 21:
			/* if (!(_i$2 < _keys$1.length)) { break; } */ if(!(_i$2 < _keys$1.length)) { $s = 22; continue; }
			_entry$2 = _ref$2[_keys$1[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				/* continue; */ $s = 21; continue;
			}
			name$1 = _entry$2.k;
			value$1 = _entry$2.v;
			/* */ if (!($interfaceIsEqual(value$1, (_entry$3 = prev.attributes[$String.keyFor(name$1)], _entry$3 !== undefined ? _entry$3.v : $ifaceNil)))) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (!($interfaceIsEqual(value$1, (_entry$3 = prev.attributes[$String.keyFor(name$1)], _entry$3 !== undefined ? _entry$3.v : $ifaceNil)))) { */ case 23:
				_r$5 = h.node.Call("setAttribute", new sliceType$1([new $String(name$1), value$1])); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
			/* } */ case 24:
			_i$2++;
		/* } */ $s = 21; continue; case 22:
		_r$6 = h.node.Get("classList"); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		classList = _r$6;
		_ref$3 = h.classes;
		_i$3 = 0;
		_keys$2 = $keys(_ref$3);
		/* while (true) { */ case 27:
			/* if (!(_i$3 < _keys$2.length)) { break; } */ if(!(_i$3 < _keys$2.length)) { $s = 28; continue; }
			_entry$4 = _ref$3[_keys$2[_i$3]];
			if (_entry$4 === undefined) {
				_i$3++;
				/* continue; */ $s = 27; continue;
			}
			name$2 = _entry$4.k;
			_tuple = (_entry$5 = prev.classes[$String.keyFor(name$2)], _entry$5 !== undefined ? [_entry$5.v, true] : [new structType.ptr(), false]);
			ok = _tuple[1];
			/* */ if (!ok) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (!ok) { */ case 29:
				_r$7 = classList.Call("add", new sliceType$1([new $String(name$2)])); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 30:
			_i$3++;
		/* } */ $s = 27; continue; case 28:
		_r$8 = h.node.Get("dataset"); /* */ $s = 32; case 32: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		dataset = _r$8;
		_ref$4 = h.dataset;
		_i$4 = 0;
		_keys$3 = $keys(_ref$4);
		/* while (true) { */ case 33:
			/* if (!(_i$4 < _keys$3.length)) { break; } */ if(!(_i$4 < _keys$3.length)) { $s = 34; continue; }
			_entry$6 = _ref$4[_keys$3[_i$4]];
			if (_entry$6 === undefined) {
				_i$4++;
				/* continue; */ $s = 33; continue;
			}
			name$3 = _entry$6.k;
			value$2 = _entry$6.v;
			/* */ if (!(value$2 === (_entry$7 = prev.dataset[$String.keyFor(name$3)], _entry$7 !== undefined ? _entry$7.v : ""))) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (!(value$2 === (_entry$7 = prev.dataset[$String.keyFor(name$3)], _entry$7 !== undefined ? _entry$7.v : ""))) { */ case 35:
				$r = dataset.Set(name$3, new $String(value$2)); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 36:
			_i$4++;
		/* } */ $s = 33; continue; case 34:
		_r$9 = h.node.Get("style"); /* */ $s = 38; case 38: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		style = _r$9;
		_ref$5 = h.styles;
		_i$5 = 0;
		_keys$4 = $keys(_ref$5);
		/* while (true) { */ case 39:
			/* if (!(_i$5 < _keys$4.length)) { break; } */ if(!(_i$5 < _keys$4.length)) { $s = 40; continue; }
			_entry$8 = _ref$5[_keys$4[_i$5]];
			if (_entry$8 === undefined) {
				_i$5++;
				/* continue; */ $s = 39; continue;
			}
			name$4 = _entry$8.k;
			value$3 = _entry$8.v;
			oldValue$1 = (_entry$9 = prev.styles[$String.keyFor(name$4)], _entry$9 !== undefined ? _entry$9.v : "");
			/* */ if (!(value$3 === oldValue$1)) { $s = 41; continue; }
			/* */ $s = 42; continue;
			/* if (!(value$3 === oldValue$1)) { */ case 41:
				_r$10 = style.Call("setProperty", new sliceType$1([new $String(name$4), new $String(value$3)])); /* */ $s = 43; case 43: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
			/* } */ case 42:
			_i$5++;
		/* } */ $s = 39; continue; case 40:
		_ref$6 = h.eventListeners;
		_i$6 = 0;
		/* while (true) { */ case 44:
			/* if (!(_i$6 < _ref$6.$length)) { break; } */ if(!(_i$6 < _ref$6.$length)) { $s = 45; continue; }
			l$2 = ((_i$6 < 0 || _i$6 >= _ref$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$6.$array[_ref$6.$offset + _i$6]);
			_r$11 = h.node.Call("addEventListener", new sliceType$1([new $String(l$2.Name), l$2.wrapper])); /* */ $s = 46; case 46: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
			_i$6++;
		/* } */ $s = 44; continue; case 45:
		/* */ if (!(h.innerHTML === prev.innerHTML)) { $s = 47; continue; }
		/* */ $s = 48; continue;
		/* if (!(h.innerHTML === prev.innerHTML)) { */ case 47:
			$r = h.node.Set("innerHTML", new $String(h.innerHTML)); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 48:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.reconcileProperties }; } $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._keys$4 = _keys$4; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._tuple = _tuple; $f.classList = classList; $f.dataset = dataset; $f.h = h; $f.l = l; $f.l$1 = l$1; $f.l$2 = l$2; $f.name = name; $f.name$1 = name$1; $f.name$2 = name$2; $f.name$3 = name$3; $f.name$4 = name$4; $f.ok = ok; $f.oldValue = oldValue; $f.oldValue$1 = oldValue$1; $f.prev = prev; $f.style = style; $f.value = value; $f.value$1 = value$1; $f.value$2 = value$2; $f.value$3 = value$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.reconcileProperties = function(prev) { return this.$val.reconcileProperties(prev); };
	HTML.ptr.prototype.removeProperties = function(prev) {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, classList, dataset, h, l, name, name$1, name$2, name$3, name$4, ok, ok$1, ok$2, ok$3, ok$4, prev, style, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _keys$4 = $f._keys$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; classList = $f.classList; dataset = $f.dataset; h = $f.h; l = $f.l; name = $f.name; name$1 = $f.name$1; name$2 = $f.name$2; name$3 = $f.name$3; name$4 = $f.name$4; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; prev = $f.prev; style = $f.style; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		_ref = prev.properties;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			name = _entry.k;
			_tuple = (_entry$1 = h.properties[$String.keyFor(name)], _entry$1 !== undefined ? [_entry$1.v, true] : [$ifaceNil, false]);
			ok = _tuple[1];
			/* */ if (!ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!ok) { */ case 3:
				$r = h.node.Delete(name); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = prev.attributes;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		/* while (true) { */ case 6:
			/* if (!(_i$1 < _keys$1.length)) { break; } */ if(!(_i$1 < _keys$1.length)) { $s = 7; continue; }
			_entry$2 = _ref$1[_keys$1[_i$1]];
			if (_entry$2 === undefined) {
				_i$1++;
				/* continue; */ $s = 6; continue;
			}
			name$1 = _entry$2.k;
			_tuple$1 = (_entry$3 = h.attributes[$String.keyFor(name$1)], _entry$3 !== undefined ? [_entry$3.v, true] : [$ifaceNil, false]);
			ok$1 = _tuple$1[1];
			/* */ if (!ok$1) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!ok$1) { */ case 8:
				_r = h.node.Call("removeAttribute", new sliceType$1([new $String(name$1)])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
			/* } */ case 9:
			_i$1++;
		/* } */ $s = 6; continue; case 7:
		_r$1 = h.node.Get("classList"); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		classList = _r$1;
		_ref$2 = prev.classes;
		_i$2 = 0;
		_keys$2 = $keys(_ref$2);
		/* while (true) { */ case 12:
			/* if (!(_i$2 < _keys$2.length)) { break; } */ if(!(_i$2 < _keys$2.length)) { $s = 13; continue; }
			_entry$4 = _ref$2[_keys$2[_i$2]];
			if (_entry$4 === undefined) {
				_i$2++;
				/* continue; */ $s = 12; continue;
			}
			name$2 = _entry$4.k;
			_tuple$2 = (_entry$5 = h.classes[$String.keyFor(name$2)], _entry$5 !== undefined ? [_entry$5.v, true] : [new structType.ptr(), false]);
			ok$2 = _tuple$2[1];
			/* */ if (!ok$2) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!ok$2) { */ case 14:
				_r$2 = classList.Call("remove", new sliceType$1([new $String(name$2)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
			/* } */ case 15:
			_i$2++;
		/* } */ $s = 12; continue; case 13:
		_r$3 = h.node.Get("dataset"); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		dataset = _r$3;
		_ref$3 = prev.dataset;
		_i$3 = 0;
		_keys$3 = $keys(_ref$3);
		/* while (true) { */ case 18:
			/* if (!(_i$3 < _keys$3.length)) { break; } */ if(!(_i$3 < _keys$3.length)) { $s = 19; continue; }
			_entry$6 = _ref$3[_keys$3[_i$3]];
			if (_entry$6 === undefined) {
				_i$3++;
				/* continue; */ $s = 18; continue;
			}
			name$3 = _entry$6.k;
			_tuple$3 = (_entry$7 = h.dataset[$String.keyFor(name$3)], _entry$7 !== undefined ? [_entry$7.v, true] : ["", false]);
			ok$3 = _tuple$3[1];
			/* */ if (!ok$3) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!ok$3) { */ case 20:
				$r = dataset.Delete(name$3); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 21:
			_i$3++;
		/* } */ $s = 18; continue; case 19:
		_r$4 = h.node.Get("style"); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		style = _r$4;
		_ref$4 = prev.styles;
		_i$4 = 0;
		_keys$4 = $keys(_ref$4);
		/* while (true) { */ case 24:
			/* if (!(_i$4 < _keys$4.length)) { break; } */ if(!(_i$4 < _keys$4.length)) { $s = 25; continue; }
			_entry$8 = _ref$4[_keys$4[_i$4]];
			if (_entry$8 === undefined) {
				_i$4++;
				/* continue; */ $s = 24; continue;
			}
			name$4 = _entry$8.k;
			_tuple$4 = (_entry$9 = h.styles[$String.keyFor(name$4)], _entry$9 !== undefined ? [_entry$9.v, true] : ["", false]);
			ok$4 = _tuple$4[1];
			/* */ if (!ok$4) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (!ok$4) { */ case 26:
				_r$5 = style.Call("removeProperty", new sliceType$1([new $String(name$4)])); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
			/* } */ case 27:
			_i$4++;
		/* } */ $s = 24; continue; case 25:
		_ref$5 = prev.eventListeners;
		_i$5 = 0;
		/* while (true) { */ case 29:
			/* if (!(_i$5 < _ref$5.$length)) { break; } */ if(!(_i$5 < _ref$5.$length)) { $s = 30; continue; }
			l = ((_i$5 < 0 || _i$5 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$5]);
			_r$6 = h.node.Call("removeEventListener", new sliceType$1([new $String(l.Name), l.wrapper])); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			$r = l.wrapper.Release(); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$5++;
		/* } */ $s = 29; continue; case 30:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.removeProperties }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._keys$4 = _keys$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.classList = classList; $f.dataset = dataset; $f.h = h; $f.l = l; $f.name = name; $f.name$1 = name$1; $f.name$2 = name$2; $f.name$3 = name$3; $f.name$4 = name$4; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.prev = prev; $f.style = style; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.removeProperties = function(prev) { return this.$val.removeProperties(prev); };
	HTML.ptr.prototype.reconcileChildren = function(prev) {
		var _arg, _arg$1, _arg$2, _arg$3, _entry, _entry$1, _entry$2, _i, _i$1, _key, _key$1, _keys, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _v, _v$1, _v$2, _v$3, c, exists, h, hasKeyedChildren, i, i$1, insertBeforeKeyedNode, isKeyer, isList, keyer, m, m$1, m$2, mounters, mounters$1, new$1, nextChild, nextChildComponent, nextChildList, nextChildList$1, nextChildRender, nextChildRender$1, nextKey, ok, ok$1, ok$2, ok$3, ok$4, ok$5, ok$6, ok$7, pendingMounts, prev, prevChild, prevChildComponent, prevChildList, prevChildRender, prevChildren, prevHadKeyedChildren, prevKeyedChild, skip, skip$1, stableKey, v, v$1, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; c = $f.c; exists = $f.exists; h = $f.h; hasKeyedChildren = $f.hasKeyedChildren; i = $f.i; i$1 = $f.i$1; insertBeforeKeyedNode = $f.insertBeforeKeyedNode; isKeyer = $f.isKeyer; isList = $f.isList; keyer = $f.keyer; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; mounters = $f.mounters; mounters$1 = $f.mounters$1; new$1 = $f.new$1; nextChild = $f.nextChild; nextChildComponent = $f.nextChildComponent; nextChildList = $f.nextChildList; nextChildList$1 = $f.nextChildList$1; nextChildRender = $f.nextChildRender; nextChildRender$1 = $f.nextChildRender$1; nextKey = $f.nextKey; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; ok$5 = $f.ok$5; ok$6 = $f.ok$6; ok$7 = $f.ok$7; pendingMounts = $f.pendingMounts; prev = $f.prev; prevChild = $f.prevChild; prevChildComponent = $f.prevChildComponent; prevChildList = $f.prevChildList; prevChildRender = $f.prevChildRender; prevChildren = $f.prevChildren; prevHadKeyedChildren = $f.prevHadKeyedChildren; prevKeyedChild = $f.prevKeyedChild; skip = $f.skip; skip$1 = $f.skip$1; stableKey = $f.stableKey; v = $f.v; v$1 = $f.v$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pendingMounts = sliceType$2.nil;
		h = this;
		hasKeyedChildren = $keys(h.keyedChildren).length > 0;
		prevHadKeyedChildren = $keys(prev.keyedChildren).length > 0;
		_ref = h.children;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			nextChild = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_ref$1 = nextChild;
			if ($assertType(_ref$1, ptrType, true)[1]) {
				v = _ref$1.$val;
				if (v === ptrType.nil) {
					nextChild = $ifaceNil;
					(x = h.children, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = nextChild));
				}
			} else if ($assertType(_ref$1, List, true)[1]) {
				v$1 = _ref$1.$val;
				nextChild = (x$1 = new KeyedList.ptr(new HTML.ptr($ifaceNil, "", "", "", "", false, false, false, false, false, sliceType$3.nil, $subslice(new sliceType$4(v$1.$array), v$1.$offset, v$1.$offset + v$1.$length), $ifaceNil, false, $ifaceNil, ptrType.nil), $ifaceNil), new x$1.constructor.elem(x$1));
				(x$2 = h.children, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i] = nextChild));
			}
			_r = h.node.Equal(prev.node); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			new$1 = !_r;
			nextKey = $ifaceNil;
			_tuple = $assertType(nextChild, Keyer, true);
			keyer = _tuple[0];
			isKeyer = _tuple[1];
			if (hasKeyedChildren && !isKeyer) {
				$panic(new $String("vecty: all siblings must have keys when using keyed elements"));
			}
			/* */ if (isKeyer) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (isKeyer) { */ case 4:
				_r$1 = keyer.Key(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				nextKey = _r$1;
				if (hasKeyedChildren && $interfaceIsEqual(nextKey, $ifaceNil)) {
					$panic(new $String("vecty: all siblings must have keys when using keyed elements"));
				}
				if (!($interfaceIsEqual(nextKey, $ifaceNil))) {
					if (h.keyedChildren === false) {
						h.keyedChildren = {};
					}
					_tuple$1 = (_entry = h.keyedChildren[$emptyInterface.keyFor(nextKey)], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
					exists = _tuple$1[1];
					if (exists) {
						$panic(new $String("vecty: duplicate sibling key"));
					}
					_key = nextKey; (h.keyedChildren || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: nextChild };
					hasKeyedChildren = true;
				}
			/* } */ case 5:
			/* */ if ((i >= prev.children.$length && !hasKeyedChildren) || new$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((i >= prev.children.$length && !hasKeyedChildren) || new$1) { */ case 7:
				_tuple$2 = $assertType(nextChild, KeyedList, true);
				nextChildList = $clone(_tuple$2[0], KeyedList);
				ok = _tuple$2[1];
				/* */ if (ok) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (ok) { */ case 9:
					_arg = pendingMounts;
					_r$2 = $clone(nextChildList, KeyedList).reconcile(h, $ifaceNil); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg$1 = _r$2;
					pendingMounts = $appendSlice(_arg, _arg$1);
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 10:
				_r$3 = render(nextChild, $ifaceNil); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$3 = _r$3;
				nextChildRender = _tuple$3[0];
				skip = _tuple$3[1];
				mounters = _tuple$3[2];
				if (skip || nextChildRender === ptrType.nil) {
					_i++;
					/* continue; */ $s = 1; continue;
				}
				pendingMounts = $appendSlice(pendingMounts, mounters);
				_tuple$4 = $assertType(nextChild, Mounter, true);
				m = _tuple$4[0];
				ok$1 = _tuple$4[1];
				if (ok$1) {
					pendingMounts = $append(pendingMounts, m);
				}
				h.lastRenderedChild = nextChildRender;
				$r = h.insertBefore(h.insertBeforeNode, nextChildRender); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			prevChild = $ifaceNil;
			if (prev.children.$length > i) {
				prevChild = (x$3 = prev.children, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i]));
			}
			if (hasKeyedChildren) {
				_tuple$5 = (_entry$1 = prev.keyedChildren[$emptyInterface.keyFor(nextKey)], _entry$1 !== undefined ? [_entry$1.v, true] : [$ifaceNil, false]);
				prevKeyedChild = _tuple$5[0];
				ok$2 = _tuple$5[1];
				if (ok$2) {
					prevChild = prevKeyedChild;
				} else {
					prevChild = $ifaceNil;
				}
			}
			prevChildRender = ptrType.nil;
			_tuple$6 = $assertType(prevChild, KeyedList, true);
			isList = _tuple$6[1];
			/* */ if (!isList) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!isList) { */ case 14:
				_r$4 = extractHTML(prevChild); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				prevChildRender = _r$4;
			/* } */ case 15:
			/* */ if (prevChildRender === ptrType.nil && $interfaceIsEqual(h.insertBeforeNode, $ifaceNil)) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (prevChildRender === ptrType.nil && $interfaceIsEqual(h.insertBeforeNode, $ifaceNil)) { */ case 17:
				/* */ if (h.lastRenderedChild === ptrType.nil) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (h.lastRenderedChild === ptrType.nil) { */ case 19:
					_r$5 = h.firstChild(); /* */ $s = 22; case 22: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					h.insertBeforeNode = _r$5;
					$s = 21; continue;
				/* } else { */ case 20:
					_r$6 = h.lastRenderedChild.nextSibling(); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					h.insertBeforeNode = _r$6;
				/* } */ case 21:
			/* } */ case 18:
			if (!(!(prevChildRender === ptrType.nil))) { _v = false; $s = 26; continue s; }
			_r$7 = prevChildRender.node.Equal(h.insertBeforeNode); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_v = _r$7; case 26:
			/* */ if (_v) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (_v) { */ case 24:
				_r$8 = h.insertBeforeNode.Get("nextSibling"); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				h.insertBeforeNode = _r$8;
			/* } */ case 25:
			_tuple$7 = $assertType(nextChild, KeyedList, true);
			nextChildList$1 = $clone(_tuple$7[0], KeyedList);
			ok$3 = _tuple$7[1];
			/* */ if (ok$3) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (ok$3) { */ case 29:
				_arg$2 = pendingMounts;
				_r$9 = $clone(nextChildList$1, KeyedList).reconcile(h, prevChild); /* */ $s = 31; case 31: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_arg$3 = _r$9;
				pendingMounts = $appendSlice(_arg$2, _arg$3);
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 30:
			_tuple$8 = $assertType(prevChild, KeyedList, true);
			prevChildList = $clone(_tuple$8[0], KeyedList);
			ok$4 = _tuple$8[1];
			/* */ if (ok$4) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (ok$4) { */ case 32:
				$r = $clone(prevChildList, KeyedList).remove(h); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				prevChild = $ifaceNil;
			/* } */ case 33:
			insertBeforeKeyedNode = $ifaceNil;
			stableKey = false;
			/* */ if (hasKeyedChildren) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (hasKeyedChildren) { */ case 35:
				_r$10 = h.lastRenderedChild.nextSibling(); /* */ $s = 37; case 37: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				insertBeforeKeyedNode = _r$10;
				if (!(!(prevChildRender === ptrType.nil))) { _v$1 = false; $s = 40; continue s; }
				_r$11 = prevChildRender.node.Equal(insertBeforeKeyedNode); /* */ $s = 41; case 41: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_v$1 = _r$11; case 40:
				/* */ if (_v$1) { $s = 38; continue; }
				/* */ $s = 39; continue;
				/* if (_v$1) { */ case 38:
					stableKey = true;
					insertBeforeKeyedNode = $ifaceNil;
				/* } */ case 39:
			/* } */ case 36:
			_r$12 = render(nextChild, prevChild); /* */ $s = 42; case 42: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_tuple$9 = _r$12;
			nextChildRender$1 = _tuple$9[0];
			skip$1 = _tuple$9[1];
			mounters$1 = _tuple$9[2];
			if (!(nextChildRender$1 === ptrType.nil) && !(prevChildRender === ptrType.nil) && nextChildRender$1 === prevChildRender) {
				$panic(new $String("vecty: next child render must not equal previous child render (did the child Render illegally return a stored render variable?)"));
			}
			if (!(nextChildRender$1 === ptrType.nil)) {
				h.lastRenderedChild = nextChildRender$1;
			}
			_tuple$10 = $assertType(prevChild, Component, true);
			prevChildComponent = _tuple$10[0];
			ok$5 = _tuple$10[1];
			if (ok$5) {
				_tuple$11 = $assertType(nextChild, Component, true);
				nextChildComponent = _tuple$11[0];
				ok$6 = _tuple$11[1];
				if (ok$6 && sameType(prevChildComponent, nextChildComponent)) {
					(x$4 = h.children, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i] = prevChild));
					nextChild = prevChild;
					if (hasKeyedChildren) {
						_key$1 = nextKey; (h.keyedChildren || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: prevChild };
					}
				}
			}
			if (skip$1) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			pendingMounts = $appendSlice(pendingMounts, mounters$1);
				/* */ if (nextChildRender$1 === ptrType.nil && prevChildRender === ptrType.nil) { $s = 44; continue; }
				/* */ if (!(nextChildRender$1 === ptrType.nil) && !(prevChildRender === ptrType.nil)) { $s = 45; continue; }
				/* */ if (nextChildRender$1 === ptrType.nil && !(prevChildRender === ptrType.nil)) { $s = 46; continue; }
				/* */ if (!(nextChildRender$1 === ptrType.nil) && prevChildRender === ptrType.nil) { $s = 47; continue; }
				/* */ $s = 48; continue;
				/* if (nextChildRender$1 === ptrType.nil && prevChildRender === ptrType.nil) { */ case 44:
					_i++;
					/* continue; */ $s = 1; continue;
					$s = 49; continue;
				/* } else if (!(nextChildRender$1 === ptrType.nil) && !(prevChildRender === ptrType.nil)) { */ case 45:
					_r$13 = mountUnmount(nextChild, prevChild); /* */ $s = 50; case 50: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					m$1 = _r$13;
					if (!($interfaceIsEqual(m$1, $ifaceNil))) {
						pendingMounts = $append(pendingMounts, m$1);
					}
					if (!(hasKeyedChildren)) { _v$2 = false; $s = 53; continue s; }
					if (!(!(prevChildRender === ptrType.nil))) { _v$3 = false; $s = 54; continue s; }
					_r$14 = prevChildRender.node.Equal(nextChildRender$1.node); /* */ $s = 55; case 55: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_v$3 = _r$14; case 54:
					_v$2 = _v$3; case 53:
					/* */ if (_v$2) { $s = 51; continue; }
					/* */ $s = 52; continue;
					/* if (_v$2) { */ case 51:
						delete prev.keyedChildren[$emptyInterface.keyFor(nextKey)];
					/* } */ case 52:
					/* */ if (!hasKeyedChildren || stableKey) { $s = 56; continue; }
					/* */ $s = 57; continue;
					/* if (!hasKeyedChildren || stableKey) { */ case 56:
						$r = replaceNode(nextChildRender$1.node, prevChildRender.node); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
						/* continue; */ $s = 1; continue;
					/* } */ case 57:
					/* */ if (!($interfaceIsEqual(insertBeforeKeyedNode, $ifaceNil))) { $s = 59; continue; }
					/* */ $s = 60; continue;
					/* if (!($interfaceIsEqual(insertBeforeKeyedNode, $ifaceNil))) { */ case 59:
						$r = h.insertBefore(insertBeforeKeyedNode, nextChildRender$1); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
						/* continue; */ $s = 1; continue;
					/* } */ case 60:
					$r = h.insertBefore(h.insertBeforeNode, nextChildRender$1); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 49; continue;
				/* } else if (nextChildRender$1 === ptrType.nil && !(prevChildRender === ptrType.nil)) { */ case 46:
					$r = h.removeChild(prevChildRender); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 49; continue;
				/* } else if (!(nextChildRender$1 === ptrType.nil) && prevChildRender === ptrType.nil) { */ case 47:
					_tuple$12 = $assertType(nextChild, Mounter, true);
					m$2 = _tuple$12[0];
					ok$7 = _tuple$12[1];
					if (ok$7) {
						pendingMounts = $append(pendingMounts, m$2);
					}
					/* */ if (!($interfaceIsEqual(insertBeforeKeyedNode, $ifaceNil))) { $s = 64; continue; }
					/* */ $s = 65; continue;
					/* if (!($interfaceIsEqual(insertBeforeKeyedNode, $ifaceNil))) { */ case 64:
						$r = h.insertBefore(insertBeforeKeyedNode, nextChildRender$1); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
						/* continue; */ $s = 1; continue;
					/* } */ case 65:
					$r = h.insertBefore(h.insertBeforeNode, nextChildRender$1); /* */ $s = 67; case 67: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 49; continue;
				/* } else { */ case 48:
					$panic(new $String("vecty: internal error (unexpected switch state)"));
				/* } */ case 49:
			case 43:
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ if (prevHadKeyedChildren && hasKeyedChildren) { $s = 68; continue; }
		/* */ $s = 69; continue;
		/* if (prevHadKeyedChildren && hasKeyedChildren) { */ case 68:
			prevChildren = $makeSlice(sliceType$4, $keys(prev.keyedChildren).length);
			i$1 = 0;
			_ref$2 = prev.keyedChildren;
			_i$1 = 0;
			_keys = $keys(_ref$2);
			while (true) {
				if (!(_i$1 < _keys.length)) { break; }
				_entry$2 = _ref$2[_keys[_i$1]];
				if (_entry$2 === undefined) {
					_i$1++;
					continue;
				}
				c = _entry$2.v;
				((i$1 < 0 || i$1 >= prevChildren.$length) ? ($throwRuntimeError("index out of range"), undefined) : prevChildren.$array[prevChildren.$offset + i$1] = c);
				i$1 = i$1 + (1) >> 0;
				_i$1++;
			}
			$r = h.removeChildren(prevChildren); /* */ $s = 70; case 70: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			pendingMounts = pendingMounts;
			$s = -1; return pendingMounts;
		/* } */ case 69:
		/* */ if (prev.children.$length > h.children.$length) { $s = 71; continue; }
		/* */ $s = 72; continue;
		/* if (prev.children.$length > h.children.$length) { */ case 71:
			$r = h.removeChildren($subslice(prev.children, h.children.$length)); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 72:
		pendingMounts = pendingMounts;
		$s = -1; return pendingMounts;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.reconcileChildren }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.c = c; $f.exists = exists; $f.h = h; $f.hasKeyedChildren = hasKeyedChildren; $f.i = i; $f.i$1 = i$1; $f.insertBeforeKeyedNode = insertBeforeKeyedNode; $f.isKeyer = isKeyer; $f.isList = isList; $f.keyer = keyer; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.mounters = mounters; $f.mounters$1 = mounters$1; $f.new$1 = new$1; $f.nextChild = nextChild; $f.nextChildComponent = nextChildComponent; $f.nextChildList = nextChildList; $f.nextChildList$1 = nextChildList$1; $f.nextChildRender = nextChildRender; $f.nextChildRender$1 = nextChildRender$1; $f.nextKey = nextKey; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.ok$5 = ok$5; $f.ok$6 = ok$6; $f.ok$7 = ok$7; $f.pendingMounts = pendingMounts; $f.prev = prev; $f.prevChild = prevChild; $f.prevChildComponent = prevChildComponent; $f.prevChildList = prevChildList; $f.prevChildRender = prevChildRender; $f.prevChildren = prevChildren; $f.prevHadKeyedChildren = prevHadKeyedChildren; $f.prevKeyedChild = prevKeyedChild; $f.skip = skip; $f.skip$1 = skip$1; $f.stableKey = stableKey; $f.v = v; $f.v$1 = v$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.reconcileChildren = function(prev) { return this.$val.reconcileChildren(prev); };
	HTML.ptr.prototype.removeChildren = function(prevChildren) {
		var _i, _r, _ref, _tuple, h, ok, prevChild, prevChildList, prevChildRender, prevChildren, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; h = $f.h; ok = $f.ok; prevChild = $f.prevChild; prevChildList = $f.prevChildList; prevChildRender = $f.prevChildRender; prevChildren = $f.prevChildren; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		_ref = prevChildren;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			prevChild = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tuple = $assertType(prevChild, KeyedList, true);
			prevChildList = $clone(_tuple[0], KeyedList);
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				$r = $clone(prevChildList, KeyedList).remove(h); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r = extractHTML(prevChild); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			prevChildRender = _r;
			if (prevChildRender === ptrType.nil) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			$r = h.removeChild(prevChildRender); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.removeChildren }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.h = h; $f.ok = ok; $f.prevChild = prevChild; $f.prevChildList = prevChildList; $f.prevChildRender = prevChildRender; $f.prevChildren = prevChildren; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.removeChildren = function(prevChildren) { return this.$val.removeChildren(prevChildren); };
	HTML.ptr.prototype.firstChild = function() {
		var $24r, _r, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		if (h === ptrType.nil || $interfaceIsEqual(h.node, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		_r = h.node.Get("firstChild"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.firstChild }; } $f.$24r = $24r; $f._r = _r; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.firstChild = function() { return this.$val.firstChild(); };
	HTML.ptr.prototype.nextSibling = function() {
		var $24r, _r, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		if (h === ptrType.nil || $interfaceIsEqual(h.node, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		_r = h.node.Get("nextSibling"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.nextSibling }; } $f.$24r = $24r; $f._r = _r; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.nextSibling = function() { return this.$val.nextSibling(); };
	HTML.ptr.prototype.removeChild = function(child) {
		var _r, _r$1, _r$2, _r$3, _v, child, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _v = $f._v; child = $f.child; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		if (!(!($interfaceIsEqual(h.insertBeforeNode, $ifaceNil)))) { _v = false; $s = 3; continue s; }
		_r = h.insertBeforeNode.Equal(child.node); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_r$1 = h.insertBeforeNode.Get("nextSibling"); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			h.insertBeforeNode = _r$1;
		/* } */ case 2:
		$r = unmount(child); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($interfaceIsEqual(child.node, $ifaceNil)) {
			$s = -1; return;
		}
		_r$2 = child.node.Get("parentNode"); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.Call("removeChild", new sliceType$1([child.node])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.removeChild }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._v = _v; $f.child = child; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.removeChild = function(child) { return this.$val.removeChild(child); };
	HTML.ptr.prototype.appendChild = function(child) {
		var _r, child, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; child = $f.child; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		_r = h.node.Call("appendChild", new sliceType$1([child.node])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.appendChild }; } $f._r = _r; $f.child = child; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.appendChild = function(child) { return this.$val.appendChild(child); };
	HTML.ptr.prototype.insertBefore = function(node, child) {
		var _r, child, h, node, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; child = $f.child; h = $f.h; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		/* */ if ($interfaceIsEqual(node, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(node, $ifaceNil)) { */ case 1:
			$r = h.appendChild(child); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		_r = h.node.Call("insertBefore", new sliceType$1([child.node, node])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTML.ptr.prototype.insertBefore }; } $f._r = _r; $f.child = child; $f.h = h; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.prototype.insertBefore = function(node, child) { return this.$val.insertBefore(node, child); };
	List.prototype.WithKey = function(key) {
		var key, l;
		l = this;
		return new KeyedList.ptr(new HTML.ptr($ifaceNil, "", "", "", "", false, false, false, false, false, sliceType$3.nil, $subslice(new sliceType$4(l.$array), l.$offset, l.$offset + l.$length), $ifaceNil, false, $ifaceNil, ptrType.nil), key);
	};
	$ptrType(List).prototype.WithKey = function(key) { return this.$get().WithKey(key); };
	KeyedList.ptr.prototype.Key = function() {
		var l;
		l = this;
		return l.key;
	};
	KeyedList.prototype.Key = function() { return this.$val.Key(); };
	KeyedList.ptr.prototype.reconcile = function(parent, prevChild) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _tuple, _v, keyer, l, ok, parent, pendingMounts, prev, prevChild, v, v$1, v$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; keyer = $f.keyer; l = $f.l; ok = $f.ok; parent = $f.parent; pendingMounts = $f.pendingMounts; prev = $f.prev; prevChild = $f.prevChild; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pendingMounts = sliceType$2.nil;
		l = this;
		l.html.node = parent.node;
		l.html.insertBeforeNode = parent.insertBeforeNode;
		l.html.lastRenderedChild = parent.lastRenderedChild;
		_ref = prevChild;
		/* */ if ($assertType(_ref, KeyedList, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType, true)[1] || $assertType(_ref, Component, true)[1] || _ref === $ifaceNil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, KeyedList, true)[1]) { */ case 1:
			v = $clone(_ref.$val, KeyedList);
			_r = l.html.reconcileChildren(v.html); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			pendingMounts = _r;
			$s = 4; continue;
		/* } else if ($assertType(_ref, ptrType, true)[1] || $assertType(_ref, Component, true)[1] || _ref === $ifaceNil) { */ case 2:
			v$1 = _ref;
			/* */ if ($interfaceIsEqual(v$1, $ifaceNil)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($interfaceIsEqual(v$1, $ifaceNil)) { */ case 6:
				_r$1 = l.html.reconcileChildren(new HTML.ptr(parent.node, "", "", "", "", false, false, false, false, false, sliceType$3.nil, sliceType$4.nil, $ifaceNil, false, $ifaceNil, ptrType.nil)); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				pendingMounts = _r$1;
				$s = 8; continue;
			/* } else { */ case 7:
				prev = new HTML.ptr(parent.node, "", "", "", "", false, false, false, false, false, sliceType$3.nil, new sliceType$4([prevChild]), $ifaceNil, false, $ifaceNil, ptrType.nil);
				_tuple = $assertType(prevChild, Keyer, true);
				keyer = _tuple[0];
				ok = _tuple[1];
				if (!(ok)) { _v = false; $s = 12; continue s; }
				_r$2 = keyer.Key(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = !($interfaceIsEqual(_r$2, $ifaceNil)); case 12:
				/* */ if (_v) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v) { */ case 10:
					_r$3 = keyer.Key(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					prev.keyedChildren = $makeMap($emptyInterface.keyFor, [{ k: _r$3, v: prevChild }]);
				/* } */ case 11:
				_r$4 = l.html.reconcileChildren(prev); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				pendingMounts = _r$4;
			/* } */ case 8:
			$s = 4; continue;
		/* } else { */ case 3:
			v$2 = _ref;
			_r$5 = reflect.TypeOf(v$2).String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$panic(new $String("vecty: internal error (unexpected ComponentOrHTML type " + _r$5 + ")"));
		/* } */ case 4:
		if (!($interfaceIsEqual(parent.insertBeforeNode, $ifaceNil))) {
			parent.insertBeforeNode = l.html.insertBeforeNode;
		}
		if (!(l.html.lastRenderedChild === ptrType.nil)) {
			parent.lastRenderedChild = l.html.lastRenderedChild;
		}
		pendingMounts = pendingMounts;
		$s = -1; return pendingMounts;
		/* */ } return; } if ($f === undefined) { $f = { $blk: KeyedList.ptr.prototype.reconcile }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f.keyer = keyer; $f.l = l; $f.ok = ok; $f.parent = parent; $f.pendingMounts = pendingMounts; $f.prev = prev; $f.prevChild = prevChild; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	KeyedList.prototype.reconcile = function(parent, prevChild) { return this.$val.reconcile(parent, prevChild); };
	KeyedList.ptr.prototype.remove = function(parent) {
		var l, parent, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; parent = $f.parent; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		l.html.node = parent.node;
		l.html.insertBeforeNode = parent.insertBeforeNode;
		$r = l.html.removeChildren(l.html.children); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(parent.insertBeforeNode, $ifaceNil))) {
			parent.insertBeforeNode = l.html.insertBeforeNode;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: KeyedList.ptr.prototype.remove }; } $f.l = l; $f.parent = parent; $f.$s = $s; $f.$r = $r; return $f;
	};
	KeyedList.prototype.remove = function(parent) { return this.$val.remove(parent); };
	Tag = function(tag, m) {
		var _i, _ref, h, m, m$1, tag, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; h = $f.h; m = $f.m; m$1 = $f.m$1; tag = $f.tag; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = new HTML.ptr($ifaceNil, "", tag, "", "", false, false, false, false, false, sliceType$3.nil, sliceType$4.nil, $ifaceNil, false, $ifaceNil, ptrType.nil);
		_ref = m;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			m$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = apply(m$1, h); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return h;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tag }; } $f._i = _i; $f._ref = _ref; $f.h = h; $f.m = m; $f.m$1 = m$1; $f.tag = tag; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Tag = Tag;
	Text = function(text, m) {
		var _i, _ref, h, m, m$1, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; h = $f.h; m = $f.m; m$1 = $f.m$1; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = new HTML.ptr($ifaceNil, "", "", text, "", false, false, false, false, false, sliceType$3.nil, sliceType$4.nil, $ifaceNil, false, $ifaceNil, ptrType.nil);
		_ref = m;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			m$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = apply(m$1, h); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return h;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Text }; } $f._i = _i; $f._ref = _ref; $f.h = h; $f.m = m; $f.m$1 = m$1; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Text = Text;
	batchRenderer.ptr.prototype.render = function(startTime) {
		var _i, _i$1, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _tuple, avgRenderTime, b, budgetRemaining, c, c$1, elapsed, i, i$1, nextHTML, pending, pendingMounts, prevHTML, skip, startTime, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; avgRenderTime = $f.avgRenderTime; b = $f.b; budgetRemaining = $f.budgetRemaining; c = $f.c; c$1 = $f.c$1; elapsed = $f.elapsed; i = $f.i; i$1 = $f.i$1; nextHTML = $f.nextHTML; pending = $f.pending; pendingMounts = $f.pendingMounts; prevHTML = $f.prevHTML; skip = $f.skip; startTime = $f.startTime; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.batch.$length === 0) {
			b.scheduled = false;
			$s = -1; return;
		}
		pending = b.batch;
		b.batch = sliceType.nil;
		b.idx = {};
		_ref = pending;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = c.Context(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r.unmounted) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r.unmounted) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				_r$1 = global().Get("performance"); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Call("now", new sliceType$1([])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Float(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				elapsed = _r$3 - startTime;
				budgetRemaining = 16 - elapsed;
				avgRenderTime = elapsed / (i);
				if (budgetRemaining < avgRenderTime * 2) {
					b.batch = $subslice(pending, i);
					_ref$1 = b.batch;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						_key = c$1; (b.idx || $throwRuntimeError("assignment to entry in nil map"))[Component.keyFor(_key)] = { k: _key, v: i$1 };
						_i$1++;
					}
					/* break; */ $s = 2; continue;
				}
			/* } */ case 7:
			_r$4 = c.Context(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = extractHTML(_r$4.prevRender); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			prevHTML = _r$5;
			_r$6 = renderComponent(c, c); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6;
			nextHTML = _tuple[0];
			skip = _tuple[1];
			pendingMounts = _tuple[2];
			if (skip) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			$r = replaceNode(nextHTML.node, prevHTML.node); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = mount(pendingMounts); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$7 = requestAnimationFrame($methodVal(b, "render")); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: batchRenderer.ptr.prototype.render }; } $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.avgRenderTime = avgRenderTime; $f.b = b; $f.budgetRemaining = budgetRemaining; $f.c = c; $f.c$1 = c$1; $f.elapsed = elapsed; $f.i = i; $f.i$1 = i$1; $f.nextHTML = nextHTML; $f.pending = pending; $f.pendingMounts = pendingMounts; $f.prevHTML = prevHTML; $f.skip = skip; $f.startTime = startTime; $f.$s = $s; $f.$r = $r; return $f;
	};
	batchRenderer.prototype.render = function(startTime) { return this.$val.render(startTime); };
	extractHTML = function(e) {
		var $24r, _r, _r$1, _r$2, _ref, e, v, v$1, v$2, v$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; e = $f.e; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; v$3 = $f.v$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = e;
		/* */ if (_ref === $ifaceNil) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, Component, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === $ifaceNil) { */ case 1:
			v = _ref;
			$s = -1; return ptrType.nil;
		/* } else if ($assertType(_ref, ptrType, true)[1]) { */ case 2:
			v$1 = _ref.$val;
			$s = -1; return v$1;
		/* } else if ($assertType(_ref, Component, true)[1]) { */ case 3:
			v$2 = _ref;
			_r = v$2.Context(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = extractHTML(_r.prevRender); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 8; case 8: return $24r;
		/* } else { */ case 4:
			v$3 = _ref;
			_r$2 = reflect.TypeOf(e).String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$panic(new $String("vecty: internal error (unexpected ComponentOrHTML type " + _r$2 + ")"));
		/* } */ case 5:
		$s = -1; return ptrType.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: extractHTML }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.e = e; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.v$3 = v$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	sameType = function(first, second) {
		var first, second;
		return $interfaceIsEqual(reflect.TypeOf(first), reflect.TypeOf(second));
	};
	copyComponent = function(c) {
		var $24r, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _v, c, copier, cpy, cpy$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _v = $f._v; c = $f.c; copier = $f.copier; cpy = $f.cpy; cpy$1 = $f.cpy$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(c, $ifaceNil)) {
			$panic(new $String("vecty: internal error (cannot copy nil Component)"));
		}
		_tuple = $assertType(c, Copier, true);
		copier = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = copier.Copy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			cpy = _r;
			if ($interfaceIsEqual(cpy, c)) {
				$panic(new $String("vecty: Component.Copy illegally returned an identical *MyComponent pointer"));
			}
			$s = -1; return cpy;
		/* } */ case 2:
		tinyGoAssertCopier(c);
		_r$1 = reflect.ValueOf(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		v = _r$1;
		if (!(($clone(v, reflect.Value).Kind() === 22))) { _v = true; $s = 7; continue s; }
		_r$2 = $clone(v, reflect.Value).Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = $clone(_r$2, reflect.Value).Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$3 === 25)); case 7:
		/* */ if (_v) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_v) { */ case 5:
			_r$4 = reflect.TypeOf(c).String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String("vecty: Component must be pointer to struct, found " + _r$4));
		/* } */ case 6:
		_r$5 = $clone(v, reflect.Value).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = $clone(_r$5, reflect.Value).Type(); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = reflect.New(_r$6); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		cpy$1 = _r$7;
		_r$8 = $clone(cpy$1, reflect.Value).Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$9 = $clone(v, reflect.Value).Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		$r = $clone(_r$8, reflect.Value).Set($clone(_r$9, reflect.Value)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$10 = $clone(cpy$1, reflect.Value).Interface(); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		$24r = $assertType(_r$10, Component);
		$s = 18; case 18: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyComponent }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._v = _v; $f.c = c; $f.copier = copier; $f.cpy = cpy; $f.cpy$1 = cpy$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	copyProps = function(src, dst) {
		var _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, d, df, dst, i, s, sf, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; d = $f.d; df = $f.df; dst = $f.dst; i = $f.i; s = $f.s; sf = $f.sf; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(src, dst)) {
			$s = -1; return;
		}
		_r = reflect.ValueOf(src); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = reflect.ValueOf(dst); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		d = _r$1;
		if (!($interfaceIsEqual($clone(s, reflect.Value).Type(), $clone(d, reflect.Value).Type()))) {
			$panic(new $String("vecty: internal error (attempted to copy properties of incompatible structs)"));
		}
		if (!(($clone(s, reflect.Value).Kind() === 22)) || !(($clone(d, reflect.Value).Kind() === 22))) {
			$panic(new $String("vecty: internal error (attempted to copy properties of non-pointer)"));
		}
		i = 0;
		/* while (true) { */ case 3:
			_r$2 = $clone(s, reflect.Value).Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = $clone(_r$2, reflect.Value).NumField(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* if (!(i < _r$3)) { break; } */ if(!(i < _r$3)) { $s = 4; continue; }
			_r$4 = $clone(s, reflect.Value).Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = $clone(_r$4, reflect.Value).Field(i); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			sf = _r$5;
			_r$6 = $clone(s, reflect.Value).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = $clone(_r$6, reflect.Value).Type(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = _r$7.Field(i); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = new reflect.StructTag(_r$8.Tag).Get("vecty"); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ if (_r$9 === "prop") { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$9 === "prop") { */ case 9:
				_r$10 = $clone(d, reflect.Value).Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = $clone(_r$10, reflect.Value).Field(i); /* */ $s = 16; case 16: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				df = _r$11;
				if (!($interfaceIsEqual($clone(sf, reflect.Value).Type(), $clone(df, reflect.Value).Type()))) {
					$panic(new $String("vecty: internal error (should never be possible, struct types are identical)"));
				}
				$r = $clone(df, reflect.Value).Set($clone(sf, reflect.Value)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
			i = i + (1) >> 0;
		/* } */ $s = 3; continue; case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyProps }; } $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.d = d; $f.df = df; $f.dst = dst; $f.i = i; $f.s = s; $f.sf = sf; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	render = function(next, prev) {
		var $24r, _r, _r$1, _r$2, _r$3, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, next, nextHTML, pendingMounts, prev, skip, v, v$1, v$2, v$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; next = $f.next; nextHTML = $f.nextHTML; pendingMounts = $f.pendingMounts; prev = $f.prev; skip = $f.skip; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; v$3 = $f.v$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nextHTML = ptrType.nil;
		skip = false;
		pendingMounts = sliceType$2.nil;
		_ref = next;
		/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, Component, true)[1]) { $s = 2; continue; }
		/* */ if (_ref === $ifaceNil) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType, true)[1]) { */ case 1:
			v = _ref.$val;
			_r = extractHTML(prev); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = v.reconcile(_r); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			pendingMounts = _r$1;
			_tmp = v;
			_tmp$1 = false;
			_tmp$2 = pendingMounts;
			nextHTML = _tmp;
			skip = _tmp$1;
			pendingMounts = _tmp$2;
			$s = -1; return [nextHTML, skip, pendingMounts];
		/* } else if ($assertType(_ref, Component, true)[1]) { */ case 2:
			v$1 = _ref;
			_r$2 = renderComponent(v$1, prev); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			nextHTML = _tuple[0];
			skip = _tuple[1];
			pendingMounts = _tuple[2];
			$24r = [nextHTML, skip, pendingMounts];
			$s = 9; case 9: return $24r;
		/* } else if (_ref === $ifaceNil) { */ case 3:
			v$2 = _ref;
			_tmp$3 = ptrType.nil;
			_tmp$4 = false;
			_tmp$5 = sliceType$2.nil;
			nextHTML = _tmp$3;
			skip = _tmp$4;
			pendingMounts = _tmp$5;
			$s = -1; return [nextHTML, skip, pendingMounts];
		/* } else { */ case 4:
			v$3 = _ref;
			_r$3 = reflect.TypeOf(next).String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("vecty: internal error (unexpected ComponentOrHTML type " + _r$3 + ")"));
		/* } */ case 5:
		$s = -1; return [nextHTML, skip, pendingMounts];
		/* */ } return; } if ($f === undefined) { $f = { $blk: render }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.next = next; $f.nextHTML = nextHTML; $f.pendingMounts = pendingMounts; $f.prev = prev; $f.skip = skip; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.v$3 = v$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	renderComponent = function(next, prev) {
		var _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, _tuple$1, _tuple$2, _tuple$3, m, next, nextHTML, nextRender, ok, ok$1, ok$2, pendingMounts, prev, prevComponent, prevComponent$1, prevRender, prevRenderComponent, rs, skip, v, v$1, v$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; m = $f.m; next = $f.next; nextHTML = $f.nextHTML; nextRender = $f.nextRender; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; pendingMounts = $f.pendingMounts; prev = $f.prev; prevComponent = $f.prevComponent; prevComponent$1 = $f.prevComponent$1; prevRender = $f.prevRender; prevRenderComponent = $f.prevRenderComponent; rs = $f.rs; skip = $f.skip; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nextHTML = ptrType.nil;
		skip = false;
		pendingMounts = sliceType$2.nil;
		_tuple = $assertType(prev, Component, true);
		prevComponent = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && sameType(next, prevComponent)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok && sameType(next, prevComponent)) { */ case 1:
			$r = copyProps(next, prevComponent); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			next = prevComponent;
		/* } */ case 2:
		_tuple$1 = $assertType(next, RenderSkipper, true);
		rs = _tuple$1[0];
		ok$1 = _tuple$1[1];
		/* */ if (ok$1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (ok$1) { */ case 4:
			_r = next.Context(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			prevRenderComponent = _r.prevRenderComponent;
			/* */ if (!($interfaceIsEqual(prevRenderComponent, $ifaceNil))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!($interfaceIsEqual(prevRenderComponent, $ifaceNil))) { */ case 7:
				if ($interfaceIsEqual(next, prevRenderComponent)) {
					$panic(new $String("vecty: internal error (SkipRender called with identical prev component)"));
				}
				_r$1 = rs.SkipRender(prevRenderComponent); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_r$1) { */ case 9:
					_tmp = ptrType.nil;
					_tmp$1 = true;
					_tmp$2 = sliceType$2.nil;
					nextHTML = _tmp;
					skip = _tmp$1;
					pendingMounts = _tmp$2;
					$s = -1; return [nextHTML, skip, pendingMounts];
				/* } */ case 10:
			/* } */ case 8:
		/* } */ case 5:
		_r$2 = next.Render(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		nextRender = _r$2;
		_r$3 = next.Context(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		prevRender = _r$3.prevRender;
		/* */ if ($interfaceIsEqual(nextRender, $ifaceNil)) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if ($interfaceIsEqual(nextRender, $ifaceNil)) { */ case 14:
			_r$4 = Tag("noscript", new sliceType$5([])); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			nextRender = _r$4;
		/* } */ case 15:
		_ref = nextRender;
		/* */ if ($assertType(_ref, Component, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if ($assertType(_ref, Component, true)[1]) { */ case 17:
			v = _ref;
			_r$5 = renderComponent(v, prevRender); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$2 = _r$5;
			nextHTML = _tuple$2[0];
			skip = _tuple$2[1];
			pendingMounts = _tuple$2[2];
			if (skip) {
				_tmp$3 = nextHTML;
				_tmp$4 = skip;
				_tmp$5 = pendingMounts;
				nextHTML = _tmp$3;
				skip = _tmp$4;
				pendingMounts = _tmp$5;
				$s = -1; return [nextHTML, skip, pendingMounts];
			}
			_tuple$3 = $assertType(prevRender, Component, true);
			prevComponent$1 = _tuple$3[0];
			ok$2 = _tuple$3[1];
			if (ok$2 && sameType(v, prevComponent$1)) {
				nextRender = prevRender;
			}
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType, true)[1]) { */ case 18:
			v$1 = _ref.$val;
			/* */ if (v$1 === ptrType.nil) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (v$1 === ptrType.nil) { */ case 22:
				_r$6 = Tag("noscript", new sliceType$5([])); /* */ $s = 24; case 24: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				v$1 = _r$6;
			/* } */ case 23:
			nextHTML = v$1;
			_r$7 = extractHTML(prev); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = nextHTML.reconcile(_r$7); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			pendingMounts = _r$8;
			$s = 20; continue;
		/* } else { */ case 19:
			v$2 = _ref;
			_r$9 = reflect.TypeOf(v$2).String(); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$panic(new $String("vecty: internal error (unexpected ComponentOrHTML type " + _r$9 + ")"));
		/* } */ case 20:
		_r$10 = mountUnmount(nextRender, prevRender); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		m = _r$10;
		if (!($interfaceIsEqual(m, $ifaceNil))) {
			pendingMounts = $append(pendingMounts, m);
		}
		_r$11 = next.Context(); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11.prevRender = nextRender;
		_r$12 = copyComponent(next); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$13 = next.Context(); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13.prevRenderComponent = _r$12;
		_r$14 = next.Context(); /* */ $s = 32; case 32: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14.unmounted = false;
		_tmp$6 = nextHTML;
		_tmp$7 = false;
		_tmp$8 = pendingMounts;
		nextHTML = _tmp$6;
		skip = _tmp$7;
		pendingMounts = _tmp$8;
		$s = -1; return [nextHTML, skip, pendingMounts];
		/* */ } return; } if ($f === undefined) { $f = { $blk: renderComponent }; } $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.m = m; $f.next = next; $f.nextHTML = nextHTML; $f.nextRender = nextRender; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.pendingMounts = pendingMounts; $f.prev = prev; $f.prevComponent = prevComponent; $f.prevComponent$1 = prevComponent$1; $f.prevRender = prevRender; $f.prevRenderComponent = prevRenderComponent; $f.rs = rs; $f.skip = skip; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	mountUnmount = function(next, prev) {
		var _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, _v, child, m, m$1, next, nextHTML, ok, ok$1, ok$2, prev, prevHTML, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; child = $f.child; m = $f.m; m$1 = $f.m$1; next = $f.next; nextHTML = $f.nextHTML; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; prev = $f.prev; prevHTML = $f.prevHTML; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(next, prev)) {
			$s = -1; return $ifaceNil;
		}
		/* */ if (!sameType(next, prev)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!sameType(next, prev)) { */ case 1:
			/* */ if (!($interfaceIsEqual(prev, $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(prev, $ifaceNil))) { */ case 3:
				$r = unmount(prev); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_tuple = $assertType(next, Mounter, true);
			m = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				$s = -1; return m;
			}
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		_r = extractHTML(prev); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		prevHTML = _r;
		/* */ if (!(prevHTML === ptrType.nil)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!(prevHTML === ptrType.nil)) { */ case 7:
			_r$1 = extractHTML(next); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			nextHTML = _r$1;
			if (nextHTML === ptrType.nil) { _v = true; $s = 12; continue s; }
			_r$2 = prevHTML.node.Equal(nextHTML.node); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v = !_r$2; case 12:
			/* */ if (_v) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_v) { */ case 10:
				_ref = prevHTML.children;
				_i = 0;
				/* while (true) { */ case 14:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 15; continue; }
					child = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					$r = unmount(child); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 14; continue; case 15:
			/* } */ case 11:
		/* } */ case 8:
		_tuple$1 = $assertType(prev, Unmounter, true);
		u = _tuple$1[0];
		ok$1 = _tuple$1[1];
		/* */ if (ok$1) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (ok$1) { */ case 17:
			$r = u.Unmount(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 18:
		_tuple$2 = $assertType(next, Mounter, true);
		m$1 = _tuple$2[0];
		ok$2 = _tuple$2[1];
		if (ok$2) {
			$s = -1; return m$1;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mountUnmount }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f.child = child; $f.m = m; $f.m$1 = m$1; $f.next = next; $f.nextHTML = nextHTML; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.prev = prev; $f.prevHTML = prevHTML; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	mount = function(pendingMounts) {
		var _i, _r, _r$1, _r$2, _ref, _tuple, c, mounter, ok, pendingMounts, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; mounter = $f.mounter; ok = $f.ok; pendingMounts = $f.pendingMounts; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = pendingMounts;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			mounter = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($interfaceIsEqual(mounter, $ifaceNil)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			_tuple = $assertType(mounter, Component, true);
			c = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				_r = c.Context(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r.mounted) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_r.mounted) { */ case 5:
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 6:
				_r$1 = c.Context(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1.mounted = true;
				_r$2 = c.Context(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2.unmounted = false;
			/* } */ case 4:
			$r = mounter.Mount(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mount }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.mounter = mounter; $f.ok = ok; $f.pendingMounts = pendingMounts; $f.$s = $s; $f.$r = $r; return $f;
	};
	unmount = function(e) {
		var _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, c, child, child$1, e, h, l, ok, ok$1, ok$2, ok$3, prevRenderComponent, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; c = $f.c; child = $f.child; child$1 = $f.child$1; e = $f.e; h = $f.h; l = $f.l; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; prevRenderComponent = $f.prevRenderComponent; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(e, Component, true);
		c = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = c.Context(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r.unmounted) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r.unmounted) { */ case 3:
				$s = -1; return;
			/* } */ case 4:
			_r$1 = c.Context(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1.unmounted = true;
			_r$2 = c.Context(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2.mounted = false;
			_r$3 = c.Context(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(_r$3.prevRender, Component, true);
			prevRenderComponent = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (ok$1) { */ case 9:
				$r = unmount(prevRenderComponent); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 2:
		_tuple$2 = $assertType(e, KeyedList, true);
		l = $clone(_tuple$2[0], KeyedList);
		ok$2 = _tuple$2[1];
		/* */ if (ok$2) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (ok$2) { */ case 12:
			_ref = l.html.children;
			_i = 0;
			/* while (true) { */ case 14:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 15; continue; }
				child = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				$r = unmount(child); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 14; continue; case 15:
			$s = -1; return;
		/* } */ case 13:
		_r$4 = extractHTML(e); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		h = _r$4;
		/* */ if (!(h === ptrType.nil)) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (!(h === ptrType.nil)) { */ case 18:
			_ref$1 = h.children;
			_i$1 = 0;
			/* while (true) { */ case 20:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 21; continue; }
				child$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				$r = unmount(child$1); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$1++;
			/* } */ $s = 20; continue; case 21:
		/* } */ case 19:
		_tuple$3 = $assertType(e, Unmounter, true);
		u = _tuple$3[0];
		ok$3 = _tuple$3[1];
		/* */ if (ok$3) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (ok$3) { */ case 23:
			$r = u.Unmount(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 24:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: unmount }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.c = c; $f.child = child; $f.child$1 = child$1; $f.e = e; $f.h = h; $f.l = l; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.prevRenderComponent = prevRenderComponent; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	requestAnimationFrame = function(callback) {
		var $24r, _r, _r$1, callback, cb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; callback = $f.callback; cb = $f.cb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		callback = [callback];
		cb = [cb];
		cb[0] = $ifaceNil;
		cb[0] = funcOf((function(callback, cb) { return function $b(this$1, args) {
			var _r, args, this$1, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; args = $f.args; this$1 = $f.this$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = cb[0].Release(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = (0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]).Float(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = callback[0](_r); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return (x = undefined$1(), new x.constructor.elem(x));
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f.args = args; $f.this$1 = this$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		}; })(callback, cb));
		_r = global().Call("requestAnimationFrame", new sliceType$1([cb[0]])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Int(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: requestAnimationFrame }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f.callback = callback; $f.cb = cb; $f.$s = $s; $f.$r = $r; return $f;
	};
	RenderBody = function(body) {
		var _r, _r$1, _r$2, _r$3, _selection, body, err, target, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _selection = $f._selection; body = $f.body; err = $f.err; target = $f.target; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = global().Get("document"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Call("querySelector", new sliceType$1([new $String("body")])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = renderIntoNode("RenderBody", target, body); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		/* */ if (!isTest) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!isTest) { */ case 4:
			_r$3 = $select([]); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_selection = _r$3;
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RenderBody }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._selection = _selection; $f.body = body; $f.err = err; $f.target = target; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.RenderBody = RenderBody;
	ElementMismatchError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "vecty: " + e.method + ": expected Component.Render to return a \"" + e.want + "\", found \"" + e.got + "\"";
	};
	ElementMismatchError.prototype.Error = function() { return this.$val.Error(); };
	InvalidTargetError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "vecty: " + e.method + ": invalid target element is null or undefined";
	};
	InvalidTargetError.prototype.Error = function() { return this.$val.Error(); };
	renderIntoNode = function(methodName, node, c) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, c, cb, doc, expectTag, m, methodName, nextRender, node, ok, pendingMounts, skip, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; cb = $f.cb; doc = $f.doc; expectTag = $f.expectTag; m = $f.m; methodName = $f.methodName; nextRender = $f.nextRender; node = $f.node; ok = $f.ok; pendingMounts = $f.pendingMounts; skip = $f.skip; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		cb = [cb];
		nextRender = [nextRender];
		node = [node];
		pendingMounts = [pendingMounts];
		_r = node[0].Truthy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return (x = new InvalidTargetError.ptr(methodName), new x.constructor.elem(x));
		/* } */ case 2:
		batch.scheduled = true;
		_r$1 = renderComponent(c[0], $ifaceNil); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		nextRender[0] = _tuple[0];
		skip = _tuple[1];
		pendingMounts[0] = _tuple[2];
		if (skip) {
			$panic(new $String("vecty: " + methodName + ": Component.SkipRender illegally returned true"));
		}
		_r$2 = node[0].Get("nodeName"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = toLower(_r$3); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		expectTag = _r$4;
		if (!(nextRender[0].tag === expectTag)) {
			$s = -1; return (x$1 = new ElementMismatchError.ptr(methodName, nextRender[0].tag, expectTag), new x$1.constructor.elem(x$1));
		}
		_r$5 = global().Get("document"); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		doc = _r$5;
		_r$6 = doc.Get("readyState"); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = _r$6.String(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ if (_r$7 === "loading") { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_r$7 === "loading") { */ case 9:
			cb[0] = $ifaceNil;
			cb[0] = funcOf((function(c, cb, nextRender, node, pendingMounts) { return function $b(this$1, args) {
				var _r$8, _tuple$1, args, m, ok, this$1, x$2, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$8 = $f._r$8; _tuple$1 = $f._tuple$1; args = $f.args; m = $f.m; ok = $f.ok; this$1 = $f.this$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = cb[0].Release(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = replaceNode(nextRender[0].node, node[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = mount(pendingMounts[0]); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tuple$1 = $assertType(c[0], Mounter, true);
				m = _tuple$1[0];
				ok = _tuple$1[1];
				/* */ if (ok) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (ok) { */ case 4:
					$r = mount(new sliceType$2([m])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 5:
				_r$8 = requestAnimationFrame($methodVal(batch, "render")); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				$s = -1; return (x$2 = undefined$1(), new x$2.constructor.elem(x$2));
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$8 = _r$8; $f._tuple$1 = _tuple$1; $f.args = args; $f.m = m; $f.ok = ok; $f.this$1 = this$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
			}; })(c, cb, nextRender, node, pendingMounts));
			_r$8 = doc.Call("addEventListener", new sliceType$1([new $String("DOMContentLoaded"), cb[0]])); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			$s = -1; return $ifaceNil;
		/* } */ case 10:
		$r = replaceNode(nextRender[0].node, node[0]); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mount(pendingMounts[0]); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$1 = $assertType(c[0], Mounter, true);
		m = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (ok) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (ok) { */ case 16:
			$r = mount(new sliceType$2([m])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 17:
		_r$9 = requestAnimationFrame($methodVal(batch, "render")); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$9;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: renderIntoNode }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.cb = cb; $f.doc = doc; $f.expectTag = expectTag; $f.m = m; $f.methodName = methodName; $f.nextRender = nextRender; $f.node = node; $f.ok = ok; $f.pendingMounts = pendingMounts; $f.skip = skip; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	SetTitle = function(title) {
		var _r, title, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; title = $f.title; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = global().Get("document"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = _r.Set("title", new $String(title)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetTitle }; } $f._r = _r; $f.title = title; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetTitle = SetTitle;
	AddStylesheet = function(url) {
		var _r, _r$1, _r$2, _r$3, _r$4, link, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; link = $f.link; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = global().Get("document"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Call("createElement", new sliceType$1([new $String("link")])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		link = _r$1;
		$r = link.Set("rel", new $String("stylesheet")); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = link.Set("href", new $String(url)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = global().Get("document"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.Get("head"); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = _r$3.Call("appendChild", new sliceType$1([link])); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AddStylesheet }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.link = link; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.AddStylesheet = AddStylesheet;
	HTML.ptr.prototype.Node = function() {
		var h;
		h = this;
		if ($interfaceIsEqual(h.node, $ifaceNil)) {
			$panic(new $String("vecty: cannot call (*HTML).Node() before DOM node creation / component mount"));
		}
		return $assertType(h.node, wrappedObject).j;
	};
	HTML.prototype.Node = function() { return this.$val.Node(); };
	toLower = function(s) {
		var $24r, _arg, _r, _r$1, _r$2, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = js.ValueOf(new $String(s)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = (x = _r, new x.constructor.elem(x));
		_r$1 = $clone($clone($clone($clone(js.Global(), js.Value).Get("String"), js.Value).Get("prototype"), js.Value).Get("toLowerCase"), js.Value).Call("call", new sliceType$1([_arg])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = $clone(_r$1, js.Value).String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 4; case 4: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: toLower }; } $f.$24r = $24r; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	global = function() {
		if ($interfaceIsEqual(globalValue, $ifaceNil)) {
			globalValue = wrapObject($clone(js.Global(), js.Value));
		}
		return globalValue;
	};
	undefined$1 = function() {
		return new wrappedObject.ptr($clone(js.Undefined(), js.Value));
	};
	funcOf = function(fn) {
		var fn;
		return new jsFuncImpl.ptr($clone(js.FuncOf((function $b(this$1, args) {
			var $24r, _i, _r, _r$1, _ref, arg, args, i, this$1, wrappedArgs, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; arg = $f.arg; args = $f.args; i = $f.i; this$1 = $f.this$1; wrappedArgs = $f.wrappedArgs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			wrappedArgs = $makeSlice(sliceType$6, args.$length);
			_ref = args;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				arg = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), js.Value);
				((i < 0 || i >= wrappedArgs.$length) ? ($throwRuntimeError("index out of range"), undefined) : wrappedArgs.$array[wrappedArgs.$offset + i] = wrapObject($clone(arg, js.Value)));
				_i++;
			}
			_r = fn(wrapObject($clone(this$1, js.Value)), wrappedArgs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = unwrap(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 3; case 3: return $24r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$24r = $24r; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.arg = arg; $f.args = args; $f.i = i; $f.this$1 = this$1; $f.wrappedArgs = wrappedArgs; $f.$s = $s; $f.$r = $r; return $f;
		})), js.Func), fn);
	};
	jsFuncImpl.ptr.prototype.String = function() {
		var j;
		j = this;
		return "func";
	};
	jsFuncImpl.prototype.String = function() { return this.$val.String(); };
	jsFuncImpl.ptr.prototype.Release = function() {
		var j;
		j = this;
		$clone(j.f, js.Func).Release();
	};
	jsFuncImpl.prototype.Release = function() { return this.$val.Release(); };
	wrapObject = function(j) {
		var j, x;
		if ($clone(j, js.Value).IsNull()) {
			return $ifaceNil;
		}
		return (x = new wrappedObject.ptr($clone(j, js.Value)), new x.constructor.elem(x));
	};
	unwrap = function(value) {
		var _tuple, _tuple$1, ok, ok$1, v, v$1, value, x, x$1;
		_tuple = $assertType(value, wrappedObject, true);
		v = $clone(_tuple[0], wrappedObject);
		ok = _tuple[1];
		if (ok) {
			return (x = v.j, new x.constructor.elem(x));
		}
		_tuple$1 = $assertType(value, ptrType$2, true);
		v$1 = _tuple$1[0];
		ok$1 = _tuple$1[1];
		if (ok$1) {
			return (x$1 = v$1.f, new x$1.constructor.elem(x$1));
		}
		return value;
	};
	wrappedObject.ptr.prototype.Set = function(key, value) {
		var key, value, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; key = $f.key; value = $f.value; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		$r = $clone(w.j, js.Value).Set(key, unwrap(value)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: wrappedObject.ptr.prototype.Set }; } $f.key = key; $f.value = value; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	wrappedObject.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	wrappedObject.ptr.prototype.Get = function(key) {
		var key, w;
		w = this;
		return wrapObject($clone($clone(w.j, js.Value).Get(key), js.Value));
	};
	wrappedObject.prototype.Get = function(key) { return this.$val.Get(key); };
	wrappedObject.ptr.prototype.Delete = function(key) {
		var key, w;
		w = this;
		$clone(w.j, js.Value).Delete(key);
	};
	wrappedObject.prototype.Delete = function(key) { return this.$val.Delete(key); };
	wrappedObject.ptr.prototype.Call = function(name, args) {
		var $24r, _i, _r, _r$1, _ref, arg, args, i, name, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; arg = $f.arg; args = $f.args; i = $f.i; name = $f.name; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_ref = args;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + i] = unwrap(arg));
			_i++;
		}
		_r = $clone(w.j, js.Value).Call(name, args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = wrapObject($clone(_r, js.Value)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: wrappedObject.ptr.prototype.Call }; } $f.$24r = $24r; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.arg = arg; $f.args = args; $f.i = i; $f.name = name; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	wrappedObject.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	wrappedObject.ptr.prototype.String = function() {
		var w;
		w = this;
		return $clone(w.j, js.Value).String();
	};
	wrappedObject.prototype.String = function() { return this.$val.String(); };
	wrappedObject.ptr.prototype.Truthy = function() {
		var w;
		w = this;
		return $clone(w.j, js.Value).Truthy();
	};
	wrappedObject.prototype.Truthy = function() { return this.$val.Truthy(); };
	wrappedObject.ptr.prototype.IsUndefined = function() {
		var w;
		w = this;
		return $clone(w.j, js.Value).IsUndefined();
	};
	wrappedObject.prototype.IsUndefined = function() { return this.$val.IsUndefined(); };
	wrappedObject.ptr.prototype.Equal = function(other) {
		var other, w;
		w = this;
		if (!($clone(w.j, js.Value).IsNull() === ($interfaceIsEqual(other, $ifaceNil)))) {
			return false;
		}
		return $clone(w.j, js.Value).Equal($clone($assertType(unwrap(other), js.Value), js.Value));
	};
	wrappedObject.prototype.Equal = function(other) { return this.$val.Equal(other); };
	wrappedObject.ptr.prototype.Bool = function() {
		var w;
		w = this;
		return $clone(w.j, js.Value).Bool();
	};
	wrappedObject.prototype.Bool = function() { return this.$val.Bool(); };
	wrappedObject.ptr.prototype.Int = function() {
		var w;
		w = this;
		return $clone(w.j, js.Value).Int();
	};
	wrappedObject.prototype.Int = function() { return this.$val.Int(); };
	wrappedObject.ptr.prototype.Float = function() {
		var w;
		w = this;
		return $clone(w.j, js.Value).Float();
	};
	wrappedObject.prototype.Float = function() { return this.$val.Float(); };
	init = function() {
		var _r, _r$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (isTest) {
			$s = -1; return;
		}
		if ($interfaceIsEqual(global(), $ifaceNil)) {
			$panic(new $String("vecty: only WebAssembly, TinyGo, and testing compilation is supported"));
		}
		_r = global().Get("document"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.IsUndefined(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$1) { */ case 1:
			$panic(new $String("vecty: only running inside a browser is supported"));
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f._r = _r; $f._r$1 = _r$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTML.ptr.prototype.tinyGoCannotIterateNilMaps = function() {
		var h;
		h = this;
	};
	HTML.prototype.tinyGoCannotIterateNilMaps = function() { return this.$val.tinyGoCannotIterateNilMaps(); };
	tinyGoAssertCopier = function(c) {
		var c;
	};
	replaceNode = function(newNode, oldNode) {
		var _r, _r$1, _r$2, newNode, oldNode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; newNode = $f.newNode; oldNode = $f.oldNode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newNode.Equal(oldNode); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$s = -1; return;
		/* } */ case 2:
		_r$1 = oldNode.Get("parentNode"); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.Call("replaceChild", new sliceType$1([newNode, oldNode])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: replaceNode }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.newNode = newNode; $f.oldNode = oldNode; $f.$s = $s; $f.$r = $r; return $f;
	};
	EventListener.ptr.prototype.PreventDefault = function() {
		var l;
		l = this;
		l.callPreventDefault = true;
		return l;
	};
	EventListener.prototype.PreventDefault = function() { return this.$val.PreventDefault(); };
	EventListener.ptr.prototype.StopPropagation = function() {
		var l;
		l = this;
		l.callStopPropagation = true;
		return l;
	};
	EventListener.prototype.StopPropagation = function() { return this.$val.StopPropagation(); };
	EventListener.ptr.prototype.Apply = function(h) {
		var h, l;
		l = this;
		h.eventListeners = $append(h.eventListeners, l);
	};
	EventListener.prototype.Apply = function(h) { return this.$val.Apply(h); };
	apply = function(m, h) {
		var _r, _ref, h, m, m$1, m$2, m$3, m$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _ref = $f._ref; h = $f.h; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; m$3 = $f.m$3; m$4 = $f.m$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = m;
		/* */ if ($assertType(_ref, MarkupList, true)[1]) { $s = 1; continue; }
		/* */ if (_ref === $ifaceNil) { $s = 2; continue; }
		/* */ if ($assertType(_ref, Component, true)[1] || $assertType(_ref, ptrType, true)[1] || $assertType(_ref, List, true)[1] || $assertType(_ref, KeyedList, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, MarkupList, true)[1]) { */ case 1:
			m$1 = $clone(_ref.$val, MarkupList);
			$r = $clone(m$1, MarkupList).Apply(h); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else if (_ref === $ifaceNil) { */ case 2:
			m$2 = _ref;
			h.children = $append(h.children, $ifaceNil);
			$s = 5; continue;
		/* } else if ($assertType(_ref, Component, true)[1] || $assertType(_ref, ptrType, true)[1] || $assertType(_ref, List, true)[1] || $assertType(_ref, KeyedList, true)[1]) { */ case 3:
			m$3 = _ref;
			h.children = $append(h.children, $assertType(m$3, ComponentOrHTML));
			$s = 5; continue;
		/* } else { */ case 4:
			m$4 = _ref;
			_r = reflect.TypeOf(m$4).String(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(new $String("vecty: internal error (unexpected MarkupOrChild type " + _r + ")"));
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: apply }; } $f._r = _r; $f._ref = _ref; $f.h = h; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.m$3 = m$3; $f.m$4 = m$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	markupFunc.prototype.Apply = function(h) {
		var h, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; h = $f.h; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this.$val;
		$r = m(h); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: markupFunc.prototype.Apply }; } $f.h = h; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(markupFunc).prototype.Apply = function(h) { return new markupFunc(this.$get()).Apply(h); };
	Style = function(key, value) {
		var key, value;
		return new markupFunc(((function(h) {
			var _key, h;
			if (h.styles === false) {
				h.styles = {};
			}
			_key = key; (h.styles || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: value };
		})));
	};
	$pkg.Style = Style;
	Property = function(key, value) {
		var key, value;
		if (key === "style") {
			$panic(new $String("vecty: Property called with key \"style\"; style package or Style should be used instead"));
		}
		return new markupFunc(((function(h) {
			var _key, h;
			if (h.properties === false) {
				h.properties = {};
			}
			_key = key; (h.properties || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: value };
		})));
	};
	$pkg.Property = Property;
	Class = function(class$1) {
		var class$1;
		mustValidateClassNames(class$1);
		return new markupFunc(((function(h) {
			var _i, _key, _ref, h, name;
			if (h.classes === false) {
				h.classes = {};
			}
			_ref = class$1;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				name = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_key = name; (h.classes || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new structType.ptr() };
				_i++;
			}
		})));
	};
	$pkg.Class = Class;
	mustValidateClassNames = function(class$1) {
		var _i, _ref, class$1, name;
		_ref = class$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			name = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (containsSpace(name)) {
				$panic(new $String("vecty: invalid argument to vecty.Class \"" + name + "\" (string may not contain spaces)"));
			}
			_i++;
		}
	};
	containsSpace = function(s) {
		var _i, _ref, _rune, c, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (c === 32) {
				return true;
			}
			_i += _rune[1];
		}
		return false;
	};
	MarkupList.ptr.prototype.Apply = function(h) {
		var _i, _ref, a, h, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; a = $f.a; h = $f.h; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_ref = m.list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($interfaceIsEqual(a, $ifaceNil)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			$r = a.Apply(h); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MarkupList.ptr.prototype.Apply }; } $f._i = _i; $f._ref = _ref; $f.a = a; $f.h = h; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	MarkupList.prototype.Apply = function(h) { return this.$val.Apply(h); };
	Markup = function(m) {
		var m;
		return new MarkupList.ptr(m);
	};
	$pkg.Markup = Markup;
	ptrType$3.methods = [{prop: "Context", name: "Context", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "isMarkupOrChild", name: "isMarkupOrChild", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}, {prop: "isComponentOrHTML", name: "isComponentOrHTML", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}];
	ptrType.methods = [{prop: "Key", name: "Key", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "isMarkupOrChild", name: "isMarkupOrChild", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}, {prop: "isComponentOrHTML", name: "isComponentOrHTML", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}, {prop: "createNode", name: "createNode", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}, {prop: "reconcileText", name: "reconcileText", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([ptrType], [], false)}, {prop: "reconcile", name: "reconcile", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([ptrType], [sliceType$2], false)}, {prop: "reconcileProperties", name: "reconcileProperties", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([ptrType], [], false)}, {prop: "removeProperties", name: "removeProperties", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([ptrType], [], false)}, {prop: "reconcileChildren", name: "reconcileChildren", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([ptrType], [sliceType$2], false)}, {prop: "removeChildren", name: "removeChildren", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([sliceType$4], [], false)}, {prop: "firstChild", name: "firstChild", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [jsObject], false)}, {prop: "nextSibling", name: "nextSibling", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [jsObject], false)}, {prop: "removeChild", name: "removeChild", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([ptrType], [], false)}, {prop: "appendChild", name: "appendChild", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([ptrType], [], false)}, {prop: "insertBefore", name: "insertBefore", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([jsObject, ptrType], [], false)}, {prop: "Node", name: "Node", pkg: "", typ: $funcType([], [js.Value], false)}, {prop: "tinyGoCannotIterateNilMaps", name: "tinyGoCannotIterateNilMaps", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}];
	List.methods = [{prop: "isMarkupOrChild", name: "isMarkupOrChild", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}, {prop: "isComponentOrHTML", name: "isComponentOrHTML", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}, {prop: "WithKey", name: "WithKey", pkg: "", typ: $funcType([$emptyInterface], [KeyedList], false)}];
	KeyedList.methods = [{prop: "isMarkupOrChild", name: "isMarkupOrChild", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}, {prop: "isComponentOrHTML", name: "isComponentOrHTML", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "reconcile", name: "reconcile", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([ptrType, ComponentOrHTML], [sliceType$2], false)}, {prop: "remove", name: "remove", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([ptrType], [], false)}];
	ptrType$4.methods = [{prop: "add", name: "add", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([Component], [], false)}, {prop: "render", name: "render", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([$Float64], [], false)}];
	ElementMismatchError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	InvalidTargetError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}];
	wrappedObject.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [jsObject], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType$1], [jsObject], true)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Truthy", name: "Truthy", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsUndefined", name: "IsUndefined", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([jsObject], [$Bool], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$1.methods = [{prop: "PreventDefault", name: "PreventDefault", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "StopPropagation", name: "StopPropagation", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Apply", name: "Apply", pkg: "", typ: $funcType([ptrType], [], false)}];
	markupFunc.methods = [{prop: "Apply", name: "Apply", pkg: "", typ: $funcType([ptrType], [], false)}];
	MarkupList.methods = [{prop: "Apply", name: "Apply", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "isMarkupOrChild", name: "isMarkupOrChild", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}];
	Core.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", [{prop: "prevRenderComponent", name: "prevRenderComponent", embedded: false, exported: false, typ: Component, tag: ""}, {prop: "prevRender", name: "prevRender", embedded: false, exported: false, typ: ComponentOrHTML, tag: ""}, {prop: "mounted", name: "mounted", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "unmounted", name: "unmounted", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	Component.init([{prop: "Context", name: "Context", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Render", name: "Render", pkg: "", typ: $funcType([], [ComponentOrHTML], false)}, {prop: "isComponentOrHTML", name: "isComponentOrHTML", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}, {prop: "isMarkupOrChild", name: "isMarkupOrChild", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}]);
	Copier.init([{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Component], false)}]);
	Mounter.init([{prop: "Mount", name: "Mount", pkg: "", typ: $funcType([], [], false)}]);
	Unmounter.init([{prop: "Unmount", name: "Unmount", pkg: "", typ: $funcType([], [], false)}]);
	Keyer.init([{prop: "Key", name: "Key", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	ComponentOrHTML.init([{prop: "isComponentOrHTML", name: "isComponentOrHTML", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}, {prop: "isMarkupOrChild", name: "isMarkupOrChild", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}]);
	RenderSkipper.init([{prop: "SkipRender", name: "SkipRender", pkg: "", typ: $funcType([Component], [$Bool], false)}]);
	HTML.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", [{prop: "node", name: "node", embedded: false, exported: false, typ: jsObject, tag: ""}, {prop: "namespace", name: "namespace", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "text", name: "text", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "innerHTML", name: "innerHTML", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "classes", name: "classes", embedded: false, exported: false, typ: mapType, tag: ""}, {prop: "styles", name: "styles", embedded: false, exported: false, typ: mapType$1, tag: ""}, {prop: "dataset", name: "dataset", embedded: false, exported: false, typ: mapType$1, tag: ""}, {prop: "properties", name: "properties", embedded: false, exported: false, typ: mapType$2, tag: ""}, {prop: "attributes", name: "attributes", embedded: false, exported: false, typ: mapType$2, tag: ""}, {prop: "eventListeners", name: "eventListeners", embedded: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "children", name: "children", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "key", name: "key", embedded: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "keyedChildren", name: "keyedChildren", embedded: false, exported: false, typ: mapType$3, tag: ""}, {prop: "insertBeforeNode", name: "insertBeforeNode", embedded: false, exported: false, typ: jsObject, tag: ""}, {prop: "lastRenderedChild", name: "lastRenderedChild", embedded: false, exported: false, typ: ptrType, tag: ""}]);
	List.init(ComponentOrHTML);
	KeyedList.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", [{prop: "html", name: "html", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "key", name: "key", embedded: false, exported: false, typ: $emptyInterface, tag: ""}]);
	batchRenderer.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", [{prop: "batch", name: "batch", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "idx", name: "idx", embedded: false, exported: false, typ: mapType$4, tag: ""}, {prop: "scheduled", name: "scheduled", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	ElementMismatchError.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", [{prop: "method", name: "method", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "got", name: "got", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "want", name: "want", embedded: false, exported: false, typ: $String, tag: ""}]);
	InvalidTargetError.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", [{prop: "method", name: "method", embedded: false, exported: false, typ: $String, tag: ""}]);
	jsFunc.init([{prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}]);
	jsObject.init([{prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType$1], [jsObject], true)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([jsObject], [$Bool], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [jsObject], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "IsUndefined", name: "IsUndefined", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Truthy", name: "Truthy", pkg: "", typ: $funcType([], [$Bool], false)}]);
	Event.init("", [{prop: "Value", name: "Value", embedded: true, exported: true, typ: js.Value, tag: ""}, {prop: "Target", name: "Target", embedded: false, exported: true, typ: js.Value, tag: ""}]);
	jsFuncImpl.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", [{prop: "f", name: "f", embedded: false, exported: false, typ: js.Func, tag: ""}, {prop: "goFunc", name: "goFunc", embedded: false, exported: false, typ: funcType$1, tag: ""}]);
	wrappedObject.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", [{prop: "j", name: "j", embedded: false, exported: false, typ: js.Value, tag: ""}]);
	EventListener.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Listener", name: "Listener", embedded: false, exported: true, typ: funcType$2, tag: ""}, {prop: "callPreventDefault", name: "callPreventDefault", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "callStopPropagation", name: "callStopPropagation", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "wrapper", name: "wrapper", embedded: false, exported: false, typ: jsFunc, tag: ""}]);
	MarkupOrChild.init([{prop: "isMarkupOrChild", name: "isMarkupOrChild", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", typ: $funcType([], [], false)}]);
	Applyer.init([{prop: "Apply", name: "Apply", pkg: "", typ: $funcType([ptrType], [], false)}]);
	markupFunc.init([ptrType], [], false);
	MarkupList.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty", [{prop: "list", name: "list", embedded: false, exported: false, typ: sliceType$7, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		isTest = false;
		globalValue = $ifaceNil;
		batch = new batchRenderer.ptr(sliceType.nil, {}, false);
		$r = init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/elem"] = (function() {
	var $pkg = {}, $init, vecty, Body, Button, Canvas, Div, Heading1, Input, Label, Span;
	vecty = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty"];
	Body = function(markup) {
		var $24r, _r, markup, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; markup = $f.markup; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = vecty.Tag("body", markup); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Body }; } $f.$24r = $24r; $f._r = _r; $f.markup = markup; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Body = Body;
	Button = function(markup) {
		var $24r, _r, markup, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; markup = $f.markup; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = vecty.Tag("button", markup); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Button }; } $f.$24r = $24r; $f._r = _r; $f.markup = markup; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Button = Button;
	Canvas = function(markup) {
		var $24r, _r, markup, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; markup = $f.markup; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = vecty.Tag("canvas", markup); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Canvas }; } $f.$24r = $24r; $f._r = _r; $f.markup = markup; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Canvas = Canvas;
	Div = function(markup) {
		var $24r, _r, markup, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; markup = $f.markup; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = vecty.Tag("div", markup); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Div }; } $f.$24r = $24r; $f._r = _r; $f.markup = markup; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Div = Div;
	Heading1 = function(markup) {
		var $24r, _r, markup, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; markup = $f.markup; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = vecty.Tag("h1", markup); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Heading1 }; } $f.$24r = $24r; $f._r = _r; $f.markup = markup; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Heading1 = Heading1;
	Input = function(markup) {
		var $24r, _r, markup, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; markup = $f.markup; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = vecty.Tag("input", markup); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Input }; } $f.$24r = $24r; $f._r = _r; $f.markup = markup; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Input = Input;
	Label = function(markup) {
		var $24r, _r, markup, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; markup = $f.markup; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = vecty.Tag("label", markup); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Label }; } $f.$24r = $24r; $f._r = _r; $f.markup = markup; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Label = Label;
	Span = function(markup) {
		var $24r, _r, markup, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; markup = $f.markup; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = vecty.Tag("span", markup); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Span }; } $f.$24r = $24r; $f._r = _r; $f.markup = markup; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Span = Span;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = vecty.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/event"] = (function() {
	var $pkg = {}, $init, vecty, Change, Click;
	vecty = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty"];
	Change = function(listener) {
		var listener;
		return new vecty.EventListener.ptr("change", listener, false, false, $ifaceNil);
	};
	$pkg.Change = Change;
	Click = function(listener) {
		var listener;
		return new vecty.EventListener.ptr("click", listener, false, false, $ifaceNil);
	};
	$pkg.Click = Click;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = vecty.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/prop"] = (function() {
	var $pkg = {}, $init, vecty, For, ID, Type, Value;
	vecty = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty"];
	For = function(id) {
		var id;
		return vecty.Property("htmlFor", new $String(id));
	};
	$pkg.For = For;
	ID = function(id) {
		var id;
		return vecty.Property("id", new $String(id));
	};
	$pkg.ID = ID;
	Type = function(t) {
		var t;
		return vecty.Property("type", new $String((t)));
	};
	$pkg.Type = Type;
	Value = function(v) {
		var v;
		return vecty.Property("value", new $String(v));
	};
	$pkg.Value = Value;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = vecty.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/akosgarai/webgl-cube-editor/pkg/components"] = (function() {
	var $pkg = {}, $init, fmt, vecty, elem, event, prop, js, strconv, ColorPicker, DisplayButton, Heading, Label, NumericInput, IntRangeInput, FloatRangeInput, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6;
	fmt = $packages["fmt"];
	vecty = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty"];
	elem = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/elem"];
	event = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/event"];
	prop = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/prop"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	strconv = $packages["strconv"];
	ColorPicker = $pkg.ColorPicker = $newType(0, $kindStruct, "components.ColorPicker", true, "github.com/akosgarai/webgl-cube-editor/pkg/components", true, function(Core_, Id_, Value_, Label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.Id = "";
			this.Value = "";
			this.Label = "";
			return;
		}
		this.Core = Core_;
		this.Id = Id_;
		this.Value = Value_;
		this.Label = Label_;
	});
	DisplayButton = $pkg.DisplayButton = $newType(0, $kindStruct, "components.DisplayButton", true, "github.com/akosgarai/webgl-cube-editor/pkg/components", true, function(Core_, Id_, Label_, TabulationClass_, TargetFormSelector_, OffIcon_, OnIcon_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.Id = "";
			this.Label = "";
			this.TabulationClass = "";
			this.TargetFormSelector = "";
			this.OffIcon = "";
			this.OnIcon = "";
			return;
		}
		this.Core = Core_;
		this.Id = Id_;
		this.Label = Label_;
		this.TabulationClass = TabulationClass_;
		this.TargetFormSelector = TargetFormSelector_;
		this.OffIcon = OffIcon_;
		this.OnIcon = OnIcon_;
	});
	Heading = $pkg.Heading = $newType(0, $kindStruct, "components.Heading", true, "github.com/akosgarai/webgl-cube-editor/pkg/components", true, function(Core_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.Text = "";
			return;
		}
		this.Core = Core_;
		this.Text = Text_;
	});
	Label = $pkg.Label = $newType(0, $kindStruct, "components.Label", true, "github.com/akosgarai/webgl-cube-editor/pkg/components", true, function(Core_, Text_, For_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.Text = "";
			this.For = "";
			return;
		}
		this.Core = Core_;
		this.Text = Text_;
		this.For = For_;
	});
	NumericInput = $pkg.NumericInput = $newType(0, $kindStruct, "components.NumericInput", true, "github.com/akosgarai/webgl-cube-editor/pkg/components", true, function(Core_, Id_, Value_, Label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.Id = "";
			this.Value = 0;
			this.Label = "";
			return;
		}
		this.Core = Core_;
		this.Id = Id_;
		this.Value = Value_;
		this.Label = Label_;
	});
	IntRangeInput = $pkg.IntRangeInput = $newType(0, $kindStruct, "components.IntRangeInput", true, "github.com/akosgarai/webgl-cube-editor/pkg/components", true, function(Core_, Id_, Value_, MinValue_, MaxValue_, StepValue_, Label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.Id = "";
			this.Value = 0;
			this.MinValue = 0;
			this.MaxValue = 0;
			this.StepValue = 0;
			this.Label = "";
			return;
		}
		this.Core = Core_;
		this.Id = Id_;
		this.Value = Value_;
		this.MinValue = MinValue_;
		this.MaxValue = MaxValue_;
		this.StepValue = StepValue_;
		this.Label = Label_;
	});
	FloatRangeInput = $pkg.FloatRangeInput = $newType(0, $kindStruct, "components.FloatRangeInput", true, "github.com/akosgarai/webgl-cube-editor/pkg/components", true, function(Core_, Id_, Value_, MinValue_, MaxValue_, StepValue_, Label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.Id = "";
			this.Value = 0;
			this.MinValue = 0;
			this.MaxValue = 0;
			this.StepValue = 0;
			this.Label = "";
			return;
		}
		this.Core = Core_;
		this.Id = Id_;
		this.Value = Value_;
		this.MinValue = MinValue_;
		this.MaxValue = MaxValue_;
		this.StepValue = StepValue_;
		this.Label = Label_;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType(vecty.Applyer);
	sliceType$2 = $sliceType(vecty.MarkupOrChild);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType = $ptrType(ColorPicker);
	ptrType$1 = $ptrType(DisplayButton);
	ptrType$2 = $ptrType(Heading);
	ptrType$3 = $ptrType(Label);
	ptrType$4 = $ptrType(NumericInput);
	ptrType$5 = $ptrType(IntRangeInput);
	ptrType$6 = $ptrType(FloatRangeInput);
	ColorPicker.ptr.prototype.Render = function() {
		var $24r, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _r, _r$1, _r$2, _r$3, c, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_arg = (x = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["col-50"]))])), new x.constructor.elem(x));
		_arg$1 = new Label.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), c.Label, c.Id);
		_arg$2 = (x$1 = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["col-75"]))])), new x$1.constructor.elem(x$1));
		_arg$3 = (x$2 = vecty.Markup(new sliceType$1([vecty.Style("padding-right", "20px")])), new x$2.constructor.elem(x$2));
		_r = elem.Input(new sliceType$2([(x$3 = vecty.Markup(new sliceType$1([vecty.Property("id", new $String(c.Id)), prop.Type("color"), prop.Value(c.Value)])), new x$3.constructor.elem(x$3))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$4 = _r;
		_r$1 = elem.Div(new sliceType$2([_arg$3, _arg$4])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$5 = _r$1;
		_r$2 = elem.Div(new sliceType$2([_arg$2, _arg$5])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$6 = _r$2;
		_r$3 = elem.Div(new sliceType$2([_arg, _arg$1, _arg$6])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 5; case 5: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ColorPicker.ptr.prototype.Render }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	ColorPicker.prototype.Render = function() { return this.$val.Render(); };
	DisplayButton.ptr.prototype.Render = function() {
		var $24r, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _r, _r$1, _r$2, _r$3, _r$4, _r$5, i, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = [i];
		i[0] = this;
		_arg = (x = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["row", i[0].TabulationClass]))])), new x.constructor.elem(x));
		_r = vecty.Markup(new sliceType$1([event.Click((function(i) { return function(e) {
			var display, e;
			display = $internalize($global.document.querySelector($externalize(i[0].TargetFormSelector, $String)).style.display, $String);
			if (display === "none") {
				$global.document.querySelector($externalize(i[0].TargetFormSelector, $String)).style.display = $externalize("block", $String);
				$global.document.querySelector($externalize("#" + i[0].Id, $String)).innerText = $externalize(i[0].OnIcon, $String);
			} else {
				$global.document.querySelector($externalize(i[0].TargetFormSelector, $String)).style.display = $externalize("none", $String);
				$global.document.querySelector($externalize("#" + i[0].Id, $String)).innerText = $externalize(i[0].OffIcon, $String);
			}
		}; })(i))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (x$1 = _r, new x$1.constructor.elem(x$1));
		_arg$2 = (x$2 = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["material-icons"])), prop.ID(i[0].Id)])), new x$2.constructor.elem(x$2));
		_r$1 = vecty.Text(i[0].OffIcon, new sliceType$2([])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$3 = _r$1;
		_r$2 = elem.Span(new sliceType$2([_arg$2, _arg$3])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$4 = _r$2;
		_r$3 = vecty.Text(i[0].Label, new sliceType$2([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$5 = _r$3;
		_r$4 = elem.Button(new sliceType$2([_arg$1, _arg$4, _arg$5])); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$6 = _r$4;
		_r$5 = elem.Div(new sliceType$2([_arg, _arg$6])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$24r = _r$5;
		$s = 7; case 7: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DisplayButton.ptr.prototype.Render }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	DisplayButton.prototype.Render = function() { return this.$val.Render(); };
	Heading.ptr.prototype.Render = function() {
		var $24r, _r, _r$1, _r$2, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		_r = vecty.Text(h.Text, new sliceType$2([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = elem.Heading1(new sliceType$2([_r])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = elem.Div(new sliceType$2([_r$1])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 4; case 4: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Heading.ptr.prototype.Render }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	Heading.prototype.Render = function() { return this.$val.Render(); };
	Label.ptr.prototype.Render = function() {
		var $24r, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$2, l, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; l = $f.l; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_arg = (x = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["col-25"]))])), new x.constructor.elem(x));
		_arg$1 = (x$1 = vecty.Markup(new sliceType$1([prop.For(l.For)])), new x$1.constructor.elem(x$1));
		_r = vecty.Text(l.Text, new sliceType$2([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = elem.Label(new sliceType$2([_arg$1, _arg$2])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$3 = _r$1;
		_r$2 = elem.Div(new sliceType$2([_arg, _arg$3])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 4; case 4: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Label.ptr.prototype.Render }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.l = l; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Label.prototype.Render = function() { return this.$val.Render(); };
	NumericInput.ptr.prototype.Render = function() {
		var $24r, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _r, _r$1, _r$2, _r$3, i, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_arg = (x = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["col-50"]))])), new x.constructor.elem(x));
		_arg$1 = new Label.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), i.Label, i.Id);
		_arg$2 = (x$1 = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["col-75"]))])), new x$1.constructor.elem(x$1));
		_arg$3 = (x$2 = vecty.Markup(new sliceType$1([vecty.Style("padding-right", "20px")])), new x$2.constructor.elem(x$2));
		_r = elem.Input(new sliceType$2([(x$3 = vecty.Markup(new sliceType$1([vecty.Property("id", new $String(i.Id)), prop.Type("number"), prop.Value(strconv.Itoa(i.Value))])), new x$3.constructor.elem(x$3))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$4 = _r;
		_r$1 = elem.Div(new sliceType$2([_arg$3, _arg$4])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$5 = _r$1;
		_r$2 = elem.Div(new sliceType$2([_arg$2, _arg$5])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$6 = _r$2;
		_r$3 = elem.Div(new sliceType$2([_arg, _arg$1, _arg$6])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 5; case 5: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumericInput.ptr.prototype.Render }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumericInput.prototype.Render = function() { return this.$val.Render(); };
	IntRangeInput.ptr.prototype.Render = function() {
		var $24r, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _r, _r$1, _r$2, _r$3, i, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_arg = (x = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["col-50"]))])), new x.constructor.elem(x));
		_arg$1 = new Label.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), i.Label, i.Id);
		_arg$2 = (x$1 = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["col-75"]))])), new x$1.constructor.elem(x$1));
		_arg$3 = (x$2 = vecty.Markup(new sliceType$1([vecty.Style("padding-right", "20px")])), new x$2.constructor.elem(x$2));
		_r = elem.Input(new sliceType$2([(x$3 = vecty.Markup(new sliceType$1([vecty.Property("id", new $String(i.Id)), vecty.Property("min", new $Int(i.MinValue)), vecty.Property("max", new $Int(i.MaxValue)), vecty.Property("step", new $Int(i.StepValue)), prop.Type("range"), prop.Value(strconv.Itoa(i.Value))])), new x$3.constructor.elem(x$3))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$4 = _r;
		_r$1 = elem.Div(new sliceType$2([_arg$3, _arg$4])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$5 = _r$1;
		_r$2 = elem.Div(new sliceType$2([_arg$2, _arg$5])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$6 = _r$2;
		_r$3 = elem.Div(new sliceType$2([_arg, _arg$1, _arg$6])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 5; case 5: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IntRangeInput.ptr.prototype.Render }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	IntRangeInput.prototype.Render = function() { return this.$val.Render(); };
	FloatRangeInput.ptr.prototype.Render = function() {
		var $24r, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, i, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; i = $f.i; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_arg = (x = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["col-50"]))])), new x.constructor.elem(x));
		_arg$1 = new Label.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), i.Label, i.Id);
		_arg$2 = (x$1 = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["col-75"]))])), new x$1.constructor.elem(x$1));
		_arg$3 = (x$2 = vecty.Markup(new sliceType$1([vecty.Style("padding-right", "20px")])), new x$2.constructor.elem(x$2));
		_arg$4 = vecty.Property("id", new $String(i.Id));
		_arg$5 = vecty.Property("min", new $Float64(i.MinValue));
		_arg$6 = vecty.Property("max", new $Float64(i.MaxValue));
		_arg$7 = vecty.Property("step", new $Float64(i.StepValue));
		_arg$8 = prop.Type("range");
		_r = fmt.Sprintf("%f", new sliceType$3([new $Float64(i.Value)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = prop.Value(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$9 = _r$1;
		_r$2 = vecty.Markup(new sliceType$1([_arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = elem.Input(new sliceType$2([(x$3 = _r$2, new x$3.constructor.elem(x$3))])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$10 = _r$3;
		_r$4 = elem.Div(new sliceType$2([_arg$3, _arg$10])); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$11 = _r$4;
		_r$5 = elem.Div(new sliceType$2([_arg$2, _arg$11])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$12 = _r$5;
		_r$6 = elem.Div(new sliceType$2([_arg, _arg$1, _arg$12])); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$24r = _r$6;
		$s = 8; case 8: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FloatRangeInput.ptr.prototype.Render }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	FloatRangeInput.prototype.Render = function() { return this.$val.Render(); };
	ptrType.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	ptrType$1.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	ptrType$2.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	ptrType$3.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	ptrType$4.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	ptrType$5.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	ptrType$6.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	ColorPicker.init("", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "Id", name: "Id", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Label", name: "Label", embedded: false, exported: true, typ: $String, tag: ""}]);
	DisplayButton.init("", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "Id", name: "Id", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Label", name: "Label", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "TabulationClass", name: "TabulationClass", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "TargetFormSelector", name: "TargetFormSelector", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "OffIcon", name: "OffIcon", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "OnIcon", name: "OnIcon", embedded: false, exported: true, typ: $String, tag: ""}]);
	Heading.init("", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "Text", name: "Text", embedded: false, exported: true, typ: $String, tag: ""}]);
	Label.init("", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "Text", name: "Text", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "For", name: "For", embedded: false, exported: true, typ: $String, tag: ""}]);
	NumericInput.init("", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "Id", name: "Id", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Label", name: "Label", embedded: false, exported: true, typ: $String, tag: ""}]);
	IntRangeInput.init("", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "Id", name: "Id", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "MinValue", name: "MinValue", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "MaxValue", name: "MaxValue", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "StepValue", name: "StepValue", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Label", name: "Label", embedded: false, exported: true, typ: $String, tag: ""}]);
	FloatRangeInput.init("", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "Id", name: "Id", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: $Float64, tag: ""}, {prop: "MinValue", name: "MinValue", embedded: false, exported: true, typ: $Float64, tag: ""}, {prop: "MaxValue", name: "MaxValue", embedded: false, exported: true, typ: $Float64, tag: ""}, {prop: "StepValue", name: "StepValue", embedded: false, exported: true, typ: $Float64, tag: ""}, {prop: "Label", name: "Label", embedded: false, exported: true, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = vecty.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = elem.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = event.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = prop.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/akosgarai/webgl-cube-editor/pkg/forms"] = (function() {
	var $pkg = {}, $init, components, vecty, elem, prop, CubeDisplay, CubeRotation, Lightsource, Scene, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$3;
	components = $packages["github.com/akosgarai/webgl-cube-editor/pkg/components"];
	vecty = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty"];
	elem = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/elem"];
	prop = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/prop"];
	CubeDisplay = $pkg.CubeDisplay = $newType(0, $kindStruct, "forms.CubeDisplay", true, "github.com/akosgarai/webgl-cube-editor/pkg/forms", true, function(Core_, CubeColorId_, CubeColor_, CubeWidthId_, CubeWidth_, CubeHeightId_, CubeHeight_, CubeDepthId_, CubeDepth_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.CubeColorId = "";
			this.CubeColor = "";
			this.CubeWidthId = "";
			this.CubeWidth = 0;
			this.CubeHeightId = "";
			this.CubeHeight = 0;
			this.CubeDepthId = "";
			this.CubeDepth = 0;
			return;
		}
		this.Core = Core_;
		this.CubeColorId = CubeColorId_;
		this.CubeColor = CubeColor_;
		this.CubeWidthId = CubeWidthId_;
		this.CubeWidth = CubeWidth_;
		this.CubeHeightId = CubeHeightId_;
		this.CubeHeight = CubeHeight_;
		this.CubeDepthId = CubeDepthId_;
		this.CubeDepth = CubeDepth_;
	});
	CubeRotation = $pkg.CubeRotation = $newType(0, $kindStruct, "forms.CubeRotation", true, "github.com/akosgarai/webgl-cube-editor/pkg/forms", true, function(Core_, RotationComponentXId_, RotationXValue_, RotationComponentYId_, RotationYValue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.RotationComponentXId = "";
			this.RotationXValue = 0;
			this.RotationComponentYId = "";
			this.RotationYValue = 0;
			return;
		}
		this.Core = Core_;
		this.RotationComponentXId = RotationComponentXId_;
		this.RotationXValue = RotationXValue_;
		this.RotationComponentYId = RotationComponentYId_;
		this.RotationYValue = RotationYValue_;
	});
	Lightsource = $pkg.Lightsource = $newType(0, $kindStruct, "forms.Lightsource", true, "github.com/akosgarai/webgl-cube-editor/pkg/forms", true, function(Core_, AmbientLightColorId_, AmbientLightColor_, AmbientLightIntensityId_, AmbientLightIntensity_, DirectionalLightColorId_, DirectionalLightColor_, DirectionalLightIntensityId_, DirectionalLightIntensity_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.AmbientLightColorId = "";
			this.AmbientLightColor = "";
			this.AmbientLightIntensityId = "";
			this.AmbientLightIntensity = 0;
			this.DirectionalLightColorId = "";
			this.DirectionalLightColor = "";
			this.DirectionalLightIntensityId = "";
			this.DirectionalLightIntensity = 0;
			return;
		}
		this.Core = Core_;
		this.AmbientLightColorId = AmbientLightColorId_;
		this.AmbientLightColor = AmbientLightColor_;
		this.AmbientLightIntensityId = AmbientLightIntensityId_;
		this.AmbientLightIntensity = AmbientLightIntensity_;
		this.DirectionalLightColorId = DirectionalLightColorId_;
		this.DirectionalLightColor = DirectionalLightColor_;
		this.DirectionalLightIntensityId = DirectionalLightIntensityId_;
		this.DirectionalLightIntensity = DirectionalLightIntensity_;
	});
	Scene = $pkg.Scene = $newType(0, $kindStruct, "forms.Scene", true, "github.com/akosgarai/webgl-cube-editor/pkg/forms", true, function(Core_, BackgroundColorId_, BackgroundColor_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.BackgroundColorId = "";
			this.BackgroundColor = "";
			return;
		}
		this.Core = Core_;
		this.BackgroundColorId = BackgroundColorId_;
		this.BackgroundColor = BackgroundColor_;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType(vecty.Applyer);
	sliceType$2 = $sliceType(vecty.MarkupOrChild);
	ptrType = $ptrType(CubeDisplay);
	ptrType$1 = $ptrType(CubeRotation);
	ptrType$2 = $ptrType(Lightsource);
	ptrType$3 = $ptrType(Scene);
	CubeDisplay.ptr.prototype.Render = function() {
		var $24r, _arg, _arg$1, _r, _r$1, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_arg = new components.DisplayButton.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "cube-display-lock", "Cube Display", "sub-menu", "#cube-display-container", "open_in_full", "close_fullscreen");
		_r = elem.Div(new sliceType$2([(x = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["row"])), prop.ID("cube-display-container"), vecty.Style("display", "none")])), new x.constructor.elem(x)), new components.ColorPicker.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), f.CubeColorId, f.CubeColor, "Cube Color:"), new components.NumericInput.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), f.CubeWidthId, f.CubeWidth, "Cube Width:"), new components.NumericInput.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), f.CubeHeightId, f.CubeHeight, "Cube Height:"), new components.NumericInput.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), f.CubeDepthId, f.CubeDepth, "Cube Depth:")])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		_r$1 = elem.Div(new sliceType$2([_arg, _arg$1])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CubeDisplay.ptr.prototype.Render }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CubeDisplay.prototype.Render = function() { return this.$val.Render(); };
	CubeRotation.ptr.prototype.Render = function() {
		var $24r, _arg, _arg$1, _r, _r$1, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_arg = new components.DisplayButton.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "cube-rotation-lock", "Cube Rotation", "sub-menu", "#cube-rotation-container", "open_in_full", "close_fullscreen");
		_r = elem.Div(new sliceType$2([(x = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["row"])), prop.ID("cube-rotation-container"), vecty.Style("display", "none")])), new x.constructor.elem(x)), new components.IntRangeInput.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), f.RotationComponentYId, f.RotationYValue, -1000, 1000, 10, "Y Rotation:"), new components.IntRangeInput.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), f.RotationComponentXId, f.RotationXValue, -1000, 1000, 10, "X Rotation:")])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		_r$1 = elem.Div(new sliceType$2([_arg, _arg$1])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CubeRotation.ptr.prototype.Render }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CubeRotation.prototype.Render = function() { return this.$val.Render(); };
	Lightsource.ptr.prototype.Render = function() {
		var $24r, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _r, _r$1, _r$2, _r$3, f, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; f = $f.f; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_arg = new components.DisplayButton.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "lightsources-lock", "Lightsources", "sub-menu", "#lightsources-container", "open_in_full", "close_fullscreen");
		_arg$1 = (x = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["row"])), prop.ID("lightsources-container"), vecty.Style("display", "none")])), new x.constructor.elem(x));
		_arg$2 = new components.DisplayButton.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "ambient-lightsources-lock", "Ambient Lightsource", "sub-menu-2", "#ambient-lightsources-container", "open_in_full", "close_fullscreen");
		_r = elem.Div(new sliceType$2([(x$1 = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["row"])), prop.ID("ambient-lightsources-container"), vecty.Style("display", "none")])), new x$1.constructor.elem(x$1)), new components.ColorPicker.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), f.AmbientLightColorId, f.AmbientLightColor, "Light color:"), new components.FloatRangeInput.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), f.AmbientLightIntensityId, f.AmbientLightIntensity, 0, 1, 0.01, "Intensity:")])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$3 = _r;
		_arg$4 = new components.DisplayButton.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "directional-lightsources-lock", "Directional Lightsources", "sub-menu-2", "#directional-lightsources-container", "open_in_full", "close_fullscreen");
		_r$1 = elem.Div(new sliceType$2([(x$2 = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["row"])), prop.ID("directional-lightsources-container"), vecty.Style("display", "none")])), new x$2.constructor.elem(x$2)), new components.ColorPicker.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), f.DirectionalLightColorId, f.DirectionalLightColor, "Light:"), new components.FloatRangeInput.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), f.DirectionalLightIntensityId, f.DirectionalLightIntensity, 0, 1, 0.01, "Intensity:")])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$5 = _r$1;
		_r$2 = elem.Div(new sliceType$2([_arg$1, _arg$2, _arg$3, _arg$4, _arg$5])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$6 = _r$2;
		_r$3 = elem.Div(new sliceType$2([_arg, _arg$6])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 5; case 5: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Lightsource.ptr.prototype.Render }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.f = f; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Lightsource.prototype.Render = function() { return this.$val.Render(); };
	Scene.ptr.prototype.Render = function() {
		var $24r, _arg, _arg$1, _r, _r$1, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_arg = new components.DisplayButton.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "scene-lock", "Scene", "sub-menu", "#scene-container", "open_in_full", "close_fullscreen");
		_r = elem.Div(new sliceType$2([(x = vecty.Markup(new sliceType$1([vecty.Class(new sliceType(["row"])), prop.ID("scene-container"), vecty.Style("display", "none")])), new x.constructor.elem(x)), new components.ColorPicker.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), f.BackgroundColorId, f.BackgroundColor, "Background:")])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		_r$1 = elem.Div(new sliceType$2([_arg, _arg$1])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scene.ptr.prototype.Render }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scene.prototype.Render = function() { return this.$val.Render(); };
	ptrType.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	ptrType$1.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	ptrType$2.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	ptrType$3.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	CubeDisplay.init("", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "CubeColorId", name: "CubeColorId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "CubeColor", name: "CubeColor", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "CubeWidthId", name: "CubeWidthId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "CubeWidth", name: "CubeWidth", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "CubeHeightId", name: "CubeHeightId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "CubeHeight", name: "CubeHeight", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "CubeDepthId", name: "CubeDepthId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "CubeDepth", name: "CubeDepth", embedded: false, exported: true, typ: $Int, tag: ""}]);
	CubeRotation.init("", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "RotationComponentXId", name: "RotationComponentXId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "RotationXValue", name: "RotationXValue", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "RotationComponentYId", name: "RotationComponentYId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "RotationYValue", name: "RotationYValue", embedded: false, exported: true, typ: $Int, tag: ""}]);
	Lightsource.init("", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "AmbientLightColorId", name: "AmbientLightColorId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "AmbientLightColor", name: "AmbientLightColor", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "AmbientLightIntensityId", name: "AmbientLightIntensityId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "AmbientLightIntensity", name: "AmbientLightIntensity", embedded: false, exported: true, typ: $Float64, tag: ""}, {prop: "DirectionalLightColorId", name: "DirectionalLightColorId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "DirectionalLightColor", name: "DirectionalLightColor", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "DirectionalLightIntensityId", name: "DirectionalLightIntensityId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "DirectionalLightIntensity", name: "DirectionalLightIntensity", embedded: false, exported: true, typ: $Float64, tag: ""}]);
	Scene.init("", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "BackgroundColorId", name: "BackgroundColorId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "BackgroundColor", name: "BackgroundColor", embedded: false, exported: true, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = components.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = vecty.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = elem.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = prop.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three"] = (function() {
	var $pkg = {}, $init, js, AmbientLight, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrowHelper, ArrowHelperOpts, Audio, AudioAnalyser, AudioBuffer, AudioListener, AxisHelper, BinaryTextureLoader, Bone, BooleanKeyframeTrack, BoundingBoxHelper, Box2, Box3, BoxBufferGeometry, BoxBufferGeometryOpts, BoxGeometry, BoxGeometryOpts, BoxHelper, BufferAttribute, Int8Attribute, Uint8Attribute, Uint8ClampedAttribute, Int16Attribute, Uint16Attribute, Int32Attribute, Uint32Attribute, Float32Attribute, Float64Attribute, BufferGeometry, BufferGeometryLoader, BufferGeometryLoadFunc, Cache, Camera, CameraHelper, CanvasTexture, CatmullRomCurve3, CircleBufferGeometry, CircleBufferGeometryOpts, CircleGeometry, CircleGeometryOpts, Clock, Color, ColorKeyframeTrack, CompressedTexture, CompressedTextureLoader, CubeCamera, CubeTexture, CubeTextureLoader, CubeTextureLoadFunc, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, Curve, CurvePath, CurveUtils, CylinderBufferGeometry, CylinderBufferGeometryOpts, CylinderGeometry, CylinderGeometryOpts, DataTexture, DirectGeometry, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry, EdgesGeometry, EdgesHelper, EllipseCurve, EllipseCurveOpts, Euler, EventDispatcher, ExtrudeGeometry, ExtrudeGeometryOpts, Face3, FaceNormalsHelper, Fog, FogExp2, Font, FontLoader, Frustum, Geometry, GridHelper, Group, HemisphereLight, HemisphereLightHelper, IcosahedronGeometry, ImageLoader, ImmediateRenderObject, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, JSONLoader, JSONLoadFunc, KeyframeTrack, LatheBufferGeometry, LatheGeometry, Layers, LensFlare, LensFlarePlugin, Light, LightShadow, Line, Line3, LineBasicMaterial, LineBasicMaterialOpts, LineCurve, LineDashedMaterial, LineSegments, LinearInterpolant, Loader, LoadingManager, LOD, LUT, LUTLegendOpts, Material, MaterialLoader, Math, Matrix3, Matrix4, Mesh, MeshBasicMaterial, MeshBasicMaterialOpts, MeshDepthMaterial, MeshDepthMaterialOpts, MeshLambertMaterial, MeshLambertMaterialOpts, MeshNormalMaterial, MeshNormalMaterialOpts, MeshPhongMaterial, MeshPhongMaterialOpts, MeshStandardMaterial, MeshStandardMaterialOpts, MorphBlendMesh, MultiMaterial, NumberKeyframeTrack, Object3D, ObjectLoader, OctahedronGeometry, OrthographicCamera, ParametricGeometry, Path, PerspectiveCamera, Plane, PlaneBufferGeometry, PlaneGeometry, PointLight, PointLightHelper, Points, PointsMaterial, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, RawShaderMaterial, Ray, Raycaster, RingBufferGeometry, RingGeometry, Scene, SceneUtils, ShaderChunk, ShaderLib, ShaderMaterial, Shape, ShapeGeometry, ShapeUtils, Skeleton, SkeletonHelper, SkinnedMesh, Sphere, SphereBufferGeometry, SphereGeometry, SphereGeometryOpts, Spherical, Spline, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SpritePlugin, StereoCamera, StringKeyframeTrack, TetrahedronGeometry, TextGeometry, Texture, TextureOpts, TextureLoader, TextureLoadFunc, JSObject, Three, MOUSE, TorusBufferGeometry, TorusGeometry, TorusKnotBufferGeometry, TorusKnotGeometry, Triangle, TubeGeometry, Uniform, UniformsLib, UniformsUtils, Vector2, Vector3, Vector4, VectorKeyframeTrack, VertexNormalsHelper, VideoTexture, WebGLBufferRenderer, WebGLCapabilities, WebGLExtensions, WebGLGeometries, WebGLIndexedBufferRenderer, WebGLLights, WebGLObjects, WebGLProgram, WebGLPrograms, WebGLProperties, WebGLRenderTarget, WebGLRenderTargetCube, WebGLRenderer, WebGLRendererOpts, RenderOpts, WebGLShader, WebGLShadowMap, WebGLState, WireframeGeometry, WireframeHelper, XHRLoader, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, sliceType$8, sliceType$9, ptrType$6, sliceType$10, ptrType$7, sliceType$11, ptrType$8, ptrType$9, sliceType$12, ptrType$10, funcType, ptrType$11, sliceType$13, ptrType$12, ptrType$13, sliceType$14, sliceType$15, ptrType$14, ptrType$15, ptrType$16, funcType$1, ptrType$17, ptrType$18, sliceType$16, mapType, ptrType$19, ptrType$20, sliceType$17, funcType$2, ptrType$21, ptrType$22, ptrType$23, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, ptrType$47, ptrType$48, ptrType$49, ptrType$50, ptrType$51, ptrType$52, ptrType$53, ptrType$54, ptrType$55, ptrType$56, ptrType$57, ptrType$58, ptrType$59, ptrType$60, ptrType$61, ptrType$62, ptrType$63, ptrType$64, ptrType$65, ptrType$66, ptrType$67, ptrType$68, ptrType$69, ptrType$70, ptrType$71, ptrType$72, ptrType$73, ptrType$74, ptrType$75, ptrType$76, ptrType$77, ptrType$78, ptrType$79, ptrType$80, ptrType$81, ptrType$82, ptrType$83, ptrType$84, ptrType$85, ptrType$86, ptrType$87, ptrType$88, ptrType$89, ptrType$90, ptrType$91, ptrType$92, ptrType$93, ptrType$94, ptrType$95, ptrType$96, ptrType$97, ptrType$98, ptrType$99, ptrType$100, ptrType$101, ptrType$102, ptrType$103, ptrType$104, ptrType$105, ptrType$106, ptrType$107, ptrType$108, ptrType$109, ptrType$110, ptrType$111, ptrType$112, ptrType$113, ptrType$114, ptrType$115, ptrType$116, ptrType$117, ptrType$118, ptrType$119, ptrType$120, ptrType$121, ptrType$122, ptrType$123, ptrType$124, ptrType$125, ptrType$126, ptrType$127, ptrType$128, ptrType$129, ptrType$130, ptrType$131, ptrType$132, ptrType$133, ptrType$134, ptrType$135, ptrType$136, ptrType$137, ptrType$138, ptrType$139, ptrType$140, ptrType$141, ptrType$142, ptrType$143, ptrType$144, ptrType$145, ptrType$146, ptrType$147, ptrType$148, ptrType$149, ptrType$150, ptrType$151, ptrType$152, ptrType$153, ptrType$154, ptrType$155, ptrType$156, ptrType$157, ptrType$158, ptrType$159, ptrType$160, ptrType$161, ptrType$162, ptrType$163, ptrType$164, ptrType$165, ptrType$166, ptrType$167, sliceType$18, ptrType$168, ptrType$169, ptrType$170, ptrType$171, ptrType$172, ptrType$173, ptrType$174, ptrType$175, ptrType$176, ptrType$177, ptrType$178, ptrType$179, ptrType$180, ptrType$181, ptrType$182, ptrType$183, ptrType$184, ptrType$185, ptrType$186, ptrType$187, ptrType$188, ptrType$189, ptrType$190, ptrType$191, ptrType$192, ptrType$193, ptrType$194, ptrType$195, ptrType$196, ptrType$197, ptrType$198, ptrType$199, ptrType$200, ptrType$201, ptrType$202, ptrType$203, ptrType$204, ptrType$205, ptrType$206, ptrType$207, ptrType$208, ptrType$209, ptrType$210, ptrType$211, ptrType$212, ptrType$213, ptrType$214, ptrType$215, ptrType$216, ptrType$217, ptrType$218, ptrType$219, ptrType$220, ptrType$221, ptrType$222, ptrType$223, ptrType$224, ptrType$225, ptrType$226, ptrType$227, ptrType$228, ptrType$229, ptrType$230, ptrType$231, ptrType$232, ptrType$233, AmbientLightFromJSObject, AnimationClipFromJSObject, AnimationLoaderFromJSObject, AnimationMixerFromJSObject, AnimationObjectGroupFromJSObject, AnimationUtilsFromJSObject, ArcCurveFromJSObject, ArrowHelperFromJSObject, AudioFromJSObject, AudioAnalyserFromJSObject, AudioBufferFromJSObject, AudioListenerFromJSObject, AxisHelperFromJSObject, BinaryTextureLoaderFromJSObject, BoneFromJSObject, BooleanKeyframeTrackFromJSObject, BoundingBoxHelperFromJSObject, Box2FromJSObject, Box3FromJSObject, BoxBufferGeometryFromJSObject, BoxGeometryFromJSObject, BoxHelperFromJSObject, BufferAttributeFromJSObject, BufferGeometryFromJSObject, BufferGeometryLoaderFromJSObject, onBufferGeometryLoadWrapperFunc, CacheFromJSObject, CameraFromJSObject, CameraHelperFromJSObject, CanvasTextureFromJSObject, CatmullRomCurve3FromJSObject, CircleBufferGeometryFromJSObject, CircleGeometryFromJSObject, ClockFromJSObject, ColorFromJSObject, ColorKeyframeTrackFromJSObject, CompressedTextureFromJSObject, CompressedTextureLoaderFromJSObject, CubeCameraFromJSObject, CubeTextureFromJSObject, CubeTextureLoaderFromJSObject, onCubeTextureLoadWrapperFunc, CubicBezierCurveFromJSObject, CubicBezierCurve3FromJSObject, CubicInterpolantFromJSObject, CurveFromJSObject, CurvePathFromJSObject, CurveUtilsFromJSObject, CylinderBufferGeometryFromJSObject, CylinderGeometryFromJSObject, DataTextureFromJSObject, DirectGeometryFromJSObject, DirectionalLightFromJSObject, DirectionalLightHelperFromJSObject, DiscreteInterpolantFromJSObject, DodecahedronGeometryFromJSObject, EdgesGeometryFromJSObject, EdgesHelperFromJSObject, EllipseCurveFromJSObject, EulerFromJSObject, EventDispatcherFromJSObject, ExtrudeGeometryFromJSObject, Face3FromJSObject, FaceNormalsHelperFromJSObject, FogFromJSObject, FogExp2FromJSObject, FontFromJSObject, FontLoaderFromJSObject, FrustumFromJSObject, GeometryFromJSObject, GridHelperFromJSObject, GroupFromJSObject, HemisphereLightFromJSObject, HemisphereLightHelperFromJSObject, IcosahedronGeometryFromJSObject, ImageLoaderFromJSObject, ImmediateRenderObjectFromJSObject, InstancedBufferAttributeFromJSObject, InstancedBufferGeometryFromJSObject, InstancedInterleavedBufferFromJSObject, InterleavedBufferFromJSObject, InterleavedBufferAttributeFromJSObject, InterpolantFromJSObject, JSONLoaderFromJSObject, onJSONLoadWrapperFunc, KeyframeTrackFromJSObject, LatheBufferGeometryFromJSObject, LatheGeometryFromJSObject, LayersFromJSObject, LensFlareFromJSObject, LensFlarePluginFromJSObject, LightFromJSObject, LightShadowFromJSObject, LineFromJSObject, Line3FromJSObject, LineBasicMaterialFromJSObject, LineCurveFromJSObject, LineDashedMaterialFromJSObject, LineSegmentsFromJSObject, LinearInterpolantFromJSObject, LoaderFromJSObject, LoadingManagerFromJSObject, LODFromJSObject, LUTFromJSObject, MaterialFromJSObject, MaterialLoaderFromJSObject, MathFromJSObject, Matrix3FromJSObject, Matrix4FromJSObject, MeshFromJSObject, MeshBasicMaterialFromJSObject, MeshDepthMaterialFromJSObject, MeshLambertMaterialFromJSObject, MeshNormalMaterialFromJSObject, MeshPhongMaterialFromJSObject, MeshStandardMaterialFromJSObject, MorphBlendMeshFromJSObject, MultiMaterialFromJSObject, NumberKeyframeTrackFromJSObject, Object3DFromJSObject, ObjectLoaderFromJSObject, OctahedronGeometryFromJSObject, OrthographicCameraFromJSObject, ParametricGeometryFromJSObject, PathFromJSObject, PerspectiveCameraFromJSObject, PlaneFromJSObject, PlaneBufferGeometryFromJSObject, PlaneGeometryFromJSObject, PointLightFromJSObject, PointLightHelperFromJSObject, PointsFromJSObject, PointsMaterialFromJSObject, PolyhedronGeometryFromJSObject, PositionalAudioFromJSObject, PropertyBindingFromJSObject, PropertyMixerFromJSObject, QuadraticBezierCurveFromJSObject, QuaternionFromJSObject, QuaternionKeyframeTrackFromJSObject, QuaternionLinearInterpolantFromJSObject, RawShaderMaterialFromJSObject, RayFromJSObject, RaycasterFromJSObject, RingBufferGeometryFromJSObject, RingGeometryFromJSObject, SceneFromJSObject, SceneUtilsFromJSObject, ShaderChunkFromJSObject, ShaderLibFromJSObject, ShaderMaterialFromJSObject, ShapeFromJSObject, ShapeGeometryFromJSObject, ShapeUtilsFromJSObject, SkeletonFromJSObject, SkeletonHelperFromJSObject, SkinnedMeshFromJSObject, SphereFromJSObject, SphereBufferGeometryFromJSObject, SphereGeometryFromJSObject, SphericalFromJSObject, SplineFromJSObject, SplineCurveFromJSObject, SpotLightFromJSObject, SpotLightHelperFromJSObject, SpriteFromJSObject, SpriteMaterialFromJSObject, SpritePluginFromJSObject, StereoCameraFromJSObject, StringKeyframeTrackFromJSObject, TetrahedronGeometryFromJSObject, TextGeometryFromJSObject, TextureFromJSObject, TextureLoaderFromJSObject, onTextureLoadWrapperFunc, New, TorusBufferGeometryFromJSObject, TorusGeometryFromJSObject, TorusKnotBufferGeometryFromJSObject, TorusKnotGeometryFromJSObject, TriangleFromJSObject, TubeGeometryFromJSObject, UniformFromJSObject, UniformsLibFromJSObject, UniformsUtilsFromJSObject, Vector2FromJSObject, Vector3FromJSObject, Vector4FromJSObject, VectorKeyframeTrackFromJSObject, VertexNormalsHelperFromJSObject, VideoTextureFromJSObject, WebGLBufferRendererFromJSObject, WebGLCapabilitiesFromJSObject, WebGLExtensionsFromJSObject, WebGLGeometriesFromJSObject, WebGLIndexedBufferRendererFromJSObject, WebGLLightsFromJSObject, WebGLObjectsFromJSObject, WebGLProgramFromJSObject, WebGLProgramsFromJSObject, WebGLPropertiesFromJSObject, WebGLRenderTargetFromJSObject, WebGLRenderTargetCubeFromJSObject, WebGLRendererFromJSObject, WebGLShaderFromJSObject, WebGLShadowMapFromJSObject, WebGLStateFromJSObject, WireframeGeometryFromJSObject, WireframeHelperFromJSObject, XHRLoaderFromJSObject;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	AmbientLight = $pkg.AmbientLight = $newType(0, $kindStruct, "three.AmbientLight", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Light_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Light = ptrType$28.nil;
			return;
		}
		this.Light = Light_;
	});
	AnimationClip = $pkg.AnimationClip = $newType(0, $kindStruct, "three.AnimationClip", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	AnimationLoader = $pkg.AnimationLoader = $newType(0, $kindStruct, "three.AnimationLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	AnimationMixer = $pkg.AnimationMixer = $newType(0, $kindStruct, "three.AnimationMixer", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	AnimationObjectGroup = $pkg.AnimationObjectGroup = $newType(0, $kindStruct, "three.AnimationObjectGroup", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	AnimationUtils = $pkg.AnimationUtils = $newType(0, $kindStruct, "three.AnimationUtils", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	ArcCurve = $pkg.ArcCurve = $newType(0, $kindStruct, "three.ArcCurve", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(EllipseCurve_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.EllipseCurve = ptrType$35.nil;
			return;
		}
		this.EllipseCurve = EllipseCurve_;
	});
	ArrowHelper = $pkg.ArrowHelper = $newType(0, $kindStruct, "three.ArrowHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Object3D_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object3D = ptrType$20.nil;
			return;
		}
		this.Object3D = Object3D_;
	});
	ArrowHelperOpts = $pkg.ArrowHelperOpts = $newType(0, $kindStruct, "three.ArrowHelperOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Length_, Color_, HeadLength_, HeadWidth_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Length = ptrType$1.nil;
			this.Color = ptrType$2.nil;
			this.HeadLength = ptrType$1.nil;
			this.HeadWidth = ptrType$1.nil;
			return;
		}
		this.Length = Length_;
		this.Color = Color_;
		this.HeadLength = HeadLength_;
		this.HeadWidth = HeadWidth_;
	});
	Audio = $pkg.Audio = $newType(0, $kindStruct, "three.Audio", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	AudioAnalyser = $pkg.AudioAnalyser = $newType(0, $kindStruct, "three.AudioAnalyser", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	AudioBuffer = $pkg.AudioBuffer = $newType(0, $kindStruct, "three.AudioBuffer", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	AudioListener = $pkg.AudioListener = $newType(0, $kindStruct, "three.AudioListener", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	AxisHelper = $pkg.AxisHelper = $newType(0, $kindStruct, "three.AxisHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(LineSegments_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.LineSegments = ptrType$42.nil;
			return;
		}
		this.LineSegments = LineSegments_;
	});
	BinaryTextureLoader = $pkg.BinaryTextureLoader = $newType(0, $kindStruct, "three.BinaryTextureLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Bone = $pkg.Bone = $newType(0, $kindStruct, "three.Bone", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Object3D_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object3D = ptrType$20.nil;
			return;
		}
		this.Object3D = Object3D_;
	});
	BooleanKeyframeTrack = $pkg.BooleanKeyframeTrack = $newType(0, $kindStruct, "three.BooleanKeyframeTrack", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	BoundingBoxHelper = $pkg.BoundingBoxHelper = $newType(0, $kindStruct, "three.BoundingBoxHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Mesh_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mesh = ptrType$47.nil;
			return;
		}
		this.Mesh = Mesh_;
	});
	Box2 = $pkg.Box2 = $newType(0, $kindStruct, "three.Box2", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Box3 = $pkg.Box3 = $newType(0, $kindStruct, "three.Box3", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	BoxBufferGeometry = $pkg.BoxBufferGeometry = $newType(0, $kindStruct, "three.BoxBufferGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(BufferGeometry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BufferGeometry = ptrType$51.nil;
			return;
		}
		this.BufferGeometry = BufferGeometry_;
	});
	BoxBufferGeometryOpts = $pkg.BoxBufferGeometryOpts = $newType(0, $kindStruct, "three.BoxBufferGeometryOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(widthSegments_, heightSegments_, depthSegments_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widthSegments = 0;
			this.heightSegments = 0;
			this.depthSegments = 0;
			return;
		}
		this.widthSegments = widthSegments_;
		this.heightSegments = heightSegments_;
		this.depthSegments = depthSegments_;
	});
	BoxGeometry = $pkg.BoxGeometry = $newType(0, $kindStruct, "three.BoxGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Geometry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Geometry = ptrType$53.nil;
			return;
		}
		this.Geometry = Geometry_;
	});
	BoxGeometryOpts = $pkg.BoxGeometryOpts = $newType(0, $kindStruct, "three.BoxGeometryOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(WidthSegments_, HeightSegments_, DepthSegments_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.WidthSegments = 0;
			this.HeightSegments = 0;
			this.DepthSegments = 0;
			return;
		}
		this.WidthSegments = WidthSegments_;
		this.HeightSegments = HeightSegments_;
		this.DepthSegments = DepthSegments_;
	});
	BoxHelper = $pkg.BoxHelper = $newType(0, $kindStruct, "three.BoxHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Line = ptrType$55.nil;
			return;
		}
		this.Line = Line_;
	});
	BufferAttribute = $pkg.BufferAttribute = $newType(0, $kindStruct, "three.BufferAttribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Int8Attribute = $pkg.Int8Attribute = $newType(0, $kindStruct, "three.Int8Attribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Uint8Attribute = $pkg.Uint8Attribute = $newType(0, $kindStruct, "three.Uint8Attribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Uint8ClampedAttribute = $pkg.Uint8ClampedAttribute = $newType(0, $kindStruct, "three.Uint8ClampedAttribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Int16Attribute = $pkg.Int16Attribute = $newType(0, $kindStruct, "three.Int16Attribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Uint16Attribute = $pkg.Uint16Attribute = $newType(0, $kindStruct, "three.Uint16Attribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Int32Attribute = $pkg.Int32Attribute = $newType(0, $kindStruct, "three.Int32Attribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Uint32Attribute = $pkg.Uint32Attribute = $newType(0, $kindStruct, "three.Uint32Attribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Float32Attribute = $pkg.Float32Attribute = $newType(0, $kindStruct, "three.Float32Attribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Float64Attribute = $pkg.Float64Attribute = $newType(0, $kindStruct, "three.Float64Attribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	BufferGeometry = $pkg.BufferGeometry = $newType(0, $kindStruct, "three.BufferGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	BufferGeometryLoader = $pkg.BufferGeometryLoader = $newType(0, $kindStruct, "three.BufferGeometryLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	BufferGeometryLoadFunc = $pkg.BufferGeometryLoadFunc = $newType(4, $kindFunc, "three.BufferGeometryLoadFunc", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	Cache = $pkg.Cache = $newType(0, $kindStruct, "three.Cache", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Camera = $pkg.Camera = $newType(0, $kindStruct, "three.Camera", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Object3D_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object3D = ptrType$20.nil;
			return;
		}
		this.Object3D = Object3D_;
	});
	CameraHelper = $pkg.CameraHelper = $newType(0, $kindStruct, "three.CameraHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Line = ptrType$55.nil;
			return;
		}
		this.Line = Line_;
	});
	CanvasTexture = $pkg.CanvasTexture = $newType(0, $kindStruct, "three.CanvasTexture", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	CatmullRomCurve3 = $pkg.CatmullRomCurve3 = $newType(0, $kindStruct, "three.CatmullRomCurve3", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Curve_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Curve = ptrType$62.nil;
			return;
		}
		this.Curve = Curve_;
	});
	CircleBufferGeometry = $pkg.CircleBufferGeometry = $newType(0, $kindStruct, "three.CircleBufferGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(BufferGeometry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BufferGeometry = ptrType$51.nil;
			return;
		}
		this.BufferGeometry = BufferGeometry_;
	});
	CircleBufferGeometryOpts = $pkg.CircleBufferGeometryOpts = $newType(0, $kindStruct, "three.CircleBufferGeometryOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(thetaStart_, thetaLength_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.thetaStart = 0;
			this.thetaLength = 0;
			return;
		}
		this.thetaStart = thetaStart_;
		this.thetaLength = thetaLength_;
	});
	CircleGeometry = $pkg.CircleGeometry = $newType(0, $kindStruct, "three.CircleGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Geometry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Geometry = ptrType$53.nil;
			return;
		}
		this.Geometry = Geometry_;
	});
	CircleGeometryOpts = $pkg.CircleGeometryOpts = $newType(0, $kindStruct, "three.CircleGeometryOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(thetaStart_, thetaLength_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.thetaStart = 0;
			this.thetaLength = 0;
			return;
		}
		this.thetaStart = thetaStart_;
		this.thetaLength = thetaLength_;
	});
	Clock = $pkg.Clock = $newType(0, $kindStruct, "three.Clock", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Color = $pkg.Color = $newType(0, $kindStruct, "three.Color", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	ColorKeyframeTrack = $pkg.ColorKeyframeTrack = $newType(0, $kindStruct, "three.ColorKeyframeTrack", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	CompressedTexture = $pkg.CompressedTexture = $newType(0, $kindStruct, "three.CompressedTexture", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	CompressedTextureLoader = $pkg.CompressedTextureLoader = $newType(0, $kindStruct, "three.CompressedTextureLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	CubeCamera = $pkg.CubeCamera = $newType(0, $kindStruct, "three.CubeCamera", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Object3D_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object3D = ptrType$20.nil;
			return;
		}
		this.Object3D = Object3D_;
	});
	CubeTexture = $pkg.CubeTexture = $newType(0, $kindStruct, "three.CubeTexture", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Texture_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Texture = ptrType$72.nil;
			return;
		}
		this.Texture = Texture_;
	});
	CubeTextureLoader = $pkg.CubeTextureLoader = $newType(0, $kindStruct, "three.CubeTextureLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	CubeTextureLoadFunc = $pkg.CubeTextureLoadFunc = $newType(4, $kindFunc, "three.CubeTextureLoadFunc", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	CubicBezierCurve = $pkg.CubicBezierCurve = $newType(0, $kindStruct, "three.CubicBezierCurve", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Curve_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Curve = ptrType$62.nil;
			return;
		}
		this.Curve = Curve_;
	});
	CubicBezierCurve3 = $pkg.CubicBezierCurve3 = $newType(0, $kindStruct, "three.CubicBezierCurve3", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Curve_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Curve = ptrType$62.nil;
			return;
		}
		this.Curve = Curve_;
	});
	CubicInterpolant = $pkg.CubicInterpolant = $newType(0, $kindStruct, "three.CubicInterpolant", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Curve = $pkg.Curve = $newType(0, $kindStruct, "three.Curve", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	CurvePath = $pkg.CurvePath = $newType(0, $kindStruct, "three.CurvePath", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Curve_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Curve = ptrType$62.nil;
			return;
		}
		this.Curve = Curve_;
	});
	CurveUtils = $pkg.CurveUtils = $newType(0, $kindStruct, "three.CurveUtils", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	CylinderBufferGeometry = $pkg.CylinderBufferGeometry = $newType(0, $kindStruct, "three.CylinderBufferGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(BufferGeometry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BufferGeometry = ptrType$51.nil;
			return;
		}
		this.BufferGeometry = BufferGeometry_;
	});
	CylinderBufferGeometryOpts = $pkg.CylinderBufferGeometryOpts = $newType(0, $kindStruct, "three.CylinderBufferGeometryOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(thetaStart_, thetaLength_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.thetaStart = 0;
			this.thetaLength = 0;
			return;
		}
		this.thetaStart = thetaStart_;
		this.thetaLength = thetaLength_;
	});
	CylinderGeometry = $pkg.CylinderGeometry = $newType(0, $kindStruct, "three.CylinderGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Geometry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Geometry = ptrType$53.nil;
			return;
		}
		this.Geometry = Geometry_;
	});
	CylinderGeometryOpts = $pkg.CylinderGeometryOpts = $newType(0, $kindStruct, "three.CylinderGeometryOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(thetaStart_, thetaLength_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.thetaStart = 0;
			this.thetaLength = 0;
			return;
		}
		this.thetaStart = thetaStart_;
		this.thetaLength = thetaLength_;
	});
	DataTexture = $pkg.DataTexture = $newType(0, $kindStruct, "three.DataTexture", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Texture_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Texture = ptrType$72.nil;
			return;
		}
		this.Texture = Texture_;
	});
	DirectGeometry = $pkg.DirectGeometry = $newType(0, $kindStruct, "three.DirectGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	DirectionalLight = $pkg.DirectionalLight = $newType(0, $kindStruct, "three.DirectionalLight", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Light_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Light = ptrType$28.nil;
			return;
		}
		this.Light = Light_;
	});
	DirectionalLightHelper = $pkg.DirectionalLightHelper = $newType(0, $kindStruct, "three.DirectionalLightHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Object3D_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object3D = ptrType$20.nil;
			return;
		}
		this.Object3D = Object3D_;
	});
	DiscreteInterpolant = $pkg.DiscreteInterpolant = $newType(0, $kindStruct, "three.DiscreteInterpolant", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	DodecahedronGeometry = $pkg.DodecahedronGeometry = $newType(0, $kindStruct, "three.DodecahedronGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(PolyhedronGeometry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.PolyhedronGeometry = ptrType$87.nil;
			return;
		}
		this.PolyhedronGeometry = PolyhedronGeometry_;
	});
	EdgesGeometry = $pkg.EdgesGeometry = $newType(0, $kindStruct, "three.EdgesGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	EdgesHelper = $pkg.EdgesHelper = $newType(0, $kindStruct, "three.EdgesHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Line = ptrType$55.nil;
			return;
		}
		this.Line = Line_;
	});
	EllipseCurve = $pkg.EllipseCurve = $newType(0, $kindStruct, "three.EllipseCurve", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Curve_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Curve = ptrType$62.nil;
			return;
		}
		this.Curve = Curve_;
	});
	EllipseCurveOpts = $pkg.EllipseCurveOpts = $newType(0, $kindStruct, "three.EllipseCurveOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(StartAngle_, EndAngle_, Clockwise_, Rotation_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.StartAngle = 0;
			this.EndAngle = 0;
			this.Clockwise = false;
			this.Rotation = 0;
			return;
		}
		this.StartAngle = StartAngle_;
		this.EndAngle = EndAngle_;
		this.Clockwise = Clockwise_;
		this.Rotation = Rotation_;
	});
	Euler = $pkg.Euler = $newType(0, $kindStruct, "three.Euler", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	EventDispatcher = $pkg.EventDispatcher = $newType(0, $kindStruct, "three.EventDispatcher", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	ExtrudeGeometry = $pkg.ExtrudeGeometry = $newType(0, $kindStruct, "three.ExtrudeGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Geometry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Geometry = ptrType$53.nil;
			return;
		}
		this.Geometry = Geometry_;
	});
	ExtrudeGeometryOpts = $pkg.ExtrudeGeometryOpts = $newType(0, $kindStruct, "three.ExtrudeGeometryOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(CurveSegments_, Steps_, Amount_, BevelEnabled_, BevelThickness_, BevelSize_, BevelSegments_, ExtrudePath_, Frames_, Material_, ExtrudeMaterial_, UVGenerator_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CurveSegments = 0;
			this.Steps = 0;
			this.Amount = 0;
			this.BevelEnabled = false;
			this.BevelThickness = 0;
			this.BevelSize = 0;
			this.BevelSegments = 0;
			this.ExtrudePath = ptrType$78.nil;
			this.Frames = ptrType$94.nil;
			this.Material = 0;
			this.ExtrudeMaterial = 0;
			this.UVGenerator = ptrType$20.nil;
			return;
		}
		this.CurveSegments = CurveSegments_;
		this.Steps = Steps_;
		this.Amount = Amount_;
		this.BevelEnabled = BevelEnabled_;
		this.BevelThickness = BevelThickness_;
		this.BevelSize = BevelSize_;
		this.BevelSegments = BevelSegments_;
		this.ExtrudePath = ExtrudePath_;
		this.Frames = Frames_;
		this.Material = Material_;
		this.ExtrudeMaterial = ExtrudeMaterial_;
		this.UVGenerator = UVGenerator_;
	});
	Face3 = $pkg.Face3 = $newType(0, $kindStruct, "three.Face3", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	FaceNormalsHelper = $pkg.FaceNormalsHelper = $newType(0, $kindStruct, "three.FaceNormalsHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Fog = $pkg.Fog = $newType(0, $kindStruct, "three.Fog", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	FogExp2 = $pkg.FogExp2 = $newType(0, $kindStruct, "three.FogExp2", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Font = $pkg.Font = $newType(0, $kindStruct, "three.Font", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	FontLoader = $pkg.FontLoader = $newType(0, $kindStruct, "three.FontLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Frustum = $pkg.Frustum = $newType(0, $kindStruct, "three.Frustum", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Geometry = $pkg.Geometry = $newType(0, $kindStruct, "three.Geometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	GridHelper = $pkg.GridHelper = $newType(0, $kindStruct, "three.GridHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Group = $pkg.Group = $newType(0, $kindStruct, "three.Group", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Object3D_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object3D = ptrType$20.nil;
			return;
		}
		this.Object3D = Object3D_;
	});
	HemisphereLight = $pkg.HemisphereLight = $newType(0, $kindStruct, "three.HemisphereLight", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Light_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Light = ptrType$28.nil;
			return;
		}
		this.Light = Light_;
	});
	HemisphereLightHelper = $pkg.HemisphereLightHelper = $newType(0, $kindStruct, "three.HemisphereLightHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	IcosahedronGeometry = $pkg.IcosahedronGeometry = $newType(0, $kindStruct, "three.IcosahedronGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(PolyhedronGeometry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.PolyhedronGeometry = ptrType$87.nil;
			return;
		}
		this.PolyhedronGeometry = PolyhedronGeometry_;
	});
	ImageLoader = $pkg.ImageLoader = $newType(0, $kindStruct, "three.ImageLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	ImmediateRenderObject = $pkg.ImmediateRenderObject = $newType(0, $kindStruct, "three.ImmediateRenderObject", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	InstancedBufferAttribute = $pkg.InstancedBufferAttribute = $newType(0, $kindStruct, "three.InstancedBufferAttribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	InstancedBufferGeometry = $pkg.InstancedBufferGeometry = $newType(0, $kindStruct, "three.InstancedBufferGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	InstancedInterleavedBuffer = $pkg.InstancedInterleavedBuffer = $newType(0, $kindStruct, "three.InstancedInterleavedBuffer", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	InterleavedBuffer = $pkg.InterleavedBuffer = $newType(0, $kindStruct, "three.InterleavedBuffer", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	InterleavedBufferAttribute = $pkg.InterleavedBufferAttribute = $newType(0, $kindStruct, "three.InterleavedBufferAttribute", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Interpolant = $pkg.Interpolant = $newType(0, $kindStruct, "three.Interpolant", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	JSONLoader = $pkg.JSONLoader = $newType(0, $kindStruct, "three.JSONLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	JSONLoadFunc = $pkg.JSONLoadFunc = $newType(4, $kindFunc, "three.JSONLoadFunc", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	KeyframeTrack = $pkg.KeyframeTrack = $newType(0, $kindStruct, "three.KeyframeTrack", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LatheBufferGeometry = $pkg.LatheBufferGeometry = $newType(0, $kindStruct, "three.LatheBufferGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LatheGeometry = $pkg.LatheGeometry = $newType(0, $kindStruct, "three.LatheGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Layers = $pkg.Layers = $newType(0, $kindStruct, "three.Layers", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LensFlare = $pkg.LensFlare = $newType(0, $kindStruct, "three.LensFlare", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LensFlarePlugin = $pkg.LensFlarePlugin = $newType(0, $kindStruct, "three.LensFlarePlugin", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Light = $pkg.Light = $newType(0, $kindStruct, "three.Light", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Object3D_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object3D = ptrType$20.nil;
			return;
		}
		this.Object3D = Object3D_;
	});
	LightShadow = $pkg.LightShadow = $newType(0, $kindStruct, "three.LightShadow", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Line = $pkg.Line = $newType(0, $kindStruct, "three.Line", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Object3D_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object3D = ptrType$20.nil;
			return;
		}
		this.Object3D = Object3D_;
	});
	Line3 = $pkg.Line3 = $newType(0, $kindStruct, "three.Line3", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LineBasicMaterial = $pkg.LineBasicMaterial = $newType(0, $kindStruct, "three.LineBasicMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LineBasicMaterialOpts = $pkg.LineBasicMaterialOpts = $newType(4, $kindMap, "three.LineBasicMaterialOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	LineCurve = $pkg.LineCurve = $newType(0, $kindStruct, "three.LineCurve", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LineDashedMaterial = $pkg.LineDashedMaterial = $newType(0, $kindStruct, "three.LineDashedMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LineSegments = $pkg.LineSegments = $newType(0, $kindStruct, "three.LineSegments", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Line = ptrType$55.nil;
			return;
		}
		this.Line = Line_;
	});
	LinearInterpolant = $pkg.LinearInterpolant = $newType(0, $kindStruct, "three.LinearInterpolant", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Loader = $pkg.Loader = $newType(0, $kindStruct, "three.Loader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LoadingManager = $pkg.LoadingManager = $newType(0, $kindStruct, "three.LoadingManager", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LOD = $pkg.LOD = $newType(0, $kindStruct, "three.LOD", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LUT = $pkg.LUT = $newType(0, $kindStruct, "three.LUT", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	LUTLegendOpts = $pkg.LUTLegendOpts = $newType(4, $kindMap, "three.LUTLegendOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	Material = $pkg.Material = $newType(0, $kindStruct, "three.Material", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	MaterialLoader = $pkg.MaterialLoader = $newType(0, $kindStruct, "three.MaterialLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Math = $pkg.Math = $newType(0, $kindStruct, "three.Math", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Matrix3 = $pkg.Matrix3 = $newType(0, $kindStruct, "three.Matrix3", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Matrix4 = $pkg.Matrix4 = $newType(0, $kindStruct, "three.Matrix4", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Mesh = $pkg.Mesh = $newType(0, $kindStruct, "three.Mesh", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Object3D_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object3D = ptrType$20.nil;
			return;
		}
		this.Object3D = Object3D_;
	});
	MeshBasicMaterial = $pkg.MeshBasicMaterial = $newType(0, $kindStruct, "three.MeshBasicMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	MeshBasicMaterialOpts = $pkg.MeshBasicMaterialOpts = $newType(4, $kindMap, "three.MeshBasicMaterialOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	MeshDepthMaterial = $pkg.MeshDepthMaterial = $newType(0, $kindStruct, "three.MeshDepthMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	MeshDepthMaterialOpts = $pkg.MeshDepthMaterialOpts = $newType(4, $kindMap, "three.MeshDepthMaterialOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	MeshLambertMaterial = $pkg.MeshLambertMaterial = $newType(0, $kindStruct, "three.MeshLambertMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	MeshLambertMaterialOpts = $pkg.MeshLambertMaterialOpts = $newType(4, $kindMap, "three.MeshLambertMaterialOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	MeshNormalMaterial = $pkg.MeshNormalMaterial = $newType(0, $kindStruct, "three.MeshNormalMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	MeshNormalMaterialOpts = $pkg.MeshNormalMaterialOpts = $newType(4, $kindMap, "three.MeshNormalMaterialOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	MeshPhongMaterial = $pkg.MeshPhongMaterial = $newType(0, $kindStruct, "three.MeshPhongMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Material_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Material = ptrType$9.nil;
			return;
		}
		this.Material = Material_;
	});
	MeshPhongMaterialOpts = $pkg.MeshPhongMaterialOpts = $newType(4, $kindMap, "three.MeshPhongMaterialOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	MeshStandardMaterial = $pkg.MeshStandardMaterial = $newType(0, $kindStruct, "three.MeshStandardMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	MeshStandardMaterialOpts = $pkg.MeshStandardMaterialOpts = $newType(4, $kindMap, "three.MeshStandardMaterialOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	MorphBlendMesh = $pkg.MorphBlendMesh = $newType(0, $kindStruct, "three.MorphBlendMesh", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	MultiMaterial = $pkg.MultiMaterial = $newType(0, $kindStruct, "three.MultiMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	NumberKeyframeTrack = $pkg.NumberKeyframeTrack = $newType(0, $kindStruct, "three.NumberKeyframeTrack", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Object3D = $pkg.Object3D = $newType(0, $kindStruct, "three.Object3D", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	ObjectLoader = $pkg.ObjectLoader = $newType(0, $kindStruct, "three.ObjectLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	OctahedronGeometry = $pkg.OctahedronGeometry = $newType(0, $kindStruct, "three.OctahedronGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	OrthographicCamera = $pkg.OrthographicCamera = $newType(0, $kindStruct, "three.OrthographicCamera", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Camera_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Camera = ptrType$11.nil;
			return;
		}
		this.Camera = Camera_;
	});
	ParametricGeometry = $pkg.ParametricGeometry = $newType(0, $kindStruct, "three.ParametricGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Path = $pkg.Path = $newType(0, $kindStruct, "three.Path", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(CurvePath_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CurvePath = ptrType$78.nil;
			return;
		}
		this.CurvePath = CurvePath_;
	});
	PerspectiveCamera = $pkg.PerspectiveCamera = $newType(0, $kindStruct, "three.PerspectiveCamera", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Camera_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Camera = ptrType$11.nil;
			return;
		}
		this.Camera = Camera_;
	});
	Plane = $pkg.Plane = $newType(0, $kindStruct, "three.Plane", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	PlaneBufferGeometry = $pkg.PlaneBufferGeometry = $newType(0, $kindStruct, "three.PlaneBufferGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	PlaneGeometry = $pkg.PlaneGeometry = $newType(0, $kindStruct, "three.PlaneGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	PointLight = $pkg.PointLight = $newType(0, $kindStruct, "three.PointLight", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Light_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Light = ptrType$28.nil;
			return;
		}
		this.Light = Light_;
	});
	PointLightHelper = $pkg.PointLightHelper = $newType(0, $kindStruct, "three.PointLightHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Points = $pkg.Points = $newType(0, $kindStruct, "three.Points", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	PointsMaterial = $pkg.PointsMaterial = $newType(0, $kindStruct, "three.PointsMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	PolyhedronGeometry = $pkg.PolyhedronGeometry = $newType(0, $kindStruct, "three.PolyhedronGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Geometry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Geometry = ptrType$53.nil;
			return;
		}
		this.Geometry = Geometry_;
	});
	PositionalAudio = $pkg.PositionalAudio = $newType(0, $kindStruct, "three.PositionalAudio", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	PropertyBinding = $pkg.PropertyBinding = $newType(0, $kindStruct, "three.PropertyBinding", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	PropertyMixer = $pkg.PropertyMixer = $newType(0, $kindStruct, "three.PropertyMixer", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	QuadraticBezierCurve = $pkg.QuadraticBezierCurve = $newType(0, $kindStruct, "three.QuadraticBezierCurve", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Quaternion = $pkg.Quaternion = $newType(0, $kindStruct, "three.Quaternion", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	QuaternionKeyframeTrack = $pkg.QuaternionKeyframeTrack = $newType(0, $kindStruct, "three.QuaternionKeyframeTrack", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	QuaternionLinearInterpolant = $pkg.QuaternionLinearInterpolant = $newType(0, $kindStruct, "three.QuaternionLinearInterpolant", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	RawShaderMaterial = $pkg.RawShaderMaterial = $newType(0, $kindStruct, "three.RawShaderMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Ray = $pkg.Ray = $newType(0, $kindStruct, "three.Ray", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Raycaster = $pkg.Raycaster = $newType(0, $kindStruct, "three.Raycaster", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	RingBufferGeometry = $pkg.RingBufferGeometry = $newType(0, $kindStruct, "three.RingBufferGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	RingGeometry = $pkg.RingGeometry = $newType(0, $kindStruct, "three.RingGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Scene = $pkg.Scene = $newType(0, $kindStruct, "three.Scene", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Object3D_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object3D = ptrType$20.nil;
			return;
		}
		this.Object3D = Object3D_;
	});
	SceneUtils = $pkg.SceneUtils = $newType(0, $kindStruct, "three.SceneUtils", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	ShaderChunk = $pkg.ShaderChunk = $newType(0, $kindStruct, "three.ShaderChunk", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	ShaderLib = $pkg.ShaderLib = $newType(0, $kindStruct, "three.ShaderLib", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	ShaderMaterial = $pkg.ShaderMaterial = $newType(0, $kindStruct, "three.ShaderMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Shape = $pkg.Shape = $newType(0, $kindStruct, "three.Shape", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	ShapeGeometry = $pkg.ShapeGeometry = $newType(0, $kindStruct, "three.ShapeGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	ShapeUtils = $pkg.ShapeUtils = $newType(0, $kindStruct, "three.ShapeUtils", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Skeleton = $pkg.Skeleton = $newType(0, $kindStruct, "three.Skeleton", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	SkeletonHelper = $pkg.SkeletonHelper = $newType(0, $kindStruct, "three.SkeletonHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	SkinnedMesh = $pkg.SkinnedMesh = $newType(0, $kindStruct, "three.SkinnedMesh", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Mesh_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mesh = ptrType$47.nil;
			return;
		}
		this.Mesh = Mesh_;
	});
	Sphere = $pkg.Sphere = $newType(0, $kindStruct, "three.Sphere", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	SphereBufferGeometry = $pkg.SphereBufferGeometry = $newType(0, $kindStruct, "three.SphereBufferGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	SphereGeometry = $pkg.SphereGeometry = $newType(0, $kindStruct, "three.SphereGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	SphereGeometryOpts = $pkg.SphereGeometryOpts = $newType(0, $kindStruct, "three.SphereGeometryOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(phiStart_, phiLength_, thetaStart_, thetaLength_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.phiStart = 0;
			this.phiLength = 0;
			this.thetaStart = 0;
			this.thetaLength = 0;
			return;
		}
		this.phiStart = phiStart_;
		this.phiLength = phiLength_;
		this.thetaStart = thetaStart_;
		this.thetaLength = thetaLength_;
	});
	Spherical = $pkg.Spherical = $newType(0, $kindStruct, "three.Spherical", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Spline = $pkg.Spline = $newType(0, $kindStruct, "three.Spline", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	SplineCurve = $pkg.SplineCurve = $newType(0, $kindStruct, "three.SplineCurve", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	SpotLight = $pkg.SpotLight = $newType(0, $kindStruct, "three.SpotLight", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Light_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Light = ptrType$28.nil;
			return;
		}
		this.Light = Light_;
	});
	SpotLightHelper = $pkg.SpotLightHelper = $newType(0, $kindStruct, "three.SpotLightHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Sprite = $pkg.Sprite = $newType(0, $kindStruct, "three.Sprite", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	SpriteMaterial = $pkg.SpriteMaterial = $newType(0, $kindStruct, "three.SpriteMaterial", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	SpritePlugin = $pkg.SpritePlugin = $newType(0, $kindStruct, "three.SpritePlugin", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	StereoCamera = $pkg.StereoCamera = $newType(0, $kindStruct, "three.StereoCamera", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	StringKeyframeTrack = $pkg.StringKeyframeTrack = $newType(0, $kindStruct, "three.StringKeyframeTrack", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	TetrahedronGeometry = $pkg.TetrahedronGeometry = $newType(0, $kindStruct, "three.TetrahedronGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	TextGeometry = $pkg.TextGeometry = $newType(0, $kindStruct, "three.TextGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Texture = $pkg.Texture = $newType(0, $kindStruct, "three.Texture", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	TextureOpts = $pkg.TextureOpts = $newType(0, $kindStruct, "three.TextureOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(mapping_, wrapS_, wrapT_, magFilter_, minFilter_, format_, typ_, anisotropy_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mapping = 0;
			this.wrapS = 0;
			this.wrapT = 0;
			this.magFilter = 0;
			this.minFilter = 0;
			this.format = 0;
			this.typ = 0;
			this.anisotropy = 0;
			return;
		}
		this.mapping = mapping_;
		this.wrapS = wrapS_;
		this.wrapT = wrapT_;
		this.magFilter = magFilter_;
		this.minFilter = minFilter_;
		this.format = format_;
		this.typ = typ_;
		this.anisotropy = anisotropy_;
	});
	TextureLoader = $pkg.TextureLoader = $newType(0, $kindStruct, "three.TextureLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	TextureLoadFunc = $pkg.TextureLoadFunc = $newType(4, $kindFunc, "three.TextureLoadFunc", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	JSObject = $pkg.JSObject = $newType(8, $kindInterface, "three.JSObject", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, null);
	Three = $pkg.Three = $newType(0, $kindStruct, "three.Three", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(ctx_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ctx = null;
			return;
		}
		this.ctx = ctx_;
	});
	MOUSE = $pkg.MOUSE = $newType(0, $kindStruct, "three.MOUSE", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	TorusBufferGeometry = $pkg.TorusBufferGeometry = $newType(0, $kindStruct, "three.TorusBufferGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	TorusGeometry = $pkg.TorusGeometry = $newType(0, $kindStruct, "three.TorusGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	TorusKnotBufferGeometry = $pkg.TorusKnotBufferGeometry = $newType(0, $kindStruct, "three.TorusKnotBufferGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	TorusKnotGeometry = $pkg.TorusKnotGeometry = $newType(0, $kindStruct, "three.TorusKnotGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Triangle = $pkg.Triangle = $newType(0, $kindStruct, "three.Triangle", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	TubeGeometry = $pkg.TubeGeometry = $newType(0, $kindStruct, "three.TubeGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Uniform = $pkg.Uniform = $newType(0, $kindStruct, "three.Uniform", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	UniformsLib = $pkg.UniformsLib = $newType(0, $kindStruct, "three.UniformsLib", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	UniformsUtils = $pkg.UniformsUtils = $newType(0, $kindStruct, "three.UniformsUtils", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Vector2 = $pkg.Vector2 = $newType(0, $kindStruct, "three.Vector2", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Vector3 = $pkg.Vector3 = $newType(0, $kindStruct, "three.Vector3", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	Vector4 = $pkg.Vector4 = $newType(0, $kindStruct, "three.Vector4", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	VectorKeyframeTrack = $pkg.VectorKeyframeTrack = $newType(0, $kindStruct, "three.VectorKeyframeTrack", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	VertexNormalsHelper = $pkg.VertexNormalsHelper = $newType(0, $kindStruct, "three.VertexNormalsHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	VideoTexture = $pkg.VideoTexture = $newType(0, $kindStruct, "three.VideoTexture", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLBufferRenderer = $pkg.WebGLBufferRenderer = $newType(0, $kindStruct, "three.WebGLBufferRenderer", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLCapabilities = $pkg.WebGLCapabilities = $newType(0, $kindStruct, "three.WebGLCapabilities", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLExtensions = $pkg.WebGLExtensions = $newType(0, $kindStruct, "three.WebGLExtensions", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLGeometries = $pkg.WebGLGeometries = $newType(0, $kindStruct, "three.WebGLGeometries", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLIndexedBufferRenderer = $pkg.WebGLIndexedBufferRenderer = $newType(0, $kindStruct, "three.WebGLIndexedBufferRenderer", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLLights = $pkg.WebGLLights = $newType(0, $kindStruct, "three.WebGLLights", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLObjects = $pkg.WebGLObjects = $newType(0, $kindStruct, "three.WebGLObjects", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLProgram = $pkg.WebGLProgram = $newType(0, $kindStruct, "three.WebGLProgram", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLPrograms = $pkg.WebGLPrograms = $newType(0, $kindStruct, "three.WebGLPrograms", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLProperties = $pkg.WebGLProperties = $newType(0, $kindStruct, "three.WebGLProperties", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLRenderTarget = $pkg.WebGLRenderTarget = $newType(0, $kindStruct, "three.WebGLRenderTarget", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLRenderTargetCube = $pkg.WebGLRenderTargetCube = $newType(0, $kindStruct, "three.WebGLRenderTargetCube", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLRenderer = $pkg.WebGLRenderer = $newType(0, $kindStruct, "three.WebGLRenderer", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLRendererOpts = $pkg.WebGLRendererOpts = $newType(0, $kindStruct, "three.WebGLRendererOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(Precision_, Alpha_, PremultipliedAlpha_, Antialias_, Stencil_, PreserveDrawingBuffer_, Depth_, LogarithmicDepthBuffer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Precision = ptrType$25.nil;
			this.Alpha = ptrType$23.nil;
			this.PremultipliedAlpha = ptrType$23.nil;
			this.Antialias = ptrType$23.nil;
			this.Stencil = ptrType$23.nil;
			this.PreserveDrawingBuffer = ptrType$23.nil;
			this.Depth = ptrType$23.nil;
			this.LogarithmicDepthBuffer = ptrType$23.nil;
			return;
		}
		this.Precision = Precision_;
		this.Alpha = Alpha_;
		this.PremultipliedAlpha = PremultipliedAlpha_;
		this.Antialias = Antialias_;
		this.Stencil = Stencil_;
		this.PreserveDrawingBuffer = PreserveDrawingBuffer_;
		this.Depth = Depth_;
		this.LogarithmicDepthBuffer = LogarithmicDepthBuffer_;
	});
	RenderOpts = $pkg.RenderOpts = $newType(0, $kindStruct, "three.RenderOpts", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(renderTarget_, forceClear_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.renderTarget = $ifaceNil;
			this.forceClear = false;
			return;
		}
		this.renderTarget = renderTarget_;
		this.forceClear = forceClear_;
	});
	WebGLShader = $pkg.WebGLShader = $newType(0, $kindStruct, "three.WebGLShader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLShadowMap = $pkg.WebGLShadowMap = $newType(0, $kindStruct, "three.WebGLShadowMap", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WebGLState = $pkg.WebGLState = $newType(0, $kindStruct, "three.WebGLState", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WireframeGeometry = $pkg.WireframeGeometry = $newType(0, $kindStruct, "three.WireframeGeometry", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	WireframeHelper = $pkg.WireframeHelper = $newType(0, $kindStruct, "three.WireframeHelper", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	XHRLoader = $pkg.XHRLoader = $newType(0, $kindStruct, "three.XHRLoader", true, "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = null;
			return;
		}
		this.p = p_;
	});
	ptrType = $ptrType(ArrowHelperOpts);
	ptrType$1 = $ptrType($Float64);
	ptrType$2 = $ptrType(Color);
	ptrType$3 = $ptrType(Vector2);
	ptrType$4 = $ptrType(BoxBufferGeometryOpts);
	ptrType$5 = $ptrType(BoxGeometryOpts);
	sliceType = $sliceType($Int8);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($Int16);
	sliceType$3 = $sliceType($Uint16);
	sliceType$4 = $sliceType($Int32);
	sliceType$5 = $sliceType($Uint32);
	sliceType$6 = $sliceType($Float32);
	sliceType$7 = $sliceType($Float64);
	sliceType$8 = $sliceType($Int);
	sliceType$9 = $sliceType(ptrType$3);
	ptrType$6 = $ptrType(Vector3);
	sliceType$10 = $sliceType(ptrType$6);
	ptrType$7 = $ptrType(Vector4);
	sliceType$11 = $sliceType(ptrType$7);
	ptrType$8 = $ptrType(Matrix4);
	ptrType$9 = $ptrType(Material);
	sliceType$12 = $sliceType(ptrType$9);
	ptrType$10 = $ptrType(js.Object);
	funcType = $funcType([ptrType$10, ptrType$10], [], false);
	ptrType$11 = $ptrType(Camera);
	sliceType$13 = $sliceType(ptrType$10);
	ptrType$12 = $ptrType(CircleBufferGeometryOpts);
	ptrType$13 = $ptrType(CircleGeometryOpts);
	sliceType$14 = $sliceType($emptyInterface);
	sliceType$15 = $sliceType($String);
	ptrType$14 = $ptrType(CylinderBufferGeometryOpts);
	ptrType$15 = $ptrType(CylinderGeometryOpts);
	ptrType$16 = $ptrType(EllipseCurveOpts);
	funcType$1 = $funcType([], [ptrType$10], false);
	ptrType$17 = $ptrType(ExtrudeGeometryOpts);
	ptrType$18 = $ptrType(Face3);
	sliceType$16 = $sliceType(ptrType$18);
	mapType = $mapType($String, $emptyInterface);
	ptrType$19 = $ptrType(LUT);
	ptrType$20 = $ptrType(Object3D);
	sliceType$17 = $sliceType(ptrType$20);
	funcType$2 = $funcType([$Float64, $Float64], [ptrType$10], false);
	ptrType$21 = $ptrType(SphereGeometryOpts);
	ptrType$22 = $ptrType(TextureOpts);
	ptrType$23 = $ptrType($Bool);
	ptrType$25 = $ptrType($String);
	ptrType$26 = $ptrType(WebGLRendererOpts);
	ptrType$27 = $ptrType(RenderOpts);
	ptrType$28 = $ptrType(Light);
	ptrType$29 = $ptrType(AmbientLight);
	ptrType$30 = $ptrType(AnimationClip);
	ptrType$31 = $ptrType(AnimationLoader);
	ptrType$32 = $ptrType(AnimationMixer);
	ptrType$33 = $ptrType(AnimationObjectGroup);
	ptrType$34 = $ptrType(AnimationUtils);
	ptrType$35 = $ptrType(EllipseCurve);
	ptrType$36 = $ptrType(ArcCurve);
	ptrType$37 = $ptrType(ArrowHelper);
	ptrType$38 = $ptrType(Audio);
	ptrType$39 = $ptrType(AudioAnalyser);
	ptrType$40 = $ptrType(AudioBuffer);
	ptrType$41 = $ptrType(AudioListener);
	ptrType$42 = $ptrType(LineSegments);
	ptrType$43 = $ptrType(AxisHelper);
	ptrType$44 = $ptrType(BinaryTextureLoader);
	ptrType$45 = $ptrType(Bone);
	ptrType$46 = $ptrType(BooleanKeyframeTrack);
	ptrType$47 = $ptrType(Mesh);
	ptrType$48 = $ptrType(BoundingBoxHelper);
	ptrType$49 = $ptrType(Box2);
	ptrType$50 = $ptrType(Box3);
	ptrType$51 = $ptrType(BufferGeometry);
	ptrType$52 = $ptrType(BoxBufferGeometry);
	ptrType$53 = $ptrType(Geometry);
	ptrType$54 = $ptrType(BoxGeometry);
	ptrType$55 = $ptrType(Line);
	ptrType$56 = $ptrType(BoxHelper);
	ptrType$57 = $ptrType(BufferAttribute);
	ptrType$58 = $ptrType(BufferGeometryLoader);
	ptrType$59 = $ptrType(Cache);
	ptrType$60 = $ptrType(CameraHelper);
	ptrType$61 = $ptrType(CanvasTexture);
	ptrType$62 = $ptrType(Curve);
	ptrType$63 = $ptrType(CatmullRomCurve3);
	ptrType$64 = $ptrType(CircleBufferGeometry);
	ptrType$65 = $ptrType(CircleGeometry);
	ptrType$66 = $ptrType(Clock);
	ptrType$67 = $ptrType(ColorKeyframeTrack);
	ptrType$68 = $ptrType(CompressedTexture);
	ptrType$69 = $ptrType(CompressedTextureLoader);
	ptrType$70 = $ptrType(WebGLRenderTargetCube);
	ptrType$71 = $ptrType(CubeCamera);
	ptrType$72 = $ptrType(Texture);
	ptrType$73 = $ptrType(CubeTexture);
	ptrType$74 = $ptrType(CubeTextureLoader);
	ptrType$75 = $ptrType(CubicBezierCurve);
	ptrType$76 = $ptrType(CubicBezierCurve3);
	ptrType$77 = $ptrType(CubicInterpolant);
	ptrType$78 = $ptrType(CurvePath);
	ptrType$79 = $ptrType(CurveUtils);
	ptrType$80 = $ptrType(CylinderBufferGeometry);
	ptrType$81 = $ptrType(CylinderGeometry);
	ptrType$82 = $ptrType(DataTexture);
	ptrType$83 = $ptrType(DirectGeometry);
	ptrType$84 = $ptrType(DirectionalLight);
	ptrType$85 = $ptrType(DirectionalLightHelper);
	ptrType$86 = $ptrType(DiscreteInterpolant);
	ptrType$87 = $ptrType(PolyhedronGeometry);
	ptrType$88 = $ptrType(DodecahedronGeometry);
	ptrType$89 = $ptrType(EdgesGeometry);
	ptrType$90 = $ptrType(EdgesHelper);
	ptrType$91 = $ptrType(Euler);
	ptrType$92 = $ptrType(EventDispatcher);
	ptrType$93 = $ptrType(ExtrudeGeometry);
	ptrType$94 = $ptrType(TubeGeometry);
	ptrType$95 = $ptrType(FaceNormalsHelper);
	ptrType$96 = $ptrType(Fog);
	ptrType$97 = $ptrType(FogExp2);
	ptrType$98 = $ptrType(Font);
	ptrType$99 = $ptrType(FontLoader);
	ptrType$100 = $ptrType(Frustum);
	ptrType$101 = $ptrType(GridHelper);
	ptrType$102 = $ptrType(Group);
	ptrType$103 = $ptrType(HemisphereLight);
	ptrType$104 = $ptrType(HemisphereLightHelper);
	ptrType$105 = $ptrType(IcosahedronGeometry);
	ptrType$106 = $ptrType(ImageLoader);
	ptrType$107 = $ptrType(ImmediateRenderObject);
	ptrType$108 = $ptrType(InstancedBufferAttribute);
	ptrType$109 = $ptrType(InstancedBufferGeometry);
	ptrType$110 = $ptrType(InstancedInterleavedBuffer);
	ptrType$111 = $ptrType(InterleavedBuffer);
	ptrType$112 = $ptrType(InterleavedBufferAttribute);
	ptrType$113 = $ptrType(Interpolant);
	ptrType$114 = $ptrType(JSONLoader);
	ptrType$115 = $ptrType(KeyframeTrack);
	ptrType$116 = $ptrType(LatheBufferGeometry);
	ptrType$117 = $ptrType(LatheGeometry);
	ptrType$118 = $ptrType(Layers);
	ptrType$119 = $ptrType(LensFlare);
	ptrType$120 = $ptrType(LensFlarePlugin);
	ptrType$121 = $ptrType(LightShadow);
	ptrType$122 = $ptrType(Line3);
	ptrType$123 = $ptrType(LineBasicMaterial);
	ptrType$124 = $ptrType(LineCurve);
	ptrType$125 = $ptrType(LineDashedMaterial);
	ptrType$126 = $ptrType(LinearInterpolant);
	ptrType$127 = $ptrType(Loader);
	ptrType$128 = $ptrType(LoadingManager);
	ptrType$129 = $ptrType(LOD);
	ptrType$130 = $ptrType(MaterialLoader);
	ptrType$131 = $ptrType(Math);
	ptrType$132 = $ptrType(Matrix3);
	ptrType$133 = $ptrType(MeshBasicMaterial);
	ptrType$134 = $ptrType(MeshDepthMaterial);
	ptrType$135 = $ptrType(MeshLambertMaterial);
	ptrType$136 = $ptrType(MeshNormalMaterial);
	ptrType$137 = $ptrType(MeshPhongMaterial);
	ptrType$138 = $ptrType(MeshStandardMaterial);
	ptrType$139 = $ptrType(MorphBlendMesh);
	ptrType$140 = $ptrType(MultiMaterial);
	ptrType$141 = $ptrType(NumberKeyframeTrack);
	ptrType$142 = $ptrType(Quaternion);
	ptrType$143 = $ptrType(ObjectLoader);
	ptrType$144 = $ptrType(OctahedronGeometry);
	ptrType$145 = $ptrType(OrthographicCamera);
	ptrType$146 = $ptrType(ParametricGeometry);
	ptrType$147 = $ptrType(Path);
	ptrType$148 = $ptrType(PerspectiveCamera);
	ptrType$149 = $ptrType(Plane);
	ptrType$150 = $ptrType(PlaneBufferGeometry);
	ptrType$151 = $ptrType(PlaneGeometry);
	ptrType$152 = $ptrType(PointLight);
	ptrType$153 = $ptrType(PointLightHelper);
	ptrType$154 = $ptrType(Points);
	ptrType$155 = $ptrType(PointsMaterial);
	ptrType$156 = $ptrType(PositionalAudio);
	ptrType$157 = $ptrType(PropertyBinding);
	ptrType$158 = $ptrType(PropertyMixer);
	ptrType$159 = $ptrType(QuadraticBezierCurve);
	ptrType$160 = $ptrType(QuaternionKeyframeTrack);
	ptrType$161 = $ptrType(QuaternionLinearInterpolant);
	ptrType$162 = $ptrType(RawShaderMaterial);
	ptrType$163 = $ptrType(Ray);
	ptrType$164 = $ptrType(Raycaster);
	ptrType$165 = $ptrType(RingBufferGeometry);
	ptrType$166 = $ptrType(RingGeometry);
	ptrType$167 = $ptrType(Scene);
	sliceType$18 = $sliceType(JSObject);
	ptrType$168 = $ptrType(SceneUtils);
	ptrType$169 = $ptrType(ShaderChunk);
	ptrType$170 = $ptrType(ShaderLib);
	ptrType$171 = $ptrType(ShaderMaterial);
	ptrType$172 = $ptrType(Shape);
	ptrType$173 = $ptrType(ShapeGeometry);
	ptrType$174 = $ptrType(ShapeUtils);
	ptrType$175 = $ptrType(Skeleton);
	ptrType$176 = $ptrType(SkeletonHelper);
	ptrType$177 = $ptrType(SkinnedMesh);
	ptrType$178 = $ptrType(Sphere);
	ptrType$179 = $ptrType(SphereBufferGeometry);
	ptrType$180 = $ptrType(SphereGeometry);
	ptrType$181 = $ptrType(Spherical);
	ptrType$182 = $ptrType(Spline);
	ptrType$183 = $ptrType(SplineCurve);
	ptrType$184 = $ptrType(SpotLight);
	ptrType$185 = $ptrType(SpotLightHelper);
	ptrType$186 = $ptrType(Sprite);
	ptrType$187 = $ptrType(SpriteMaterial);
	ptrType$188 = $ptrType(SpritePlugin);
	ptrType$189 = $ptrType(StereoCamera);
	ptrType$190 = $ptrType(StringKeyframeTrack);
	ptrType$191 = $ptrType(TetrahedronGeometry);
	ptrType$192 = $ptrType(TextGeometry);
	ptrType$193 = $ptrType(TextureLoader);
	ptrType$194 = $ptrType(Int8Attribute);
	ptrType$195 = $ptrType(Uint8Attribute);
	ptrType$196 = $ptrType(Uint8ClampedAttribute);
	ptrType$197 = $ptrType(Int16Attribute);
	ptrType$198 = $ptrType(Uint16Attribute);
	ptrType$199 = $ptrType(Int32Attribute);
	ptrType$200 = $ptrType(Uint32Attribute);
	ptrType$201 = $ptrType(Float32Attribute);
	ptrType$202 = $ptrType(Float64Attribute);
	ptrType$203 = $ptrType(MOUSE);
	ptrType$204 = $ptrType(TorusBufferGeometry);
	ptrType$205 = $ptrType(TorusGeometry);
	ptrType$206 = $ptrType(TorusKnotBufferGeometry);
	ptrType$207 = $ptrType(TorusKnotGeometry);
	ptrType$208 = $ptrType(Triangle);
	ptrType$209 = $ptrType(Uniform);
	ptrType$210 = $ptrType(UniformsLib);
	ptrType$211 = $ptrType(UniformsUtils);
	ptrType$212 = $ptrType(VectorKeyframeTrack);
	ptrType$213 = $ptrType(VertexNormalsHelper);
	ptrType$214 = $ptrType(VideoTexture);
	ptrType$215 = $ptrType(WebGLBufferRenderer);
	ptrType$216 = $ptrType(WebGLCapabilities);
	ptrType$217 = $ptrType(WebGLExtensions);
	ptrType$218 = $ptrType(WebGLGeometries);
	ptrType$219 = $ptrType(WebGLIndexedBufferRenderer);
	ptrType$220 = $ptrType(WebGLLights);
	ptrType$221 = $ptrType(WebGLObjects);
	ptrType$222 = $ptrType(WebGLProgram);
	ptrType$223 = $ptrType(WebGLPrograms);
	ptrType$224 = $ptrType(WebGLProperties);
	ptrType$225 = $ptrType(WebGLRenderTarget);
	ptrType$226 = $ptrType(WebGLRenderer);
	ptrType$227 = $ptrType(WebGLShader);
	ptrType$228 = $ptrType(WebGLShadowMap);
	ptrType$229 = $ptrType(WebGLState);
	ptrType$230 = $ptrType(WireframeGeometry);
	ptrType$231 = $ptrType(WireframeHelper);
	ptrType$232 = $ptrType(XHRLoader);
	ptrType$233 = $ptrType(Three);
	AmbientLight.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.Light.Object3D.p;
	};
	AmbientLight.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.AmbientLight = function() {
		var t;
		t = this;
		return AmbientLightFromJSObject(t.ctx.AmbientLight);
	};
	Three.prototype.AmbientLight = function() { return this.$val.AmbientLight(); };
	AmbientLightFromJSObject = function(p) {
		var p;
		return new AmbientLight.ptr(new Light.ptr(new Object3D.ptr(p)));
	};
	$pkg.AmbientLightFromJSObject = AmbientLightFromJSObject;
	Three.ptr.prototype.NewAmbientLight = function(color, intensity) {
		var color, intensity, t;
		t = this;
		return AmbientLightFromJSObject(new (t.ctx.AmbientLight)(color, intensity));
	};
	Three.prototype.NewAmbientLight = function(color, intensity) { return this.$val.NewAmbientLight(color, intensity); };
	AnimationClip.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.p;
	};
	AnimationClip.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.AnimationClip = function() {
		var p, t;
		t = this;
		p = t.ctx.AnimationClip;
		return AnimationClipFromJSObject(p);
	};
	Three.prototype.AnimationClip = function() { return this.$val.AnimationClip(); };
	AnimationClipFromJSObject = function(p) {
		var p;
		return new AnimationClip.ptr(p);
	};
	$pkg.AnimationClipFromJSObject = AnimationClipFromJSObject;
	Three.ptr.prototype.NewAnimationClip = function(name, duration, tracks) {
		var duration, name, p, t, tracks;
		t = this;
		p = new (t.ctx.AnimationClip)(name, duration, tracks);
		return AnimationClipFromJSObject(p);
	};
	Three.prototype.NewAnimationClip = function(name, duration, tracks) { return this.$val.NewAnimationClip(name, duration, tracks); };
	AnimationClip.ptr.prototype.ResetDuration = function() {
		var a;
		a = this;
		a.p.resetDuration();
		return a;
	};
	AnimationClip.prototype.ResetDuration = function() { return this.$val.ResetDuration(); };
	AnimationClip.ptr.prototype.Trim = function() {
		var a;
		a = this;
		a.p.trim();
		return a;
	};
	AnimationClip.prototype.Trim = function() { return this.$val.Trim(); };
	AnimationClip.ptr.prototype.Optimize = function() {
		var a;
		a = this;
		a.p.optimize();
		return a;
	};
	AnimationClip.prototype.Optimize = function() { return this.$val.Optimize(); };
	AnimationClip.ptr.prototype.Parse = function(json) {
		var a, json;
		a = this;
		a.p.parse(json);
		return a;
	};
	AnimationClip.prototype.Parse = function(json) { return this.$val.Parse(json); };
	AnimationClip.ptr.prototype.ToJSON = function(clip) {
		var a, clip;
		a = this;
		a.p.toJSON(clip);
		return a;
	};
	AnimationClip.prototype.ToJSON = function(clip) { return this.$val.ToJSON(clip); };
	AnimationClip.ptr.prototype.CreateFromMorphTargetSequence = function(name, morphTargetSequence, fps) {
		var a, fps, morphTargetSequence, name;
		a = this;
		a.p.CreateFromMorphTargetSequence(name, morphTargetSequence, fps);
		return a;
	};
	AnimationClip.prototype.CreateFromMorphTargetSequence = function(name, morphTargetSequence, fps) { return this.$val.CreateFromMorphTargetSequence(name, morphTargetSequence, fps); };
	AnimationClip.ptr.prototype.FindByName = function(clipArray, name) {
		var a, clipArray, name;
		a = this;
		a.p.findByName(clipArray, name);
		return a;
	};
	AnimationClip.prototype.FindByName = function(clipArray, name) { return this.$val.FindByName(clipArray, name); };
	AnimationClip.ptr.prototype.CreateClipsFromMorphTargetSequences = function(morphTargets, fps) {
		var a, fps, morphTargets;
		a = this;
		a.p.CreateClipsFromMorphTargetSequences(morphTargets, fps);
		return a;
	};
	AnimationClip.prototype.CreateClipsFromMorphTargetSequences = function(morphTargets, fps) { return this.$val.CreateClipsFromMorphTargetSequences(morphTargets, fps); };
	AnimationClip.ptr.prototype.ParseAnimation = function(animation, bones, nodeName) {
		var a, animation, bones, nodeName;
		a = this;
		a.p.parseAnimation(animation, bones, nodeName);
		return a;
	};
	AnimationClip.prototype.ParseAnimation = function(animation, bones, nodeName) { return this.$val.ParseAnimation(animation, bones, nodeName); };
	AnimationLoader.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.p;
	};
	AnimationLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.AnimationLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.AnimationLoader;
		return AnimationLoaderFromJSObject(p);
	};
	Three.prototype.AnimationLoader = function() { return this.$val.AnimationLoader(); };
	AnimationLoaderFromJSObject = function(p) {
		var p;
		return new AnimationLoader.ptr(p);
	};
	$pkg.AnimationLoaderFromJSObject = AnimationLoaderFromJSObject;
	Three.ptr.prototype.NewAnimationLoader = function(manager) {
		var manager, p, t;
		t = this;
		p = new (t.ctx.AnimationLoader)(manager);
		return AnimationLoaderFromJSObject(p);
	};
	Three.prototype.NewAnimationLoader = function(manager) { return this.$val.NewAnimationLoader(manager); };
	AnimationLoader.ptr.prototype.Load = function(url, onLoad, onProgress, onError) {
		var a, onError, onLoad, onProgress, url;
		a = this;
		a.p.load(url, onLoad, onProgress, onError);
		return a;
	};
	AnimationLoader.prototype.Load = function(url, onLoad, onProgress, onError) { return this.$val.Load(url, onLoad, onProgress, onError); };
	AnimationLoader.ptr.prototype.Parse = function(json, onLoad) {
		var a, json, onLoad;
		a = this;
		a.p.parse(json, onLoad);
		return a;
	};
	AnimationLoader.prototype.Parse = function(json, onLoad) { return this.$val.Parse(json, onLoad); };
	AnimationMixer.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.p;
	};
	AnimationMixer.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.AnimationMixer = function() {
		var p, t;
		t = this;
		p = t.ctx.AnimationMixer;
		return AnimationMixerFromJSObject(p);
	};
	Three.prototype.AnimationMixer = function() { return this.$val.AnimationMixer(); };
	AnimationMixerFromJSObject = function(p) {
		var p;
		return new AnimationMixer.ptr(p);
	};
	$pkg.AnimationMixerFromJSObject = AnimationMixerFromJSObject;
	Three.ptr.prototype.NewAnimationMixer = function(root) {
		var p, root, t;
		t = this;
		p = new (t.ctx.AnimationMixer)(root);
		return AnimationMixerFromJSObject(p);
	};
	Three.prototype.NewAnimationMixer = function(root) { return this.$val.NewAnimationMixer(root); };
	AnimationMixer.ptr.prototype.Total = function() {
		var a;
		a = this;
		return $parseFloat(a.p.total);
	};
	AnimationMixer.prototype.Total = function() { return this.$val.Total(); };
	AnimationMixer.ptr.prototype.InUse = function() {
		var a;
		a = this;
		return $parseFloat(a.p.inUse);
	};
	AnimationMixer.prototype.InUse = function() { return this.$val.InUse(); };
	AnimationMixer.ptr.prototype.ClipAction = function(clip, optionalRoot) {
		var a, clip, optionalRoot;
		a = this;
		a.p.clipAction(clip, optionalRoot);
		return a;
	};
	AnimationMixer.prototype.ClipAction = function(clip, optionalRoot) { return this.$val.ClipAction(clip, optionalRoot); };
	AnimationMixer.ptr.prototype.ExistingAction = function(clip, optionalRoot) {
		var a, clip, optionalRoot;
		a = this;
		a.p.existingAction(clip, optionalRoot);
		return a;
	};
	AnimationMixer.prototype.ExistingAction = function(clip, optionalRoot) { return this.$val.ExistingAction(clip, optionalRoot); };
	AnimationMixer.ptr.prototype.StopAllAction = function() {
		var a;
		a = this;
		a.p.stopAllAction();
		return a;
	};
	AnimationMixer.prototype.StopAllAction = function() { return this.$val.StopAllAction(); };
	AnimationMixer.ptr.prototype.Update = function(deltaTime) {
		var a, deltaTime;
		a = this;
		a.p.update(deltaTime);
		return a;
	};
	AnimationMixer.prototype.Update = function(deltaTime) { return this.$val.Update(deltaTime); };
	AnimationMixer.ptr.prototype.GetRoot = function() {
		var a;
		a = this;
		a.p.getRoot();
		return a;
	};
	AnimationMixer.prototype.GetRoot = function() { return this.$val.GetRoot(); };
	AnimationMixer.ptr.prototype.UncacheClip = function(clip) {
		var a, clip;
		a = this;
		a.p.uncacheClip(clip);
		return a;
	};
	AnimationMixer.prototype.UncacheClip = function(clip) { return this.$val.UncacheClip(clip); };
	AnimationMixer.ptr.prototype.UncacheRoot = function(root) {
		var a, root;
		a = this;
		a.p.uncacheRoot(root);
		return a;
	};
	AnimationMixer.prototype.UncacheRoot = function(root) { return this.$val.UncacheRoot(root); };
	AnimationMixer.ptr.prototype.UncacheAction = function(clip, optionalRoot) {
		var a, clip, optionalRoot;
		a = this;
		a.p.uncacheAction(clip, optionalRoot);
		return a;
	};
	AnimationMixer.prototype.UncacheAction = function(clip, optionalRoot) { return this.$val.UncacheAction(clip, optionalRoot); };
	AnimationMixer.ptr.prototype.Play = function() {
		var a;
		a = this;
		a.p.play();
		return a;
	};
	AnimationMixer.prototype.Play = function() { return this.$val.Play(); };
	AnimationMixer.ptr.prototype.Stop = function() {
		var a;
		a = this;
		a.p.stop();
		return a;
	};
	AnimationMixer.prototype.Stop = function() { return this.$val.Stop(); };
	AnimationMixer.ptr.prototype.Reset = function() {
		var a;
		a = this;
		a.p.reset();
		return a;
	};
	AnimationMixer.prototype.Reset = function() { return this.$val.Reset(); };
	AnimationMixer.ptr.prototype.IsRunning = function() {
		var a;
		a = this;
		a.p.isRunning();
		return a;
	};
	AnimationMixer.prototype.IsRunning = function() { return this.$val.IsRunning(); };
	AnimationMixer.ptr.prototype.IsScheduled = function() {
		var a;
		a = this;
		a.p.isScheduled();
		return a;
	};
	AnimationMixer.prototype.IsScheduled = function() { return this.$val.IsScheduled(); };
	AnimationMixer.ptr.prototype.StartAt = function(time) {
		var a, time;
		a = this;
		a.p.startAt(time);
		return a;
	};
	AnimationMixer.prototype.StartAt = function(time) { return this.$val.StartAt(time); };
	AnimationMixer.ptr.prototype.SetLoop = function(mode, repetitions) {
		var a, mode, repetitions;
		a = this;
		a.p.setLoop(mode, repetitions);
		return a;
	};
	AnimationMixer.prototype.SetLoop = function(mode, repetitions) { return this.$val.SetLoop(mode, repetitions); };
	AnimationMixer.ptr.prototype.SetEffectiveWeight = function(weight) {
		var a, weight;
		a = this;
		a.p.setEffectiveWeight(weight);
		return a;
	};
	AnimationMixer.prototype.SetEffectiveWeight = function(weight) { return this.$val.SetEffectiveWeight(weight); };
	AnimationMixer.ptr.prototype.GetEffectiveWeight = function() {
		var a;
		a = this;
		a.p.getEffectiveWeight();
		return a;
	};
	AnimationMixer.prototype.GetEffectiveWeight = function() { return this.$val.GetEffectiveWeight(); };
	AnimationMixer.ptr.prototype.FadeIn = function(duration) {
		var a, duration;
		a = this;
		a.p.fadeIn(duration);
		return a;
	};
	AnimationMixer.prototype.FadeIn = function(duration) { return this.$val.FadeIn(duration); };
	AnimationMixer.ptr.prototype.FadeOut = function(duration) {
		var a, duration;
		a = this;
		a.p.fadeOut(duration);
		return a;
	};
	AnimationMixer.prototype.FadeOut = function(duration) { return this.$val.FadeOut(duration); };
	AnimationMixer.ptr.prototype.CrossFadeFrom = function(fadeOutAction, duration, warp) {
		var a, duration, fadeOutAction, warp;
		a = this;
		a.p.crossFadeFrom(fadeOutAction, duration, warp);
		return a;
	};
	AnimationMixer.prototype.CrossFadeFrom = function(fadeOutAction, duration, warp) { return this.$val.CrossFadeFrom(fadeOutAction, duration, warp); };
	AnimationMixer.ptr.prototype.CrossFadeTo = function(fadeInAction, duration, warp) {
		var a, duration, fadeInAction, warp;
		a = this;
		a.p.crossFadeTo(fadeInAction, duration, warp);
		return a;
	};
	AnimationMixer.prototype.CrossFadeTo = function(fadeInAction, duration, warp) { return this.$val.CrossFadeTo(fadeInAction, duration, warp); };
	AnimationMixer.ptr.prototype.StopFading = function() {
		var a;
		a = this;
		a.p.stopFading();
		return a;
	};
	AnimationMixer.prototype.StopFading = function() { return this.$val.StopFading(); };
	AnimationMixer.ptr.prototype.SetEffectiveTimeScale = function(timeScale) {
		var a, timeScale;
		a = this;
		a.p.setEffectiveTimeScale(timeScale);
		return a;
	};
	AnimationMixer.prototype.SetEffectiveTimeScale = function(timeScale) { return this.$val.SetEffectiveTimeScale(timeScale); };
	AnimationMixer.ptr.prototype.GetEffectiveTimeScale = function() {
		var a;
		a = this;
		a.p.getEffectiveTimeScale();
		return a;
	};
	AnimationMixer.prototype.GetEffectiveTimeScale = function() { return this.$val.GetEffectiveTimeScale(); };
	AnimationMixer.ptr.prototype.SetDuration = function(duration) {
		var a, duration;
		a = this;
		a.p.setDuration(duration);
		return a;
	};
	AnimationMixer.prototype.SetDuration = function(duration) { return this.$val.SetDuration(duration); };
	AnimationMixer.ptr.prototype.SyncWith = function(action) {
		var a, action;
		a = this;
		a.p.syncWith(action);
		return a;
	};
	AnimationMixer.prototype.SyncWith = function(action) { return this.$val.SyncWith(action); };
	AnimationMixer.ptr.prototype.Halt = function(duration) {
		var a, duration;
		a = this;
		a.p.halt(duration);
		return a;
	};
	AnimationMixer.prototype.Halt = function(duration) { return this.$val.Halt(duration); };
	AnimationMixer.ptr.prototype.Warp = function(startTimeScale, endTimeScale, duration) {
		var a, duration, endTimeScale, startTimeScale;
		a = this;
		a.p.warp(startTimeScale, endTimeScale, duration);
		return a;
	};
	AnimationMixer.prototype.Warp = function(startTimeScale, endTimeScale, duration) { return this.$val.Warp(startTimeScale, endTimeScale, duration); };
	AnimationMixer.ptr.prototype.StopWarping = function() {
		var a;
		a = this;
		a.p.stopWarping();
		return a;
	};
	AnimationMixer.prototype.StopWarping = function() { return this.$val.StopWarping(); };
	AnimationMixer.ptr.prototype.GetMixer = function() {
		var a;
		a = this;
		a.p.getMixer();
		return a;
	};
	AnimationMixer.prototype.GetMixer = function() { return this.$val.GetMixer(); };
	AnimationMixer.ptr.prototype.GetClip = function() {
		var a;
		a = this;
		a.p.getClip();
		return a;
	};
	AnimationMixer.prototype.GetClip = function() { return this.$val.GetClip(); };
	AnimationObjectGroup.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.p;
	};
	AnimationObjectGroup.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.AnimationObjectGroup = function() {
		var p, t;
		t = this;
		p = t.ctx.AnimationObjectGroup;
		return AnimationObjectGroupFromJSObject(p);
	};
	Three.prototype.AnimationObjectGroup = function() { return this.$val.AnimationObjectGroup(); };
	AnimationObjectGroupFromJSObject = function(p) {
		var p;
		return new AnimationObjectGroup.ptr(p);
	};
	$pkg.AnimationObjectGroupFromJSObject = AnimationObjectGroupFromJSObject;
	Three.ptr.prototype.NewAnimationObjectGroup = function(varArgs) {
		var _r, p, t, varArgs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; t = $f.t; varArgs = $f.varArgs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = varArgs.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = new (t.ctx.AnimationObjectGroup)(_r);
		$s = -1; return AnimationObjectGroupFromJSObject(p);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Three.ptr.prototype.NewAnimationObjectGroup }; } $f._r = _r; $f.p = p; $f.t = t; $f.varArgs = varArgs; $f.$s = $s; $f.$r = $r; return $f;
	};
	Three.prototype.NewAnimationObjectGroup = function(varArgs) { return this.$val.NewAnimationObjectGroup(varArgs); };
	AnimationObjectGroup.ptr.prototype.Total = function() {
		var a;
		a = this;
		return $parseFloat(a.p.total);
	};
	AnimationObjectGroup.prototype.Total = function() { return this.$val.Total(); };
	AnimationObjectGroup.ptr.prototype.InUse = function() {
		var a;
		a = this;
		return $parseFloat(a.p.inUse);
	};
	AnimationObjectGroup.prototype.InUse = function() { return this.$val.InUse(); };
	AnimationObjectGroup.ptr.prototype.BindingsPerObject = function() {
		var a;
		a = this;
		return $parseFloat(a.p.bindingsPerObject);
	};
	AnimationObjectGroup.prototype.BindingsPerObject = function() { return this.$val.BindingsPerObject(); };
	AnimationObjectGroup.ptr.prototype.Add = function(varArgs) {
		var _r, a, varArgs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; varArgs = $f.varArgs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r = varArgs.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a.p.add(_r);
		$s = -1; return a;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AnimationObjectGroup.ptr.prototype.Add }; } $f._r = _r; $f.a = a; $f.varArgs = varArgs; $f.$s = $s; $f.$r = $r; return $f;
	};
	AnimationObjectGroup.prototype.Add = function(varArgs) { return this.$val.Add(varArgs); };
	AnimationObjectGroup.ptr.prototype.Remove = function(varArgs) {
		var _r, a, varArgs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; varArgs = $f.varArgs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r = varArgs.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a.p.remove(_r);
		$s = -1; return a;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AnimationObjectGroup.ptr.prototype.Remove }; } $f._r = _r; $f.a = a; $f.varArgs = varArgs; $f.$s = $s; $f.$r = $r; return $f;
	};
	AnimationObjectGroup.prototype.Remove = function(varArgs) { return this.$val.Remove(varArgs); };
	AnimationObjectGroup.ptr.prototype.Uncache = function(varArgs) {
		var _r, a, varArgs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; varArgs = $f.varArgs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r = varArgs.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a.p.uncache(_r);
		$s = -1; return a;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AnimationObjectGroup.ptr.prototype.Uncache }; } $f._r = _r; $f.a = a; $f.varArgs = varArgs; $f.$s = $s; $f.$r = $r; return $f;
	};
	AnimationObjectGroup.prototype.Uncache = function(varArgs) { return this.$val.Uncache(varArgs); };
	AnimationObjectGroup.ptr.prototype.Subscribe = function(path, parsedPath) {
		var a, parsedPath, path;
		a = this;
		a.p.subscribe_(path, parsedPath);
		return a;
	};
	AnimationObjectGroup.prototype.Subscribe = function(path, parsedPath) { return this.$val.Subscribe(path, parsedPath); };
	AnimationObjectGroup.ptr.prototype.Unsubscribe = function(path) {
		var a, path;
		a = this;
		a.p.unsubscribe_(path);
		return a;
	};
	AnimationObjectGroup.prototype.Unsubscribe = function(path) { return this.$val.Unsubscribe(path); };
	AnimationUtils.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.p;
	};
	AnimationUtils.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.AnimationUtils = function() {
		var p, t;
		t = this;
		p = t.ctx.AnimationUtils;
		return AnimationUtilsFromJSObject(p);
	};
	Three.prototype.AnimationUtils = function() { return this.$val.AnimationUtils(); };
	AnimationUtilsFromJSObject = function(p) {
		var p;
		return new AnimationUtils.ptr(p);
	};
	$pkg.AnimationUtilsFromJSObject = AnimationUtilsFromJSObject;
	Three.ptr.prototype.NewAnimationUtils = function() {
		var p, t;
		t = this;
		p = new (t.ctx.AnimationUtils)();
		return AnimationUtilsFromJSObject(p);
	};
	Three.prototype.NewAnimationUtils = function() { return this.$val.NewAnimationUtils(); };
	AnimationUtils.ptr.prototype.ArraySlice = function(array, from, to) {
		var a, array, from, to;
		a = this;
		a.p.arraySlice(array, from, to);
		return a;
	};
	AnimationUtils.prototype.ArraySlice = function(array, from, to) { return this.$val.ArraySlice(array, from, to); };
	AnimationUtils.ptr.prototype.ConvertArray = function(array, typ, forceClone) {
		var a, array, forceClone, typ;
		a = this;
		a.p.convertArray(array, typ, forceClone);
		return a;
	};
	AnimationUtils.prototype.ConvertArray = function(array, typ, forceClone) { return this.$val.ConvertArray(array, typ, forceClone); };
	AnimationUtils.ptr.prototype.IsTypedArray = function(object) {
		var a, object;
		a = this;
		a.p.isTypedArray(object);
		return a;
	};
	AnimationUtils.prototype.IsTypedArray = function(object) { return this.$val.IsTypedArray(object); };
	AnimationUtils.ptr.prototype.GetKeyframeOrder = function(times) {
		var a, times;
		a = this;
		a.p.getKeyframeOrder(times);
		return a;
	};
	AnimationUtils.prototype.GetKeyframeOrder = function(times) { return this.$val.GetKeyframeOrder(times); };
	AnimationUtils.ptr.prototype.SortedArray = function(values, stride, order) {
		var a, order, stride, values;
		a = this;
		a.p.sortedArray(values, stride, order);
		return a;
	};
	AnimationUtils.prototype.SortedArray = function(values, stride, order) { return this.$val.SortedArray(values, stride, order); };
	AnimationUtils.ptr.prototype.FlattenJSON = function(jsonKeys, times, values, valuePropertyName) {
		var a, jsonKeys, times, valuePropertyName, values;
		a = this;
		a.p.flattenJSON(jsonKeys, times, values, valuePropertyName);
		return a;
	};
	AnimationUtils.prototype.FlattenJSON = function(jsonKeys, times, values, valuePropertyName) { return this.$val.FlattenJSON(jsonKeys, times, values, valuePropertyName); };
	ArcCurve.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.EllipseCurve.Curve.p;
	};
	ArcCurve.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ArcCurve = function() {
		var p, t;
		t = this;
		p = t.ctx.ArcCurve;
		return ArcCurveFromJSObject(p);
	};
	Three.prototype.ArcCurve = function() { return this.$val.ArcCurve(); };
	ArcCurveFromJSObject = function(p) {
		var p;
		return new ArcCurve.ptr(EllipseCurveFromJSObject(p));
	};
	$pkg.ArcCurveFromJSObject = ArcCurveFromJSObject;
	Three.ptr.prototype.NewArcCurve = function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
		var aClockwise, aEndAngle, aRadius, aStartAngle, aX, aY, p, t;
		t = this;
		p = new (t.ctx.ArcCurve)(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise);
		return ArcCurveFromJSObject(p);
	};
	Three.prototype.NewArcCurve = function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) { return this.$val.NewArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise); };
	ArrowHelper.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.Object3D.p;
	};
	ArrowHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ArrowHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.ArrowHelper;
		return ArrowHelperFromJSObject(p);
	};
	Three.prototype.ArrowHelper = function() { return this.$val.ArrowHelper(); };
	ArrowHelperFromJSObject = function(p) {
		var p;
		return new ArrowHelper.ptr(Object3DFromJSObject(p));
	};
	$pkg.ArrowHelperFromJSObject = ArrowHelperFromJSObject;
	Three.ptr.prototype.NewArrowHelper = function(dir, origin, opts) {
		var color, dir, headLength, headWidth, length, opts, origin, p, t;
		t = this;
		length = new $jsObjectPtr(undefined);
		color = new $jsObjectPtr(undefined);
		headLength = new $jsObjectPtr(undefined);
		headWidth = new $jsObjectPtr(undefined);
		if (!(opts === ptrType.nil)) {
			if (!(opts.Length === ptrType$1.nil)) {
				length = new $Float64(opts.Length.$get());
			}
			if (!(opts.Color === ptrType$2.nil)) {
				color = new $jsObjectPtr(opts.Color.JSObject());
			}
			if (!(opts.HeadLength === ptrType$1.nil)) {
				headLength = new $Float64(opts.HeadLength.$get());
			}
			if (!(opts.HeadWidth === ptrType$1.nil)) {
				headWidth = new $Float64(opts.HeadWidth.$get());
			}
		}
		p = new (t.ctx.ArrowHelper)(dir.JSObject(), origin.JSObject(), $externalize(length, $emptyInterface), $externalize(color, $emptyInterface), $externalize(headLength, $emptyInterface), $externalize(headWidth, $emptyInterface));
		return ArrowHelperFromJSObject(p);
	};
	Three.prototype.NewArrowHelper = function(dir, origin, opts) { return this.$val.NewArrowHelper(dir, origin, opts); };
	ArrowHelper.ptr.prototype.SetLength = function(length, headLength, headWidth) {
		var a, headLength, headWidth, length;
		a = this;
		a.Object3D.p.setLength(length, headLength, headWidth);
		return a;
	};
	ArrowHelper.prototype.SetLength = function(length, headLength, headWidth) { return this.$val.SetLength(length, headLength, headWidth); };
	ArrowHelper.ptr.prototype.SetColor = function(color) {
		var a, color;
		a = this;
		a.Object3D.p.setColor(color);
		return a;
	};
	ArrowHelper.prototype.SetColor = function(color) { return this.$val.SetColor(color); };
	Audio.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.p;
	};
	Audio.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Audio = function() {
		var p, t;
		t = this;
		p = t.ctx.Audio;
		return AudioFromJSObject(p);
	};
	Three.prototype.Audio = function() { return this.$val.Audio(); };
	AudioFromJSObject = function(p) {
		var p;
		return new Audio.ptr(p);
	};
	$pkg.AudioFromJSObject = AudioFromJSObject;
	Three.ptr.prototype.NewAudio = function(listener) {
		var listener, p, t;
		t = this;
		p = new (t.ctx.Audio)(listener);
		return AudioFromJSObject(p);
	};
	Three.prototype.NewAudio = function(listener) { return this.$val.NewAudio(listener); };
	Audio.ptr.prototype.Load = function(file) {
		var a, file;
		a = this;
		a.p.load(file);
		return a;
	};
	Audio.prototype.Load = function(file) { return this.$val.Load(file); };
	Audio.ptr.prototype.SetNodeSource = function(audioNode) {
		var a, audioNode;
		a = this;
		a.p.setNodeSource(audioNode);
		return a;
	};
	Audio.prototype.SetNodeSource = function(audioNode) { return this.$val.SetNodeSource(audioNode); };
	Audio.ptr.prototype.SetBuffer = function(audioBuffer) {
		var a, audioBuffer;
		a = this;
		a.p.setBuffer(audioBuffer);
		return a;
	};
	Audio.prototype.SetBuffer = function(audioBuffer) { return this.$val.SetBuffer(audioBuffer); };
	Audio.ptr.prototype.SetFilter = function(value) {
		var a, value;
		a = this;
		a.p.setFilter(value);
		return a;
	};
	Audio.prototype.SetFilter = function(value) { return this.$val.SetFilter(value); };
	Audio.ptr.prototype.SetPlaybackRate = function(value) {
		var a, value;
		a = this;
		a.p.setPlaybackRate(value);
		return a;
	};
	Audio.prototype.SetPlaybackRate = function(value) { return this.$val.SetPlaybackRate(value); };
	Audio.ptr.prototype.SetLoop = function(value) {
		var a, value;
		a = this;
		a.p.setLoop(value);
		return a;
	};
	Audio.prototype.SetLoop = function(value) { return this.$val.SetLoop(value); };
	Audio.ptr.prototype.SetVolume = function(value) {
		var a, value;
		a = this;
		a.p.setVolume(value);
		return a;
	};
	Audio.prototype.SetVolume = function(value) { return this.$val.SetVolume(value); };
	AudioAnalyser.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.p;
	};
	AudioAnalyser.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.AudioAnalyser = function() {
		var p, t;
		t = this;
		p = t.ctx.AudioAnalyser;
		return AudioAnalyserFromJSObject(p);
	};
	Three.prototype.AudioAnalyser = function() { return this.$val.AudioAnalyser(); };
	AudioAnalyserFromJSObject = function(p) {
		var p;
		return new AudioAnalyser.ptr(p);
	};
	$pkg.AudioAnalyserFromJSObject = AudioAnalyserFromJSObject;
	Three.ptr.prototype.NewAudioAnalyser = function(audio, fftSize) {
		var audio, fftSize, p, t;
		t = this;
		p = new (t.ctx.AudioAnalyser)(audio, fftSize);
		return AudioAnalyserFromJSObject(p);
	};
	Three.prototype.NewAudioAnalyser = function(audio, fftSize) { return this.$val.NewAudioAnalyser(audio, fftSize); };
	AudioAnalyser.ptr.prototype.GetData = function() {
		var a;
		a = this;
		a.p.getData();
		return a;
	};
	AudioAnalyser.prototype.GetData = function() { return this.$val.GetData(); };
	AudioBuffer.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.p;
	};
	AudioBuffer.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.AudioBuffer = function() {
		var p, t;
		t = this;
		p = t.ctx.AudioBuffer;
		return AudioBufferFromJSObject(p);
	};
	Three.prototype.AudioBuffer = function() { return this.$val.AudioBuffer(); };
	AudioBufferFromJSObject = function(p) {
		var p;
		return new AudioBuffer.ptr(p);
	};
	$pkg.AudioBufferFromJSObject = AudioBufferFromJSObject;
	Three.ptr.prototype.NewAudioBuffer = function(context) {
		var context, p, t;
		t = this;
		p = new (t.ctx.AudioBuffer)(context);
		return AudioBufferFromJSObject(p);
	};
	Three.prototype.NewAudioBuffer = function(context) { return this.$val.NewAudioBuffer(context); };
	AudioBuffer.ptr.prototype.Load = function(file) {
		var a, file;
		a = this;
		a.p.load(file);
		return a;
	};
	AudioBuffer.prototype.Load = function(file) { return this.$val.Load(file); };
	AudioBuffer.ptr.prototype.OnReady = function(callback) {
		var a, callback;
		a = this;
		a.p.onReady(callback);
		return a;
	};
	AudioBuffer.prototype.OnReady = function(callback) { return this.$val.OnReady(callback); };
	AudioListener.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.p;
	};
	AudioListener.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.AudioListener = function() {
		var p, t;
		t = this;
		p = t.ctx.AudioListener;
		return AudioListenerFromJSObject(p);
	};
	Three.prototype.AudioListener = function() { return this.$val.AudioListener(); };
	AudioListenerFromJSObject = function(p) {
		var p;
		return new AudioListener.ptr(p);
	};
	$pkg.AudioListenerFromJSObject = AudioListenerFromJSObject;
	Three.ptr.prototype.NewAudioListener = function() {
		var p, t;
		t = this;
		p = new (t.ctx.AudioListener)();
		return AudioListenerFromJSObject(p);
	};
	Three.prototype.NewAudioListener = function() { return this.$val.NewAudioListener(); };
	AudioListener.ptr.prototype.RemoveFilter = function(param) {
		var a, param;
		a = this;
		a.p.removeFilter();
		return a;
	};
	AudioListener.prototype.RemoveFilter = function(param) { return this.$val.RemoveFilter(param); };
	AudioListener.ptr.prototype.SetFilter = function(value) {
		var a, value;
		a = this;
		a.p.setFilter(value);
		return a;
	};
	AudioListener.prototype.SetFilter = function(value) { return this.$val.SetFilter(value); };
	AudioListener.ptr.prototype.SetMasterVolume = function(value) {
		var a, value;
		a = this;
		a.p.setMasterVolume(value);
		return a;
	};
	AudioListener.prototype.SetMasterVolume = function(value) { return this.$val.SetMasterVolume(value); };
	AxisHelper.ptr.prototype.JSObject = function() {
		var a;
		a = this;
		return a.LineSegments.Line.Object3D.p;
	};
	AxisHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.AxisHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.AxisHelper;
		return AxisHelperFromJSObject(p);
	};
	Three.prototype.AxisHelper = function() { return this.$val.AxisHelper(); };
	AxisHelperFromJSObject = function(p) {
		var p;
		return new AxisHelper.ptr(LineSegmentsFromJSObject(p));
	};
	$pkg.AxisHelperFromJSObject = AxisHelperFromJSObject;
	Three.ptr.prototype.NewAxisHelper = function(size) {
		var p, size, t;
		t = this;
		p = new (t.ctx.AxisHelper)(size);
		return AxisHelperFromJSObject(p);
	};
	Three.prototype.NewAxisHelper = function(size) { return this.$val.NewAxisHelper(size); };
	BinaryTextureLoader.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.p;
	};
	BinaryTextureLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.BinaryTextureLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.BinaryTextureLoader;
		return BinaryTextureLoaderFromJSObject(p);
	};
	Three.prototype.BinaryTextureLoader = function() { return this.$val.BinaryTextureLoader(); };
	BinaryTextureLoaderFromJSObject = function(p) {
		var p;
		return new BinaryTextureLoader.ptr(p);
	};
	$pkg.BinaryTextureLoaderFromJSObject = BinaryTextureLoaderFromJSObject;
	Three.ptr.prototype.NewBinaryTextureLoader = function() {
		var p, t;
		t = this;
		p = new (t.ctx.BinaryTextureLoader)();
		return BinaryTextureLoaderFromJSObject(p);
	};
	Three.prototype.NewBinaryTextureLoader = function() { return this.$val.NewBinaryTextureLoader(); };
	BinaryTextureLoader.ptr.prototype.Load = function(url, onLoad, onProgress, onError) {
		var b, onError, onLoad, onProgress, url;
		b = this;
		b.p.load(url, onLoad, onProgress, onError);
		return b;
	};
	BinaryTextureLoader.prototype.Load = function(url, onLoad, onProgress, onError) { return this.$val.Load(url, onLoad, onProgress, onError); };
	Bone.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.Object3D.p;
	};
	Bone.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Bone = function() {
		var p, t;
		t = this;
		p = t.ctx.Bone;
		return BoneFromJSObject(p);
	};
	Three.prototype.Bone = function() { return this.$val.Bone(); };
	BoneFromJSObject = function(p) {
		var p;
		return new Bone.ptr(Object3DFromJSObject(p));
	};
	$pkg.BoneFromJSObject = BoneFromJSObject;
	Three.ptr.prototype.NewBone = function(skin) {
		var p, skin, t;
		t = this;
		p = new (t.ctx.Bone)(skin);
		return BoneFromJSObject(p);
	};
	Three.prototype.NewBone = function(skin) { return this.$val.NewBone(skin); };
	Bone.ptr.prototype.Copy = function(source) {
		var b, source;
		b = this;
		b.Object3D.p.copy(source.Object3D.p);
		return b;
	};
	Bone.prototype.Copy = function(source) { return this.$val.Copy(source); };
	BooleanKeyframeTrack.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.p;
	};
	BooleanKeyframeTrack.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.BooleanKeyframeTrack = function() {
		var p, t;
		t = this;
		p = t.ctx.BooleanKeyframeTrack;
		return BooleanKeyframeTrackFromJSObject(p);
	};
	Three.prototype.BooleanKeyframeTrack = function() { return this.$val.BooleanKeyframeTrack(); };
	BooleanKeyframeTrackFromJSObject = function(p) {
		var p;
		return new BooleanKeyframeTrack.ptr(p);
	};
	$pkg.BooleanKeyframeTrackFromJSObject = BooleanKeyframeTrackFromJSObject;
	Three.ptr.prototype.NewBooleanKeyframeTrack = function(name, times, values) {
		var name, p, t, times, values;
		t = this;
		p = new (t.ctx.BooleanKeyframeTrack)(name, times, values);
		return BooleanKeyframeTrackFromJSObject(p);
	};
	Three.prototype.NewBooleanKeyframeTrack = function(name, times, values) { return this.$val.NewBooleanKeyframeTrack(name, times, values); };
	BoundingBoxHelper.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.Mesh.Object3D.p;
	};
	BoundingBoxHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.BoundingBoxHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.BoundingBoxHelper;
		return BoundingBoxHelperFromJSObject(p);
	};
	Three.prototype.BoundingBoxHelper = function() { return this.$val.BoundingBoxHelper(); };
	BoundingBoxHelperFromJSObject = function(p) {
		var p;
		return new BoundingBoxHelper.ptr(MeshFromJSObject(p));
	};
	$pkg.BoundingBoxHelperFromJSObject = BoundingBoxHelperFromJSObject;
	Three.ptr.prototype.NewBoundingBoxHelper = function(object, hex) {
		var _r, hex, object, p, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; hex = $f.hex; object = $f.object; p = $f.p; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = object.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = new (t.ctx.BoundingBoxHelper)(_r, hex);
		$s = -1; return BoundingBoxHelperFromJSObject(p);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Three.ptr.prototype.NewBoundingBoxHelper }; } $f._r = _r; $f.hex = hex; $f.object = object; $f.p = p; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Three.prototype.NewBoundingBoxHelper = function(object, hex) { return this.$val.NewBoundingBoxHelper(object, hex); };
	BoundingBoxHelper.ptr.prototype.Update = function() {
		var b;
		b = this;
		b.Mesh.Object3D.p.update();
		return b;
	};
	BoundingBoxHelper.prototype.Update = function() { return this.$val.Update(); };
	Box2.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.p;
	};
	Box2.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Box2 = function() {
		var p, t;
		t = this;
		p = t.ctx.Box2;
		return Box2FromJSObject(p);
	};
	Three.prototype.Box2 = function() { return this.$val.Box2(); };
	Box2FromJSObject = function(p) {
		var p;
		return new Box2.ptr(p);
	};
	$pkg.Box2FromJSObject = Box2FromJSObject;
	Three.ptr.prototype.NewBox2 = function(min, max) {
		var max, min, p, t;
		t = this;
		p = new (t.ctx.Box2)(min, max);
		return Box2FromJSObject(p);
	};
	Three.prototype.NewBox2 = function(min, max) { return this.$val.NewBox2(min, max); };
	Box2.ptr.prototype.Set = function(min, max) {
		var b, max, min;
		b = this;
		b.p.set(min, max);
		return b;
	};
	Box2.prototype.Set = function(min, max) { return this.$val.Set(min, max); };
	Box2.ptr.prototype.SetFromPoints = function(points) {
		var b, points;
		b = this;
		b.p.setFromPoints(points);
		return b;
	};
	Box2.prototype.SetFromPoints = function(points) { return this.$val.SetFromPoints(points); };
	Box2.ptr.prototype.SetFromCenterAndSize = function() {
		var b;
		b = this;
		b.p.setFromCenterAndSize();
		return b;
	};
	Box2.prototype.SetFromCenterAndSize = function() { return this.$val.SetFromCenterAndSize(); };
	Box2.ptr.prototype.Clone = function() {
		var b;
		b = this;
		b.p.clone();
		return b;
	};
	Box2.prototype.Clone = function() { return this.$val.Clone(); };
	Box2.ptr.prototype.Copy = function(box) {
		var b, box;
		b = this;
		b.p.copy(box.p);
		return b;
	};
	Box2.prototype.Copy = function(box) { return this.$val.Copy(box); };
	Box2.ptr.prototype.MakeEmpty = function() {
		var b;
		b = this;
		b.p.makeEmpty();
		return b;
	};
	Box2.prototype.MakeEmpty = function() { return this.$val.MakeEmpty(); };
	Box2.ptr.prototype.IsEmpty = function() {
		var b;
		b = this;
		b.p.isEmpty();
		return b;
	};
	Box2.prototype.IsEmpty = function() { return this.$val.IsEmpty(); };
	Box2.ptr.prototype.Center = function(optionalTarget) {
		var b, optionalTarget;
		b = this;
		b.p.center(optionalTarget);
		return b;
	};
	Box2.prototype.Center = function(optionalTarget) { return this.$val.Center(optionalTarget); };
	Box2.ptr.prototype.Size = function(optionalTarget) {
		var b, optionalTarget;
		b = this;
		b.p.size(optionalTarget);
		return b;
	};
	Box2.prototype.Size = function(optionalTarget) { return this.$val.Size(optionalTarget); };
	Box2.ptr.prototype.ExpandByPoint = function(point) {
		var b, point;
		b = this;
		b.p.expandByPoint(point);
		return b;
	};
	Box2.prototype.ExpandByPoint = function(point) { return this.$val.ExpandByPoint(point); };
	Box2.ptr.prototype.ExpandByVector = function(vector) {
		var b, vector;
		b = this;
		b.p.expandByVector(vector);
		return b;
	};
	Box2.prototype.ExpandByVector = function(vector) { return this.$val.ExpandByVector(vector); };
	Box2.ptr.prototype.ExpandByScalar = function(scalar) {
		var b, scalar;
		b = this;
		b.p.expandByScalar(scalar);
		return b;
	};
	Box2.prototype.ExpandByScalar = function(scalar) { return this.$val.ExpandByScalar(scalar); };
	Box2.ptr.prototype.ContainsPoint = function(point) {
		var b, point;
		b = this;
		b.p.containsPoint(point);
		return b;
	};
	Box2.prototype.ContainsPoint = function(point) { return this.$val.ContainsPoint(point); };
	Box2.ptr.prototype.ContainsBox = function(box) {
		var b, box;
		b = this;
		b.p.containsBox(box);
		return b;
	};
	Box2.prototype.ContainsBox = function(box) { return this.$val.ContainsBox(box); };
	Box2.ptr.prototype.GetParameter = function(point, optionalTarget) {
		var b, optionalTarget, point;
		b = this;
		b.p.getParameter($externalize(point, ptrType$3), $externalize(optionalTarget, ptrType$3));
		return b;
	};
	Box2.prototype.GetParameter = function(point, optionalTarget) { return this.$val.GetParameter(point, optionalTarget); };
	Box2.ptr.prototype.IntersectsBox = function(box) {
		var b, box;
		b = this;
		b.p.intersectsBox(box);
		return b;
	};
	Box2.prototype.IntersectsBox = function(box) { return this.$val.IntersectsBox(box); };
	Box2.ptr.prototype.ClampPoint = function(point, optionalTarget) {
		var b, optionalTarget, point;
		b = this;
		b.p.clampPoint(point, optionalTarget);
		return b;
	};
	Box2.prototype.ClampPoint = function(point, optionalTarget) { return this.$val.ClampPoint(point, optionalTarget); };
	Box2.ptr.prototype.DistanceToPoint = function() {
		var b;
		b = this;
		b.p.distanceToPoint();
		return b;
	};
	Box2.prototype.DistanceToPoint = function() { return this.$val.DistanceToPoint(); };
	Box2.ptr.prototype.Intersect = function(box) {
		var b, box;
		b = this;
		b.p.intersect(box);
		return b;
	};
	Box2.prototype.Intersect = function(box) { return this.$val.Intersect(box); };
	Box2.ptr.prototype.Union = function(box) {
		var b, box;
		b = this;
		b.p.union(box);
		return b;
	};
	Box2.prototype.Union = function(box) { return this.$val.Union(box); };
	Box2.ptr.prototype.Translate = function(offset) {
		var b, offset;
		b = this;
		b.p.translate(offset);
		return b;
	};
	Box2.prototype.Translate = function(offset) { return this.$val.Translate(offset); };
	Box2.ptr.prototype.Equals = function(box) {
		var b, box;
		b = this;
		b.p.equals(box);
		return b;
	};
	Box2.prototype.Equals = function(box) { return this.$val.Equals(box); };
	Box3.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.p;
	};
	Box3.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Box3 = function() {
		var p, t;
		t = this;
		p = t.ctx.Box3;
		return Box3FromJSObject(p);
	};
	Three.prototype.Box3 = function() { return this.$val.Box3(); };
	Box3FromJSObject = function(p) {
		var p;
		return new Box3.ptr(p);
	};
	$pkg.Box3FromJSObject = Box3FromJSObject;
	Three.ptr.prototype.NewBox3 = function(min, max) {
		var max, min, p, t;
		t = this;
		p = new (t.ctx.Box3)(min, max);
		return Box3FromJSObject(p);
	};
	Three.prototype.NewBox3 = function(min, max) { return this.$val.NewBox3(min, max); };
	Box3.ptr.prototype.Set = function(min, max) {
		var b, max, min;
		b = this;
		b.p.set(min, max);
		return b;
	};
	Box3.prototype.Set = function(min, max) { return this.$val.Set(min, max); };
	Box3.ptr.prototype.SetFromArray = function(array) {
		var array, b;
		b = this;
		b.p.setFromArray(array);
		return b;
	};
	Box3.prototype.SetFromArray = function(array) { return this.$val.SetFromArray(array); };
	Box3.ptr.prototype.SetFromPoints = function(points) {
		var b, points;
		b = this;
		b.p.setFromPoints(points);
		return b;
	};
	Box3.prototype.SetFromPoints = function(points) { return this.$val.SetFromPoints(points); };
	Box3.ptr.prototype.SetFromCenterAndSize = function() {
		var b;
		b = this;
		b.p.setFromCenterAndSize();
		return b;
	};
	Box3.prototype.SetFromCenterAndSize = function() { return this.$val.SetFromCenterAndSize(); };
	Box3.ptr.prototype.SetFromObject = function() {
		var b;
		b = this;
		b.p.setFromObject();
		return b;
	};
	Box3.prototype.SetFromObject = function() { return this.$val.SetFromObject(); };
	Box3.ptr.prototype.Clone = function() {
		var b;
		b = this;
		b.p.clone();
		return b;
	};
	Box3.prototype.Clone = function() { return this.$val.Clone(); };
	Box3.ptr.prototype.Copy = function(box) {
		var b, box;
		b = this;
		b.p.copy(box.p);
		return b;
	};
	Box3.prototype.Copy = function(box) { return this.$val.Copy(box); };
	Box3.ptr.prototype.MakeEmpty = function() {
		var b;
		b = this;
		b.p.makeEmpty();
		return b;
	};
	Box3.prototype.MakeEmpty = function() { return this.$val.MakeEmpty(); };
	Box3.ptr.prototype.IsEmpty = function() {
		var b;
		b = this;
		b.p.isEmpty();
		return b;
	};
	Box3.prototype.IsEmpty = function() { return this.$val.IsEmpty(); };
	Box3.ptr.prototype.Center = function(optionalTarget) {
		var b, optionalTarget;
		b = this;
		if (!(optionalTarget === null)) {
			return Vector3FromJSObject(b.p.center(optionalTarget));
		}
		return Vector3FromJSObject(b.p.center());
	};
	Box3.prototype.Center = function(optionalTarget) { return this.$val.Center(optionalTarget); };
	Box3.ptr.prototype.Size = function(optionalTarget) {
		var b, optionalTarget;
		b = this;
		b.p.size(optionalTarget);
		return b;
	};
	Box3.prototype.Size = function(optionalTarget) { return this.$val.Size(optionalTarget); };
	Box3.ptr.prototype.ExpandByPoint = function(point) {
		var b, point;
		b = this;
		b.p.expandByPoint(point);
		return b;
	};
	Box3.prototype.ExpandByPoint = function(point) { return this.$val.ExpandByPoint(point); };
	Box3.ptr.prototype.ExpandByVector = function(vector) {
		var b, vector;
		b = this;
		b.p.expandByVector(vector);
		return b;
	};
	Box3.prototype.ExpandByVector = function(vector) { return this.$val.ExpandByVector(vector); };
	Box3.ptr.prototype.ExpandByScalar = function(scalar) {
		var b, scalar;
		b = this;
		b.p.expandByScalar(scalar);
		return b;
	};
	Box3.prototype.ExpandByScalar = function(scalar) { return this.$val.ExpandByScalar(scalar); };
	Box3.ptr.prototype.ContainsPoint = function(point) {
		var b, point;
		b = this;
		b.p.containsPoint(point);
		return b;
	};
	Box3.prototype.ContainsPoint = function(point) { return this.$val.ContainsPoint(point); };
	Box3.ptr.prototype.ContainsBox = function(box) {
		var b, box;
		b = this;
		b.p.containsBox(box);
		return b;
	};
	Box3.prototype.ContainsBox = function(box) { return this.$val.ContainsBox(box); };
	Box3.ptr.prototype.GetParameter = function(point, optionalTarget) {
		var b, optionalTarget, point;
		b = this;
		b.p.getParameter(point, optionalTarget);
		return b;
	};
	Box3.prototype.GetParameter = function(point, optionalTarget) { return this.$val.GetParameter(point, optionalTarget); };
	Box3.ptr.prototype.IntersectsBox = function(box) {
		var b, box;
		b = this;
		b.p.intersectsBox(box);
		return b;
	};
	Box3.prototype.IntersectsBox = function(box) { return this.$val.IntersectsBox(box); };
	Box3.ptr.prototype.IntersectsPlane = function(plane) {
		var b, plane;
		b = this;
		b.p.intersectsPlane(plane);
		return b;
	};
	Box3.prototype.IntersectsPlane = function(plane) { return this.$val.IntersectsPlane(plane); };
	Box3.ptr.prototype.ClampPoint = function(point, optionalTarget) {
		var b, optionalTarget, point;
		b = this;
		b.p.clampPoint(point, optionalTarget);
		return b;
	};
	Box3.prototype.ClampPoint = function(point, optionalTarget) { return this.$val.ClampPoint(point, optionalTarget); };
	Box3.ptr.prototype.DistanceToPoint = function() {
		var b;
		b = this;
		b.p.distanceToPoint();
		return b;
	};
	Box3.prototype.DistanceToPoint = function() { return this.$val.DistanceToPoint(); };
	Box3.ptr.prototype.GetBoundingSphere = function() {
		var b;
		b = this;
		b.p.getBoundingSphere();
		return b;
	};
	Box3.prototype.GetBoundingSphere = function() { return this.$val.GetBoundingSphere(); };
	Box3.ptr.prototype.Intersect = function(box) {
		var b, box;
		b = this;
		b.p.intersect(box);
		return b;
	};
	Box3.prototype.Intersect = function(box) { return this.$val.Intersect(box); };
	Box3.ptr.prototype.Union = function(box) {
		var b, box;
		b = this;
		b.p.union(box);
		return b;
	};
	Box3.prototype.Union = function(box) { return this.$val.Union(box); };
	Box3.ptr.prototype.ApplyMatrix4 = function() {
		var b;
		b = this;
		b.p.applyMatrix4();
		return b;
	};
	Box3.prototype.ApplyMatrix4 = function() { return this.$val.ApplyMatrix4(); };
	Box3.ptr.prototype.Translate = function(offset) {
		var b, offset;
		b = this;
		b.p.translate(offset);
		return b;
	};
	Box3.prototype.Translate = function(offset) { return this.$val.Translate(offset); };
	Box3.ptr.prototype.Equals = function(box) {
		var b, box;
		b = this;
		b.p.equals(box);
		return b;
	};
	Box3.prototype.Equals = function(box) { return this.$val.Equals(box); };
	BoxBufferGeometry.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.BufferGeometry.p;
	};
	BoxBufferGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.BoxBufferGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.BoxBufferGeometry;
		return BoxBufferGeometryFromJSObject(p);
	};
	Three.prototype.BoxBufferGeometry = function() { return this.$val.BoxBufferGeometry(); };
	BoxBufferGeometryFromJSObject = function(p) {
		var p;
		return new BoxBufferGeometry.ptr(BufferGeometryFromJSObject(p));
	};
	$pkg.BoxBufferGeometryFromJSObject = BoxBufferGeometryFromJSObject;
	Three.ptr.prototype.NewBoxBufferGeometry = function(width, height, depth, opts) {
		var depth, height, opts, p, t, width;
		t = this;
		p = null;
		if (!(opts === ptrType$4.nil)) {
			p = new (t.ctx.BoxBufferGeometry)(width, height, depth, opts.widthSegments, opts.heightSegments, opts.depthSegments);
		} else {
			p = new (t.ctx.BoxBufferGeometry)(width, height, depth);
		}
		return BoxBufferGeometryFromJSObject(p);
	};
	Three.prototype.NewBoxBufferGeometry = function(width, height, depth, opts) { return this.$val.NewBoxBufferGeometry(width, height, depth, opts); };
	BoxGeometry.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.Geometry.p;
	};
	BoxGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.BoxGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.BoxGeometry;
		return BoxGeometryFromJSObject(p);
	};
	Three.prototype.BoxGeometry = function() { return this.$val.BoxGeometry(); };
	BoxGeometryFromJSObject = function(p) {
		var p;
		return new BoxGeometry.ptr(GeometryFromJSObject(p));
	};
	$pkg.BoxGeometryFromJSObject = BoxGeometryFromJSObject;
	Three.ptr.prototype.NewBoxGeometry = function(width, height, depth, opts) {
		var depth, height, opts, p, t, width;
		t = this;
		p = t.ctx.BoxGeometry;
		if (!(opts === ptrType$5.nil)) {
			p = new (p)(width, height, depth, opts.WidthSegments, opts.HeightSegments, opts.DepthSegments);
		} else {
			p = new (p)(width, height, depth);
		}
		return BoxGeometryFromJSObject(p);
	};
	Three.prototype.NewBoxGeometry = function(width, height, depth, opts) { return this.$val.NewBoxGeometry(width, height, depth, opts); };
	BoxHelper.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.Line.Object3D.p;
	};
	BoxHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.BoxHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.BoxHelper;
		return BoxHelperFromJSObject(p);
	};
	Three.prototype.BoxHelper = function() { return this.$val.BoxHelper(); };
	BoxHelperFromJSObject = function(p) {
		var p;
		return new BoxHelper.ptr(LineFromJSObject(p));
	};
	$pkg.BoxHelperFromJSObject = BoxHelperFromJSObject;
	Three.ptr.prototype.NewBoxHelper = function(object) {
		var _r, object, p, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; object = $f.object; p = $f.p; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = object.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = new (t.ctx.BoxHelper)(_r);
		$s = -1; return BoxHelperFromJSObject(p);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Three.ptr.prototype.NewBoxHelper }; } $f._r = _r; $f.object = object; $f.p = p; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Three.prototype.NewBoxHelper = function(object) { return this.$val.NewBoxHelper(object); };
	BoxHelper.ptr.prototype.Update = function() {
		var b;
		b = this;
		b.Line.Object3D.p.update();
		return b;
	};
	BoxHelper.prototype.Update = function() { return this.$val.Update(); };
	BufferAttribute.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.p;
	};
	BufferAttribute.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.BufferAttribute = function() {
		var p, t;
		t = this;
		p = t.ctx.BufferAttribute;
		return BufferAttributeFromJSObject(p);
	};
	Three.prototype.BufferAttribute = function() { return this.$val.BufferAttribute(); };
	BufferAttributeFromJSObject = function(p) {
		var p;
		return new BufferAttribute.ptr(p);
	};
	$pkg.BufferAttributeFromJSObject = BufferAttributeFromJSObject;
	Three.ptr.prototype.NewBufferAttribute = function(array, itemSize) {
		var array, itemSize, p, t;
		t = this;
		p = new (t.ctx.BufferAttribute)($externalize(array, $emptyInterface), itemSize);
		return BufferAttributeFromJSObject(p);
	};
	Three.prototype.NewBufferAttribute = function(array, itemSize) { return this.$val.NewBufferAttribute(array, itemSize); };
	Three.ptr.prototype.Int8Attribute = function() {
		var p, t;
		t = this;
		p = t.ctx.Int8Attribute;
		return new Int8Attribute.ptr(p);
	};
	Three.prototype.Int8Attribute = function() { return this.$val.Int8Attribute(); };
	Three.ptr.prototype.NewInt8Attribute = function(array, itemSize) {
		var array, itemSize, p, t;
		t = this;
		p = new (t.ctx.Int8Attribute)($externalize(array, sliceType), itemSize);
		return new Int8Attribute.ptr(p);
	};
	Three.prototype.NewInt8Attribute = function(array, itemSize) { return this.$val.NewInt8Attribute(array, itemSize); };
	Three.ptr.prototype.Uint8Attribute = function() {
		var p, t;
		t = this;
		p = t.ctx.Uint8Attribute;
		return new Uint8Attribute.ptr(p);
	};
	Three.prototype.Uint8Attribute = function() { return this.$val.Uint8Attribute(); };
	Three.ptr.prototype.NewUint8Attribute = function(array, itemSize) {
		var array, itemSize, p, t;
		t = this;
		p = new (t.ctx.Uint8Attribute)($externalize(array, sliceType$1), itemSize);
		return new Uint8Attribute.ptr(p);
	};
	Three.prototype.NewUint8Attribute = function(array, itemSize) { return this.$val.NewUint8Attribute(array, itemSize); };
	Three.ptr.prototype.Uint8ClampedAttribute = function() {
		var p, t;
		t = this;
		p = t.ctx.Uint8ClampedAttribute;
		return new Uint8ClampedAttribute.ptr(p);
	};
	Three.prototype.Uint8ClampedAttribute = function() { return this.$val.Uint8ClampedAttribute(); };
	Three.ptr.prototype.NewUint8ClampedAttribute = function(array, itemSize) {
		var array, itemSize, p, t;
		t = this;
		p = new (t.ctx.Uint8ClampedAttribute)($externalize(array, sliceType$1), itemSize);
		return new Uint8ClampedAttribute.ptr(p);
	};
	Three.prototype.NewUint8ClampedAttribute = function(array, itemSize) { return this.$val.NewUint8ClampedAttribute(array, itemSize); };
	Three.ptr.prototype.Int16Attribute = function() {
		var p, t;
		t = this;
		p = t.ctx.Int16Attribute;
		return new Int16Attribute.ptr(p);
	};
	Three.prototype.Int16Attribute = function() { return this.$val.Int16Attribute(); };
	Three.ptr.prototype.NewInt16Attribute = function(array, itemSize) {
		var array, itemSize, p, t;
		t = this;
		p = new (t.ctx.Int16Attribute)($externalize(array, sliceType$2), itemSize);
		return new Int16Attribute.ptr(p);
	};
	Three.prototype.NewInt16Attribute = function(array, itemSize) { return this.$val.NewInt16Attribute(array, itemSize); };
	Three.ptr.prototype.Uint16Attribute = function() {
		var p, t;
		t = this;
		p = t.ctx.Uint16Attribute;
		return new Uint16Attribute.ptr(p);
	};
	Three.prototype.Uint16Attribute = function() { return this.$val.Uint16Attribute(); };
	Three.ptr.prototype.NewUint16Attribute = function(array, itemSize) {
		var array, itemSize, p, t;
		t = this;
		p = new (t.ctx.Uint16Attribute)($externalize(array, sliceType$3), itemSize);
		return new Uint16Attribute.ptr(p);
	};
	Three.prototype.NewUint16Attribute = function(array, itemSize) { return this.$val.NewUint16Attribute(array, itemSize); };
	Three.ptr.prototype.Int32Attribute = function() {
		var p, t;
		t = this;
		p = t.ctx.Int32Attribute;
		return new Int32Attribute.ptr(p);
	};
	Three.prototype.Int32Attribute = function() { return this.$val.Int32Attribute(); };
	Three.ptr.prototype.NewInt32Attribute = function(array, itemSize) {
		var array, itemSize, p, t;
		t = this;
		p = new (t.ctx.Int32Attribute)($externalize(array, sliceType$4), itemSize);
		return new Int32Attribute.ptr(p);
	};
	Three.prototype.NewInt32Attribute = function(array, itemSize) { return this.$val.NewInt32Attribute(array, itemSize); };
	Three.ptr.prototype.Uint32Attribute = function() {
		var p, t;
		t = this;
		p = t.ctx.Uint32Attribute;
		return new Uint32Attribute.ptr(p);
	};
	Three.prototype.Uint32Attribute = function() { return this.$val.Uint32Attribute(); };
	Three.ptr.prototype.NewUint32Attribute = function(array, itemSize) {
		var array, itemSize, p, t;
		t = this;
		p = new (t.ctx.Uint32Attribute)($externalize(array, sliceType$5), itemSize);
		return new Uint32Attribute.ptr(p);
	};
	Three.prototype.NewUint32Attribute = function(array, itemSize) { return this.$val.NewUint32Attribute(array, itemSize); };
	Three.ptr.prototype.Float32Attribute = function() {
		var p, t;
		t = this;
		p = t.ctx.Float32Attribute;
		return new Float32Attribute.ptr(p);
	};
	Three.prototype.Float32Attribute = function() { return this.$val.Float32Attribute(); };
	Three.ptr.prototype.NewFloat32Attribute = function(array, itemSize) {
		var array, itemSize, p, t;
		t = this;
		p = new (t.ctx.Float32Attribute)($externalize(array, sliceType$6), itemSize);
		return new Float32Attribute.ptr(p);
	};
	Three.prototype.NewFloat32Attribute = function(array, itemSize) { return this.$val.NewFloat32Attribute(array, itemSize); };
	Three.ptr.prototype.Float64Attribute = function() {
		var p, t;
		t = this;
		p = t.ctx.Float64Attribute;
		return new Float64Attribute.ptr(p);
	};
	Three.prototype.Float64Attribute = function() { return this.$val.Float64Attribute(); };
	Three.ptr.prototype.NewFloat64Attribute = function(array, itemSize) {
		var array, itemSize, p, t;
		t = this;
		p = new (t.ctx.Float64Attribute)($externalize(array, sliceType$7), itemSize);
		return new Float64Attribute.ptr(p);
	};
	Three.prototype.NewFloat64Attribute = function(array, itemSize) { return this.$val.NewFloat64Attribute(array, itemSize); };
	BufferAttribute.ptr.prototype.Count = function() {
		var b;
		b = this;
		return $parseFloat(b.p.count);
	};
	BufferAttribute.prototype.Count = function() { return this.$val.Count(); };
	BufferAttribute.ptr.prototype.SetNeedsUpdate = function(value) {
		var b, value;
		b = this;
		b.p.needsUpdate = value;
		return b;
	};
	BufferAttribute.prototype.SetNeedsUpdate = function(value) { return this.$val.SetNeedsUpdate(value); };
	BufferAttribute.ptr.prototype.SetDynamic = function(value) {
		var b, value;
		b = this;
		b.p.setDynamic(value);
		return b;
	};
	BufferAttribute.prototype.SetDynamic = function(value) { return this.$val.SetDynamic(value); };
	BufferAttribute.ptr.prototype.Copy = function(source) {
		var b, source;
		b = this;
		b.p.copy(source.p);
		return b;
	};
	BufferAttribute.prototype.Copy = function(source) { return this.$val.Copy(source); };
	BufferAttribute.ptr.prototype.CopyAt = function(index1, attribute, index2) {
		var attribute, b, index1, index2;
		b = this;
		b.p.copyAt(index1, attribute, index2);
		return b;
	};
	BufferAttribute.prototype.CopyAt = function(index1, attribute, index2) { return this.$val.CopyAt(index1, attribute, index2); };
	BufferAttribute.ptr.prototype.CopyArray = function(array) {
		var array, b;
		b = this;
		b.p.copyArray($externalize(array, sliceType$7));
		return b;
	};
	BufferAttribute.prototype.CopyArray = function(array) { return this.$val.CopyArray(array); };
	BufferAttribute.ptr.prototype.CopyColorsArray = function(colors) {
		var b, colors;
		b = this;
		b.p.copyColorsArray($externalize(colors, sliceType$7));
		return b;
	};
	BufferAttribute.prototype.CopyColorsArray = function(colors) { return this.$val.CopyColorsArray(colors); };
	BufferAttribute.ptr.prototype.CopyIndicesArray = function(indices) {
		var b, indices;
		b = this;
		b.p.copyIndicesArray($externalize(indices, sliceType$8));
		return b;
	};
	BufferAttribute.prototype.CopyIndicesArray = function(indices) { return this.$val.CopyIndicesArray(indices); };
	BufferAttribute.ptr.prototype.CopyVector2sArray = function(vectors) {
		var b, vectors;
		b = this;
		b.p.copyVector2sArray($externalize(vectors, sliceType$9));
		return b;
	};
	BufferAttribute.prototype.CopyVector2sArray = function(vectors) { return this.$val.CopyVector2sArray(vectors); };
	BufferAttribute.ptr.prototype.CopyVector3sArray = function(vectors) {
		var b, vectors;
		b = this;
		b.p.copyVector3sArray($externalize(vectors, sliceType$10));
		return b;
	};
	BufferAttribute.prototype.CopyVector3sArray = function(vectors) { return this.$val.CopyVector3sArray(vectors); };
	BufferAttribute.ptr.prototype.CopyVector4sArray = function(vectors) {
		var b, vectors;
		b = this;
		b.p.copyVector4sArray($externalize(vectors, sliceType$11));
		return b;
	};
	BufferAttribute.prototype.CopyVector4sArray = function(vectors) { return this.$val.CopyVector4sArray(vectors); };
	BufferAttribute.ptr.prototype.Set = function(value, offset) {
		var b, offset, value;
		b = this;
		b.p.set(value, offset);
		return b;
	};
	BufferAttribute.prototype.Set = function(value, offset) { return this.$val.Set(value, offset); };
	BufferAttribute.ptr.prototype.GetX = function(index) {
		var b, index;
		b = this;
		b.p.getX(index);
		return b;
	};
	BufferAttribute.prototype.GetX = function(index) { return this.$val.GetX(index); };
	BufferAttribute.ptr.prototype.SetX = function(index, x) {
		var b, index, x;
		b = this;
		b.p.setX(index, x);
		return b;
	};
	BufferAttribute.prototype.SetX = function(index, x) { return this.$val.SetX(index, x); };
	BufferAttribute.ptr.prototype.GetY = function(index) {
		var b, index;
		b = this;
		b.p.getY(index);
		return b;
	};
	BufferAttribute.prototype.GetY = function(index) { return this.$val.GetY(index); };
	BufferAttribute.ptr.prototype.SetY = function(index, y) {
		var b, index, y;
		b = this;
		b.p.setY(index, y);
		return b;
	};
	BufferAttribute.prototype.SetY = function(index, y) { return this.$val.SetY(index, y); };
	BufferAttribute.ptr.prototype.GetZ = function(index) {
		var b, index;
		b = this;
		b.p.getZ(index);
		return b;
	};
	BufferAttribute.prototype.GetZ = function(index) { return this.$val.GetZ(index); };
	BufferAttribute.ptr.prototype.SetZ = function(index, z) {
		var b, index, z;
		b = this;
		b.p.setZ(index, z);
		return b;
	};
	BufferAttribute.prototype.SetZ = function(index, z) { return this.$val.SetZ(index, z); };
	BufferAttribute.ptr.prototype.GetW = function(index) {
		var b, index;
		b = this;
		b.p.getW(index);
		return b;
	};
	BufferAttribute.prototype.GetW = function(index) { return this.$val.GetW(index); };
	BufferAttribute.ptr.prototype.SetW = function(index, w) {
		var b, index, w;
		b = this;
		b.p.setW(index, w);
		return b;
	};
	BufferAttribute.prototype.SetW = function(index, w) { return this.$val.SetW(index, w); };
	BufferAttribute.ptr.prototype.SetXY = function(index, x, y) {
		var b, index, x, y;
		b = this;
		b.p.setXY(index, x, y);
		return b;
	};
	BufferAttribute.prototype.SetXY = function(index, x, y) { return this.$val.SetXY(index, x, y); };
	BufferAttribute.ptr.prototype.SetXYZ = function(index, x, y, z) {
		var b, index, x, y, z;
		b = this;
		b.p.setXYZ(index, x, y, z);
		return b;
	};
	BufferAttribute.prototype.SetXYZ = function(index, x, y, z) { return this.$val.SetXYZ(index, x, y, z); };
	BufferAttribute.ptr.prototype.SetXYZW = function(index, x, y, z, w) {
		var b, index, w, x, y, z;
		b = this;
		b.p.setXYZW(index, x, y, z, w);
		return b;
	};
	BufferAttribute.prototype.SetXYZW = function(index, x, y, z, w) { return this.$val.SetXYZW(index, x, y, z, w); };
	BufferAttribute.ptr.prototype.Clone = function() {
		var b;
		b = this;
		b.p.clone();
		return b;
	};
	BufferAttribute.prototype.Clone = function() { return this.$val.Clone(); };
	BufferAttribute.ptr.prototype.UUID = function() {
		var b;
		b = this;
		return $parseInt(b.p.uuid) >> 0;
	};
	BufferAttribute.prototype.UUID = function() { return this.$val.UUID(); };
	BufferAttribute.ptr.prototype.Array = function() {
		var b;
		b = this;
		return b.p.array;
	};
	BufferAttribute.prototype.Array = function() { return this.$val.Array(); };
	BufferAttribute.ptr.prototype.ItemSize = function() {
		var b;
		b = this;
		return $parseInt(b.p.itemSize) >> 0;
	};
	BufferAttribute.prototype.ItemSize = function() { return this.$val.ItemSize(); };
	BufferAttribute.ptr.prototype.Dynamic = function() {
		var b;
		b = this;
		return !!(b.p.dynamic);
	};
	BufferAttribute.prototype.Dynamic = function() { return this.$val.Dynamic(); };
	BufferAttribute.ptr.prototype.UpdateRange = function() {
		var _tmp, _tmp$1, b, count, offset, t;
		offset = 0;
		count = 0;
		b = this;
		t = b.p.updateRange;
		_tmp = $parseInt(t.offset) >> 0;
		_tmp$1 = $parseInt(t.count) >> 0;
		offset = _tmp;
		count = _tmp$1;
		return [offset, count];
	};
	BufferAttribute.prototype.UpdateRange = function() { return this.$val.UpdateRange(); };
	BufferAttribute.ptr.prototype.Version = function() {
		var b;
		b = this;
		return $parseInt(b.p.version) >> 0;
	};
	BufferAttribute.prototype.Version = function() { return this.$val.Version(); };
	BufferGeometry.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.p;
	};
	BufferGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.BufferGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.BufferGeometry;
		return BufferGeometryFromJSObject(p);
	};
	Three.prototype.BufferGeometry = function() { return this.$val.BufferGeometry(); };
	BufferGeometryFromJSObject = function(p) {
		var p;
		return new BufferGeometry.ptr(p);
	};
	$pkg.BufferGeometryFromJSObject = BufferGeometryFromJSObject;
	Three.ptr.prototype.NewBufferGeometry = function() {
		var p, t;
		t = this;
		p = new (t.ctx.BufferGeometry)();
		return BufferGeometryFromJSObject(p);
	};
	Three.prototype.NewBufferGeometry = function() { return this.$val.NewBufferGeometry(); };
	BufferGeometry.ptr.prototype.GetIndex = function() {
		var b;
		b = this;
		b.p.getIndex();
		return b;
	};
	BufferGeometry.prototype.GetIndex = function() { return this.$val.GetIndex(); };
	BufferGeometry.ptr.prototype.SetIndex = function(index) {
		var b, index;
		b = this;
		b.p.setIndex(index);
		return b;
	};
	BufferGeometry.prototype.SetIndex = function(index) { return this.$val.SetIndex(index); };
	BufferGeometry.ptr.prototype.AddAttribute = function(name, attribute) {
		var attribute, b, name;
		b = this;
		b.p.addAttribute($externalize(name, $String), attribute);
		return b;
	};
	BufferGeometry.prototype.AddAttribute = function(name, attribute) { return this.$val.AddAttribute(name, attribute); };
	BufferGeometry.ptr.prototype.GetAttribute = function(name) {
		var b, name;
		b = this;
		b.p.getAttribute($externalize(name, $String));
		return b;
	};
	BufferGeometry.prototype.GetAttribute = function(name) { return this.$val.GetAttribute(name); };
	BufferGeometry.ptr.prototype.RemoveAttribute = function(name) {
		var b, name;
		b = this;
		b.p.removeAttribute($externalize(name, $String));
		return b;
	};
	BufferGeometry.prototype.RemoveAttribute = function(name) { return this.$val.RemoveAttribute(name); };
	BufferGeometry.ptr.prototype.AddGroup = function(start, count, materialIndex) {
		var b, count, materialIndex, start;
		b = this;
		b.p.addGroup(start, count, materialIndex);
		return b;
	};
	BufferGeometry.prototype.AddGroup = function(start, count, materialIndex) { return this.$val.AddGroup(start, count, materialIndex); };
	BufferGeometry.ptr.prototype.ClearGroups = function() {
		var b;
		b = this;
		b.p.clearGroups();
		return b;
	};
	BufferGeometry.prototype.ClearGroups = function() { return this.$val.ClearGroups(); };
	BufferGeometry.ptr.prototype.SetDrawRange = function(start, count) {
		var b, count, start;
		b = this;
		b.p.setDrawRange(start, count);
		return b;
	};
	BufferGeometry.prototype.SetDrawRange = function(start, count) { return this.$val.SetDrawRange(start, count); };
	BufferGeometry.ptr.prototype.ApplyMatrix = function(matrix) {
		var b, matrix;
		b = this;
		b.p.applyMatrix($externalize(matrix, ptrType$8));
		return b;
	};
	BufferGeometry.prototype.ApplyMatrix = function(matrix) { return this.$val.ApplyMatrix(matrix); };
	BufferGeometry.ptr.prototype.RotateX = function() {
		var b;
		b = this;
		b.p.rotateX();
		return b;
	};
	BufferGeometry.prototype.RotateX = function() { return this.$val.RotateX(); };
	BufferGeometry.ptr.prototype.RotateY = function() {
		var b;
		b = this;
		b.p.rotateY();
		return b;
	};
	BufferGeometry.prototype.RotateY = function() { return this.$val.RotateY(); };
	BufferGeometry.ptr.prototype.RotateZ = function() {
		var b;
		b = this;
		b.p.rotateZ();
		return b;
	};
	BufferGeometry.prototype.RotateZ = function() { return this.$val.RotateZ(); };
	BufferGeometry.ptr.prototype.Translate = function() {
		var b;
		b = this;
		b.p.translate();
		return b;
	};
	BufferGeometry.prototype.Translate = function() { return this.$val.Translate(); };
	BufferGeometry.ptr.prototype.Scale = function() {
		var b;
		b = this;
		b.p.scale();
		return b;
	};
	BufferGeometry.prototype.Scale = function() { return this.$val.Scale(); };
	BufferGeometry.ptr.prototype.LookAt = function() {
		var b;
		b = this;
		b.p.lookAt();
		return b;
	};
	BufferGeometry.prototype.LookAt = function() { return this.$val.LookAt(); };
	BufferGeometry.ptr.prototype.Center = function() {
		var b;
		b = this;
		b.p.center();
		return b;
	};
	BufferGeometry.prototype.Center = function() { return this.$val.Center(); };
	BufferGeometry.ptr.prototype.SetFromObject = function(object) {
		var _r, b, object, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; object = $f.object; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = object.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b.p.setFromObject(_r);
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BufferGeometry.ptr.prototype.SetFromObject }; } $f._r = _r; $f.b = b; $f.object = object; $f.$s = $s; $f.$r = $r; return $f;
	};
	BufferGeometry.prototype.SetFromObject = function(object) { return this.$val.SetFromObject(object); };
	BufferGeometry.ptr.prototype.UpdateFromObject = function(object) {
		var _r, b, object, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; object = $f.object; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = object.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b.p.updateFromObject(_r);
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BufferGeometry.ptr.prototype.UpdateFromObject }; } $f._r = _r; $f.b = b; $f.object = object; $f.$s = $s; $f.$r = $r; return $f;
	};
	BufferGeometry.prototype.UpdateFromObject = function(object) { return this.$val.UpdateFromObject(object); };
	BufferGeometry.ptr.prototype.FromGeometry = function(geometry) {
		var _r, b, geometry, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; geometry = $f.geometry; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = geometry.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b.p.fromGeometry(_r);
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BufferGeometry.ptr.prototype.FromGeometry }; } $f._r = _r; $f.b = b; $f.geometry = geometry; $f.$s = $s; $f.$r = $r; return $f;
	};
	BufferGeometry.prototype.FromGeometry = function(geometry) { return this.$val.FromGeometry(geometry); };
	BufferGeometry.ptr.prototype.FromDirectGeometry = function(geometry) {
		var _r, b, geometry, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; geometry = $f.geometry; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = geometry.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b.p.fromDirectGeometry(_r);
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BufferGeometry.ptr.prototype.FromDirectGeometry }; } $f._r = _r; $f.b = b; $f.geometry = geometry; $f.$s = $s; $f.$r = $r; return $f;
	};
	BufferGeometry.prototype.FromDirectGeometry = function(geometry) { return this.$val.FromDirectGeometry(geometry); };
	BufferGeometry.ptr.prototype.ComputeBoundingBox = function() {
		var b;
		b = this;
		b.p.computeBoundingBox();
		return b;
	};
	BufferGeometry.prototype.ComputeBoundingBox = function() { return this.$val.ComputeBoundingBox(); };
	BufferGeometry.ptr.prototype.ComputeBoundingSphere = function() {
		var b;
		b = this;
		b.p.computeBoundingSphere();
		return b;
	};
	BufferGeometry.prototype.ComputeBoundingSphere = function() { return this.$val.ComputeBoundingSphere(); };
	BufferGeometry.ptr.prototype.ComputeFaceNormals = function() {
		var b;
		b = this;
		b.p.computeFaceNormals();
		return b;
	};
	BufferGeometry.prototype.ComputeFaceNormals = function() { return this.$val.ComputeFaceNormals(); };
	BufferGeometry.ptr.prototype.ComputeVertexNormals = function() {
		var b;
		b = this;
		b.p.computeVertexNormals();
		return b;
	};
	BufferGeometry.prototype.ComputeVertexNormals = function() { return this.$val.ComputeVertexNormals(); };
	BufferGeometry.ptr.prototype.Merge = function(geometry, offset) {
		var _r, b, geometry, offset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; geometry = $f.geometry; offset = $f.offset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = geometry.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b.p.merge(_r, offset);
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BufferGeometry.ptr.prototype.Merge }; } $f._r = _r; $f.b = b; $f.geometry = geometry; $f.offset = offset; $f.$s = $s; $f.$r = $r; return $f;
	};
	BufferGeometry.prototype.Merge = function(geometry, offset) { return this.$val.Merge(geometry, offset); };
	BufferGeometry.ptr.prototype.NormalizeNormals = function() {
		var b;
		b = this;
		b.p.normalizeNormals();
		return b;
	};
	BufferGeometry.prototype.NormalizeNormals = function() { return this.$val.NormalizeNormals(); };
	BufferGeometry.ptr.prototype.ToNonIndexed = function() {
		var b;
		b = this;
		b.p.toNonIndexed();
		return b;
	};
	BufferGeometry.prototype.ToNonIndexed = function() { return this.$val.ToNonIndexed(); };
	BufferGeometry.ptr.prototype.ToJSON = function() {
		var b;
		b = this;
		b.p.toJSON();
		return b;
	};
	BufferGeometry.prototype.ToJSON = function() { return this.$val.ToJSON(); };
	BufferGeometry.ptr.prototype.Clone = function() {
		var b;
		b = this;
		b.p.clone();
		return b;
	};
	BufferGeometry.prototype.Clone = function() { return this.$val.Clone(); };
	BufferGeometry.ptr.prototype.Copy = function(source) {
		var b, source;
		b = this;
		b.p.copy(source.p);
		return b;
	};
	BufferGeometry.prototype.Copy = function(source) { return this.$val.Copy(source); };
	BufferGeometry.ptr.prototype.Dispose = function() {
		var b;
		b = this;
		b.p.dispose();
		return b;
	};
	BufferGeometry.prototype.Dispose = function() { return this.$val.Dispose(); };
	BufferGeometry.ptr.prototype.UUID = function() {
		var b;
		b = this;
		return $parseInt(b.p.uuid) >> 0;
	};
	BufferGeometry.prototype.UUID = function() { return this.$val.UUID(); };
	BufferGeometry.ptr.prototype.Name = function() {
		var b;
		b = this;
		return $internalize(b.p.name, $String);
	};
	BufferGeometry.prototype.Name = function() { return this.$val.Name(); };
	BufferGeometry.ptr.prototype.Type = function() {
		var b;
		b = this;
		return $internalize(b.p.type, $String);
	};
	BufferGeometry.prototype.Type = function() { return this.$val.Type(); };
	BufferGeometry.ptr.prototype.Index = function() {
		var b;
		b = this;
		return $parseInt(b.p.index) >> 0;
	};
	BufferGeometry.prototype.Index = function() { return this.$val.Index(); };
	BufferGeometry.ptr.prototype.Attributes = function() {
		var b;
		b = this;
		return b.p.attributes;
	};
	BufferGeometry.prototype.Attributes = function() { return this.$val.Attributes(); };
	BufferGeometry.ptr.prototype.MortphAttributes = function() {
		var b;
		b = this;
		return b.p.morphAttributes;
	};
	BufferGeometry.prototype.MortphAttributes = function() { return this.$val.MortphAttributes(); };
	BufferGeometry.ptr.prototype.Groups = function() {
		var b;
		b = this;
		return b.p.groups;
	};
	BufferGeometry.prototype.Groups = function() { return this.$val.Groups(); };
	BufferGeometry.ptr.prototype.BoundingBox = function() {
		var b;
		b = this;
		return Box3FromJSObject(b.p.boundingBox);
	};
	BufferGeometry.prototype.BoundingBox = function() { return this.$val.BoundingBox(); };
	BufferGeometry.ptr.prototype.BoundingSphere = function() {
		var b;
		b = this;
		return b.p.boundingSphere;
	};
	BufferGeometry.prototype.BoundingSphere = function() { return this.$val.BoundingSphere(); };
	BufferGeometry.ptr.prototype.DrawRange = function() {
		var _tmp, _tmp$1, b, count, start, t;
		start = 0;
		count = 0;
		b = this;
		t = b.p.drawRange;
		_tmp = $parseInt(t.start) >> 0;
		_tmp$1 = $parseInt(t.count) >> 0;
		start = _tmp;
		count = _tmp$1;
		return [start, count];
	};
	BufferGeometry.prototype.DrawRange = function() { return this.$val.DrawRange(); };
	BufferGeometryLoader.ptr.prototype.JSObject = function() {
		var b;
		b = this;
		return b.p;
	};
	BufferGeometryLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.BufferGeometryLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.BufferGeometryLoader;
		return BufferGeometryLoaderFromJSObject(p);
	};
	Three.prototype.BufferGeometryLoader = function() { return this.$val.BufferGeometryLoader(); };
	BufferGeometryLoaderFromJSObject = function(p) {
		var p;
		return new BufferGeometryLoader.ptr(p);
	};
	$pkg.BufferGeometryLoaderFromJSObject = BufferGeometryLoaderFromJSObject;
	Three.ptr.prototype.NewBufferGeometryLoader = function() {
		var p, t;
		t = this;
		p = new (t.ctx.BufferGeometryLoader)();
		return BufferGeometryLoaderFromJSObject(p);
	};
	Three.prototype.NewBufferGeometryLoader = function() { return this.$val.NewBufferGeometryLoader(); };
	onBufferGeometryLoadWrapperFunc = function(onLoad) {
		var onLoad;
		return (function $b(geom, materialArray) {
			var geom, i, materialArray, materials, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; geom = $f.geom; i = $f.i; materialArray = $f.materialArray; materials = $f.materials; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			materials = sliceType$12.nil;
			if (!(materialArray === null) && !(materialArray === undefined)) {
				i = 0;
				while (true) {
					if (!(i < $parseInt(materialArray.length))) { break; }
					materials = $append(materials, MaterialFromJSObject(materialArray[i]));
					i = i + (1) >> 0;
				}
			}
			$r = onLoad(BufferGeometryFromJSObject(geom), materials); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.geom = geom; $f.i = i; $f.materialArray = materialArray; $f.materials = materials; $f.$s = $s; $f.$r = $r; return $f;
		});
	};
	BufferGeometryLoader.ptr.prototype.Load = function(url, onLoad, onProgress, onError) {
		var b, onError, onLoad, onLoadWrapper, onProgress, url;
		b = this;
		onLoadWrapper = $throwNilPointerError;
		if (!(onLoad === $throwNilPointerError)) {
			onLoadWrapper = onBufferGeometryLoadWrapperFunc(onLoad);
		}
		if (!($interfaceIsEqual(onProgress, $ifaceNil)) && !($interfaceIsEqual(onError, $ifaceNil))) {
			b.p.load($externalize(url, $String), $externalize(onLoadWrapper, funcType), $externalize(onProgress, $emptyInterface), $externalize(onError, $emptyInterface));
		} else if (!($interfaceIsEqual(onProgress, $ifaceNil))) {
			b.p.load($externalize(url, $String), $externalize(onLoadWrapper, funcType), $externalize(onProgress, $emptyInterface));
		} else {
			b.p.load($externalize(url, $String), $externalize(onLoadWrapper, funcType));
		}
		return b;
	};
	BufferGeometryLoader.prototype.Load = function(url, onLoad, onProgress, onError) { return this.$val.Load(url, onLoad, onProgress, onError); };
	BufferGeometryLoader.ptr.prototype.Parse = function(json) {
		var b, json;
		b = this;
		b.p.parse(json);
		return b;
	};
	BufferGeometryLoader.prototype.Parse = function(json) { return this.$val.Parse(json); };
	Cache.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.p;
	};
	Cache.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Cache = function() {
		var p, t;
		t = this;
		p = t.ctx.Cache;
		return CacheFromJSObject(p);
	};
	Three.prototype.Cache = function() { return this.$val.Cache(); };
	CacheFromJSObject = function(p) {
		var p;
		return new Cache.ptr(p);
	};
	$pkg.CacheFromJSObject = CacheFromJSObject;
	Three.ptr.prototype.NewCache = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Cache)();
		return CacheFromJSObject(p);
	};
	Three.prototype.NewCache = function() { return this.$val.NewCache(); };
	Cache.ptr.prototype.Add = function(key, file) {
		var c, file, key;
		c = this;
		c.p.add(key, file);
		return c;
	};
	Cache.prototype.Add = function(key, file) { return this.$val.Add(key, file); };
	Cache.ptr.prototype.Get = function(key) {
		var c, key;
		c = this;
		c.p.get(key);
		return c;
	};
	Cache.prototype.Get = function(key) { return this.$val.Get(key); };
	Cache.ptr.prototype.Remove = function(key) {
		var c, key;
		c = this;
		c.p.remove(key);
		return c;
	};
	Cache.prototype.Remove = function(key) { return this.$val.Remove(key); };
	Cache.ptr.prototype.Clear = function() {
		var c;
		c = this;
		c.p.clear();
		return c;
	};
	Cache.prototype.Clear = function() { return this.$val.Clear(); };
	Camera.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.Object3D.p;
	};
	Camera.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Camera = function() {
		var p, t;
		t = this;
		p = t.ctx.Camera;
		return CameraFromJSObject(p);
	};
	Three.prototype.Camera = function() { return this.$val.Camera(); };
	CameraFromJSObject = function(p) {
		var p;
		return new Camera.ptr(Object3DFromJSObject(p));
	};
	$pkg.CameraFromJSObject = CameraFromJSObject;
	Three.ptr.prototype.NewCamera = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Camera)();
		return CameraFromJSObject(p);
	};
	Three.prototype.NewCamera = function() { return this.$val.NewCamera(); };
	Camera.ptr.prototype.Copy = function(source) {
		var c, source;
		c = this;
		c.Object3D.p.copy(source.Object3D.p);
		return c;
	};
	Camera.prototype.Copy = function(source) { return this.$val.Copy(source); };
	Camera.ptr.prototype.Type = function() {
		var c;
		c = this;
		return $internalize(c.Object3D.p.type, $String);
	};
	Camera.prototype.Type = function() { return this.$val.Type(); };
	Camera.ptr.prototype.MatrixWorldInverse = function() {
		var c;
		c = this;
		return new Matrix4.ptr(c.Object3D.p.matrixWorldInverse);
	};
	Camera.prototype.MatrixWorldInverse = function() { return this.$val.MatrixWorldInverse(); };
	Camera.ptr.prototype.ProjectionMatrix = function() {
		var c;
		c = this;
		return new Matrix4.ptr(c.Object3D.p.projectionMatrix);
	};
	Camera.prototype.ProjectionMatrix = function() { return this.$val.ProjectionMatrix(); };
	Camera.ptr.prototype.UpdateProjectionMatrix = function() {
		var c;
		c = this;
		c.Object3D.p.updateProjectionMatrix();
		return c;
	};
	Camera.prototype.UpdateProjectionMatrix = function() { return this.$val.UpdateProjectionMatrix(); };
	Camera.ptr.prototype.SetNear = function(value) {
		var c, value;
		c = this;
		c.Object3D.p.near = value;
		return c;
	};
	Camera.prototype.SetNear = function(value) { return this.$val.SetNear(value); };
	Camera.ptr.prototype.SetFar = function(value) {
		var c, value;
		c = this;
		c.Object3D.p.far = value;
		return c;
	};
	Camera.prototype.SetFar = function(value) { return this.$val.SetFar(value); };
	Camera.ptr.prototype.SetFOV = function(value) {
		var c, value;
		c = this;
		c.Object3D.p.fov = value;
		return c;
	};
	Camera.prototype.SetFOV = function(value) { return this.$val.SetFOV(value); };
	Camera.ptr.prototype.GetWorldDirection = function(vector) {
		var c, vector;
		c = this;
		if (!(vector === ptrType$6.nil)) {
			return Vector3FromJSObject(c.Object3D.p.getWorldDirection(vector.p));
		}
		return Vector3FromJSObject(c.Object3D.p.getWorldDirection());
	};
	Camera.prototype.GetWorldDirection = function(vector) { return this.$val.GetWorldDirection(vector); };
	Camera.ptr.prototype.LookAt = function(vector) {
		var c, vector;
		c = this;
		c.Object3D.p.lookAt(vector.p);
		return c;
	};
	Camera.prototype.LookAt = function(vector) { return this.$val.LookAt(vector); };
	Camera.ptr.prototype.Clone = function(cam) {
		var c, cam;
		c = this;
		return CameraFromJSObject(c.Object3D.p.clone($externalize(cam, ptrType$11)));
	};
	Camera.prototype.Clone = function(cam) { return this.$val.Clone(cam); };
	CameraHelper.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.Line.Object3D.p;
	};
	CameraHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CameraHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.CameraHelper;
		return CameraHelperFromJSObject(p);
	};
	Three.prototype.CameraHelper = function() { return this.$val.CameraHelper(); };
	CameraHelperFromJSObject = function(p) {
		var p;
		return new CameraHelper.ptr(LineFromJSObject(p));
	};
	$pkg.CameraHelperFromJSObject = CameraHelperFromJSObject;
	Three.ptr.prototype.NewCameraHelper = function(camera) {
		var camera, p, t;
		t = this;
		p = new (t.ctx.CameraHelper)(camera);
		return CameraHelperFromJSObject(p);
	};
	Three.prototype.NewCameraHelper = function(camera) { return this.$val.NewCameraHelper(camera); };
	CanvasTexture.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.p;
	};
	CanvasTexture.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CanvasTexture = function() {
		var p, t;
		t = this;
		p = t.ctx.CanvasTexture;
		return CanvasTextureFromJSObject(p);
	};
	Three.prototype.CanvasTexture = function() { return this.$val.CanvasTexture(); };
	CanvasTextureFromJSObject = function(p) {
		var p;
		return new CanvasTexture.ptr(p);
	};
	$pkg.CanvasTextureFromJSObject = CanvasTextureFromJSObject;
	Three.ptr.prototype.NewCanvasTexture = function(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy) {
		var anisotropy, canvas, format, magFilter, mapping, minFilter, p, t, typ, wrapS, wrapT;
		t = this;
		p = new (t.ctx.CanvasTexture)(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy);
		return CanvasTextureFromJSObject(p);
	};
	Three.prototype.NewCanvasTexture = function(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy) { return this.$val.NewCanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy); };
	CatmullRomCurve3.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.Curve.p;
	};
	CatmullRomCurve3.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CatmullRomCurve3 = function() {
		var p, t;
		t = this;
		p = t.ctx.CatmullRomCurve3;
		return CatmullRomCurve3FromJSObject(p);
	};
	Three.prototype.CatmullRomCurve3 = function() { return this.$val.CatmullRomCurve3(); };
	CatmullRomCurve3FromJSObject = function(p) {
		var p;
		return new CatmullRomCurve3.ptr(CurveFromJSObject(p));
	};
	$pkg.CatmullRomCurve3FromJSObject = CatmullRomCurve3FromJSObject;
	Three.ptr.prototype.NewCatmullRomCurve3 = function(pts) {
		var p, pts, t;
		t = this;
		p = new (t.ctx.CatmullRomCurve3)($externalize(pts, sliceType$13));
		return CatmullRomCurve3FromJSObject(p);
	};
	Three.prototype.NewCatmullRomCurve3 = function(pts) { return this.$val.NewCatmullRomCurve3(pts); };
	CircleBufferGeometry.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.BufferGeometry.p;
	};
	CircleBufferGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CircleBufferGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.CircleBufferGeometry;
		return CircleBufferGeometryFromJSObject(p);
	};
	Three.prototype.CircleBufferGeometry = function() { return this.$val.CircleBufferGeometry(); };
	CircleBufferGeometryFromJSObject = function(p) {
		var p;
		return new CircleBufferGeometry.ptr(BufferGeometryFromJSObject(p));
	};
	$pkg.CircleBufferGeometryFromJSObject = CircleBufferGeometryFromJSObject;
	Three.ptr.prototype.NewCircleBufferGeometry = function(radius, segments, opts) {
		var opts, p, radius, segments, t;
		t = this;
		p = null;
		if (!(opts === ptrType$12.nil)) {
			p = new (t.ctx.CircleBufferGeometry)(radius, segments, opts.thetaStart, opts.thetaLength);
		} else {
			p = new (t.ctx.CircleBufferGeometry)(radius, segments);
		}
		return CircleBufferGeometryFromJSObject(p);
	};
	Three.prototype.NewCircleBufferGeometry = function(radius, segments, opts) { return this.$val.NewCircleBufferGeometry(radius, segments, opts); };
	CircleGeometry.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.Geometry.p;
	};
	CircleGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CircleGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.CircleGeometry;
		return CircleGeometryFromJSObject(p);
	};
	Three.prototype.CircleGeometry = function() { return this.$val.CircleGeometry(); };
	CircleGeometryFromJSObject = function(p) {
		var p;
		return new CircleGeometry.ptr(GeometryFromJSObject(p));
	};
	$pkg.CircleGeometryFromJSObject = CircleGeometryFromJSObject;
	Three.ptr.prototype.NewCircleGeometry = function(radius, segments, opts) {
		var opts, p, radius, segments, t;
		t = this;
		p = null;
		if (!(opts === ptrType$13.nil)) {
			p = new (t.ctx.CircleGeometry)(radius, segments, opts.thetaStart, opts.thetaLength);
		} else {
			p = new (t.ctx.CircleGeometry)(radius, segments);
		}
		return CircleGeometryFromJSObject(p);
	};
	Three.prototype.NewCircleGeometry = function(radius, segments, opts) { return this.$val.NewCircleGeometry(radius, segments, opts); };
	Clock.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.p;
	};
	Clock.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Clock = function() {
		var p, t;
		t = this;
		p = t.ctx.Clock;
		return ClockFromJSObject(p);
	};
	Three.prototype.Clock = function() { return this.$val.Clock(); };
	ClockFromJSObject = function(p) {
		var p;
		return new Clock.ptr(p);
	};
	$pkg.ClockFromJSObject = ClockFromJSObject;
	Three.ptr.prototype.NewClock = function(autoStart) {
		var autoStart, p, t;
		t = this;
		p = new (t.ctx.Clock)($externalize(autoStart, $Bool));
		return ClockFromJSObject(p);
	};
	Three.prototype.NewClock = function(autoStart) { return this.$val.NewClock(autoStart); };
	Clock.ptr.prototype.Start = function() {
		var c;
		c = this;
		c.p.start();
		return c;
	};
	Clock.prototype.Start = function() { return this.$val.Start(); };
	Clock.ptr.prototype.Stop = function() {
		var c;
		c = this;
		c.p.stop();
		return c;
	};
	Clock.prototype.Stop = function() { return this.$val.Stop(); };
	Clock.ptr.prototype.GetElapsedTime = function() {
		var c;
		c = this;
		return $parseFloat(c.p.getElapsedTime());
	};
	Clock.prototype.GetElapsedTime = function() { return this.$val.GetElapsedTime(); };
	Clock.ptr.prototype.GetDelta = function() {
		var c;
		c = this;
		return $parseFloat(c.p.getDelta());
	};
	Clock.prototype.GetDelta = function() { return this.$val.GetDelta(); };
	Clock.ptr.prototype.Running = function() {
		var c;
		c = this;
		return !!(c.p.running);
	};
	Clock.prototype.Running = function() { return this.$val.Running(); };
	Color.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.p;
	};
	Color.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Color = function() {
		var p, t;
		t = this;
		p = t.ctx.Color;
		return ColorFromJSObject(p);
	};
	Three.prototype.Color = function() { return this.$val.Color(); };
	ColorFromJSObject = function(p) {
		var p;
		return new Color.ptr(p);
	};
	$pkg.ColorFromJSObject = ColorFromJSObject;
	Three.ptr.prototype.NewColor = function(color) {
		var color, p, t;
		t = this;
		p = new ($global.Function.prototype.bind.apply(t.ctx.Color, [undefined].concat($externalize(color, sliceType$14))));
		return ColorFromJSObject(p);
	};
	Three.prototype.NewColor = function(color) { return this.$val.NewColor(color); };
	Color.ptr.prototype.Set = function(value) {
		var c, value;
		c = this;
		c.p.set(value);
		return c;
	};
	Color.prototype.Set = function(value) { return this.$val.Set(value); };
	Color.ptr.prototype.SetScalar = function(scalar) {
		var c, scalar;
		c = this;
		c.p.setScalar(scalar);
		return c;
	};
	Color.prototype.SetScalar = function(scalar) { return this.$val.SetScalar(scalar); };
	Color.ptr.prototype.SetHex = function(hex) {
		var c, hex;
		c = this;
		c.p.setHex(hex);
		return c;
	};
	Color.prototype.SetHex = function(hex) { return this.$val.SetHex(hex); };
	Color.ptr.prototype.SetRGB = function(red, green, blue) {
		var blue, c, green, red;
		c = this;
		c.p.setRGB(red, green, blue);
		return c;
	};
	Color.prototype.SetRGB = function(red, green, blue) { return this.$val.SetRGB(red, green, blue); };
	Color.ptr.prototype.SetHSL = function(hue, saturation, luminance) {
		var c, hue, luminance, saturation;
		c = this;
		c.p.setHSL(hue, saturation, luminance);
		return c;
	};
	Color.prototype.SetHSL = function(hue, saturation, luminance) { return this.$val.SetHSL(hue, saturation, luminance); };
	Color.ptr.prototype.SetStyle = function(style) {
		var c, style;
		c = this;
		c.p.setStyle(style);
		return c;
	};
	Color.prototype.SetStyle = function(style) { return this.$val.SetStyle(style); };
	Color.ptr.prototype.Clone = function() {
		var c;
		c = this;
		c.p.clone();
		return c;
	};
	Color.prototype.Clone = function() { return this.$val.Clone(); };
	Color.ptr.prototype.Copy = function(color) {
		var c, color;
		c = this;
		c.p.copy(color.p);
		return c;
	};
	Color.prototype.Copy = function(color) { return this.$val.Copy(color); };
	Color.ptr.prototype.CopyGammaToLinear = function(color, gammaFactor) {
		var c, color, gammaFactor;
		c = this;
		c.p.copyGammaToLinear(color, gammaFactor);
		return c;
	};
	Color.prototype.CopyGammaToLinear = function(color, gammaFactor) { return this.$val.CopyGammaToLinear(color, gammaFactor); };
	Color.ptr.prototype.CopyLinearToGamma = function(color, gammaFactor) {
		var c, color, gammaFactor;
		c = this;
		c.p.copyLinearToGamma(color, gammaFactor);
		return c;
	};
	Color.prototype.CopyLinearToGamma = function(color, gammaFactor) { return this.$val.CopyLinearToGamma(color, gammaFactor); };
	Color.ptr.prototype.ConvertGammaToLinear = function() {
		var c;
		c = this;
		c.p.convertGammaToLinear();
		return c;
	};
	Color.prototype.ConvertGammaToLinear = function() { return this.$val.ConvertGammaToLinear(); };
	Color.ptr.prototype.ConvertLinearToGamma = function() {
		var c;
		c = this;
		c.p.convertLinearToGamma();
		return c;
	};
	Color.prototype.ConvertLinearToGamma = function() { return this.$val.ConvertLinearToGamma(); };
	Color.ptr.prototype.GetHex = function() {
		var c;
		c = this;
		c.p.getHex();
		return c;
	};
	Color.prototype.GetHex = function() { return this.$val.GetHex(); };
	Color.ptr.prototype.GetHexString = function() {
		var c;
		c = this;
		c.p.getHexString();
		return c;
	};
	Color.prototype.GetHexString = function() { return this.$val.GetHexString(); };
	Color.ptr.prototype.GetHSL = function(optionalTarget) {
		var c, optionalTarget;
		c = this;
		c.p.getHSL(optionalTarget);
		return c;
	};
	Color.prototype.GetHSL = function(optionalTarget) { return this.$val.GetHSL(optionalTarget); };
	Color.ptr.prototype.GetStyle = function() {
		var c;
		c = this;
		c.p.getStyle();
		return c;
	};
	Color.prototype.GetStyle = function() { return this.$val.GetStyle(); };
	Color.ptr.prototype.OffsetHSL = function(h, s, l) {
		var c, h, l, s;
		c = this;
		c.p.offsetHSL(h, s, l);
		return c;
	};
	Color.prototype.OffsetHSL = function(h, s, l) { return this.$val.OffsetHSL(h, s, l); };
	Color.ptr.prototype.Add = function(color) {
		var c, color;
		c = this;
		c.p.add(color);
		return c;
	};
	Color.prototype.Add = function(color) { return this.$val.Add(color); };
	Color.ptr.prototype.AddColors = function(color1, color2) {
		var c, color1, color2;
		c = this;
		c.p.addColors(color1, color2);
		return c;
	};
	Color.prototype.AddColors = function(color1, color2) { return this.$val.AddColors(color1, color2); };
	Color.ptr.prototype.AddScalar = function(s) {
		var c, s;
		c = this;
		c.p.addScalar(s);
		return c;
	};
	Color.prototype.AddScalar = function(s) { return this.$val.AddScalar(s); };
	Color.ptr.prototype.Multiply = function(color) {
		var c, color;
		c = this;
		c.p.multiply(color);
		return c;
	};
	Color.prototype.Multiply = function(color) { return this.$val.Multiply(color); };
	Color.ptr.prototype.MultiplyScalar = function(s) {
		var c, s;
		c = this;
		c.p.multiplyScalar(s);
		return c;
	};
	Color.prototype.MultiplyScalar = function(s) { return this.$val.MultiplyScalar(s); };
	Color.ptr.prototype.Lerp = function(color, alpha) {
		var alpha, c, color;
		c = this;
		c.p.lerp(color, alpha);
		return c;
	};
	Color.prototype.Lerp = function(color, alpha) { return this.$val.Lerp(color, alpha); };
	Color.ptr.prototype.Equals = function(color) {
		var c, color;
		c = this;
		return !!(c.p.equals($externalize(color, ptrType$2)));
	};
	Color.prototype.Equals = function(color) { return this.$val.Equals(color); };
	Color.ptr.prototype.FromArray = function(array, offset) {
		var array, c, offset;
		c = this;
		c.p.fromArray(array, offset);
		return c;
	};
	Color.prototype.FromArray = function(array, offset) { return this.$val.FromArray(array, offset); };
	Color.ptr.prototype.ToArray = function(array, offset) {
		var array, c, offset;
		c = this;
		c.p.toArray(array, offset);
		return c;
	};
	Color.prototype.ToArray = function(array, offset) { return this.$val.ToArray(array, offset); };
	Color.ptr.prototype.R = function() {
		var c;
		c = this;
		return $parseFloat(c.p.r);
	};
	Color.prototype.R = function() { return this.$val.R(); };
	Color.ptr.prototype.G = function() {
		var c;
		c = this;
		return $parseFloat(c.p.g);
	};
	Color.prototype.G = function() { return this.$val.G(); };
	Color.ptr.prototype.B = function() {
		var c;
		c = this;
		return $parseFloat(c.p.b);
	};
	Color.prototype.B = function() { return this.$val.B(); };
	ColorKeyframeTrack.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.p;
	};
	ColorKeyframeTrack.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ColorKeyframeTrack = function() {
		var p, t;
		t = this;
		p = t.ctx.ColorKeyframeTrack;
		return ColorKeyframeTrackFromJSObject(p);
	};
	Three.prototype.ColorKeyframeTrack = function() { return this.$val.ColorKeyframeTrack(); };
	ColorKeyframeTrackFromJSObject = function(p) {
		var p;
		return new ColorKeyframeTrack.ptr(p);
	};
	$pkg.ColorKeyframeTrackFromJSObject = ColorKeyframeTrackFromJSObject;
	Three.ptr.prototype.NewColorKeyframeTrack = function(name, times, values, interpolation) {
		var interpolation, name, p, t, times, values;
		t = this;
		p = new (t.ctx.ColorKeyframeTrack)(name, times, values, interpolation);
		return ColorKeyframeTrackFromJSObject(p);
	};
	Three.prototype.NewColorKeyframeTrack = function(name, times, values, interpolation) { return this.$val.NewColorKeyframeTrack(name, times, values, interpolation); };
	CompressedTexture.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.p;
	};
	CompressedTexture.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CompressedTexture = function() {
		var p, t;
		t = this;
		p = t.ctx.CompressedTexture;
		return CompressedTextureFromJSObject(p);
	};
	Three.prototype.CompressedTexture = function() { return this.$val.CompressedTexture(); };
	CompressedTextureFromJSObject = function(p) {
		var p;
		return new CompressedTexture.ptr(p);
	};
	$pkg.CompressedTextureFromJSObject = CompressedTextureFromJSObject;
	Three.ptr.prototype.NewCompressedTexture = function(mipmaps, width, height, format, typ, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy) {
		var anisotropy, format, height, magFilter, mapping, minFilter, mipmaps, p, t, typ, width, wrapS, wrapT;
		t = this;
		p = new (t.ctx.CompressedTexture)(mipmaps, width, height, format, typ, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy);
		return CompressedTextureFromJSObject(p);
	};
	Three.prototype.NewCompressedTexture = function(mipmaps, width, height, format, typ, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy) { return this.$val.NewCompressedTexture(mipmaps, width, height, format, typ, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy); };
	CompressedTextureLoader.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.p;
	};
	CompressedTextureLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CompressedTextureLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.CompressedTextureLoader;
		return CompressedTextureLoaderFromJSObject(p);
	};
	Three.prototype.CompressedTextureLoader = function() { return this.$val.CompressedTextureLoader(); };
	CompressedTextureLoaderFromJSObject = function(p) {
		var p;
		return new CompressedTextureLoader.ptr(p);
	};
	$pkg.CompressedTextureLoaderFromJSObject = CompressedTextureLoaderFromJSObject;
	Three.ptr.prototype.NewCompressedTextureLoader = function(manager) {
		var manager, p, t;
		t = this;
		p = new (t.ctx.CompressedTextureLoader)(manager);
		return CompressedTextureLoaderFromJSObject(p);
	};
	Three.prototype.NewCompressedTextureLoader = function(manager) { return this.$val.NewCompressedTextureLoader(manager); };
	CompressedTextureLoader.ptr.prototype.Load = function(url, onLoad, onProgress, onError) {
		var c, onError, onLoad, onProgress, url;
		c = this;
		c.p.load(url, onLoad, onProgress, onError);
		return c;
	};
	CompressedTextureLoader.prototype.Load = function(url, onLoad, onProgress, onError) { return this.$val.Load(url, onLoad, onProgress, onError); };
	CompressedTextureLoader.ptr.prototype.SetPath = function(value) {
		var c, value;
		c = this;
		c.p.setPath(value);
		return c;
	};
	CompressedTextureLoader.prototype.SetPath = function(value) { return this.$val.SetPath(value); };
	CubeCamera.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.Object3D.p;
	};
	CubeCamera.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CubeCamera = function() {
		var t;
		t = this;
		return CubeCameraFromJSObject(t.ctx.CubeCamera);
	};
	Three.prototype.CubeCamera = function() { return this.$val.CubeCamera(); };
	CubeCameraFromJSObject = function(p) {
		var p;
		return new CubeCamera.ptr(new Object3D.ptr(p));
	};
	$pkg.CubeCameraFromJSObject = CubeCameraFromJSObject;
	Three.ptr.prototype.NewCubeCamera = function(near, far, cubeResolution) {
		var cubeResolution, far, near, t;
		t = this;
		return CubeCameraFromJSObject(new (t.ctx.CubeCamera)(near, far, cubeResolution));
	};
	Three.prototype.NewCubeCamera = function(near, far, cubeResolution) { return this.$val.NewCubeCamera(near, far, cubeResolution); };
	CubeCamera.ptr.prototype.Type = function() {
		var c;
		c = this;
		return $internalize(c.Object3D.p.type, $String);
	};
	CubeCamera.prototype.Type = function() { return this.$val.Type(); };
	CubeCamera.ptr.prototype.RenderTarget = function() {
		var c;
		c = this;
		return new WebGLRenderTargetCube.ptr(c.Object3D.p.renderTarget);
	};
	CubeCamera.prototype.RenderTarget = function() { return this.$val.RenderTarget(); };
	CubeCamera.ptr.prototype.UpdateCubeMap = function(renderer, scene) {
		var _r, _r$1, c, renderer, scene, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; renderer = $f.renderer; scene = $f.scene; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = renderer.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = scene.JSObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		c.Object3D.p.updateCubeMap(_r, _r$1);
		$s = -1; return c;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CubeCamera.ptr.prototype.UpdateCubeMap }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.renderer = renderer; $f.scene = scene; $f.$s = $s; $f.$r = $r; return $f;
	};
	CubeCamera.prototype.UpdateCubeMap = function(renderer, scene) { return this.$val.UpdateCubeMap(renderer, scene); };
	CubeTexture.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.Texture.p;
	};
	CubeTexture.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CubeTexture = function() {
		var p, t;
		t = this;
		p = t.ctx.CubeTexture;
		return CubeTextureFromJSObject(p);
	};
	Three.prototype.CubeTexture = function() { return this.$val.CubeTexture(); };
	CubeTextureFromJSObject = function(p) {
		var p;
		return new CubeTexture.ptr(TextureFromJSObject(p));
	};
	$pkg.CubeTextureFromJSObject = CubeTextureFromJSObject;
	Three.ptr.prototype.NewCubeTexture = function(images, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy) {
		var anisotropy, format, images, magFilter, mapping, minFilter, p, t, typ, wrapS, wrapT;
		t = this;
		p = new (t.ctx.CubeTexture)(images, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy);
		return CubeTextureFromJSObject(p);
	};
	Three.prototype.NewCubeTexture = function(images, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy) { return this.$val.NewCubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy); };
	CubeTexture.ptr.prototype.Get = function() {
		var c;
		c = this;
		c.Texture.p.get();
		return c;
	};
	CubeTexture.prototype.Get = function() { return this.$val.Get(); };
	CubeTexture.ptr.prototype.Set = function(value) {
		var c, value;
		c = this;
		c.Texture.p.set(value);
		return c;
	};
	CubeTexture.prototype.Set = function(value) { return this.$val.Set(value); };
	CubeTextureLoader.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.p;
	};
	CubeTextureLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CubeTextureLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.CubeTextureLoader;
		return CubeTextureLoaderFromJSObject(p);
	};
	Three.prototype.CubeTextureLoader = function() { return this.$val.CubeTextureLoader(); };
	CubeTextureLoaderFromJSObject = function(p) {
		var p;
		return new CubeTextureLoader.ptr(p);
	};
	$pkg.CubeTextureLoaderFromJSObject = CubeTextureLoaderFromJSObject;
	Three.ptr.prototype.NewCubeTextureLoader = function() {
		var p, t;
		t = this;
		p = new (t.ctx.CubeTextureLoader)();
		return CubeTextureLoaderFromJSObject(p);
	};
	Three.prototype.NewCubeTextureLoader = function() { return this.$val.NewCubeTextureLoader(); };
	onCubeTextureLoadWrapperFunc = function(onLoad) {
		var onLoad;
		return (function $b(geom, materialArray) {
			var geom, i, materialArray, materials, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; geom = $f.geom; i = $f.i; materialArray = $f.materialArray; materials = $f.materials; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			materials = sliceType$12.nil;
			if (!(materialArray === null) && !(materialArray === undefined)) {
				i = 0;
				while (true) {
					if (!(i < $parseInt(materialArray.length))) { break; }
					materials = $append(materials, MaterialFromJSObject(materialArray[i]));
					i = i + (1) >> 0;
				}
			}
			$r = onLoad(CubeTextureFromJSObject(geom), materials); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.geom = geom; $f.i = i; $f.materialArray = materialArray; $f.materials = materials; $f.$s = $s; $f.$r = $r; return $f;
		});
	};
	CubeTextureLoader.ptr.prototype.Load = function(urls, onLoad, onProgress, onError) {
		var c, onError, onLoad, onLoadWrapper, onProgress, urls;
		c = this;
		onLoadWrapper = $throwNilPointerError;
		if (!(onLoad === $throwNilPointerError)) {
			onLoadWrapper = onCubeTextureLoadWrapperFunc(onLoad);
		}
		if (!($interfaceIsEqual(onProgress, $ifaceNil)) && !($interfaceIsEqual(onError, $ifaceNil))) {
			c.p.load($externalize(urls, sliceType$15), $externalize(onLoadWrapper, funcType), $externalize(onProgress, $emptyInterface), $externalize(onError, $emptyInterface));
		} else if (!($interfaceIsEqual(onProgress, $ifaceNil))) {
			c.p.load($externalize(urls, sliceType$15), $externalize(onLoadWrapper, funcType), $externalize(onProgress, $emptyInterface));
		} else {
			c.p.load($externalize(urls, sliceType$15), $externalize(onLoadWrapper, funcType));
		}
		return c;
	};
	CubeTextureLoader.prototype.Load = function(urls, onLoad, onProgress, onError) { return this.$val.Load(urls, onLoad, onProgress, onError); };
	CubeTextureLoader.ptr.prototype.SetCrossOrigin = function(value) {
		var c, value;
		c = this;
		c.p.setCrossOrigin($externalize(value, $String));
		return c;
	};
	CubeTextureLoader.prototype.SetCrossOrigin = function(value) { return this.$val.SetCrossOrigin(value); };
	CubeTextureLoader.ptr.prototype.SetPath = function(value) {
		var c, value;
		c = this;
		c.p.setPath($externalize(value, $String));
		return c;
	};
	CubeTextureLoader.prototype.SetPath = function(value) { return this.$val.SetPath(value); };
	CubicBezierCurve.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.Curve.p;
	};
	CubicBezierCurve.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CubicBezierCurve = function() {
		var p, t;
		t = this;
		p = t.ctx.CubicBezierCurve;
		return CubicBezierCurveFromJSObject(p);
	};
	Three.prototype.CubicBezierCurve = function() { return this.$val.CubicBezierCurve(); };
	CubicBezierCurveFromJSObject = function(p) {
		var p;
		return new CubicBezierCurve.ptr(CurveFromJSObject(p));
	};
	$pkg.CubicBezierCurveFromJSObject = CubicBezierCurveFromJSObject;
	Three.ptr.prototype.NewCubicBezierCurve = function(v0, v1, v2, v3) {
		var p, t, v0, v1, v2, v3;
		t = this;
		p = new (t.ctx.CubicBezierCurve)(v0.p, v1.p, v2.p, v3.p);
		return CubicBezierCurveFromJSObject(p);
	};
	Three.prototype.NewCubicBezierCurve = function(v0, v1, v2, v3) { return this.$val.NewCubicBezierCurve(v0, v1, v2, v3); };
	CubicBezierCurve.ptr.prototype.GetPoint = function(t) {
		var c, t;
		c = this;
		c.Curve.p.getPoint(t);
		return c;
	};
	CubicBezierCurve.prototype.GetPoint = function(t) { return this.$val.GetPoint(t); };
	CubicBezierCurve.ptr.prototype.GetTangent = function(t) {
		var c, t;
		c = this;
		c.Curve.p.getTangent(t);
		return c;
	};
	CubicBezierCurve.prototype.GetTangent = function(t) { return this.$val.GetTangent(t); };
	CubicBezierCurve3.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.Curve.p;
	};
	CubicBezierCurve3.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CubicBezierCurve3 = function() {
		var p, t;
		t = this;
		p = t.ctx.CubicBezierCurve3;
		return CubicBezierCurve3FromJSObject(p);
	};
	Three.prototype.CubicBezierCurve3 = function() { return this.$val.CubicBezierCurve3(); };
	CubicBezierCurve3FromJSObject = function(p) {
		var p;
		return new CubicBezierCurve3.ptr(CurveFromJSObject(p));
	};
	$pkg.CubicBezierCurve3FromJSObject = CubicBezierCurve3FromJSObject;
	Three.ptr.prototype.NewCubicBezierCurve3 = function(v0, v1, v2, v3) {
		var p, t, v0, v1, v2, v3;
		t = this;
		p = new (t.ctx.CubicBezierCurve3)(v0.p, v1.p, v2.p, v3.p);
		return CubicBezierCurve3FromJSObject(p);
	};
	Three.prototype.NewCubicBezierCurve3 = function(v0, v1, v2, v3) { return this.$val.NewCubicBezierCurve3(v0, v1, v2, v3); };
	CubicBezierCurve3.ptr.prototype.GetPoint = function(t) {
		var c, t;
		c = this;
		c.Curve.p.getPoint(t);
		return c;
	};
	CubicBezierCurve3.prototype.GetPoint = function(t) { return this.$val.GetPoint(t); };
	CubicBezierCurve3.ptr.prototype.GetTangent = function(t) {
		var c, t;
		c = this;
		c.Curve.p.getTangent(t);
		return c;
	};
	CubicBezierCurve3.prototype.GetTangent = function(t) { return this.$val.GetTangent(t); };
	CubicInterpolant.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.p;
	};
	CubicInterpolant.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CubicInterpolant = function() {
		var p, t;
		t = this;
		p = t.ctx.CubicInterpolant;
		return CubicInterpolantFromJSObject(p);
	};
	Three.prototype.CubicInterpolant = function() { return this.$val.CubicInterpolant(); };
	CubicInterpolantFromJSObject = function(p) {
		var p;
		return new CubicInterpolant.ptr(p);
	};
	$pkg.CubicInterpolantFromJSObject = CubicInterpolantFromJSObject;
	Three.ptr.prototype.NewCubicInterpolant = function(parameterPositions, sampleValues, sampleSize, resultBuffer) {
		var p, parameterPositions, resultBuffer, sampleSize, sampleValues, t;
		t = this;
		p = new (t.ctx.CubicInterpolant)(parameterPositions, sampleValues, sampleSize, resultBuffer);
		return CubicInterpolantFromJSObject(p);
	};
	Three.prototype.NewCubicInterpolant = function(parameterPositions, sampleValues, sampleSize, resultBuffer) { return this.$val.NewCubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer); };
	CubicInterpolant.ptr.prototype.IntervalChanged = function(i1, t0, t1) {
		var c, i1, t0, t1;
		c = this;
		c.p.intervalChanged_(i1, t0, t1);
		return c;
	};
	CubicInterpolant.prototype.IntervalChanged = function(i1, t0, t1) { return this.$val.IntervalChanged(i1, t0, t1); };
	CubicInterpolant.ptr.prototype.Interpolate = function(i1, t0, t, t1) {
		var c, i1, t, t0, t1;
		c = this;
		c.p.interpolate_(i1, t0, t, t1);
		return c;
	};
	CubicInterpolant.prototype.Interpolate = function(i1, t0, t, t1) { return this.$val.Interpolate(i1, t0, t, t1); };
	Curve.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.p;
	};
	Curve.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Curve = function() {
		var p, t;
		t = this;
		p = t.ctx.Curve;
		return CurveFromJSObject(p);
	};
	Three.prototype.Curve = function() { return this.$val.Curve(); };
	CurveFromJSObject = function(p) {
		var p;
		return new Curve.ptr(p);
	};
	$pkg.CurveFromJSObject = CurveFromJSObject;
	Three.ptr.prototype.NewCurve = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Curve)();
		return CurveFromJSObject(p);
	};
	Three.prototype.NewCurve = function() { return this.$val.NewCurve(); };
	Curve.ptr.prototype.GetPoint = function(t) {
		var c, t;
		c = this;
		return c.p.getPoint(t);
	};
	Curve.prototype.GetPoint = function(t) { return this.$val.GetPoint(t); };
	Curve.ptr.prototype.GetPointAt = function(u) {
		var c, u;
		c = this;
		return c.p.getPointAt(u);
	};
	Curve.prototype.GetPointAt = function(u) { return this.$val.GetPointAt(u); };
	Curve.ptr.prototype.GetPoints = function(divisions) {
		var c, divisions;
		c = this;
		return c.p.getPoints(divisions);
	};
	Curve.prototype.GetPoints = function(divisions) { return this.$val.GetPoints(divisions); };
	Curve.ptr.prototype.GetSpacedPoints = function(divisions) {
		var c, divisions;
		c = this;
		return c.p.getSpacedPoints(divisions);
	};
	Curve.prototype.GetSpacedPoints = function(divisions) { return this.$val.GetSpacedPoints(divisions); };
	Curve.ptr.prototype.GetLength = function() {
		var c;
		c = this;
		c.p.getLength();
		return c;
	};
	Curve.prototype.GetLength = function() { return this.$val.GetLength(); };
	Curve.ptr.prototype.GetLengths = function(divisions) {
		var c, divisions;
		c = this;
		c.p.getLengths(divisions);
		return c;
	};
	Curve.prototype.GetLengths = function(divisions) { return this.$val.GetLengths(divisions); };
	Curve.ptr.prototype.UpdateArcLengths = function() {
		var c;
		c = this;
		c.p.updateArcLengths();
		return c;
	};
	Curve.prototype.UpdateArcLengths = function() { return this.$val.UpdateArcLengths(); };
	Curve.ptr.prototype.GetUtoTmapping = function(u, distance) {
		var c, distance, u;
		c = this;
		c.p.getUtoTmapping(u, distance);
		return c;
	};
	Curve.prototype.GetUtoTmapping = function(u, distance) { return this.$val.GetUtoTmapping(u, distance); };
	Curve.ptr.prototype.GetTangent = function(t) {
		var c, t;
		c = this;
		c.p.getTangent(t);
		return c;
	};
	Curve.prototype.GetTangent = function(t) { return this.$val.GetTangent(t); };
	Curve.ptr.prototype.GetTangentAt = function(u) {
		var c, u;
		c = this;
		c.p.getTangentAt(u);
		return c;
	};
	Curve.prototype.GetTangentAt = function(u) { return this.$val.GetTangentAt(u); };
	CurvePath.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.Curve.p;
	};
	CurvePath.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CurvePath = function() {
		var p, t;
		t = this;
		p = t.ctx.CurvePath;
		return CurvePathFromJSObject(p);
	};
	Three.prototype.CurvePath = function() { return this.$val.CurvePath(); };
	CurvePathFromJSObject = function(p) {
		var p;
		return new CurvePath.ptr(CurveFromJSObject(p));
	};
	$pkg.CurvePathFromJSObject = CurvePathFromJSObject;
	Three.ptr.prototype.NewCurvePath = function() {
		var p, t;
		t = this;
		p = new (t.ctx.CurvePath)();
		return CurvePathFromJSObject(p);
	};
	Three.prototype.NewCurvePath = function() { return this.$val.NewCurvePath(); };
	CurvePath.ptr.prototype.Add = function(curve) {
		var c, curve;
		c = this;
		c.Curve.p.add(curve);
		return c;
	};
	CurvePath.prototype.Add = function(curve) { return this.$val.Add(curve); };
	CurvePath.ptr.prototype.GetPoint = function(t) {
		var c, t;
		c = this;
		c.Curve.p.getPoint(t);
		return c;
	};
	CurvePath.prototype.GetPoint = function(t) { return this.$val.GetPoint(t); };
	CurvePath.ptr.prototype.GetTangent = function(t) {
		var c, t;
		c = this;
		c.Curve.p.getTangent(t);
		return c;
	};
	CurvePath.prototype.GetTangent = function(t) { return this.$val.GetTangent(t); };
	CurvePath.ptr.prototype.CreatePointsGeometry = function(divisions) {
		var c, divisions, p;
		c = this;
		p = c.Curve.p.createPointsGeometry(divisions);
		return GeometryFromJSObject(p);
	};
	CurvePath.prototype.CreatePointsGeometry = function(divisions) { return this.$val.CreatePointsGeometry(divisions); };
	CurvePath.ptr.prototype.CreateSpacedPointsGeometry = function(divisions) {
		var c, divisions, p;
		c = this;
		p = c.Curve.p.createSpacedPointsGeometry(divisions);
		return GeometryFromJSObject(p);
	};
	CurvePath.prototype.CreateSpacedPointsGeometry = function(divisions) { return this.$val.CreateSpacedPointsGeometry(divisions); };
	CurvePath.ptr.prototype.CreateGeometry = function(points) {
		var _r, c, p, points, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; p = $f.p; points = $f.points; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = points.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = c.Curve.p.createGeometry(_r);
		$s = -1; return GeometryFromJSObject(p);
		/* */ } return; } if ($f === undefined) { $f = { $blk: CurvePath.ptr.prototype.CreateGeometry }; } $f._r = _r; $f.c = c; $f.p = p; $f.points = points; $f.$s = $s; $f.$r = $r; return $f;
	};
	CurvePath.prototype.CreateGeometry = function(points) { return this.$val.CreateGeometry(points); };
	CurveUtils.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.p;
	};
	CurveUtils.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CurveUtils = function() {
		var p, t;
		t = this;
		p = t.ctx.CurveUtils;
		return CurveUtilsFromJSObject(p);
	};
	Three.prototype.CurveUtils = function() { return this.$val.CurveUtils(); };
	CurveUtilsFromJSObject = function(p) {
		var p;
		return new CurveUtils.ptr(p);
	};
	$pkg.CurveUtilsFromJSObject = CurveUtilsFromJSObject;
	Three.ptr.prototype.NewCurveUtils = function() {
		var p, t;
		t = this;
		p = new (t.ctx.CurveUtils)();
		return CurveUtilsFromJSObject(p);
	};
	Three.prototype.NewCurveUtils = function() { return this.$val.NewCurveUtils(); };
	CurveUtils.ptr.prototype.TangentQuadraticBezier = function(t, p0, p1, p2) {
		var c, p0, p1, p2, t;
		c = this;
		c.p.tangentQuadraticBezier(t, p0, p1, p2);
		return c;
	};
	CurveUtils.prototype.TangentQuadraticBezier = function(t, p0, p1, p2) { return this.$val.TangentQuadraticBezier(t, p0, p1, p2); };
	CurveUtils.ptr.prototype.TangentCubicBezier = function(t, p0, p1, p2, p3) {
		var c, p0, p1, p2, p3, t;
		c = this;
		c.p.tangentCubicBezier(t, p0, p1, p2, p3);
		return c;
	};
	CurveUtils.prototype.TangentCubicBezier = function(t, p0, p1, p2, p3) { return this.$val.TangentCubicBezier(t, p0, p1, p2, p3); };
	CurveUtils.ptr.prototype.TangentSpline = function(t, p0, p1, p2, p3) {
		var c, p0, p1, p2, p3, t;
		c = this;
		c.p.tangentSpline(t, p0, p1, p2, p3);
		return c;
	};
	CurveUtils.prototype.TangentSpline = function(t, p0, p1, p2, p3) { return this.$val.TangentSpline(t, p0, p1, p2, p3); };
	CurveUtils.ptr.prototype.Interpolate = function(p0, p1, p2, p3, t) {
		var c, p0, p1, p2, p3, t;
		c = this;
		c.p.interpolate(p0, p1, p2, p3, t);
		return c;
	};
	CurveUtils.prototype.Interpolate = function(p0, p1, p2, p3, t) { return this.$val.Interpolate(p0, p1, p2, p3, t); };
	CylinderBufferGeometry.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.BufferGeometry.p;
	};
	CylinderBufferGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CylinderBufferGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.CylinderBufferGeometry;
		return CylinderBufferGeometryFromJSObject(p);
	};
	Three.prototype.CylinderBufferGeometry = function() { return this.$val.CylinderBufferGeometry(); };
	CylinderBufferGeometryFromJSObject = function(p) {
		var p;
		return new CylinderBufferGeometry.ptr(BufferGeometryFromJSObject(p));
	};
	$pkg.CylinderBufferGeometryFromJSObject = CylinderBufferGeometryFromJSObject;
	Three.ptr.prototype.NewCylinderBufferGeometry = function(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, opts) {
		var height, heightSegments, openEnded, opts, p, radialSegments, radiusBottom, radiusTop, t;
		t = this;
		p = null;
		if (!(opts === ptrType$14.nil)) {
			p = new (t.ctx.CylinderBufferGeometry)(radiusTop, radiusBottom, height, radialSegments, heightSegments, $externalize(openEnded, $Bool), opts.thetaStart, opts.thetaLength);
		} else {
			p = new (t.ctx.CylinderBufferGeometry)(radiusTop, radiusBottom, height, radialSegments, heightSegments, $externalize(openEnded, $Bool));
		}
		return CylinderBufferGeometryFromJSObject(p);
	};
	Three.prototype.NewCylinderBufferGeometry = function(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, opts) { return this.$val.NewCylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, opts); };
	CylinderGeometry.ptr.prototype.JSObject = function() {
		var c;
		c = this;
		return c.Geometry.p;
	};
	CylinderGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.CylinderGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.CylinderGeometry;
		return CylinderGeometryFromJSObject(p);
	};
	Three.prototype.CylinderGeometry = function() { return this.$val.CylinderGeometry(); };
	CylinderGeometryFromJSObject = function(p) {
		var p;
		return new CylinderGeometry.ptr(GeometryFromJSObject(p));
	};
	$pkg.CylinderGeometryFromJSObject = CylinderGeometryFromJSObject;
	Three.ptr.prototype.NewCylinderGeometry = function(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, opts) {
		var height, heightSegments, openEnded, opts, p, radialSegments, radiusBottom, radiusTop, t;
		t = this;
		p = null;
		if (!(opts === ptrType$15.nil)) {
			p = new (t.ctx.CylinderGeometry)(radiusTop, radiusBottom, height, radialSegments, heightSegments, $externalize(openEnded, $Bool), opts.thetaStart, opts.thetaLength);
		} else {
			p = new (t.ctx.CylinderGeometry)(radiusTop, radiusBottom, height, radialSegments, heightSegments, $externalize(openEnded, $Bool));
		}
		return CylinderGeometryFromJSObject(p);
	};
	Three.prototype.NewCylinderGeometry = function(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, opts) { return this.$val.NewCylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, opts); };
	DataTexture.ptr.prototype.JSObject = function() {
		var d;
		d = this;
		return d.Texture.p;
	};
	DataTexture.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.DataTexture = function() {
		var p, t;
		t = this;
		p = t.ctx.DataTexture;
		return DataTextureFromJSObject(p);
	};
	Three.prototype.DataTexture = function() { return this.$val.DataTexture(); };
	DataTextureFromJSObject = function(p) {
		var p;
		return new DataTexture.ptr(TextureFromJSObject(p));
	};
	$pkg.DataTextureFromJSObject = DataTextureFromJSObject;
	Three.ptr.prototype.NewDataTexture = function(data, width, height, format, typ, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy) {
		var anisotropy, data, format, height, magFilter, mapping, minFilter, p, t, typ, width, wrapS, wrapT;
		t = this;
		p = new (t.ctx.DataTexture)(data, width, height, format, typ, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy);
		return DataTextureFromJSObject(p);
	};
	Three.prototype.NewDataTexture = function(data, width, height, format, typ, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy) { return this.$val.NewDataTexture(data, width, height, format, typ, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy); };
	DirectGeometry.ptr.prototype.JSObject = function() {
		var d;
		d = this;
		return d.p;
	};
	DirectGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.DirectGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.DirectGeometry;
		return DirectGeometryFromJSObject(p);
	};
	Three.prototype.DirectGeometry = function() { return this.$val.DirectGeometry(); };
	DirectGeometryFromJSObject = function(p) {
		var p;
		return new DirectGeometry.ptr(p);
	};
	$pkg.DirectGeometryFromJSObject = DirectGeometryFromJSObject;
	Three.ptr.prototype.NewDirectGeometry = function() {
		var p, t;
		t = this;
		p = new (t.ctx.DirectGeometry)();
		return DirectGeometryFromJSObject(p);
	};
	Three.prototype.NewDirectGeometry = function() { return this.$val.NewDirectGeometry(); };
	DirectGeometry.ptr.prototype.ComputeFaceNormals = function() {
		var d;
		d = this;
		d.p.computeFaceNormals();
		return d;
	};
	DirectGeometry.prototype.ComputeFaceNormals = function() { return this.$val.ComputeFaceNormals(); };
	DirectGeometry.ptr.prototype.ComputeVertexNormals = function() {
		var d;
		d = this;
		d.p.computeVertexNormals();
		return d;
	};
	DirectGeometry.prototype.ComputeVertexNormals = function() { return this.$val.ComputeVertexNormals(); };
	DirectGeometry.ptr.prototype.ComputeGroups = function(geometry) {
		var d, geometry;
		d = this;
		d.p.computeGroups(geometry);
		return d;
	};
	DirectGeometry.prototype.ComputeGroups = function(geometry) { return this.$val.ComputeGroups(geometry); };
	DirectGeometry.ptr.prototype.FromGeometry = function(geometry) {
		var d, geometry;
		d = this;
		d.p.fromGeometry(geometry);
		return d;
	};
	DirectGeometry.prototype.FromGeometry = function(geometry) { return this.$val.FromGeometry(geometry); };
	DirectGeometry.ptr.prototype.Dispose = function() {
		var d;
		d = this;
		d.p.dispose();
		return d;
	};
	DirectGeometry.prototype.Dispose = function() { return this.$val.Dispose(); };
	DirectionalLight.ptr.prototype.JSObject = function() {
		var d;
		d = this;
		return d.Light.Object3D.p;
	};
	DirectionalLight.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.DirectionalLight = function() {
		var t;
		t = this;
		return DirectionalLightFromJSObject(t.ctx.DirectionalLight);
	};
	Three.prototype.DirectionalLight = function() { return this.$val.DirectionalLight(); };
	DirectionalLightFromJSObject = function(p) {
		var p;
		return new DirectionalLight.ptr(new Light.ptr(new Object3D.ptr(p)));
	};
	$pkg.DirectionalLightFromJSObject = DirectionalLightFromJSObject;
	Three.ptr.prototype.NewDirectionalLight = function(color, intensity) {
		var color, intensity, t;
		t = this;
		return DirectionalLightFromJSObject(new (t.ctx.DirectionalLight)(color, intensity));
	};
	Three.prototype.NewDirectionalLight = function(color, intensity) { return this.$val.NewDirectionalLight(color, intensity); };
	DirectionalLight.ptr.prototype.Copy = function(source) {
		var d, source;
		d = this;
		d.Light.Object3D.p.copy(source.Light.Object3D.p);
		return d;
	};
	DirectionalLight.prototype.Copy = function(source) { return this.$val.Copy(source); };
	DirectionalLightHelper.ptr.prototype.JSObject = function() {
		var d;
		d = this;
		return d.Object3D.p;
	};
	DirectionalLightHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.DirectionalLightHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.DirectionalLightHelper;
		return DirectionalLightHelperFromJSObject(p);
	};
	Three.prototype.DirectionalLightHelper = function() { return this.$val.DirectionalLightHelper(); };
	DirectionalLightHelperFromJSObject = function(p) {
		var p;
		return new DirectionalLightHelper.ptr(Object3DFromJSObject(p));
	};
	$pkg.DirectionalLightHelperFromJSObject = DirectionalLightHelperFromJSObject;
	Three.ptr.prototype.NewDirectionalLightHelper = function(light, size) {
		var light, p, size, t;
		t = this;
		p = new (t.ctx.DirectionalLightHelper)(light, size);
		return DirectionalLightHelperFromJSObject(p);
	};
	Three.prototype.NewDirectionalLightHelper = function(light, size) { return this.$val.NewDirectionalLightHelper(light, size); };
	DiscreteInterpolant.ptr.prototype.JSObject = function() {
		var d;
		d = this;
		return d.p;
	};
	DiscreteInterpolant.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.DiscreteInterpolant = function() {
		var p, t;
		t = this;
		p = t.ctx.DiscreteInterpolant;
		return DiscreteInterpolantFromJSObject(p);
	};
	Three.prototype.DiscreteInterpolant = function() { return this.$val.DiscreteInterpolant(); };
	DiscreteInterpolantFromJSObject = function(p) {
		var p;
		return new DiscreteInterpolant.ptr(p);
	};
	$pkg.DiscreteInterpolantFromJSObject = DiscreteInterpolantFromJSObject;
	Three.ptr.prototype.NewDiscreteInterpolant = function(parameterPositions, sampleValues, sampleSize, resultBuffer) {
		var p, parameterPositions, resultBuffer, sampleSize, sampleValues, t;
		t = this;
		p = new (t.ctx.DiscreteInterpolant)(parameterPositions, sampleValues, sampleSize, resultBuffer);
		return DiscreteInterpolantFromJSObject(p);
	};
	Three.prototype.NewDiscreteInterpolant = function(parameterPositions, sampleValues, sampleSize, resultBuffer) { return this.$val.NewDiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer); };
	DiscreteInterpolant.ptr.prototype.Interpolate = function(i1, t0, t, t1) {
		var d, i1, t, t0, t1;
		d = this;
		d.p.interpolate_(i1, t0, t, t1);
		return d;
	};
	DiscreteInterpolant.prototype.Interpolate = function(i1, t0, t, t1) { return this.$val.Interpolate(i1, t0, t, t1); };
	DodecahedronGeometry.ptr.prototype.JSObject = function() {
		var d;
		d = this;
		return d.PolyhedronGeometry.Geometry.p;
	};
	DodecahedronGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.DodecahedronGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.DodecahedronGeometry;
		return DodecahedronGeometryFromJSObject(p);
	};
	Three.prototype.DodecahedronGeometry = function() { return this.$val.DodecahedronGeometry(); };
	DodecahedronGeometryFromJSObject = function(p) {
		var p;
		return new DodecahedronGeometry.ptr(PolyhedronGeometryFromJSObject(p));
	};
	$pkg.DodecahedronGeometryFromJSObject = DodecahedronGeometryFromJSObject;
	Three.ptr.prototype.NewDodecahedronGeometry = function(radius, detail) {
		var detail, p, radius, t;
		t = this;
		p = new (t.ctx.DodecahedronGeometry)(radius, detail);
		return DodecahedronGeometryFromJSObject(p);
	};
	Three.prototype.NewDodecahedronGeometry = function(radius, detail) { return this.$val.NewDodecahedronGeometry(radius, detail); };
	EdgesGeometry.ptr.prototype.JSObject = function() {
		var e;
		e = this;
		return e.p;
	};
	EdgesGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.EdgesGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.EdgesGeometry;
		return EdgesGeometryFromJSObject(p);
	};
	Three.prototype.EdgesGeometry = function() { return this.$val.EdgesGeometry(); };
	EdgesGeometryFromJSObject = function(p) {
		var p;
		return new EdgesGeometry.ptr(p);
	};
	$pkg.EdgesGeometryFromJSObject = EdgesGeometryFromJSObject;
	Three.ptr.prototype.NewEdgesGeometry = function(geometry, thresholdAngle) {
		var geometry, p, t, thresholdAngle;
		t = this;
		p = new (t.ctx.EdgesGeometry)(geometry, thresholdAngle);
		return EdgesGeometryFromJSObject(p);
	};
	Three.prototype.NewEdgesGeometry = function(geometry, thresholdAngle) { return this.$val.NewEdgesGeometry(geometry, thresholdAngle); };
	EdgesHelper.ptr.prototype.JSObject = function() {
		var e;
		e = this;
		return e.Line.Object3D.p;
	};
	EdgesHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.EdgesHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.EdgesHelper;
		return EdgesHelperFromJSObject(p);
	};
	Three.prototype.EdgesHelper = function() { return this.$val.EdgesHelper(); };
	EdgesHelperFromJSObject = function(p) {
		var p;
		return new EdgesHelper.ptr(LineFromJSObject(p));
	};
	$pkg.EdgesHelperFromJSObject = EdgesHelperFromJSObject;
	Three.ptr.prototype.NewEdgesHelper = function(object, hex, thresholdAngle) {
		var _r, hex, object, p, t, thresholdAngle, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; hex = $f.hex; object = $f.object; p = $f.p; t = $f.t; thresholdAngle = $f.thresholdAngle; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = object.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = new (t.ctx.EdgesHelper)(_r, hex, thresholdAngle);
		$s = -1; return EdgesHelperFromJSObject(p);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Three.ptr.prototype.NewEdgesHelper }; } $f._r = _r; $f.hex = hex; $f.object = object; $f.p = p; $f.t = t; $f.thresholdAngle = thresholdAngle; $f.$s = $s; $f.$r = $r; return $f;
	};
	Three.prototype.NewEdgesHelper = function(object, hex, thresholdAngle) { return this.$val.NewEdgesHelper(object, hex, thresholdAngle); };
	EllipseCurve.ptr.prototype.JSObject = function() {
		var e;
		e = this;
		return e.Curve.p;
	};
	EllipseCurve.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.EllipseCurve = function() {
		var p, t;
		t = this;
		p = t.ctx.EllipseCurve;
		return EllipseCurveFromJSObject(p);
	};
	Three.prototype.EllipseCurve = function() { return this.$val.EllipseCurve(); };
	EllipseCurveFromJSObject = function(p) {
		var p;
		return new EllipseCurve.ptr(CurveFromJSObject(p));
	};
	$pkg.EllipseCurveFromJSObject = EllipseCurveFromJSObject;
	Three.ptr.prototype.NewEllipseCurve = function(aX, aY, xRadius, yRadius, opts) {
		var aX, aY, opts, p, t, xRadius, yRadius;
		t = this;
		p = null;
		if (!(opts === ptrType$16.nil)) {
			p = new (t.ctx.EllipseCurve)(aX, aY, xRadius, yRadius, opts.StartAngle, opts.EndAngle, $externalize(opts.Clockwise, $Bool), opts.Rotation);
		} else {
			p = new (t.ctx.EllipseCurve)(aX, aY, xRadius, yRadius);
		}
		return EllipseCurveFromJSObject(p);
	};
	Three.prototype.NewEllipseCurve = function(aX, aY, xRadius, yRadius, opts) { return this.$val.NewEllipseCurve(aX, aY, xRadius, yRadius, opts); };
	EllipseCurve.ptr.prototype.GetPoint = function(t) {
		var e, t;
		e = this;
		e.Curve.p.getPoint(t);
		return e;
	};
	EllipseCurve.prototype.GetPoint = function(t) { return this.$val.GetPoint(t); };
	Euler.ptr.prototype.JSObject = function() {
		var e;
		e = this;
		return e.p;
	};
	Euler.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Euler = function() {
		var p, t;
		t = this;
		p = t.ctx.Euler;
		return EulerFromJSObject(p);
	};
	Three.prototype.Euler = function() { return this.$val.Euler(); };
	EulerFromJSObject = function(p) {
		var p;
		return new Euler.ptr(p);
	};
	$pkg.EulerFromJSObject = EulerFromJSObject;
	Three.ptr.prototype.NewEuler = function(x, y, z, order) {
		var order, p, t, x, y, z;
		t = this;
		p = new (t.ctx.Euler)(x, y, z, $externalize(order, $String));
		return EulerFromJSObject(p);
	};
	Three.prototype.NewEuler = function(x, y, z, order) { return this.$val.NewEuler(x, y, z, order); };
	Euler.ptr.prototype.X = function() {
		var e;
		e = this;
		return $parseFloat(e.p.x);
	};
	Euler.prototype.X = function() { return this.$val.X(); };
	Euler.ptr.prototype.Y = function() {
		var e;
		e = this;
		return $parseFloat(e.p.y);
	};
	Euler.prototype.Y = function() { return this.$val.Y(); };
	Euler.ptr.prototype.Z = function() {
		var e;
		e = this;
		return $parseFloat(e.p.z);
	};
	Euler.prototype.Z = function() { return this.$val.Z(); };
	Euler.ptr.prototype.Order = function() {
		var e;
		e = this;
		return $parseFloat(e.p.order);
	};
	Euler.prototype.Order = function() { return this.$val.Order(); };
	Euler.ptr.prototype.SetX = function(value) {
		var e, value;
		e = this;
		e.p.x = value;
		return e;
	};
	Euler.prototype.SetX = function(value) { return this.$val.SetX(value); };
	Euler.ptr.prototype.SetY = function(value) {
		var e, value;
		e = this;
		e.p.y = value;
		return e;
	};
	Euler.prototype.SetY = function(value) { return this.$val.SetY(value); };
	Euler.ptr.prototype.SetZ = function(value) {
		var e, value;
		e = this;
		e.p.z = value;
		return e;
	};
	Euler.prototype.SetZ = function(value) { return this.$val.SetZ(value); };
	Euler.ptr.prototype.SetOrder = function(value) {
		var e, value;
		e = this;
		e.p.order = value;
		return e;
	};
	Euler.prototype.SetOrder = function(value) { return this.$val.SetOrder(value); };
	Euler.ptr.prototype.Set = function(x, y, z, order) {
		var e, order, x, y, z;
		e = this;
		e.p.set(x, y, z, order);
		return e;
	};
	Euler.prototype.Set = function(x, y, z, order) { return this.$val.Set(x, y, z, order); };
	Euler.ptr.prototype.Clone = function() {
		var e;
		e = this;
		e.p.clone();
		return e;
	};
	Euler.prototype.Clone = function() { return this.$val.Clone(); };
	Euler.ptr.prototype.Copy = function(euler) {
		var e, euler;
		e = this;
		e.p.copy(euler.p);
		return e;
	};
	Euler.prototype.Copy = function(euler) { return this.$val.Copy(euler); };
	Euler.ptr.prototype.SetFromRotationMatrix = function(m, order, update) {
		var e, m, order, update;
		e = this;
		e.p.setFromRotationMatrix(m.p, $externalize(order, $String), $externalize(update, $Bool));
		return e;
	};
	Euler.prototype.SetFromRotationMatrix = function(m, order, update) { return this.$val.SetFromRotationMatrix(m, order, update); };
	Euler.ptr.prototype.SetFromQuaternion = function() {
		var e;
		e = this;
		e.p.setFromQuaternion();
		return e;
	};
	Euler.prototype.SetFromQuaternion = function() { return this.$val.SetFromQuaternion(); };
	Euler.ptr.prototype.SetFromVector3 = function(v, order) {
		var e, order, v;
		e = this;
		e.p.setFromVector3(v, order);
		return e;
	};
	Euler.prototype.SetFromVector3 = function(v, order) { return this.$val.SetFromVector3(v, order); };
	Euler.ptr.prototype.Reorder = function() {
		var e;
		e = this;
		e.p.reorder();
		return e;
	};
	Euler.prototype.Reorder = function() { return this.$val.Reorder(); };
	Euler.ptr.prototype.Equals = function(euler) {
		var e, euler;
		e = this;
		e.p.equals(euler);
		return e;
	};
	Euler.prototype.Equals = function(euler) { return this.$val.Equals(euler); };
	Euler.ptr.prototype.FromArray = function(array) {
		var array, e;
		e = this;
		e.p.fromArray(array);
		return e;
	};
	Euler.prototype.FromArray = function(array) { return this.$val.FromArray(array); };
	Euler.ptr.prototype.ToArray = function(array, offset) {
		var array, e, offset;
		e = this;
		e.p.toArray(array, offset);
		return e;
	};
	Euler.prototype.ToArray = function(array, offset) { return this.$val.ToArray(array, offset); };
	Euler.ptr.prototype.ToVector3 = function(optionalResult) {
		var e, optionalResult;
		e = this;
		e.p.toVector3(optionalResult);
		return e;
	};
	Euler.prototype.ToVector3 = function(optionalResult) { return this.$val.ToVector3(optionalResult); };
	Euler.ptr.prototype.OnChange = function(callback) {
		var callback, e;
		e = this;
		e.p.onChange(callback);
		return e;
	};
	Euler.prototype.OnChange = function(callback) { return this.$val.OnChange(callback); };
	Euler.ptr.prototype.OnChangeCallback = function() {
		var e;
		e = this;
		e.p.onChangeCallback();
		return e;
	};
	Euler.prototype.OnChangeCallback = function() { return this.$val.OnChangeCallback(); };
	EventDispatcher.ptr.prototype.JSObject = function() {
		var e;
		e = this;
		return e.p;
	};
	EventDispatcher.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.EventDispatcher = function() {
		var p, t;
		t = this;
		p = t.ctx.EventDispatcher;
		return EventDispatcherFromJSObject(p);
	};
	Three.prototype.EventDispatcher = function() { return this.$val.EventDispatcher(); };
	EventDispatcherFromJSObject = function(p) {
		var p;
		return new EventDispatcher.ptr(p);
	};
	$pkg.EventDispatcherFromJSObject = EventDispatcherFromJSObject;
	Three.ptr.prototype.NewEventDispatcher = function() {
		var p, t;
		t = this;
		p = new (t.ctx.EventDispatcher)();
		return EventDispatcherFromJSObject(p);
	};
	Three.prototype.NewEventDispatcher = function() { return this.$val.NewEventDispatcher(); };
	EventDispatcher.ptr.prototype.Apply = function(object) {
		var e, object;
		e = this;
		e.p.apply(object);
		return e;
	};
	EventDispatcher.prototype.Apply = function(object) { return this.$val.Apply(object); };
	EventDispatcher.ptr.prototype.AddEventListener = function(typ, listener) {
		var e, listener, typ;
		e = this;
		e.p.addEventListener(typ, listener);
		return e;
	};
	EventDispatcher.prototype.AddEventListener = function(typ, listener) { return this.$val.AddEventListener(typ, listener); };
	EventDispatcher.ptr.prototype.HasEventListener = function(typ, listener) {
		var e, listener, typ;
		e = this;
		e.p.hasEventListener(typ, listener);
		return e;
	};
	EventDispatcher.prototype.HasEventListener = function(typ, listener) { return this.$val.HasEventListener(typ, listener); };
	EventDispatcher.ptr.prototype.RemoveEventListener = function(typ, listener) {
		var e, listener, typ;
		e = this;
		e.p.removeEventListener(typ, listener);
		return e;
	};
	EventDispatcher.prototype.RemoveEventListener = function(typ, listener) { return this.$val.RemoveEventListener(typ, listener); };
	EventDispatcher.ptr.prototype.DispatchEvent = function(event) {
		var e, event;
		e = this;
		e.p.dispatchEvent(event);
		return e;
	};
	EventDispatcher.prototype.DispatchEvent = function(event) { return this.$val.DispatchEvent(event); };
	ExtrudeGeometry.ptr.prototype.JSObject = function() {
		var e;
		e = this;
		return e.Geometry.p;
	};
	ExtrudeGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ExtrudeGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.ExtrudeGeometry;
		return ExtrudeGeometryFromJSObject(p);
	};
	Three.prototype.ExtrudeGeometry = function() { return this.$val.ExtrudeGeometry(); };
	ExtrudeGeometryFromJSObject = function(p) {
		var p;
		return new ExtrudeGeometry.ptr(GeometryFromJSObject(p));
	};
	$pkg.ExtrudeGeometryFromJSObject = ExtrudeGeometryFromJSObject;
	Three.ptr.prototype.NewExtrudeGeometry = function(shapes, opts) {
		var opts, p, shapes, t;
		t = this;
		p = new (t.ctx.ExtrudeGeometry)($externalize($methodVal(shapes, "JSObject"), funcType$1), $externalize(opts, ptrType$17));
		return ExtrudeGeometryFromJSObject(p);
	};
	Three.prototype.NewExtrudeGeometry = function(shapes, opts) { return this.$val.NewExtrudeGeometry(shapes, opts); };
	ExtrudeGeometry.ptr.prototype.GenerateTopUV = function(geometry, indexA, indexB, indexC) {
		var e, geometry, indexA, indexB, indexC;
		e = this;
		e.Geometry.p.generateTopUV(geometry, indexA, indexB, indexC);
		return e;
	};
	ExtrudeGeometry.prototype.GenerateTopUV = function(geometry, indexA, indexB, indexC) { return this.$val.GenerateTopUV(geometry, indexA, indexB, indexC); };
	ExtrudeGeometry.ptr.prototype.GenerateSideWallUV = function(geometry, indexA, indexB, indexC, indexD) {
		var e, geometry, indexA, indexB, indexC, indexD;
		e = this;
		e.Geometry.p.generateSideWallUV(geometry, indexA, indexB, indexC, indexD);
		return e;
	};
	ExtrudeGeometry.prototype.GenerateSideWallUV = function(geometry, indexA, indexB, indexC, indexD) { return this.$val.GenerateSideWallUV(geometry, indexA, indexB, indexC, indexD); };
	ExtrudeGeometry.ptr.prototype.AddShapeList = function(shapes, options) {
		var e, options, shapes;
		e = this;
		e.Geometry.p.addShapeList(shapes, options);
		return e;
	};
	ExtrudeGeometry.prototype.AddShapeList = function(shapes, options) { return this.$val.AddShapeList(shapes, options); };
	ExtrudeGeometry.ptr.prototype.AddShape = function(shape, options) {
		var e, options, shape;
		e = this;
		e.Geometry.p.addShape(shape, options);
		return e;
	};
	ExtrudeGeometry.prototype.AddShape = function(shape, options) { return this.$val.AddShape(shape, options); };
	Face3.ptr.prototype.JSObject = function() {
		var f;
		f = this;
		return f.p;
	};
	Face3.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Face3 = function() {
		var p, t;
		t = this;
		p = t.ctx.Face3;
		return Face3FromJSObject(p);
	};
	Three.prototype.Face3 = function() { return this.$val.Face3(); };
	Face3FromJSObject = function(p) {
		var p;
		return new Face3.ptr(p);
	};
	$pkg.Face3FromJSObject = Face3FromJSObject;
	Three.ptr.prototype.NewFace3 = function(a, b, c, normal, color, materialIndex) {
		var a, b, c, color, materialIndex, normal, p, t;
		t = this;
		p = new (t.ctx.Face3)(a, b, c, $externalize(normal, ptrType$6), $externalize(color, ptrType$2), materialIndex);
		return Face3FromJSObject(p);
	};
	Three.prototype.NewFace3 = function(a, b, c, normal, color, materialIndex) { return this.$val.NewFace3(a, b, c, normal, color, materialIndex); };
	Face3.ptr.prototype.Clone = function() {
		var f;
		f = this;
		f.p.clone();
		return f;
	};
	Face3.prototype.Clone = function() { return this.$val.Clone(); };
	Face3.ptr.prototype.Copy = function(source) {
		var f, source;
		f = this;
		f.p.copy(source.p);
		return f;
	};
	Face3.prototype.Copy = function(source) { return this.$val.Copy(source); };
	Face3.ptr.prototype.Index = function(key) {
		var f, key;
		f = this;
		return $parseInt(f.p[$externalize(key, $String)]) >> 0;
	};
	Face3.prototype.Index = function(key) { return this.$val.Index(key); };
	Face3.ptr.prototype.SetVertexColor = function(index, color) {
		var color, f, index;
		f = this;
		f.p.vertexColors[index] = color.p;
		return f;
	};
	Face3.prototype.SetVertexColor = function(index, color) { return this.$val.SetVertexColor(index, color); };
	FaceNormalsHelper.ptr.prototype.JSObject = function() {
		var f;
		f = this;
		return f.p;
	};
	FaceNormalsHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.FaceNormalsHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.FaceNormalsHelper;
		return FaceNormalsHelperFromJSObject(p);
	};
	Three.prototype.FaceNormalsHelper = function() { return this.$val.FaceNormalsHelper(); };
	FaceNormalsHelperFromJSObject = function(p) {
		var p;
		return new FaceNormalsHelper.ptr(p);
	};
	$pkg.FaceNormalsHelperFromJSObject = FaceNormalsHelperFromJSObject;
	Three.ptr.prototype.NewFaceNormalsHelper = function(object, size, hex, linewidth) {
		var _r, hex, linewidth, object, p, size, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; hex = $f.hex; linewidth = $f.linewidth; object = $f.object; p = $f.p; size = $f.size; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = object.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = new (t.ctx.FaceNormalsHelper)(_r, size, hex, linewidth);
		$s = -1; return FaceNormalsHelperFromJSObject(p);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Three.ptr.prototype.NewFaceNormalsHelper }; } $f._r = _r; $f.hex = hex; $f.linewidth = linewidth; $f.object = object; $f.p = p; $f.size = size; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Three.prototype.NewFaceNormalsHelper = function(object, size, hex, linewidth) { return this.$val.NewFaceNormalsHelper(object, size, hex, linewidth); };
	Fog.ptr.prototype.JSObject = function() {
		var f;
		f = this;
		return f.p;
	};
	Fog.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Fog = function() {
		var p, t;
		t = this;
		p = t.ctx.Fog;
		return FogFromJSObject(p);
	};
	Three.prototype.Fog = function() { return this.$val.Fog(); };
	FogFromJSObject = function(p) {
		var p;
		return new Fog.ptr(p);
	};
	$pkg.FogFromJSObject = FogFromJSObject;
	Three.ptr.prototype.NewFog = function(color, near, far) {
		var color, far, near, p, t;
		t = this;
		p = new (t.ctx.Fog)(color, near, far);
		return FogFromJSObject(p);
	};
	Three.prototype.NewFog = function(color, near, far) { return this.$val.NewFog(color, near, far); };
	FogExp2.ptr.prototype.JSObject = function() {
		var f;
		f = this;
		return f.p;
	};
	FogExp2.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.FogExp2 = function() {
		var p, t;
		t = this;
		p = t.ctx.FogExp2;
		return FogExp2FromJSObject(p);
	};
	Three.prototype.FogExp2 = function() { return this.$val.FogExp2(); };
	FogExp2FromJSObject = function(p) {
		var p;
		return new FogExp2.ptr(p);
	};
	$pkg.FogExp2FromJSObject = FogExp2FromJSObject;
	Three.ptr.prototype.NewFogExp2 = function(color, density) {
		var color, density, p, t;
		t = this;
		p = new (t.ctx.FogExp2)(color, density);
		return FogExp2FromJSObject(p);
	};
	Three.prototype.NewFogExp2 = function(color, density) { return this.$val.NewFogExp2(color, density); };
	Font.ptr.prototype.JSObject = function() {
		var f;
		f = this;
		return f.p;
	};
	Font.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Font = function() {
		var p, t;
		t = this;
		p = t.ctx.Font;
		return FontFromJSObject(p);
	};
	Three.prototype.Font = function() { return this.$val.Font(); };
	FontFromJSObject = function(p) {
		var p;
		return new Font.ptr(p);
	};
	$pkg.FontFromJSObject = FontFromJSObject;
	Three.ptr.prototype.NewFont = function(data) {
		var data, p, t;
		t = this;
		p = new (t.ctx.Font)(data);
		return FontFromJSObject(p);
	};
	Three.prototype.NewFont = function(data) { return this.$val.NewFont(data); };
	Font.ptr.prototype.GenerateShapes = function(text, size, divisions) {
		var divisions, f, size, text;
		f = this;
		f.p.generateShapes(text, size, divisions);
		return f;
	};
	Font.prototype.GenerateShapes = function(text, size, divisions) { return this.$val.GenerateShapes(text, size, divisions); };
	FontLoader.ptr.prototype.JSObject = function() {
		var f;
		f = this;
		return f.p;
	};
	FontLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.FontLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.FontLoader;
		return FontLoaderFromJSObject(p);
	};
	Three.prototype.FontLoader = function() { return this.$val.FontLoader(); };
	FontLoaderFromJSObject = function(p) {
		var p;
		return new FontLoader.ptr(p);
	};
	$pkg.FontLoaderFromJSObject = FontLoaderFromJSObject;
	Three.ptr.prototype.NewFontLoader = function(manager) {
		var manager, p, t;
		t = this;
		p = new (t.ctx.FontLoader)(manager);
		return FontLoaderFromJSObject(p);
	};
	Three.prototype.NewFontLoader = function(manager) { return this.$val.NewFontLoader(manager); };
	FontLoader.ptr.prototype.Load = function(url, onLoad, onProgress, onError) {
		var f, onError, onLoad, onProgress, url;
		f = this;
		f.p.load(url, onLoad, onProgress, onError);
		return f;
	};
	FontLoader.prototype.Load = function(url, onLoad, onProgress, onError) { return this.$val.Load(url, onLoad, onProgress, onError); };
	Frustum.ptr.prototype.JSObject = function() {
		var f;
		f = this;
		return f.p;
	};
	Frustum.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Frustum = function() {
		var p, t;
		t = this;
		p = t.ctx.Frustum;
		return FrustumFromJSObject(p);
	};
	Three.prototype.Frustum = function() { return this.$val.Frustum(); };
	FrustumFromJSObject = function(p) {
		var p;
		return new Frustum.ptr(p);
	};
	$pkg.FrustumFromJSObject = FrustumFromJSObject;
	Three.ptr.prototype.NewFrustum = function(p0, p1, p2, p3, p4, p5) {
		var p, p0, p1, p2, p3, p4, p5, t;
		t = this;
		p = new (t.ctx.Frustum)(p0, p1, p2, p3, p4, p5);
		return FrustumFromJSObject(p);
	};
	Three.prototype.NewFrustum = function(p0, p1, p2, p3, p4, p5) { return this.$val.NewFrustum(p0, p1, p2, p3, p4, p5); };
	Frustum.ptr.prototype.Set = function(p0, p1, p2, p3, p4, p5) {
		var f, p0, p1, p2, p3, p4, p5;
		f = this;
		f.p.set(p0, p1, p2, p3, p4, p5);
		return f;
	};
	Frustum.prototype.Set = function(p0, p1, p2, p3, p4, p5) { return this.$val.Set(p0, p1, p2, p3, p4, p5); };
	Frustum.ptr.prototype.Clone = function() {
		var f;
		f = this;
		f.p.clone();
		return f;
	};
	Frustum.prototype.Clone = function() { return this.$val.Clone(); };
	Frustum.ptr.prototype.Copy = function(frustum) {
		var f, frustum;
		f = this;
		f.p.copy(frustum.p);
		return f;
	};
	Frustum.prototype.Copy = function(frustum) { return this.$val.Copy(frustum); };
	Frustum.ptr.prototype.SetFromMatrix = function(m) {
		var f, m;
		f = this;
		f.p.setFromMatrix(m);
		return f;
	};
	Frustum.prototype.SetFromMatrix = function(m) { return this.$val.SetFromMatrix(m); };
	Frustum.ptr.prototype.IntersectsObject = function() {
		var f;
		f = this;
		f.p.intersectsObject();
		return f;
	};
	Frustum.prototype.IntersectsObject = function() { return this.$val.IntersectsObject(); };
	Frustum.ptr.prototype.IntersectsSphere = function(sphere) {
		var f, sphere;
		f = this;
		f.p.intersectsSphere(sphere);
		return f;
	};
	Frustum.prototype.IntersectsSphere = function(sphere) { return this.$val.IntersectsSphere(sphere); };
	Frustum.ptr.prototype.IntersectsBox = function() {
		var f;
		f = this;
		f.p.intersectsBox();
		return f;
	};
	Frustum.prototype.IntersectsBox = function() { return this.$val.IntersectsBox(); };
	Frustum.ptr.prototype.ContainsPoint = function(point) {
		var f, point;
		f = this;
		f.p.containsPoint(point);
		return f;
	};
	Frustum.prototype.ContainsPoint = function(point) { return this.$val.ContainsPoint(point); };
	Geometry.ptr.prototype.JSObject = function() {
		var g;
		g = this;
		return g.p;
	};
	Geometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Geometry = function() {
		var p, t;
		t = this;
		p = t.ctx.Geometry;
		return GeometryFromJSObject(p);
	};
	Three.prototype.Geometry = function() { return this.$val.Geometry(); };
	GeometryFromJSObject = function(p) {
		var p;
		return new Geometry.ptr(p);
	};
	$pkg.GeometryFromJSObject = GeometryFromJSObject;
	Three.ptr.prototype.NewGeometry = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Geometry)();
		return GeometryFromJSObject(p);
	};
	Three.prototype.NewGeometry = function() { return this.$val.NewGeometry(); };
	Geometry.ptr.prototype.ApplyMatrix = function(matrix) {
		var g, matrix;
		g = this;
		g.p.applyMatrix(matrix);
		return g;
	};
	Geometry.prototype.ApplyMatrix = function(matrix) { return this.$val.ApplyMatrix(matrix); };
	Geometry.ptr.prototype.RotateX = function() {
		var g;
		g = this;
		g.p.rotateX();
		return g;
	};
	Geometry.prototype.RotateX = function() { return this.$val.RotateX(); };
	Geometry.ptr.prototype.RotateY = function() {
		var g;
		g = this;
		g.p.rotateY();
		return g;
	};
	Geometry.prototype.RotateY = function() { return this.$val.RotateY(); };
	Geometry.ptr.prototype.RotateZ = function() {
		var g;
		g = this;
		g.p.rotateZ();
		return g;
	};
	Geometry.prototype.RotateZ = function() { return this.$val.RotateZ(); };
	Geometry.ptr.prototype.Translate = function() {
		var g;
		g = this;
		g.p.translate();
		return g;
	};
	Geometry.prototype.Translate = function() { return this.$val.Translate(); };
	Geometry.ptr.prototype.Scale = function() {
		var g;
		g = this;
		g.p.scale();
		return g;
	};
	Geometry.prototype.Scale = function() { return this.$val.Scale(); };
	Geometry.ptr.prototype.LookAt = function() {
		var g;
		g = this;
		g.p.lookAt();
		return g;
	};
	Geometry.prototype.LookAt = function() { return this.$val.LookAt(); };
	Geometry.ptr.prototype.FromBufferGeometry = function(geometry) {
		var g, geometry;
		g = this;
		g.p.fromBufferGeometry(geometry);
		return g;
	};
	Geometry.prototype.FromBufferGeometry = function(geometry) { return this.$val.FromBufferGeometry(geometry); };
	Geometry.ptr.prototype.Center = function() {
		var g;
		g = this;
		g.p.center();
		return g;
	};
	Geometry.prototype.Center = function() { return this.$val.Center(); };
	Geometry.ptr.prototype.Normalize = function() {
		var g;
		g = this;
		g.p.normalize();
		return g;
	};
	Geometry.prototype.Normalize = function() { return this.$val.Normalize(); };
	Geometry.ptr.prototype.ComputeFaceNormals = function() {
		var g;
		g = this;
		g.p.computeFaceNormals();
		return g;
	};
	Geometry.prototype.ComputeFaceNormals = function() { return this.$val.ComputeFaceNormals(); };
	Geometry.ptr.prototype.ComputeVertexNormals = function(areaWeighted) {
		var areaWeighted, g;
		g = this;
		g.p.computeVertexNormals($externalize(areaWeighted, $Bool));
		return g;
	};
	Geometry.prototype.ComputeVertexNormals = function(areaWeighted) { return this.$val.ComputeVertexNormals(areaWeighted); };
	Geometry.ptr.prototype.ComputeMorphNormals = function() {
		var g;
		g = this;
		g.p.computeMorphNormals();
		return g;
	};
	Geometry.prototype.ComputeMorphNormals = function() { return this.$val.ComputeMorphNormals(); };
	Geometry.ptr.prototype.ComputeTangents = function() {
		var g;
		g = this;
		g.p.computeTangents();
		return g;
	};
	Geometry.prototype.ComputeTangents = function() { return this.$val.ComputeTangents(); };
	Geometry.ptr.prototype.ComputeLineDistances = function() {
		var g;
		g = this;
		g.p.computeLineDistances();
		return g;
	};
	Geometry.prototype.ComputeLineDistances = function() { return this.$val.ComputeLineDistances(); };
	Geometry.ptr.prototype.ComputeBoundingBox = function() {
		var g;
		g = this;
		g.p.computeBoundingBox();
		return g;
	};
	Geometry.prototype.ComputeBoundingBox = function() { return this.$val.ComputeBoundingBox(); };
	Geometry.ptr.prototype.ComputeBoundingSphere = function() {
		var g;
		g = this;
		g.p.computeBoundingSphere();
		return g;
	};
	Geometry.prototype.ComputeBoundingSphere = function() { return this.$val.ComputeBoundingSphere(); };
	Geometry.ptr.prototype.Merge = function(geometry, matrix, materialIndexOffset) {
		var g, geometry, materialIndexOffset, matrix;
		g = this;
		g.p.merge(geometry, matrix, materialIndexOffset);
		return g;
	};
	Geometry.prototype.Merge = function(geometry, matrix, materialIndexOffset) { return this.$val.Merge(geometry, matrix, materialIndexOffset); };
	Geometry.ptr.prototype.MergeMesh = function(mesh) {
		var g, mesh;
		g = this;
		g.p.mergeMesh(mesh);
		return g;
	};
	Geometry.prototype.MergeMesh = function(mesh) { return this.$val.MergeMesh(mesh); };
	Geometry.ptr.prototype.MergeVertices = function() {
		var g;
		g = this;
		g.p.mergeVertices();
		return g;
	};
	Geometry.prototype.MergeVertices = function() { return this.$val.MergeVertices(); };
	Geometry.ptr.prototype.SortFacesByMaterialIndex = function() {
		var g;
		g = this;
		g.p.sortFacesByMaterialIndex();
		return g;
	};
	Geometry.prototype.SortFacesByMaterialIndex = function() { return this.$val.SortFacesByMaterialIndex(); };
	Geometry.ptr.prototype.ToJSON = function() {
		var g;
		g = this;
		g.p.toJSON();
		return g;
	};
	Geometry.prototype.ToJSON = function() { return this.$val.ToJSON(); };
	Geometry.ptr.prototype.Clone = function() {
		var g;
		g = this;
		g.p.clone();
		return g;
	};
	Geometry.prototype.Clone = function() { return this.$val.Clone(); };
	Geometry.ptr.prototype.Copy = function(source) {
		var g, source;
		g = this;
		g.p.copy(source.p);
		return g;
	};
	Geometry.prototype.Copy = function(source) { return this.$val.Copy(source); };
	Geometry.ptr.prototype.Dispose = function() {
		var g;
		g = this;
		g.p.dispose();
		return g;
	};
	Geometry.prototype.Dispose = function() { return this.$val.Dispose(); };
	Geometry.ptr.prototype.Faces = function() {
		var faces, g, i, result;
		g = this;
		result = sliceType$16.nil;
		faces = g.p.faces;
		i = 0;
		while (true) {
			if (!(i < $parseInt(faces.length))) { break; }
			result = $append(result, Face3FromJSObject(faces[i]));
			i = i + (1) >> 0;
		}
		return result;
	};
	Geometry.prototype.Faces = function() { return this.$val.Faces(); };
	Geometry.ptr.prototype.Vertex = function(index) {
		var g, index;
		g = this;
		return Vector3FromJSObject(g.p.vertices[index]);
	};
	Geometry.prototype.Vertex = function(index) { return this.$val.Vertex(index); };
	Geometry.ptr.prototype.VerticesLength = function() {
		var g;
		g = this;
		return $parseInt(g.p.vertices.length);
	};
	Geometry.prototype.VerticesLength = function() { return this.$val.VerticesLength(); };
	Geometry.ptr.prototype.Vertices = function() {
		var g, i, result, vertices;
		g = this;
		result = sliceType$10.nil;
		vertices = g.p.vertices;
		i = 0;
		while (true) {
			if (!(i < $parseInt(vertices.length))) { break; }
			result = $append(result, Vector3FromJSObject(vertices[i]));
			i = i + (1) >> 0;
		}
		return result;
	};
	Geometry.prototype.Vertices = function() { return this.$val.Vertices(); };
	Geometry.ptr.prototype.SetVertices = function(pts) {
		var g, pts;
		g = this;
		g.p.vertices = pts;
		return g;
	};
	Geometry.prototype.SetVertices = function(pts) { return this.$val.SetVertices(pts); };
	Geometry.ptr.prototype.BoundingBox = function() {
		var g;
		g = this;
		return Box3FromJSObject(g.p.boundingBox);
	};
	Geometry.prototype.BoundingBox = function() { return this.$val.BoundingBox(); };
	GridHelper.ptr.prototype.JSObject = function() {
		var g;
		g = this;
		return g.p;
	};
	GridHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.GridHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.GridHelper;
		return GridHelperFromJSObject(p);
	};
	Three.prototype.GridHelper = function() { return this.$val.GridHelper(); };
	GridHelperFromJSObject = function(p) {
		var p;
		return new GridHelper.ptr(p);
	};
	$pkg.GridHelperFromJSObject = GridHelperFromJSObject;
	Three.ptr.prototype.NewGridHelper = function(size, step) {
		var p, size, step, t;
		t = this;
		p = new (t.ctx.GridHelper)(size, step);
		return GridHelperFromJSObject(p);
	};
	Three.prototype.NewGridHelper = function(size, step) { return this.$val.NewGridHelper(size, step); };
	GridHelper.ptr.prototype.SetColors = function(colorCenterLine, colorGrid) {
		var colorCenterLine, colorGrid, g;
		g = this;
		g.p.setColors(colorCenterLine, colorGrid);
		return g;
	};
	GridHelper.prototype.SetColors = function(colorCenterLine, colorGrid) { return this.$val.SetColors(colorCenterLine, colorGrid); };
	Group.ptr.prototype.JSObject = function() {
		var g;
		g = this;
		return g.Object3D.p;
	};
	Group.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Group = function() {
		var p, t;
		t = this;
		p = t.ctx.Group;
		return GroupFromJSObject(p);
	};
	Three.prototype.Group = function() { return this.$val.Group(); };
	GroupFromJSObject = function(p) {
		var p;
		return new Group.ptr(Object3DFromJSObject(p));
	};
	$pkg.GroupFromJSObject = GroupFromJSObject;
	Three.ptr.prototype.NewGroup = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Group)();
		return GroupFromJSObject(p);
	};
	Three.prototype.NewGroup = function() { return this.$val.NewGroup(); };
	HemisphereLight.ptr.prototype.JSObject = function() {
		var h;
		h = this;
		return h.Light.Object3D.p;
	};
	HemisphereLight.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.HemisphereLight = function() {
		var t;
		t = this;
		return HemisphereLightFromJSObject(t.ctx.HemisphereLight);
	};
	Three.prototype.HemisphereLight = function() { return this.$val.HemisphereLight(); };
	HemisphereLightFromJSObject = function(p) {
		var p;
		return new HemisphereLight.ptr(new Light.ptr(new Object3D.ptr(p)));
	};
	$pkg.HemisphereLightFromJSObject = HemisphereLightFromJSObject;
	Three.ptr.prototype.NewHemisphereLight = function(skyColor, groundColor, intensity) {
		var groundColor, intensity, skyColor, t;
		t = this;
		return HemisphereLightFromJSObject(new (t.ctx.HemisphereLight)(skyColor, groundColor, intensity));
	};
	Three.prototype.NewHemisphereLight = function(skyColor, groundColor, intensity) { return this.$val.NewHemisphereLight(skyColor, groundColor, intensity); };
	HemisphereLight.ptr.prototype.Copy = function(source) {
		var h, source;
		h = this;
		h.Light.Object3D.p.copy(source.Light.Object3D.p);
		return h;
	};
	HemisphereLight.prototype.Copy = function(source) { return this.$val.Copy(source); };
	HemisphereLightHelper.ptr.prototype.JSObject = function() {
		var h;
		h = this;
		return h.p;
	};
	HemisphereLightHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.HemisphereLightHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.HemisphereLightHelper;
		return HemisphereLightHelperFromJSObject(p);
	};
	Three.prototype.HemisphereLightHelper = function() { return this.$val.HemisphereLightHelper(); };
	HemisphereLightHelperFromJSObject = function(p) {
		var p;
		return new HemisphereLightHelper.ptr(p);
	};
	$pkg.HemisphereLightHelperFromJSObject = HemisphereLightHelperFromJSObject;
	Three.ptr.prototype.NewHemisphereLightHelper = function(light, sphereSize) {
		var light, p, sphereSize, t;
		t = this;
		p = new (t.ctx.HemisphereLightHelper)(light, sphereSize);
		return HemisphereLightHelperFromJSObject(p);
	};
	Three.prototype.NewHemisphereLightHelper = function(light, sphereSize) { return this.$val.NewHemisphereLightHelper(light, sphereSize); };
	IcosahedronGeometry.ptr.prototype.JSObject = function() {
		var i;
		i = this;
		return i.PolyhedronGeometry.Geometry.p;
	};
	IcosahedronGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.IcosahedronGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.IcosahedronGeometry;
		return IcosahedronGeometryFromJSObject(p);
	};
	Three.prototype.IcosahedronGeometry = function() { return this.$val.IcosahedronGeometry(); };
	IcosahedronGeometryFromJSObject = function(p) {
		var p;
		return new IcosahedronGeometry.ptr(PolyhedronGeometryFromJSObject(p));
	};
	$pkg.IcosahedronGeometryFromJSObject = IcosahedronGeometryFromJSObject;
	Three.ptr.prototype.NewIcosahedronGeometry = function(radius, detail) {
		var detail, p, radius, t;
		t = this;
		p = new (t.ctx.IcosahedronGeometry)(radius, detail);
		return IcosahedronGeometryFromJSObject(p);
	};
	Three.prototype.NewIcosahedronGeometry = function(radius, detail) { return this.$val.NewIcosahedronGeometry(radius, detail); };
	ImageLoader.ptr.prototype.JSObject = function() {
		var i;
		i = this;
		return i.p;
	};
	ImageLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ImageLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.ImageLoader;
		return ImageLoaderFromJSObject(p);
	};
	Three.prototype.ImageLoader = function() { return this.$val.ImageLoader(); };
	ImageLoaderFromJSObject = function(p) {
		var p;
		return new ImageLoader.ptr(p);
	};
	$pkg.ImageLoaderFromJSObject = ImageLoaderFromJSObject;
	Three.ptr.prototype.NewImageLoader = function(manager) {
		var manager, p, t;
		t = this;
		p = new (t.ctx.ImageLoader)(manager);
		return ImageLoaderFromJSObject(p);
	};
	Three.prototype.NewImageLoader = function(manager) { return this.$val.NewImageLoader(manager); };
	ImageLoader.ptr.prototype.Load = function(url, onLoad, onProgress, onError) {
		var i, onError, onLoad, onProgress, url;
		i = this;
		i.p.load(url, onLoad, onProgress, onError);
		return i;
	};
	ImageLoader.prototype.Load = function(url, onLoad, onProgress, onError) { return this.$val.Load(url, onLoad, onProgress, onError); };
	ImageLoader.ptr.prototype.SetCrossOrigin = function(value) {
		var i, value;
		i = this;
		i.p.setCrossOrigin(value);
		return i;
	};
	ImageLoader.prototype.SetCrossOrigin = function(value) { return this.$val.SetCrossOrigin(value); };
	ImageLoader.ptr.prototype.SetPath = function(value) {
		var i, value;
		i = this;
		i.p.setPath(value);
		return i;
	};
	ImageLoader.prototype.SetPath = function(value) { return this.$val.SetPath(value); };
	ImmediateRenderObject.ptr.prototype.JSObject = function() {
		var i;
		i = this;
		return i.p;
	};
	ImmediateRenderObject.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ImmediateRenderObject = function() {
		var p, t;
		t = this;
		p = t.ctx.ImmediateRenderObject;
		return ImmediateRenderObjectFromJSObject(p);
	};
	Three.prototype.ImmediateRenderObject = function() { return this.$val.ImmediateRenderObject(); };
	ImmediateRenderObjectFromJSObject = function(p) {
		var p;
		return new ImmediateRenderObject.ptr(p);
	};
	$pkg.ImmediateRenderObjectFromJSObject = ImmediateRenderObjectFromJSObject;
	Three.ptr.prototype.NewImmediateRenderObject = function(material) {
		var material, p, t;
		t = this;
		p = new (t.ctx.ImmediateRenderObject)(material);
		return ImmediateRenderObjectFromJSObject(p);
	};
	Three.prototype.NewImmediateRenderObject = function(material) { return this.$val.NewImmediateRenderObject(material); };
	InstancedBufferAttribute.ptr.prototype.JSObject = function() {
		var i;
		i = this;
		return i.p;
	};
	InstancedBufferAttribute.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.InstancedBufferAttribute = function() {
		var p, t;
		t = this;
		p = t.ctx.InstancedBufferAttribute;
		return InstancedBufferAttributeFromJSObject(p);
	};
	Three.prototype.InstancedBufferAttribute = function() { return this.$val.InstancedBufferAttribute(); };
	InstancedBufferAttributeFromJSObject = function(p) {
		var p;
		return new InstancedBufferAttribute.ptr(p);
	};
	$pkg.InstancedBufferAttributeFromJSObject = InstancedBufferAttributeFromJSObject;
	Three.ptr.prototype.NewInstancedBufferAttribute = function(array, itemSize, meshPerAttribute) {
		var array, itemSize, meshPerAttribute, p, t;
		t = this;
		p = new (t.ctx.InstancedBufferAttribute)(array, itemSize, meshPerAttribute);
		return InstancedBufferAttributeFromJSObject(p);
	};
	Three.prototype.NewInstancedBufferAttribute = function(array, itemSize, meshPerAttribute) { return this.$val.NewInstancedBufferAttribute(array, itemSize, meshPerAttribute); };
	InstancedBufferAttribute.ptr.prototype.Copy = function(source) {
		var i, source;
		i = this;
		i.p.copy(source.p);
		return i;
	};
	InstancedBufferAttribute.prototype.Copy = function(source) { return this.$val.Copy(source); };
	InstancedBufferGeometry.ptr.prototype.JSObject = function() {
		var i;
		i = this;
		return i.p;
	};
	InstancedBufferGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.InstancedBufferGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.InstancedBufferGeometry;
		return InstancedBufferGeometryFromJSObject(p);
	};
	Three.prototype.InstancedBufferGeometry = function() { return this.$val.InstancedBufferGeometry(); };
	InstancedBufferGeometryFromJSObject = function(p) {
		var p;
		return new InstancedBufferGeometry.ptr(p);
	};
	$pkg.InstancedBufferGeometryFromJSObject = InstancedBufferGeometryFromJSObject;
	Three.ptr.prototype.NewInstancedBufferGeometry = function() {
		var p, t;
		t = this;
		p = new (t.ctx.InstancedBufferGeometry)();
		return InstancedBufferGeometryFromJSObject(p);
	};
	Three.prototype.NewInstancedBufferGeometry = function() { return this.$val.NewInstancedBufferGeometry(); };
	InstancedBufferGeometry.ptr.prototype.AddGroup = function(start, count, instances) {
		var count, i, instances, start;
		i = this;
		i.p.addGroup(start, count, instances);
		return i;
	};
	InstancedBufferGeometry.prototype.AddGroup = function(start, count, instances) { return this.$val.AddGroup(start, count, instances); };
	InstancedBufferGeometry.ptr.prototype.Copy = function(source) {
		var i, source;
		i = this;
		i.p.copy(source.p);
		return i;
	};
	InstancedBufferGeometry.prototype.Copy = function(source) { return this.$val.Copy(source); };
	InstancedInterleavedBuffer.ptr.prototype.JSObject = function() {
		var i;
		i = this;
		return i.p;
	};
	InstancedInterleavedBuffer.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.InstancedInterleavedBuffer = function() {
		var p, t;
		t = this;
		p = t.ctx.InstancedInterleavedBuffer;
		return InstancedInterleavedBufferFromJSObject(p);
	};
	Three.prototype.InstancedInterleavedBuffer = function() { return this.$val.InstancedInterleavedBuffer(); };
	InstancedInterleavedBufferFromJSObject = function(p) {
		var p;
		return new InstancedInterleavedBuffer.ptr(p);
	};
	$pkg.InstancedInterleavedBufferFromJSObject = InstancedInterleavedBufferFromJSObject;
	Three.ptr.prototype.NewInstancedInterleavedBuffer = function(array, stride, meshPerAttribute) {
		var array, meshPerAttribute, p, stride, t;
		t = this;
		p = new (t.ctx.InstancedInterleavedBuffer)(array, stride, meshPerAttribute);
		return InstancedInterleavedBufferFromJSObject(p);
	};
	Three.prototype.NewInstancedInterleavedBuffer = function(array, stride, meshPerAttribute) { return this.$val.NewInstancedInterleavedBuffer(array, stride, meshPerAttribute); };
	InstancedInterleavedBuffer.ptr.prototype.Copy = function(source) {
		var i, source;
		i = this;
		i.p.copy(source.p);
		return i;
	};
	InstancedInterleavedBuffer.prototype.Copy = function(source) { return this.$val.Copy(source); };
	InterleavedBuffer.ptr.prototype.JSObject = function() {
		var i;
		i = this;
		return i.p;
	};
	InterleavedBuffer.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.InterleavedBuffer = function() {
		var p, t;
		t = this;
		p = t.ctx.InterleavedBuffer;
		return InterleavedBufferFromJSObject(p);
	};
	Three.prototype.InterleavedBuffer = function() { return this.$val.InterleavedBuffer(); };
	InterleavedBufferFromJSObject = function(p) {
		var p;
		return new InterleavedBuffer.ptr(p);
	};
	$pkg.InterleavedBufferFromJSObject = InterleavedBufferFromJSObject;
	Three.ptr.prototype.NewInterleavedBuffer = function(array, stride) {
		var array, p, stride, t;
		t = this;
		p = new (t.ctx.InterleavedBuffer)(array, stride);
		return InterleavedBufferFromJSObject(p);
	};
	Three.prototype.NewInterleavedBuffer = function(array, stride) { return this.$val.NewInterleavedBuffer(array, stride); };
	InterleavedBuffer.ptr.prototype.Length = function() {
		var i;
		i = this;
		return $parseFloat(i.p.length);
	};
	InterleavedBuffer.prototype.Length = function() { return this.$val.Length(); };
	InterleavedBuffer.ptr.prototype.Count = function() {
		var i;
		i = this;
		return $parseFloat(i.p.count);
	};
	InterleavedBuffer.prototype.Count = function() { return this.$val.Count(); };
	InterleavedBuffer.ptr.prototype.SetNeedsUpdate = function(value) {
		var i, value;
		i = this;
		i.p.needsUpdate = value;
		return i;
	};
	InterleavedBuffer.prototype.SetNeedsUpdate = function(value) { return this.$val.SetNeedsUpdate(value); };
	InterleavedBuffer.ptr.prototype.SetDynamic = function(value) {
		var i, value;
		i = this;
		i.p.setDynamic(value);
		return i;
	};
	InterleavedBuffer.prototype.SetDynamic = function(value) { return this.$val.SetDynamic(value); };
	InterleavedBuffer.ptr.prototype.Copy = function(source) {
		var i, source;
		i = this;
		i.p.copy(source.p);
		return i;
	};
	InterleavedBuffer.prototype.Copy = function(source) { return this.$val.Copy(source); };
	InterleavedBuffer.ptr.prototype.CopyAt = function(index1, attribute, index2) {
		var attribute, i, index1, index2;
		i = this;
		i.p.copyAt(index1, attribute, index2);
		return i;
	};
	InterleavedBuffer.prototype.CopyAt = function(index1, attribute, index2) { return this.$val.CopyAt(index1, attribute, index2); };
	InterleavedBuffer.ptr.prototype.Set = function(value, offset) {
		var i, offset, value;
		i = this;
		i.p.set(value, offset);
		return i;
	};
	InterleavedBuffer.prototype.Set = function(value, offset) { return this.$val.Set(value, offset); };
	InterleavedBuffer.ptr.prototype.Clone = function() {
		var i;
		i = this;
		i.p.clone();
		return i;
	};
	InterleavedBuffer.prototype.Clone = function() { return this.$val.Clone(); };
	InterleavedBufferAttribute.ptr.prototype.JSObject = function() {
		var i;
		i = this;
		return i.p;
	};
	InterleavedBufferAttribute.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.InterleavedBufferAttribute = function() {
		var p, t;
		t = this;
		p = t.ctx.InterleavedBufferAttribute;
		return InterleavedBufferAttributeFromJSObject(p);
	};
	Three.prototype.InterleavedBufferAttribute = function() { return this.$val.InterleavedBufferAttribute(); };
	InterleavedBufferAttributeFromJSObject = function(p) {
		var p;
		return new InterleavedBufferAttribute.ptr(p);
	};
	$pkg.InterleavedBufferAttributeFromJSObject = InterleavedBufferAttributeFromJSObject;
	Three.ptr.prototype.NewInterleavedBufferAttribute = function(interleavedBuffer, itemSize, offset) {
		var interleavedBuffer, itemSize, offset, p, t;
		t = this;
		p = new (t.ctx.InterleavedBufferAttribute)(interleavedBuffer, itemSize, offset);
		return InterleavedBufferAttributeFromJSObject(p);
	};
	Three.prototype.NewInterleavedBufferAttribute = function(interleavedBuffer, itemSize, offset) { return this.$val.NewInterleavedBufferAttribute(interleavedBuffer, itemSize, offset); };
	InterleavedBufferAttribute.ptr.prototype.Length = function() {
		var i;
		i = this;
		return $parseFloat(i.p.length);
	};
	InterleavedBufferAttribute.prototype.Length = function() { return this.$val.Length(); };
	InterleavedBufferAttribute.ptr.prototype.Count = function() {
		var i;
		i = this;
		return $parseFloat(i.p.count);
	};
	InterleavedBufferAttribute.prototype.Count = function() { return this.$val.Count(); };
	InterleavedBufferAttribute.ptr.prototype.SetX = function(index, x) {
		var i, index, x;
		i = this;
		i.p.setX(index, x);
		return i;
	};
	InterleavedBufferAttribute.prototype.SetX = function(index, x) { return this.$val.SetX(index, x); };
	InterleavedBufferAttribute.ptr.prototype.SetY = function(index, y) {
		var i, index, y;
		i = this;
		i.p.setY(index, y);
		return i;
	};
	InterleavedBufferAttribute.prototype.SetY = function(index, y) { return this.$val.SetY(index, y); };
	InterleavedBufferAttribute.ptr.prototype.SetZ = function(index, z) {
		var i, index, z;
		i = this;
		i.p.setZ(index, z);
		return i;
	};
	InterleavedBufferAttribute.prototype.SetZ = function(index, z) { return this.$val.SetZ(index, z); };
	InterleavedBufferAttribute.ptr.prototype.SetW = function(index, w) {
		var i, index, w;
		i = this;
		i.p.setW(index, w);
		return i;
	};
	InterleavedBufferAttribute.prototype.SetW = function(index, w) { return this.$val.SetW(index, w); };
	InterleavedBufferAttribute.ptr.prototype.GetX = function(index) {
		var i, index;
		i = this;
		i.p.getX(index);
		return i;
	};
	InterleavedBufferAttribute.prototype.GetX = function(index) { return this.$val.GetX(index); };
	InterleavedBufferAttribute.ptr.prototype.GetY = function(index) {
		var i, index;
		i = this;
		i.p.getY(index);
		return i;
	};
	InterleavedBufferAttribute.prototype.GetY = function(index) { return this.$val.GetY(index); };
	InterleavedBufferAttribute.ptr.prototype.GetZ = function(index) {
		var i, index;
		i = this;
		i.p.getZ(index);
		return i;
	};
	InterleavedBufferAttribute.prototype.GetZ = function(index) { return this.$val.GetZ(index); };
	InterleavedBufferAttribute.ptr.prototype.GetW = function(index) {
		var i, index;
		i = this;
		i.p.getW(index);
		return i;
	};
	InterleavedBufferAttribute.prototype.GetW = function(index) { return this.$val.GetW(index); };
	InterleavedBufferAttribute.ptr.prototype.SetXY = function(index, x, y) {
		var i, index, x, y;
		i = this;
		i.p.setXY(index, x, y);
		return i;
	};
	InterleavedBufferAttribute.prototype.SetXY = function(index, x, y) { return this.$val.SetXY(index, x, y); };
	InterleavedBufferAttribute.ptr.prototype.SetXYZ = function(index, x, y, z) {
		var i, index, x, y, z;
		i = this;
		i.p.setXYZ(index, x, y, z);
		return i;
	};
	InterleavedBufferAttribute.prototype.SetXYZ = function(index, x, y, z) { return this.$val.SetXYZ(index, x, y, z); };
	InterleavedBufferAttribute.ptr.prototype.SetXYZW = function(index, x, y, z, w) {
		var i, index, w, x, y, z;
		i = this;
		i.p.setXYZW(index, x, y, z, w);
		return i;
	};
	InterleavedBufferAttribute.prototype.SetXYZW = function(index, x, y, z, w) { return this.$val.SetXYZW(index, x, y, z, w); };
	Interpolant.ptr.prototype.JSObject = function() {
		var i;
		i = this;
		return i.p;
	};
	Interpolant.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Interpolant = function() {
		var p, t;
		t = this;
		p = t.ctx.Interpolant;
		return InterpolantFromJSObject(p);
	};
	Three.prototype.Interpolant = function() { return this.$val.Interpolant(); };
	InterpolantFromJSObject = function(p) {
		var p;
		return new Interpolant.ptr(p);
	};
	$pkg.InterpolantFromJSObject = InterpolantFromJSObject;
	Three.ptr.prototype.NewInterpolant = function(parameterPositions, sampleValues, sampleSize, resultBuffer) {
		var p, parameterPositions, resultBuffer, sampleSize, sampleValues, t;
		t = this;
		p = new (t.ctx.Interpolant)(parameterPositions, sampleValues, sampleSize, resultBuffer);
		return InterpolantFromJSObject(p);
	};
	Three.prototype.NewInterpolant = function(parameterPositions, sampleValues, sampleSize, resultBuffer) { return this.$val.NewInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer); };
	Interpolant.ptr.prototype.Evaluate = function(t) {
		var i, t;
		i = this;
		i.p.evaluate(t);
		return i;
	};
	Interpolant.prototype.Evaluate = function(t) { return this.$val.Evaluate(t); };
	Interpolant.ptr.prototype.GetSettings = function() {
		var i;
		i = this;
		i.p.getSettings_();
		return i;
	};
	Interpolant.prototype.GetSettings = function() { return this.$val.GetSettings(); };
	Interpolant.ptr.prototype.CopySampleValue = function(index) {
		var i, index;
		i = this;
		i.p.copySampleValue_(index);
		return i;
	};
	Interpolant.prototype.CopySampleValue = function(index) { return this.$val.CopySampleValue(index); };
	Interpolant.ptr.prototype.Interpolate = function(i1, t0, t, t1) {
		var i, i1, t, t0, t1;
		i = this;
		i.p.interpolate_(i1, t0, t, t1);
		return i;
	};
	Interpolant.prototype.Interpolate = function(i1, t0, t, t1) { return this.$val.Interpolate(i1, t0, t, t1); };
	Interpolant.ptr.prototype.IntervalChanged = function(i1, t0, t1) {
		var i, i1, t0, t1;
		i = this;
		i.p.intervalChanged_(i1, t0, t1);
		return i;
	};
	Interpolant.prototype.IntervalChanged = function(i1, t0, t1) { return this.$val.IntervalChanged(i1, t0, t1); };
	JSONLoader.ptr.prototype.JSObject = function() {
		var j;
		j = this;
		return j.p;
	};
	JSONLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.JSONLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.JSONLoader;
		return JSONLoaderFromJSObject(p);
	};
	Three.prototype.JSONLoader = function() { return this.$val.JSONLoader(); };
	JSONLoaderFromJSObject = function(p) {
		var p;
		return new JSONLoader.ptr(p);
	};
	$pkg.JSONLoaderFromJSObject = JSONLoaderFromJSObject;
	Three.ptr.prototype.NewJSONLoader = function() {
		var p, t;
		t = this;
		p = new (t.ctx.JSONLoader)();
		return JSONLoaderFromJSObject(p);
	};
	Three.prototype.NewJSONLoader = function() { return this.$val.NewJSONLoader(); };
	JSONLoader.ptr.prototype.StatusDomElement = function() {
		var j;
		j = this;
		return $parseFloat(j.p.statusDomElement);
	};
	JSONLoader.prototype.StatusDomElement = function() { return this.$val.StatusDomElement(); };
	onJSONLoadWrapperFunc = function(onLoad) {
		var onLoad;
		return (function $b(geom, materialArray) {
			var geom, i, materialArray, materials, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; geom = $f.geom; i = $f.i; materialArray = $f.materialArray; materials = $f.materials; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			materials = sliceType$12.nil;
			if (!(materialArray === null) && !(materialArray === undefined)) {
				i = 0;
				while (true) {
					if (!(i < $parseInt(materialArray.length))) { break; }
					materials = $append(materials, MaterialFromJSObject(materialArray[i]));
					i = i + (1) >> 0;
				}
			}
			$r = onLoad(GeometryFromJSObject(geom), materials); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.geom = geom; $f.i = i; $f.materialArray = materialArray; $f.materials = materials; $f.$s = $s; $f.$r = $r; return $f;
		});
	};
	JSONLoader.ptr.prototype.Load = function(url, onLoad, onProgress, onError) {
		var j, onError, onLoad, onLoadWrapper, onProgress, url;
		j = this;
		onLoadWrapper = $throwNilPointerError;
		if (!(onLoad === $throwNilPointerError)) {
			onLoadWrapper = onJSONLoadWrapperFunc(onLoad);
		}
		if (!($interfaceIsEqual(onProgress, $ifaceNil)) && !($interfaceIsEqual(onError, $ifaceNil))) {
			j.p.load($externalize(url, $String), $externalize(onLoadWrapper, funcType), $externalize(onProgress, $emptyInterface), $externalize(onError, $emptyInterface));
		} else if (!($interfaceIsEqual(onProgress, $ifaceNil))) {
			j.p.load($externalize(url, $String), $externalize(onLoadWrapper, funcType), $externalize(onProgress, $emptyInterface));
		} else {
			j.p.load($externalize(url, $String), $externalize(onLoadWrapper, funcType));
		}
		return j;
	};
	JSONLoader.prototype.Load = function(url, onLoad, onProgress, onError) { return this.$val.Load(url, onLoad, onProgress, onError); };
	JSONLoader.ptr.prototype.SetTexturePath = function(value) {
		var j, value;
		j = this;
		j.p.setTexturePath(value);
		return j;
	};
	JSONLoader.prototype.SetTexturePath = function(value) { return this.$val.SetTexturePath(value); };
	JSONLoader.ptr.prototype.Parse = function(json, texturePath) {
		var j, json, texturePath;
		j = this;
		j.p.parse(json, texturePath);
		return j;
	};
	JSONLoader.prototype.Parse = function(json, texturePath) { return this.$val.Parse(json, texturePath); };
	KeyframeTrack.ptr.prototype.JSObject = function() {
		var k;
		k = this;
		return k.p;
	};
	KeyframeTrack.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.KeyframeTrack = function() {
		var p, t;
		t = this;
		p = t.ctx.KeyframeTrack;
		return KeyframeTrackFromJSObject(p);
	};
	Three.prototype.KeyframeTrack = function() { return this.$val.KeyframeTrack(); };
	KeyframeTrackFromJSObject = function(p) {
		var p;
		return new KeyframeTrack.ptr(p);
	};
	$pkg.KeyframeTrackFromJSObject = KeyframeTrackFromJSObject;
	Three.ptr.prototype.NewKeyframeTrack = function(name, times, values, interpolation) {
		var interpolation, name, p, t, times, values;
		t = this;
		p = new (t.ctx.KeyframeTrack)(name, times, values, interpolation);
		return KeyframeTrackFromJSObject(p);
	};
	Three.prototype.NewKeyframeTrack = function(name, times, values, interpolation) { return this.$val.NewKeyframeTrack(name, times, values, interpolation); };
	KeyframeTrack.ptr.prototype.InterpolantFactoryMethodDiscrete = function(result) {
		var k, result;
		k = this;
		k.p.InterpolantFactoryMethodDiscrete(result);
		return k;
	};
	KeyframeTrack.prototype.InterpolantFactoryMethodDiscrete = function(result) { return this.$val.InterpolantFactoryMethodDiscrete(result); };
	KeyframeTrack.ptr.prototype.InterpolantFactoryMethodLinear = function(result) {
		var k, result;
		k = this;
		k.p.InterpolantFactoryMethodLinear(result);
		return k;
	};
	KeyframeTrack.prototype.InterpolantFactoryMethodLinear = function(result) { return this.$val.InterpolantFactoryMethodLinear(result); };
	KeyframeTrack.ptr.prototype.InterpolantFactoryMethodSmooth = function(result) {
		var k, result;
		k = this;
		k.p.InterpolantFactoryMethodSmooth(result);
		return k;
	};
	KeyframeTrack.prototype.InterpolantFactoryMethodSmooth = function(result) { return this.$val.InterpolantFactoryMethodSmooth(result); };
	KeyframeTrack.ptr.prototype.SetInterpolation = function(interpolation) {
		var interpolation, k;
		k = this;
		k.p.setInterpolation(interpolation);
		return k;
	};
	KeyframeTrack.prototype.SetInterpolation = function(interpolation) { return this.$val.SetInterpolation(interpolation); };
	KeyframeTrack.ptr.prototype.GetInterpolation = function() {
		var k;
		k = this;
		k.p.getInterpolation();
		return k;
	};
	KeyframeTrack.prototype.GetInterpolation = function() { return this.$val.GetInterpolation(); };
	KeyframeTrack.ptr.prototype.GetValueSize = function() {
		var k;
		k = this;
		k.p.getValueSize();
		return k;
	};
	KeyframeTrack.prototype.GetValueSize = function() { return this.$val.GetValueSize(); };
	KeyframeTrack.ptr.prototype.Shift = function(timeOffset) {
		var k, timeOffset;
		k = this;
		k.p.shift(timeOffset);
		return k;
	};
	KeyframeTrack.prototype.Shift = function(timeOffset) { return this.$val.Shift(timeOffset); };
	KeyframeTrack.ptr.prototype.Scale = function(timeScale) {
		var k, timeScale;
		k = this;
		k.p.scale(timeScale);
		return k;
	};
	KeyframeTrack.prototype.Scale = function(timeScale) { return this.$val.Scale(timeScale); };
	KeyframeTrack.ptr.prototype.Trim = function(startTime, endTime) {
		var endTime, k, startTime;
		k = this;
		k.p.trim(startTime, endTime);
		return k;
	};
	KeyframeTrack.prototype.Trim = function(startTime, endTime) { return this.$val.Trim(startTime, endTime); };
	KeyframeTrack.ptr.prototype.Validate = function() {
		var k;
		k = this;
		k.p.validate();
		return k;
	};
	KeyframeTrack.prototype.Validate = function() { return this.$val.Validate(); };
	KeyframeTrack.ptr.prototype.Optimize = function() {
		var k;
		k = this;
		k.p.optimize();
		return k;
	};
	KeyframeTrack.prototype.Optimize = function() { return this.$val.Optimize(); };
	KeyframeTrack.ptr.prototype.Parse = function(json) {
		var json, k;
		k = this;
		k.p.parse(json);
		return k;
	};
	KeyframeTrack.prototype.Parse = function(json) { return this.$val.Parse(json); };
	KeyframeTrack.ptr.prototype.ToJSON = function(track) {
		var k, track;
		k = this;
		k.p.toJSON(track);
		return k;
	};
	KeyframeTrack.prototype.ToJSON = function(track) { return this.$val.ToJSON(track); };
	LatheBufferGeometry.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	LatheBufferGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LatheBufferGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.LatheBufferGeometry;
		return LatheBufferGeometryFromJSObject(p);
	};
	Three.prototype.LatheBufferGeometry = function() { return this.$val.LatheBufferGeometry(); };
	LatheBufferGeometryFromJSObject = function(p) {
		var p;
		return new LatheBufferGeometry.ptr(p);
	};
	$pkg.LatheBufferGeometryFromJSObject = LatheBufferGeometryFromJSObject;
	Three.ptr.prototype.NewLatheBufferGeometry = function(points, segments, phiStart, phiLength) {
		var p, phiLength, phiStart, points, segments, t;
		t = this;
		p = new (t.ctx.LatheBufferGeometry)(points, segments, phiStart, phiLength);
		return LatheBufferGeometryFromJSObject(p);
	};
	Three.prototype.NewLatheBufferGeometry = function(points, segments, phiStart, phiLength) { return this.$val.NewLatheBufferGeometry(points, segments, phiStart, phiLength); };
	LatheGeometry.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	LatheGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LatheGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.LatheGeometry;
		return LatheGeometryFromJSObject(p);
	};
	Three.prototype.LatheGeometry = function() { return this.$val.LatheGeometry(); };
	LatheGeometryFromJSObject = function(p) {
		var p;
		return new LatheGeometry.ptr(p);
	};
	$pkg.LatheGeometryFromJSObject = LatheGeometryFromJSObject;
	Three.ptr.prototype.NewLatheGeometry = function(points, segments, phiStart, phiLength) {
		var p, phiLength, phiStart, points, segments, t;
		t = this;
		p = new (t.ctx.LatheGeometry)($externalize(points, sliceType$13), segments, phiStart, phiLength);
		return LatheGeometryFromJSObject(p);
	};
	Three.prototype.NewLatheGeometry = function(points, segments, phiStart, phiLength) { return this.$val.NewLatheGeometry(points, segments, phiStart, phiLength); };
	Layers.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	Layers.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Layers = function() {
		var p, t;
		t = this;
		p = t.ctx.Layers;
		return LayersFromJSObject(p);
	};
	Three.prototype.Layers = function() { return this.$val.Layers(); };
	LayersFromJSObject = function(p) {
		var p;
		return new Layers.ptr(p);
	};
	$pkg.LayersFromJSObject = LayersFromJSObject;
	Three.ptr.prototype.NewLayers = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Layers)();
		return LayersFromJSObject(p);
	};
	Three.prototype.NewLayers = function() { return this.$val.NewLayers(); };
	Layers.ptr.prototype.Set = function(channel) {
		var channel, l;
		l = this;
		l.p.set(channel);
		return l;
	};
	Layers.prototype.Set = function(channel) { return this.$val.Set(channel); };
	Layers.ptr.prototype.Enable = function(channel) {
		var channel, l;
		l = this;
		l.p.enable(channel);
		return l;
	};
	Layers.prototype.Enable = function(channel) { return this.$val.Enable(channel); };
	Layers.ptr.prototype.Toggle = function(channel) {
		var channel, l;
		l = this;
		l.p.toggle(channel);
		return l;
	};
	Layers.prototype.Toggle = function(channel) { return this.$val.Toggle(channel); };
	Layers.ptr.prototype.Disable = function(channel) {
		var channel, l;
		l = this;
		l.p.disable(channel);
		return l;
	};
	Layers.prototype.Disable = function(channel) { return this.$val.Disable(channel); };
	Layers.ptr.prototype.Test = function(layers) {
		var l, layers;
		l = this;
		l.p.test(layers);
		return l;
	};
	Layers.prototype.Test = function(layers) { return this.$val.Test(layers); };
	LensFlare.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	LensFlare.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LensFlare = function() {
		var p, t;
		t = this;
		p = t.ctx.LensFlare;
		return LensFlareFromJSObject(p);
	};
	Three.prototype.LensFlare = function() { return this.$val.LensFlare(); };
	LensFlareFromJSObject = function(p) {
		var p;
		return new LensFlare.ptr(p);
	};
	$pkg.LensFlareFromJSObject = LensFlareFromJSObject;
	Three.ptr.prototype.NewLensFlare = function(texture, size, distance, blending, color) {
		var blending, color, distance, p, size, t, texture;
		t = this;
		p = new (t.ctx.LensFlare)(texture, size, distance, blending, color);
		return LensFlareFromJSObject(p);
	};
	Three.prototype.NewLensFlare = function(texture, size, distance, blending, color) { return this.$val.NewLensFlare(texture, size, distance, blending, color); };
	LensFlare.ptr.prototype.Add = function(texture, size, distance, blending, color, opacity) {
		var blending, color, distance, l, opacity, size, texture;
		l = this;
		l.p.add(texture, size, distance, blending, color, opacity);
		return l;
	};
	LensFlare.prototype.Add = function(texture, size, distance, blending, color, opacity) { return this.$val.Add(texture, size, distance, blending, color, opacity); };
	LensFlare.ptr.prototype.Copy = function(source) {
		var l, source;
		l = this;
		l.p.copy(source.p);
		return l;
	};
	LensFlare.prototype.Copy = function(source) { return this.$val.Copy(source); };
	LensFlarePlugin.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	LensFlarePlugin.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LensFlarePlugin = function() {
		var p, t;
		t = this;
		p = t.ctx.LensFlarePlugin;
		return LensFlarePluginFromJSObject(p);
	};
	Three.prototype.LensFlarePlugin = function() { return this.$val.LensFlarePlugin(); };
	LensFlarePluginFromJSObject = function(p) {
		var p;
		return new LensFlarePlugin.ptr(p);
	};
	$pkg.LensFlarePluginFromJSObject = LensFlarePluginFromJSObject;
	Three.ptr.prototype.NewLensFlarePlugin = function(renderer, flares) {
		var flares, p, renderer, t;
		t = this;
		p = new (t.ctx.LensFlarePlugin)(renderer, flares);
		return LensFlarePluginFromJSObject(p);
	};
	Three.prototype.NewLensFlarePlugin = function(renderer, flares) { return this.$val.NewLensFlarePlugin(renderer, flares); };
	Light.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.Object3D.p;
	};
	Light.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Light = function() {
		var t;
		t = this;
		return LightFromJSObject(t.ctx.Light);
	};
	Three.prototype.Light = function() { return this.$val.Light(); };
	LightFromJSObject = function(p) {
		var p;
		return new Light.ptr(new Object3D.ptr(p));
	};
	$pkg.LightFromJSObject = LightFromJSObject;
	Three.ptr.prototype.NewLight = function(color, intensity) {
		var color, intensity, t;
		t = this;
		return LightFromJSObject(new (t.ctx.Light)(color, intensity));
	};
	Three.prototype.NewLight = function(color, intensity) { return this.$val.NewLight(color, intensity); };
	Light.ptr.prototype.Copy = function(source) {
		var l, source;
		l = this;
		l.Object3D.p.copy(source.Object3D.p);
		return l;
	};
	Light.prototype.Copy = function(source) { return this.$val.Copy(source); };
	Light.ptr.prototype.ToJSON = function(meta) {
		var l, meta;
		l = this;
		l.Object3D.p.toJSON(meta);
		return l;
	};
	Light.prototype.ToJSON = function(meta) { return this.$val.ToJSON(meta); };
	LightShadow.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	LightShadow.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LightShadow = function() {
		var p, t;
		t = this;
		p = t.ctx.LightShadow;
		return LightShadowFromJSObject(p);
	};
	Three.prototype.LightShadow = function() { return this.$val.LightShadow(); };
	LightShadowFromJSObject = function(p) {
		var p;
		return new LightShadow.ptr(p);
	};
	$pkg.LightShadowFromJSObject = LightShadowFromJSObject;
	Three.ptr.prototype.NewLightShadow = function(camera) {
		var camera, p, t;
		t = this;
		p = new (t.ctx.LightShadow)(camera.JSObject());
		return LightShadowFromJSObject(p);
	};
	Three.prototype.NewLightShadow = function(camera) { return this.$val.NewLightShadow(camera); };
	LightShadow.ptr.prototype.Copy = function(source) {
		var l, source;
		l = this;
		l.p.copy(source.p);
		return l;
	};
	LightShadow.prototype.Copy = function(source) { return this.$val.Copy(source); };
	LightShadow.ptr.prototype.Clone = function() {
		var l;
		l = this;
		l.p.clone();
		return l;
	};
	LightShadow.prototype.Clone = function() { return this.$val.Clone(); };
	LightShadow.ptr.prototype.Camera = function() {
		var l;
		l = this;
		return new Camera.ptr(new Object3D.ptr(l.p.camera));
	};
	LightShadow.prototype.Camera = function() { return this.$val.Camera(); };
	LightShadow.ptr.prototype.MapSize = function() {
		var l;
		l = this;
		return new Vector2.ptr(l.p.mapSize);
	};
	LightShadow.prototype.MapSize = function() { return this.$val.MapSize(); };
	LightShadow.ptr.prototype.SetMapSize = function(value) {
		var l, value;
		l = this;
		l.p.mapSize = value.p;
		return l;
	};
	LightShadow.prototype.SetMapSize = function(value) { return this.$val.SetMapSize(value); };
	LightShadow.ptr.prototype.Matrix = function() {
		var l;
		l = this;
		return new Matrix4.ptr(l.p.matrix);
	};
	LightShadow.prototype.Matrix = function() { return this.$val.Matrix(); };
	LightShadow.ptr.prototype.SetMatrix = function(value) {
		var l, value;
		l = this;
		l.p.matrix = value.p;
		return l;
	};
	LightShadow.prototype.SetMatrix = function(value) { return this.$val.SetMatrix(value); };
	LightShadow.ptr.prototype.Bias = function() {
		var l;
		l = this;
		return $parseFloat(l.p.bias);
	};
	LightShadow.prototype.Bias = function() { return this.$val.Bias(); };
	LightShadow.ptr.prototype.SetBias = function(value) {
		var l, value;
		l = this;
		l.p.bias = value;
		return l;
	};
	LightShadow.prototype.SetBias = function(value) { return this.$val.SetBias(value); };
	LightShadow.ptr.prototype.Radius = function() {
		var l;
		l = this;
		return $parseFloat(l.p.radius);
	};
	LightShadow.prototype.Radius = function() { return this.$val.Radius(); };
	LightShadow.ptr.prototype.SetRadius = function(value) {
		var l, value;
		l = this;
		l.p.radius = value;
		return l;
	};
	LightShadow.prototype.SetRadius = function(value) { return this.$val.SetRadius(value); };
	Line.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.Object3D.p;
	};
	Line.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Line = function() {
		var p, t;
		t = this;
		p = t.ctx.Line;
		return LineFromJSObject(p);
	};
	Three.prototype.Line = function() { return this.$val.Line(); };
	LineFromJSObject = function(p) {
		var p;
		return new Line.ptr(Object3DFromJSObject(p));
	};
	$pkg.LineFromJSObject = LineFromJSObject;
	Three.ptr.prototype.NewLine = function(geometry, material) {
		var _r, _r$1, geometry, material, p, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; geometry = $f.geometry; material = $f.material; p = $f.p; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = geometry.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = material.JSObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		p = new (t.ctx.Line)(_r, _r$1);
		$s = -1; return LineFromJSObject(p);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Three.ptr.prototype.NewLine }; } $f._r = _r; $f._r$1 = _r$1; $f.geometry = geometry; $f.material = material; $f.p = p; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Three.prototype.NewLine = function(geometry, material) { return this.$val.NewLine(geometry, material); };
	Line3.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	Line3.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Line3 = function() {
		var p, t;
		t = this;
		p = t.ctx.Line3;
		return Line3FromJSObject(p);
	};
	Three.prototype.Line3 = function() { return this.$val.Line3(); };
	Line3FromJSObject = function(p) {
		var p;
		return new Line3.ptr(p);
	};
	$pkg.Line3FromJSObject = Line3FromJSObject;
	Three.ptr.prototype.NewLine3 = function(start, end) {
		var end, p, start, t;
		t = this;
		p = new (t.ctx.Line3)(start, end);
		return Line3FromJSObject(p);
	};
	Three.prototype.NewLine3 = function(start, end) { return this.$val.NewLine3(start, end); };
	Line3.ptr.prototype.Set = function(start, end) {
		var end, l, start;
		l = this;
		l.p.set(start, end);
		return l;
	};
	Line3.prototype.Set = function(start, end) { return this.$val.Set(start, end); };
	Line3.ptr.prototype.Clone = function() {
		var l;
		l = this;
		l.p.clone();
		return l;
	};
	Line3.prototype.Clone = function() { return this.$val.Clone(); };
	Line3.ptr.prototype.Copy = function(line) {
		var l, line;
		l = this;
		l.p.copy(line.p);
		return l;
	};
	Line3.prototype.Copy = function(line) { return this.$val.Copy(line); };
	Line3.ptr.prototype.Center = function(optionalTarget) {
		var l, optionalTarget;
		l = this;
		l.p.center(optionalTarget);
		return l;
	};
	Line3.prototype.Center = function(optionalTarget) { return this.$val.Center(optionalTarget); };
	Line3.ptr.prototype.Delta = function(optionalTarget) {
		var l, optionalTarget;
		l = this;
		l.p.delta(optionalTarget);
		return l;
	};
	Line3.prototype.Delta = function(optionalTarget) { return this.$val.Delta(optionalTarget); };
	Line3.ptr.prototype.DistanceSq = function() {
		var l;
		l = this;
		l.p.distanceSq();
		return l;
	};
	Line3.prototype.DistanceSq = function() { return this.$val.DistanceSq(); };
	Line3.ptr.prototype.Distance = function() {
		var l;
		l = this;
		l.p.distance();
		return l;
	};
	Line3.prototype.Distance = function() { return this.$val.Distance(); };
	Line3.ptr.prototype.At = function(t, optionalTarget) {
		var l, optionalTarget, t;
		l = this;
		l.p.at(t, optionalTarget);
		return l;
	};
	Line3.prototype.At = function(t, optionalTarget) { return this.$val.At(t, optionalTarget); };
	Line3.ptr.prototype.ClosestPointToPointParameter = function() {
		var l;
		l = this;
		l.p.closestPointToPointParameter();
		return l;
	};
	Line3.prototype.ClosestPointToPointParameter = function() { return this.$val.ClosestPointToPointParameter(); };
	Line3.ptr.prototype.ClosestPointToPoint = function(point, clampToLine, optionalTarget) {
		var clampToLine, l, optionalTarget, point;
		l = this;
		l.p.closestPointToPoint(point, clampToLine, optionalTarget);
		return l;
	};
	Line3.prototype.ClosestPointToPoint = function(point, clampToLine, optionalTarget) { return this.$val.ClosestPointToPoint(point, clampToLine, optionalTarget); };
	Line3.ptr.prototype.ApplyMatrix4 = function(matrix) {
		var l, matrix;
		l = this;
		l.p.applyMatrix4(matrix);
		return l;
	};
	Line3.prototype.ApplyMatrix4 = function(matrix) { return this.$val.ApplyMatrix4(matrix); };
	Line3.ptr.prototype.Equals = function(line) {
		var l, line;
		l = this;
		l.p.equals(line);
		return l;
	};
	Line3.prototype.Equals = function(line) { return this.$val.Equals(line); };
	LineBasicMaterial.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	LineBasicMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LineBasicMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.LineBasicMaterial;
		return LineBasicMaterialFromJSObject(p);
	};
	Three.prototype.LineBasicMaterial = function() { return this.$val.LineBasicMaterial(); };
	LineBasicMaterialFromJSObject = function(p) {
		var p;
		return new LineBasicMaterial.ptr(p);
	};
	$pkg.LineBasicMaterialFromJSObject = LineBasicMaterialFromJSObject;
	Three.ptr.prototype.NewLineBasicMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.LineBasicMaterial)($externalize(parameters, LineBasicMaterialOpts));
		return LineBasicMaterialFromJSObject(p);
	};
	Three.prototype.NewLineBasicMaterial = function(parameters) { return this.$val.NewLineBasicMaterial(parameters); };
	LineBasicMaterial.ptr.prototype.Copy = function(source) {
		var l, source;
		l = this;
		l.p.copy(source.p);
		return l;
	};
	LineBasicMaterial.prototype.Copy = function(source) { return this.$val.Copy(source); };
	LineCurve.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	LineCurve.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LineCurve = function() {
		var p, t;
		t = this;
		p = t.ctx.LineCurve;
		return LineCurveFromJSObject(p);
	};
	Three.prototype.LineCurve = function() { return this.$val.LineCurve(); };
	LineCurveFromJSObject = function(p) {
		var p;
		return new LineCurve.ptr(p);
	};
	$pkg.LineCurveFromJSObject = LineCurveFromJSObject;
	Three.ptr.prototype.NewLineCurve = function(v1, v2) {
		var p, t, v1, v2;
		t = this;
		p = new (t.ctx.LineCurve)(v1, v2);
		return LineCurveFromJSObject(p);
	};
	Three.prototype.NewLineCurve = function(v1, v2) { return this.$val.NewLineCurve(v1, v2); };
	LineCurve.ptr.prototype.GetPoint = function(t) {
		var l, t;
		l = this;
		l.p.getPoint(t);
		return l;
	};
	LineCurve.prototype.GetPoint = function(t) { return this.$val.GetPoint(t); };
	LineCurve.ptr.prototype.GetPointAt = function(u) {
		var l, u;
		l = this;
		l.p.getPointAt(u);
		return l;
	};
	LineCurve.prototype.GetPointAt = function(u) { return this.$val.GetPointAt(u); };
	LineCurve.ptr.prototype.GetTangent = function(t) {
		var l, t;
		l = this;
		l.p.getTangent(t);
		return l;
	};
	LineCurve.prototype.GetTangent = function(t) { return this.$val.GetTangent(t); };
	LineDashedMaterial.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	LineDashedMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LineDashedMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.LineDashedMaterial;
		return LineDashedMaterialFromJSObject(p);
	};
	Three.prototype.LineDashedMaterial = function() { return this.$val.LineDashedMaterial(); };
	LineDashedMaterialFromJSObject = function(p) {
		var p;
		return new LineDashedMaterial.ptr(p);
	};
	$pkg.LineDashedMaterialFromJSObject = LineDashedMaterialFromJSObject;
	Three.ptr.prototype.NewLineDashedMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.LineDashedMaterial)($externalize(parameters, mapType));
		return LineDashedMaterialFromJSObject(p);
	};
	Three.prototype.NewLineDashedMaterial = function(parameters) { return this.$val.NewLineDashedMaterial(parameters); };
	LineDashedMaterial.ptr.prototype.Copy = function(source) {
		var l, source;
		l = this;
		l.p.copy(source.p);
		return l;
	};
	LineDashedMaterial.prototype.Copy = function(source) { return this.$val.Copy(source); };
	LineSegments.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.Line.Object3D.p;
	};
	LineSegments.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LineSegments = function() {
		var p, t;
		t = this;
		p = t.ctx.LineSegments;
		return LineSegmentsFromJSObject(p);
	};
	Three.prototype.LineSegments = function() { return this.$val.LineSegments(); };
	LineSegmentsFromJSObject = function(p) {
		var p;
		return new LineSegments.ptr(LineFromJSObject(p));
	};
	$pkg.LineSegmentsFromJSObject = LineSegmentsFromJSObject;
	Three.ptr.prototype.NewLineSegments = function(geometry, material) {
		var geometry, material, p, t;
		t = this;
		p = new (t.ctx.LineSegments)($externalize(geometry, sliceType$13), material);
		return LineSegmentsFromJSObject(p);
	};
	Three.prototype.NewLineSegments = function(geometry, material) { return this.$val.NewLineSegments(geometry, material); };
	LinearInterpolant.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	LinearInterpolant.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LinearInterpolant = function() {
		var p, t;
		t = this;
		p = t.ctx.LinearInterpolant;
		return LinearInterpolantFromJSObject(p);
	};
	Three.prototype.LinearInterpolant = function() { return this.$val.LinearInterpolant(); };
	LinearInterpolantFromJSObject = function(p) {
		var p;
		return new LinearInterpolant.ptr(p);
	};
	$pkg.LinearInterpolantFromJSObject = LinearInterpolantFromJSObject;
	Three.ptr.prototype.NewLinearInterpolant = function(parameterPositions, sampleValues, sampleSize, resultBuffer) {
		var p, parameterPositions, resultBuffer, sampleSize, sampleValues, t;
		t = this;
		p = new (t.ctx.LinearInterpolant)(parameterPositions, sampleValues, sampleSize, resultBuffer);
		return LinearInterpolantFromJSObject(p);
	};
	Three.prototype.NewLinearInterpolant = function(parameterPositions, sampleValues, sampleSize, resultBuffer) { return this.$val.NewLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer); };
	LinearInterpolant.ptr.prototype.Interpolate = function(i1, t0, t, t1) {
		var i1, l, t, t0, t1;
		l = this;
		l.p.interpolate_(i1, t0, t, t1);
		return l;
	};
	LinearInterpolant.prototype.Interpolate = function(i1, t0, t, t1) { return this.$val.Interpolate(i1, t0, t, t1); };
	Loader.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	Loader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Loader = function() {
		var p, t;
		t = this;
		p = t.ctx.Loader;
		return LoaderFromJSObject(p);
	};
	Three.prototype.Loader = function() { return this.$val.Loader(); };
	LoaderFromJSObject = function(p) {
		var p;
		return new Loader.ptr(p);
	};
	$pkg.LoaderFromJSObject = LoaderFromJSObject;
	Three.ptr.prototype.NewLoader = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Loader)();
		return LoaderFromJSObject(p);
	};
	Three.prototype.NewLoader = function() { return this.$val.NewLoader(); };
	Loader.ptr.prototype.ExtractURLBase = function(url) {
		var l, url;
		l = this;
		l.p.extractUrlBase(url);
		return l;
	};
	Loader.prototype.ExtractURLBase = function(url) { return this.$val.ExtractURLBase(url); };
	Loader.ptr.prototype.InitMaterials = function(materials, texturePath, crossOrigin) {
		var crossOrigin, l, materials, texturePath;
		l = this;
		l.p.initMaterials(materials, texturePath, crossOrigin);
		return l;
	};
	Loader.prototype.InitMaterials = function(materials, texturePath, crossOrigin) { return this.$val.InitMaterials(materials, texturePath, crossOrigin); };
	Loader.ptr.prototype.Add = function(regex, loader) {
		var l, loader, regex;
		l = this;
		l.p.add(regex, loader);
		return l;
	};
	Loader.prototype.Add = function(regex, loader) { return this.$val.Add(regex, loader); };
	Loader.ptr.prototype.Get = function(file) {
		var file, l;
		l = this;
		l.p.get(file);
		return l;
	};
	Loader.prototype.Get = function(file) { return this.$val.Get(file); };
	LoadingManager.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	LoadingManager.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LoadingManager = function() {
		var p, t;
		t = this;
		p = t.ctx.LoadingManager;
		return LoadingManagerFromJSObject(p);
	};
	Three.prototype.LoadingManager = function() { return this.$val.LoadingManager(); };
	LoadingManagerFromJSObject = function(p) {
		var p;
		return new LoadingManager.ptr(p);
	};
	$pkg.LoadingManagerFromJSObject = LoadingManagerFromJSObject;
	Three.ptr.prototype.NewLoadingManager = function(onLoad, onProgress, onError) {
		var onError, onLoad, onProgress, p, t;
		t = this;
		p = new (t.ctx.LoadingManager)(onLoad, onProgress, onError);
		return LoadingManagerFromJSObject(p);
	};
	Three.prototype.NewLoadingManager = function(onLoad, onProgress, onError) { return this.$val.NewLoadingManager(onLoad, onProgress, onError); };
	LOD.ptr.prototype.JSObject = function() {
		var l;
		l = this;
		return l.p;
	};
	LOD.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.LOD = function() {
		var p, t;
		t = this;
		p = t.ctx.LOD;
		return LODFromJSObject(p);
	};
	Three.prototype.LOD = function() { return this.$val.LOD(); };
	LODFromJSObject = function(p) {
		var p;
		return new LOD.ptr(p);
	};
	$pkg.LODFromJSObject = LODFromJSObject;
	Three.ptr.prototype.NewLOD = function() {
		var p, t;
		t = this;
		p = new (t.ctx.LOD)();
		return LODFromJSObject(p);
	};
	Three.prototype.NewLOD = function() { return this.$val.NewLOD(); };
	LOD.ptr.prototype.Get = function() {
		var l;
		l = this;
		l.p.get();
		return l;
	};
	LOD.prototype.Get = function() { return this.$val.Get(); };
	LOD.ptr.prototype.AddLevel = function(object, distance) {
		var distance, l, object;
		l = this;
		l.p.addLevel(object, distance);
		return l;
	};
	LOD.prototype.AddLevel = function(object, distance) { return this.$val.AddLevel(object, distance); };
	LOD.ptr.prototype.GetObjectForDistance = function(distance) {
		var distance, l;
		l = this;
		l.p.getObjectForDistance(distance);
		return l;
	};
	LOD.prototype.GetObjectForDistance = function(distance) { return this.$val.GetObjectForDistance(distance); };
	LOD.ptr.prototype.Copy = function(source) {
		var l, source;
		l = this;
		l.p.copy(source.p);
		return l;
	};
	LOD.prototype.Copy = function(source) { return this.$val.Copy(source); };
	LOD.ptr.prototype.ToJSON = function(meta) {
		var l, meta;
		l = this;
		l.p.toJSON(meta);
		return l;
	};
	LOD.prototype.ToJSON = function(meta) { return this.$val.ToJSON(meta); };
	LUTFromJSObject = function(p) {
		var p;
		return new LUT.ptr(p);
	};
	$pkg.LUTFromJSObject = LUTFromJSObject;
	Three.ptr.prototype.NewLUT = function(colormap, numberofcolors) {
		var colormap, numberofcolors, p, t;
		t = this;
		p = new (t.ctx.Lut)($externalize(colormap, $String), numberofcolors);
		return LUTFromJSObject(p);
	};
	Three.prototype.NewLUT = function(colormap, numberofcolors) { return this.$val.NewLUT(colormap, numberofcolors); };
	LUT.ptr.prototype.Set = function(value) {
		var l, value;
		l = this;
		l.p.set(value);
		return l;
	};
	LUT.prototype.Set = function(value) { return this.$val.Set(value); };
	LUT.ptr.prototype.SetMin = function(min) {
		var l, min;
		l = this;
		l.p.setMin(min);
		return l;
	};
	LUT.prototype.SetMin = function(min) { return this.$val.SetMin(min); };
	LUT.ptr.prototype.SetMax = function(max) {
		var l, max;
		l = this;
		l.p.setMax(max);
		return l;
	};
	LUT.prototype.SetMax = function(max) { return this.$val.SetMax(max); };
	LUT.ptr.prototype.ChangeNumberOfColors = function(numberofcolors) {
		var l, numberofcolors;
		l = this;
		l.p.changeNumberOfColors(numberofcolors);
		return l;
	};
	LUT.prototype.ChangeNumberOfColors = function(numberofcolors) { return this.$val.ChangeNumberOfColors(numberofcolors); };
	LUT.ptr.prototype.ChangeColorMap = function(colormap) {
		var colormap, l;
		l = this;
		l.p.changeColorMap($externalize(colormap, $String));
		return l;
	};
	LUT.prototype.ChangeColorMap = function(colormap) { return this.$val.ChangeColorMap(colormap); };
	LUT.ptr.prototype.Copy = function(lut) {
		var l, lut;
		l = this;
		l.p.copy($externalize(lut, ptrType$19));
		return l;
	};
	LUT.prototype.Copy = function(lut) { return this.$val.Copy(lut); };
	LUT.ptr.prototype.GetColor = function(alpha) {
		var alpha, l, p;
		l = this;
		p = l.p.getColor(alpha);
		if (p === null || p === undefined) {
			return ptrType$2.nil;
		}
		return ColorFromJSObject(p);
	};
	LUT.prototype.GetColor = function(alpha) { return this.$val.GetColor(alpha); };
	LUT.ptr.prototype.AddColorMap = function(colormapName, arrayOfColors) {
		var arrayOfColors, colormapName, l;
		l = this;
		l.p.addColorMap($externalize(colormapName, $String), arrayOfColors);
		return l;
	};
	LUT.prototype.AddColorMap = function(colormapName, arrayOfColors) { return this.$val.AddColorMap(colormapName, arrayOfColors); };
	LUT.ptr.prototype.SetLegendOn = function(parameters) {
		var l, parameters;
		l = this;
		return MeshFromJSObject(l.p.setLegendOn($externalize(parameters, LUTLegendOpts)));
	};
	LUT.prototype.SetLegendOn = function(parameters) { return this.$val.SetLegendOn(parameters); };
	LUT.ptr.prototype.SetLegendOff = function() {
		var l;
		l = this;
		l.p.setLegendOff();
		return "";
	};
	LUT.prototype.SetLegendOff = function() { return this.$val.SetLegendOff(); };
	LUT.ptr.prototype.SetLegendLayout = function(layout) {
		var l, layout;
		l = this;
		return !!(l.p.setLegendLayout($externalize(layout, $Bool)));
	};
	LUT.prototype.SetLegendLayout = function(layout) { return this.$val.SetLegendLayout(layout); };
	LUT.ptr.prototype.SetLegendPosition = function(position) {
		var l, position;
		l = this;
		return l.p.setLegendPosition(position.JSObject());
	};
	LUT.prototype.SetLegendPosition = function(position) { return this.$val.SetLegendPosition(position); };
	LUT.ptr.prototype.SetLegendLabels = function(parameters, callback) {
		var callback, l, parameters;
		l = this;
		return l.p.setLegendLabels($externalize(parameters, $emptyInterface), $externalize(callback, $emptyInterface));
	};
	LUT.prototype.SetLegendLabels = function(parameters, callback) { return this.$val.SetLegendLabels(parameters, callback); };
	Material.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	Material.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Material = function() {
		var p, t;
		t = this;
		p = t.ctx.Material;
		return MaterialFromJSObject(p);
	};
	Three.prototype.Material = function() { return this.$val.Material(); };
	MaterialFromJSObject = function(p) {
		var p;
		return new Material.ptr(p);
	};
	$pkg.MaterialFromJSObject = MaterialFromJSObject;
	Three.ptr.prototype.NewMaterial = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Material)();
		return MaterialFromJSObject(p);
	};
	Three.prototype.NewMaterial = function() { return this.$val.NewMaterial(); };
	Material.ptr.prototype.NeedsUpdate = function() {
		var m;
		m = this;
		return $parseFloat(m.p.needsUpdate);
	};
	Material.prototype.NeedsUpdate = function() { return this.$val.NeedsUpdate(); };
	Material.ptr.prototype.SetNeedsUpdate = function(value) {
		var m, value;
		m = this;
		m.p.needsUpdate = value;
		return m;
	};
	Material.prototype.SetNeedsUpdate = function(value) { return this.$val.SetNeedsUpdate(value); };
	Material.ptr.prototype.SetValues = function(values) {
		var m, values;
		m = this;
		m.p.setValues(values);
		return m;
	};
	Material.prototype.SetValues = function(values) { return this.$val.SetValues(values); };
	Material.ptr.prototype.ToJSON = function(meta) {
		var m, meta;
		m = this;
		m.p.toJSON(meta);
		return m;
	};
	Material.prototype.ToJSON = function(meta) { return this.$val.ToJSON(meta); };
	Material.ptr.prototype.Clone = function() {
		var m;
		m = this;
		m.p.clone();
		return m;
	};
	Material.prototype.Clone = function() { return this.$val.Clone(); };
	Material.ptr.prototype.Copy = function(source) {
		var m, source;
		m = this;
		m.p.copy(source.p);
		return m;
	};
	Material.prototype.Copy = function(source) { return this.$val.Copy(source); };
	Material.ptr.prototype.Update = function() {
		var m;
		m = this;
		m.p.update();
		return m;
	};
	Material.prototype.Update = function() { return this.$val.Update(); };
	Material.ptr.prototype.Dispose = function() {
		var m;
		m = this;
		m.p.dispose();
		return m;
	};
	Material.prototype.Dispose = function() { return this.$val.Dispose(); };
	Material.ptr.prototype.SetShading = function(value) {
		var m, value;
		m = this;
		m.p.shading = value;
		return m;
	};
	Material.prototype.SetShading = function(value) { return this.$val.SetShading(value); };
	MaterialLoader.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	MaterialLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.MaterialLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.MaterialLoader;
		return MaterialLoaderFromJSObject(p);
	};
	Three.prototype.MaterialLoader = function() { return this.$val.MaterialLoader(); };
	MaterialLoaderFromJSObject = function(p) {
		var p;
		return new MaterialLoader.ptr(p);
	};
	$pkg.MaterialLoaderFromJSObject = MaterialLoaderFromJSObject;
	Three.ptr.prototype.NewMaterialLoader = function(manager) {
		var manager, p, t;
		t = this;
		p = new (t.ctx.MaterialLoader)(manager);
		return MaterialLoaderFromJSObject(p);
	};
	Three.prototype.NewMaterialLoader = function(manager) { return this.$val.NewMaterialLoader(manager); };
	MaterialLoader.ptr.prototype.Load = function(url, onLoad, onProgress, onError) {
		var m, onError, onLoad, onProgress, url;
		m = this;
		m.p.load(url, onLoad, onProgress, onError);
		return m;
	};
	MaterialLoader.prototype.Load = function(url, onLoad, onProgress, onError) { return this.$val.Load(url, onLoad, onProgress, onError); };
	MaterialLoader.ptr.prototype.SetTextures = function(value) {
		var m, value;
		m = this;
		m.p.setTextures(value);
		return m;
	};
	MaterialLoader.prototype.SetTextures = function(value) { return this.$val.SetTextures(value); };
	MaterialLoader.ptr.prototype.GetTexture = function(name) {
		var m, name;
		m = this;
		m.p.getTexture(name);
		return m;
	};
	MaterialLoader.prototype.GetTexture = function(name) { return this.$val.GetTexture(name); };
	MaterialLoader.ptr.prototype.Parse = function(json) {
		var json, m;
		m = this;
		m.p.parse(json);
		return m;
	};
	MaterialLoader.prototype.Parse = function(json) { return this.$val.Parse(json); };
	Math.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	Math.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Math = function() {
		var p, t;
		t = this;
		p = t.ctx.Math;
		return MathFromJSObject(p);
	};
	Three.prototype.Math = function() { return this.$val.Math(); };
	MathFromJSObject = function(p) {
		var p;
		return new Math.ptr(p);
	};
	$pkg.MathFromJSObject = MathFromJSObject;
	Three.ptr.prototype.NewMath = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Math)();
		return MathFromJSObject(p);
	};
	Three.prototype.NewMath = function() { return this.$val.NewMath(); };
	Math.ptr.prototype.GenerateUUID = function() {
		var m;
		m = this;
		m.p.generateUUID();
		return m;
	};
	Math.prototype.GenerateUUID = function() { return this.$val.GenerateUUID(); };
	Math.ptr.prototype.Clamp = function(value, min, max) {
		var m, max, min, value;
		m = this;
		m.p.clamp(value, min, max);
		return m;
	};
	Math.prototype.Clamp = function(value, min, max) { return this.$val.Clamp(value, min, max); };
	Math.ptr.prototype.EuclideanModulo = function(n, mod) {
		var m, mod, n;
		m = this;
		m.p.euclideanModulo(n, mod);
		return m;
	};
	Math.prototype.EuclideanModulo = function(n, mod) { return this.$val.EuclideanModulo(n, mod); };
	Math.ptr.prototype.MapLinear = function(x, a1, a2, b1, b2) {
		var a1, a2, b1, b2, m, x;
		m = this;
		m.p.mapLinear(x, a1, a2, b1, b2);
		return m;
	};
	Math.prototype.MapLinear = function(x, a1, a2, b1, b2) { return this.$val.MapLinear(x, a1, a2, b1, b2); };
	Math.ptr.prototype.Smoothstep = function(x, min, max) {
		var m, max, min, x;
		m = this;
		m.p.smoothstep(x, min, max);
		return m;
	};
	Math.prototype.Smoothstep = function(x, min, max) { return this.$val.Smoothstep(x, min, max); };
	Math.ptr.prototype.Smootherstep = function(x, min, max) {
		var m, max, min, x;
		m = this;
		m.p.smootherstep(x, min, max);
		return m;
	};
	Math.prototype.Smootherstep = function(x, min, max) { return this.$val.Smootherstep(x, min, max); };
	Math.ptr.prototype.Random16 = function() {
		var m;
		m = this;
		m.p.random16();
		return m;
	};
	Math.prototype.Random16 = function() { return this.$val.Random16(); };
	Math.ptr.prototype.RandInt = function(low, high) {
		var high, low, m;
		m = this;
		m.p.randInt(low, high);
		return m;
	};
	Math.prototype.RandInt = function(low, high) { return this.$val.RandInt(low, high); };
	Math.ptr.prototype.RandFloat = function(low, high) {
		var high, low, m;
		m = this;
		m.p.randFloat(low, high);
		return m;
	};
	Math.prototype.RandFloat = function(low, high) { return this.$val.RandFloat(low, high); };
	Math.ptr.prototype.RandFloatSpread = function(rnge) {
		var m, rnge;
		m = this;
		m.p.randFloatSpread(rnge);
		return m;
	};
	Math.prototype.RandFloatSpread = function(rnge) { return this.$val.RandFloatSpread(rnge); };
	Math.ptr.prototype.DegToRad = function() {
		var m;
		m = this;
		m.p.degToRad();
		return m;
	};
	Math.prototype.DegToRad = function() { return this.$val.DegToRad(); };
	Math.ptr.prototype.RadToDeg = function() {
		var m;
		m = this;
		m.p.radToDeg();
		return m;
	};
	Math.prototype.RadToDeg = function() { return this.$val.RadToDeg(); };
	Math.ptr.prototype.IsPowerOfTwo = function(value) {
		var m, value;
		m = this;
		m.p.isPowerOfTwo(value);
		return m;
	};
	Math.prototype.IsPowerOfTwo = function(value) { return this.$val.IsPowerOfTwo(value); };
	Math.ptr.prototype.NearestPowerOfTwo = function(value) {
		var m, value;
		m = this;
		m.p.nearestPowerOfTwo(value);
		return m;
	};
	Math.prototype.NearestPowerOfTwo = function(value) { return this.$val.NearestPowerOfTwo(value); };
	Math.ptr.prototype.NextPowerOfTwo = function(value) {
		var m, value;
		m = this;
		m.p.nextPowerOfTwo(value);
		return m;
	};
	Math.prototype.NextPowerOfTwo = function(value) { return this.$val.NextPowerOfTwo(value); };
	Matrix3.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	Matrix3.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Matrix3 = function() {
		var p, t;
		t = this;
		p = t.ctx.Matrix3;
		return Matrix3FromJSObject(p);
	};
	Three.prototype.Matrix3 = function() { return this.$val.Matrix3(); };
	Matrix3FromJSObject = function(p) {
		var p;
		return new Matrix3.ptr(p);
	};
	$pkg.Matrix3FromJSObject = Matrix3FromJSObject;
	Three.ptr.prototype.NewMatrix3 = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Matrix3)();
		return Matrix3FromJSObject(p);
	};
	Three.prototype.NewMatrix3 = function() { return this.$val.NewMatrix3(); };
	Matrix3.ptr.prototype.Set = function(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
		var m, n11, n12, n13, n21, n22, n23, n31, n32, n33;
		m = this;
		m.p.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
		return m;
	};
	Matrix3.prototype.Set = function(n11, n12, n13, n21, n22, n23, n31, n32, n33) { return this.$val.Set(n11, n12, n13, n21, n22, n23, n31, n32, n33); };
	Matrix3.ptr.prototype.Identity = function() {
		var m;
		m = this;
		m.p.identity();
		return m;
	};
	Matrix3.prototype.Identity = function() { return this.$val.Identity(); };
	Matrix3.ptr.prototype.Clone = function() {
		var m;
		m = this;
		m.p.clone();
		return m;
	};
	Matrix3.prototype.Clone = function() { return this.$val.Clone(); };
	Matrix3.ptr.prototype.Copy = function(src) {
		var m, src;
		m = this;
		m.p.copy(src.p);
		return m;
	};
	Matrix3.prototype.Copy = function(src) { return this.$val.Copy(src); };
	Matrix3.ptr.prototype.SetFromMatrix4 = function(src) {
		var m, src;
		m = this;
		m.p.setFromMatrix4(src.p);
		return m;
	};
	Matrix3.prototype.SetFromMatrix4 = function(src) { return this.$val.SetFromMatrix4(src); };
	Matrix3.ptr.prototype.ApplyToVector3Array = function() {
		var m;
		m = this;
		m.p.applyToVector3Array();
		return m;
	};
	Matrix3.prototype.ApplyToVector3Array = function() { return this.$val.ApplyToVector3Array(); };
	Matrix3.ptr.prototype.ApplyToBuffer = function() {
		var m;
		m = this;
		m.p.applyToBuffer();
		return m;
	};
	Matrix3.prototype.ApplyToBuffer = function() { return this.$val.ApplyToBuffer(); };
	Matrix3.ptr.prototype.MultiplyScalar = function(s) {
		var m, s;
		m = this;
		m.p.multiplyScalar(s);
		return m;
	};
	Matrix3.prototype.MultiplyScalar = function(s) { return this.$val.MultiplyScalar(s); };
	Matrix3.ptr.prototype.Determinant = function() {
		var m;
		m = this;
		m.p.determinant();
		return m;
	};
	Matrix3.prototype.Determinant = function() { return this.$val.Determinant(); };
	Matrix3.ptr.prototype.GetInverse = function(matrix, throwOnDegenerate) {
		var m, matrix, throwOnDegenerate;
		m = this;
		m.p.getInverse(matrix, throwOnDegenerate);
		return m;
	};
	Matrix3.prototype.GetInverse = function(matrix, throwOnDegenerate) { return this.$val.GetInverse(matrix, throwOnDegenerate); };
	Matrix3.ptr.prototype.Transpose = function() {
		var m;
		m = this;
		m.p.transpose();
		return m;
	};
	Matrix3.prototype.Transpose = function() { return this.$val.Transpose(); };
	Matrix3.ptr.prototype.FlattenToArrayOffset = function(array, offset) {
		var array, m, offset;
		m = this;
		m.p.flattenToArrayOffset(array, offset);
		return m;
	};
	Matrix3.prototype.FlattenToArrayOffset = function(array, offset) { return this.$val.FlattenToArrayOffset(array, offset); };
	Matrix3.ptr.prototype.GetNormalMatrix = function(matrix4) {
		var m, matrix4;
		m = this;
		m.p.getNormalMatrix(matrix4);
		return m;
	};
	Matrix3.prototype.GetNormalMatrix = function(matrix4) { return this.$val.GetNormalMatrix(matrix4); };
	Matrix3.ptr.prototype.TransposeIntoArray = function(r) {
		var m, r;
		m = this;
		m.p.transposeIntoArray(r);
		return m;
	};
	Matrix3.prototype.TransposeIntoArray = function(r) { return this.$val.TransposeIntoArray(r); };
	Matrix3.ptr.prototype.FromArray = function(array) {
		var array, m;
		m = this;
		m.p.fromArray(array);
		return m;
	};
	Matrix3.prototype.FromArray = function(array) { return this.$val.FromArray(array); };
	Matrix3.ptr.prototype.ToArray = function() {
		var m;
		m = this;
		m.p.toArray();
		return m;
	};
	Matrix3.prototype.ToArray = function() { return this.$val.ToArray(); };
	Matrix4.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	Matrix4.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Matrix4 = function() {
		var p, t;
		t = this;
		p = t.ctx.Matrix4;
		return Matrix4FromJSObject(p);
	};
	Three.prototype.Matrix4 = function() { return this.$val.Matrix4(); };
	Matrix4FromJSObject = function(p) {
		var p;
		return new Matrix4.ptr(p);
	};
	$pkg.Matrix4FromJSObject = Matrix4FromJSObject;
	Three.ptr.prototype.NewMatrix4 = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Matrix4)();
		return Matrix4FromJSObject(p);
	};
	Three.prototype.NewMatrix4 = function() { return this.$val.NewMatrix4(); };
	Matrix4.ptr.prototype.Set = function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
		var m, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44;
		m = this;
		m.p.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
		return m;
	};
	Matrix4.prototype.Set = function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) { return this.$val.Set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44); };
	Matrix4.ptr.prototype.Identity = function() {
		var m;
		m = this;
		m.p.identity();
		return m;
	};
	Matrix4.prototype.Identity = function() { return this.$val.Identity(); };
	Matrix4.ptr.prototype.Clone = function() {
		var m;
		m = this;
		m.p.clone();
		return m;
	};
	Matrix4.prototype.Clone = function() { return this.$val.Clone(); };
	Matrix4.ptr.prototype.Copy = function(src) {
		var m, src;
		m = this;
		m.p.copy(src.p);
		return m;
	};
	Matrix4.prototype.Copy = function(src) { return this.$val.Copy(src); };
	Matrix4.ptr.prototype.CopyPosition = function(src) {
		var m, src;
		m = this;
		m.p.copyPosition(src.p);
		return m;
	};
	Matrix4.prototype.CopyPosition = function(src) { return this.$val.CopyPosition(src); };
	Matrix4.ptr.prototype.ExtractBasis = function(xAxis, yAxis, zAxis) {
		var m, xAxis, yAxis, zAxis;
		m = this;
		m.p.extractBasis(xAxis, yAxis, zAxis);
		return m;
	};
	Matrix4.prototype.ExtractBasis = function(xAxis, yAxis, zAxis) { return this.$val.ExtractBasis(xAxis, yAxis, zAxis); };
	Matrix4.ptr.prototype.MakeBasis = function(xAxis, yAxis, zAxis) {
		var m, xAxis, yAxis, zAxis;
		m = this;
		m.p.makeBasis(xAxis, yAxis, zAxis);
		return m;
	};
	Matrix4.prototype.MakeBasis = function(xAxis, yAxis, zAxis) { return this.$val.MakeBasis(xAxis, yAxis, zAxis); };
	Matrix4.ptr.prototype.ExtractRotation = function() {
		var m;
		m = this;
		m.p.extractRotation();
		return m;
	};
	Matrix4.prototype.ExtractRotation = function() { return this.$val.ExtractRotation(); };
	Matrix4.ptr.prototype.MakeRotationFromEuler = function(euler) {
		var euler, m;
		m = this;
		m.p.makeRotationFromEuler(euler);
		return m;
	};
	Matrix4.prototype.MakeRotationFromEuler = function(euler) { return this.$val.MakeRotationFromEuler(euler); };
	Matrix4.ptr.prototype.MakeRotationFromQuaternion = function(q) {
		var m, q;
		m = this;
		m.p.makeRotationFromQuaternion(q);
		return m;
	};
	Matrix4.prototype.MakeRotationFromQuaternion = function(q) { return this.$val.MakeRotationFromQuaternion(q); };
	Matrix4.ptr.prototype.LookAt = function() {
		var m;
		m = this;
		m.p.lookAt();
		return m;
	};
	Matrix4.prototype.LookAt = function() { return this.$val.LookAt(); };
	Matrix4.ptr.prototype.Multiply = function(src) {
		var m, src;
		m = this;
		m.p.multiply(src.p);
		return m;
	};
	Matrix4.prototype.Multiply = function(src) { return this.$val.Multiply(src); };
	Matrix4.ptr.prototype.MultiplyMatrices = function(a, b) {
		var a, b, m;
		m = this;
		m.p.multiplyMatrices(a.p, b.p);
		return m;
	};
	Matrix4.prototype.MultiplyMatrices = function(a, b) { return this.$val.MultiplyMatrices(a, b); };
	Matrix4.ptr.prototype.MultiplyToArray = function(a, b, r) {
		var a, b, m, r;
		m = this;
		m.p.multiplyToArray(a, b, r);
		return m;
	};
	Matrix4.prototype.MultiplyToArray = function(a, b, r) { return this.$val.MultiplyToArray(a, b, r); };
	Matrix4.ptr.prototype.MultiplyScalar = function(s) {
		var m, s;
		m = this;
		m.p.multiplyScalar(s);
		return m;
	};
	Matrix4.prototype.MultiplyScalar = function(s) { return this.$val.MultiplyScalar(s); };
	Matrix4.ptr.prototype.ApplyToVector3Array = function() {
		var m;
		m = this;
		m.p.applyToVector3Array();
		return m;
	};
	Matrix4.prototype.ApplyToVector3Array = function() { return this.$val.ApplyToVector3Array(); };
	Matrix4.ptr.prototype.ApplyToBuffer = function() {
		var m;
		m = this;
		m.p.applyToBuffer();
		return m;
	};
	Matrix4.prototype.ApplyToBuffer = function() { return this.$val.ApplyToBuffer(); };
	Matrix4.ptr.prototype.Determinant = function() {
		var m;
		m = this;
		m.p.determinant();
		return m;
	};
	Matrix4.prototype.Determinant = function() { return this.$val.Determinant(); };
	Matrix4.ptr.prototype.Transpose = function() {
		var m;
		m = this;
		m.p.transpose();
		return m;
	};
	Matrix4.prototype.Transpose = function() { return this.$val.Transpose(); };
	Matrix4.ptr.prototype.FlattenToArrayOffset = function(array, offset) {
		var array, m, offset;
		m = this;
		m.p.flattenToArrayOffset(array, offset);
		return m;
	};
	Matrix4.prototype.FlattenToArrayOffset = function(array, offset) { return this.$val.FlattenToArrayOffset(array, offset); };
	Matrix4.ptr.prototype.GetPosition = function() {
		var m;
		m = this;
		m.p.getPosition();
		return m;
	};
	Matrix4.prototype.GetPosition = function() { return this.$val.GetPosition(); };
	Matrix4.ptr.prototype.SetPosition = function(v) {
		var m, v;
		m = this;
		m.p.setPosition(v);
		return m;
	};
	Matrix4.prototype.SetPosition = function(v) { return this.$val.SetPosition(v); };
	Matrix4.ptr.prototype.GetInverse = function(src, throwOnDegenerate) {
		var m, src, throwOnDegenerate;
		m = this;
		m.p.getInverse(src.p, $externalize(throwOnDegenerate, $Bool));
		return m;
	};
	Matrix4.prototype.GetInverse = function(src, throwOnDegenerate) { return this.$val.GetInverse(src, throwOnDegenerate); };
	Matrix4.ptr.prototype.Scale = function(v) {
		var m, v;
		m = this;
		m.p.scale(v);
		return m;
	};
	Matrix4.prototype.Scale = function(v) { return this.$val.Scale(v); };
	Matrix4.ptr.prototype.GetMaxScaleOnAxis = function() {
		var m;
		m = this;
		m.p.getMaxScaleOnAxis();
		return m;
	};
	Matrix4.prototype.GetMaxScaleOnAxis = function() { return this.$val.GetMaxScaleOnAxis(); };
	Matrix4.ptr.prototype.MakeTranslation = function(x, y, z) {
		var m, x, y, z;
		m = this;
		m.p.makeTranslation(x, y, z);
		return m;
	};
	Matrix4.prototype.MakeTranslation = function(x, y, z) { return this.$val.MakeTranslation(x, y, z); };
	Matrix4.ptr.prototype.MakeRotationX = function(theta) {
		var m, theta;
		m = this;
		m.p.makeRotationX(theta);
		return m;
	};
	Matrix4.prototype.MakeRotationX = function(theta) { return this.$val.MakeRotationX(theta); };
	Matrix4.ptr.prototype.MakeRotationY = function(theta) {
		var m, theta;
		m = this;
		m.p.makeRotationY(theta);
		return m;
	};
	Matrix4.prototype.MakeRotationY = function(theta) { return this.$val.MakeRotationY(theta); };
	Matrix4.ptr.prototype.MakeRotationZ = function(theta) {
		var m, theta;
		m = this;
		m.p.makeRotationZ(theta);
		return m;
	};
	Matrix4.prototype.MakeRotationZ = function(theta) { return this.$val.MakeRotationZ(theta); };
	Matrix4.ptr.prototype.MakeRotationAxis = function(axis, angle) {
		var angle, axis, m;
		m = this;
		m.p.makeRotationAxis(axis.p, angle);
		return m;
	};
	Matrix4.prototype.MakeRotationAxis = function(axis, angle) { return this.$val.MakeRotationAxis(axis, angle); };
	Matrix4.ptr.prototype.MakeScale = function(x, y, z) {
		var m, x, y, z;
		m = this;
		m.p.makeScale(x, y, z);
		return m;
	};
	Matrix4.prototype.MakeScale = function(x, y, z) { return this.$val.MakeScale(x, y, z); };
	Matrix4.ptr.prototype.Compose = function(position, quaternion, scale) {
		var m, position, quaternion, scale;
		m = this;
		m.p.compose(position, quaternion, scale);
		return m;
	};
	Matrix4.prototype.Compose = function(position, quaternion, scale) { return this.$val.Compose(position, quaternion, scale); };
	Matrix4.ptr.prototype.Decompose = function() {
		var m;
		m = this;
		m.p.decompose();
		return m;
	};
	Matrix4.prototype.Decompose = function() { return this.$val.Decompose(); };
	Matrix4.ptr.prototype.MakeFrustum = function(left, right, bottom, top, near, far) {
		var bottom, far, left, m, near, right, top;
		m = this;
		m.p.makeFrustum(left, right, bottom, top, near, far);
		return m;
	};
	Matrix4.prototype.MakeFrustum = function(left, right, bottom, top, near, far) { return this.$val.MakeFrustum(left, right, bottom, top, near, far); };
	Matrix4.ptr.prototype.MakePerspective = function(fov, aspect, near, far) {
		var aspect, far, fov, m, near;
		m = this;
		m.p.makePerspective(fov, aspect, near, far);
		return m;
	};
	Matrix4.prototype.MakePerspective = function(fov, aspect, near, far) { return this.$val.MakePerspective(fov, aspect, near, far); };
	Matrix4.ptr.prototype.MakeOrthographic = function(left, right, top, bottom, near, far) {
		var bottom, far, left, m, near, right, top;
		m = this;
		m.p.makeOrthographic(left, right, top, bottom, near, far);
		return m;
	};
	Matrix4.prototype.MakeOrthographic = function(left, right, top, bottom, near, far) { return this.$val.MakeOrthographic(left, right, top, bottom, near, far); };
	Matrix4.ptr.prototype.Equals = function(matrix) {
		var m, matrix;
		m = this;
		m.p.equals(matrix);
		return m;
	};
	Matrix4.prototype.Equals = function(matrix) { return this.$val.Equals(matrix); };
	Matrix4.ptr.prototype.FromArray = function(array) {
		var array, m;
		m = this;
		m.p.fromArray(array);
		return m;
	};
	Matrix4.prototype.FromArray = function(array) { return this.$val.FromArray(array); };
	Matrix4.ptr.prototype.ToArray = function() {
		var m;
		m = this;
		m.p.toArray();
		return m;
	};
	Matrix4.prototype.ToArray = function() { return this.$val.ToArray(); };
	Mesh.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.Object3D.p;
	};
	Mesh.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Mesh = function() {
		var t;
		t = this;
		return MeshFromJSObject(t.ctx.Mesh);
	};
	Three.prototype.Mesh = function() { return this.$val.Mesh(); };
	MeshFromJSObject = function(p) {
		var p;
		return new Mesh.ptr(new Object3D.ptr(p));
	};
	$pkg.MeshFromJSObject = MeshFromJSObject;
	Three.ptr.prototype.NewMesh = function(geometry, material) {
		var $24r, _r, _r$1, _r$2, geometry, material, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; geometry = $f.geometry; material = $f.material; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = geometry.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = material.JSObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = MeshFromJSObject(new (t.ctx.Mesh)(_r, _r$1)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 4; case 4: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Three.ptr.prototype.NewMesh }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.geometry = geometry; $f.material = material; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Three.prototype.NewMesh = function(geometry, material) { return this.$val.NewMesh(geometry, material); };
	Mesh.ptr.prototype.SetDrawMode = function(value) {
		var m, value;
		m = this;
		m.Object3D.p.setDrawMode($externalize(value, $Bool));
		return m;
	};
	Mesh.prototype.SetDrawMode = function(value) { return this.$val.SetDrawMode(value); };
	Mesh.ptr.prototype.GetMorphTargetIndexByName = function(name) {
		var m, name;
		m = this;
		m.Object3D.p.getMorphTargetIndexByName($externalize(name, $String));
		return m;
	};
	Mesh.prototype.GetMorphTargetIndexByName = function(name) { return this.$val.GetMorphTargetIndexByName(name); };
	MeshBasicMaterial.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	MeshBasicMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.MeshBasicMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.MeshBasicMaterial;
		return MeshBasicMaterialFromJSObject(p);
	};
	Three.prototype.MeshBasicMaterial = function() { return this.$val.MeshBasicMaterial(); };
	MeshBasicMaterialFromJSObject = function(p) {
		var p;
		return new MeshBasicMaterial.ptr(p);
	};
	$pkg.MeshBasicMaterialFromJSObject = MeshBasicMaterialFromJSObject;
	Three.ptr.prototype.NewMeshBasicMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.MeshBasicMaterial)($externalize(parameters, MeshBasicMaterialOpts));
		return MeshBasicMaterialFromJSObject(p);
	};
	Three.prototype.NewMeshBasicMaterial = function(parameters) { return this.$val.NewMeshBasicMaterial(parameters); };
	MeshBasicMaterial.ptr.prototype.Copy = function(source) {
		var m, source;
		m = this;
		m.p.copy(source.p);
		return m;
	};
	MeshBasicMaterial.prototype.Copy = function(source) { return this.$val.Copy(source); };
	MeshDepthMaterial.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	MeshDepthMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.MeshDepthMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.MeshDepthMaterial;
		return MeshDepthMaterialFromJSObject(p);
	};
	Three.prototype.MeshDepthMaterial = function() { return this.$val.MeshDepthMaterial(); };
	MeshDepthMaterialFromJSObject = function(p) {
		var p;
		return new MeshDepthMaterial.ptr(p);
	};
	$pkg.MeshDepthMaterialFromJSObject = MeshDepthMaterialFromJSObject;
	Three.ptr.prototype.NewMeshDepthMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.MeshDepthMaterial)($externalize(parameters, MeshDepthMaterialOpts));
		return MeshDepthMaterialFromJSObject(p);
	};
	Three.prototype.NewMeshDepthMaterial = function(parameters) { return this.$val.NewMeshDepthMaterial(parameters); };
	MeshDepthMaterial.ptr.prototype.Copy = function(source) {
		var m, source;
		m = this;
		m.p.copy(source.p);
		return m;
	};
	MeshDepthMaterial.prototype.Copy = function(source) { return this.$val.Copy(source); };
	MeshLambertMaterial.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	MeshLambertMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.MeshLambertMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.MeshLambertMaterial;
		return MeshLambertMaterialFromJSObject(p);
	};
	Three.prototype.MeshLambertMaterial = function() { return this.$val.MeshLambertMaterial(); };
	MeshLambertMaterialFromJSObject = function(p) {
		var p;
		return new MeshLambertMaterial.ptr(p);
	};
	$pkg.MeshLambertMaterialFromJSObject = MeshLambertMaterialFromJSObject;
	Three.ptr.prototype.NewMeshLambertMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.MeshLambertMaterial)($externalize(parameters, MeshLambertMaterialOpts));
		return MeshLambertMaterialFromJSObject(p);
	};
	Three.prototype.NewMeshLambertMaterial = function(parameters) { return this.$val.NewMeshLambertMaterial(parameters); };
	MeshLambertMaterial.ptr.prototype.Copy = function(source) {
		var m, source;
		m = this;
		m.p.copy(source.p);
		return m;
	};
	MeshLambertMaterial.prototype.Copy = function(source) { return this.$val.Copy(source); };
	MeshNormalMaterial.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	MeshNormalMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.MeshNormalMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.MeshNormalMaterial;
		return MeshNormalMaterialFromJSObject(p);
	};
	Three.prototype.MeshNormalMaterial = function() { return this.$val.MeshNormalMaterial(); };
	MeshNormalMaterialFromJSObject = function(p) {
		var p;
		return new MeshNormalMaterial.ptr(p);
	};
	$pkg.MeshNormalMaterialFromJSObject = MeshNormalMaterialFromJSObject;
	Three.ptr.prototype.NewMeshNormalMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.MeshNormalMaterial)($externalize(parameters, MeshNormalMaterialOpts));
		return MeshNormalMaterialFromJSObject(p);
	};
	Three.prototype.NewMeshNormalMaterial = function(parameters) { return this.$val.NewMeshNormalMaterial(parameters); };
	MeshNormalMaterial.ptr.prototype.Copy = function(source) {
		var m, source;
		m = this;
		m.p.copy(source.p);
		return m;
	};
	MeshNormalMaterial.prototype.Copy = function(source) { return this.$val.Copy(source); };
	MeshPhongMaterial.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.Material.p;
	};
	MeshPhongMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.MeshPhongMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.MeshPhongMaterial;
		return MeshPhongMaterialFromJSObject(p);
	};
	Three.prototype.MeshPhongMaterial = function() { return this.$val.MeshPhongMaterial(); };
	MeshPhongMaterialFromJSObject = function(p) {
		var p;
		return new MeshPhongMaterial.ptr(MaterialFromJSObject(p));
	};
	$pkg.MeshPhongMaterialFromJSObject = MeshPhongMaterialFromJSObject;
	Three.ptr.prototype.NewMeshPhongMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.MeshPhongMaterial)($externalize(parameters, MeshPhongMaterialOpts));
		return MeshPhongMaterialFromJSObject(p);
	};
	Three.prototype.NewMeshPhongMaterial = function(parameters) { return this.$val.NewMeshPhongMaterial(parameters); };
	MeshPhongMaterial.ptr.prototype.Copy = function(source) {
		var m, source;
		m = this;
		m.Material.p.copy(source.Material.p);
		return m;
	};
	MeshPhongMaterial.prototype.Copy = function(source) { return this.$val.Copy(source); };
	MeshStandardMaterial.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	MeshStandardMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.MeshStandardMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.MeshStandardMaterial;
		return MeshStandardMaterialFromJSObject(p);
	};
	Three.prototype.MeshStandardMaterial = function() { return this.$val.MeshStandardMaterial(); };
	MeshStandardMaterialFromJSObject = function(p) {
		var p;
		return new MeshStandardMaterial.ptr(p);
	};
	$pkg.MeshStandardMaterialFromJSObject = MeshStandardMaterialFromJSObject;
	Three.ptr.prototype.NewMeshStandardMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.MeshStandardMaterial)($externalize(parameters, MeshStandardMaterialOpts));
		return MeshStandardMaterialFromJSObject(p);
	};
	Three.prototype.NewMeshStandardMaterial = function(parameters) { return this.$val.NewMeshStandardMaterial(parameters); };
	MeshStandardMaterial.ptr.prototype.Copy = function(source) {
		var m, source;
		m = this;
		m.p.copy(source.p);
		return m;
	};
	MeshStandardMaterial.prototype.Copy = function(source) { return this.$val.Copy(source); };
	MorphBlendMesh.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	MorphBlendMesh.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.MorphBlendMesh = function() {
		var p, t;
		t = this;
		p = t.ctx.MorphBlendMesh;
		return MorphBlendMeshFromJSObject(p);
	};
	Three.prototype.MorphBlendMesh = function() { return this.$val.MorphBlendMesh(); };
	MorphBlendMeshFromJSObject = function(p) {
		var p;
		return new MorphBlendMesh.ptr(p);
	};
	$pkg.MorphBlendMeshFromJSObject = MorphBlendMeshFromJSObject;
	Three.ptr.prototype.NewMorphBlendMesh = function(geometry, material) {
		var geometry, material, p, t;
		t = this;
		p = new (t.ctx.MorphBlendMesh)(geometry, material);
		return MorphBlendMeshFromJSObject(p);
	};
	Three.prototype.NewMorphBlendMesh = function(geometry, material) { return this.$val.NewMorphBlendMesh(geometry, material); };
	MorphBlendMesh.ptr.prototype.CreateAnimation = function(name, start, end, fps) {
		var end, fps, m, name, start;
		m = this;
		m.p.createAnimation(name, start, end, fps);
		return m;
	};
	MorphBlendMesh.prototype.CreateAnimation = function(name, start, end, fps) { return this.$val.CreateAnimation(name, start, end, fps); };
	MorphBlendMesh.ptr.prototype.AutoCreateAnimations = function(fps) {
		var fps, m;
		m = this;
		m.p.autoCreateAnimations(fps);
		return m;
	};
	MorphBlendMesh.prototype.AutoCreateAnimations = function(fps) { return this.$val.AutoCreateAnimations(fps); };
	MorphBlendMesh.ptr.prototype.SetAnimationDirectionForward = function(name) {
		var m, name;
		m = this;
		m.p.setAnimationDirectionForward(name);
		return m;
	};
	MorphBlendMesh.prototype.SetAnimationDirectionForward = function(name) { return this.$val.SetAnimationDirectionForward(name); };
	MorphBlendMesh.ptr.prototype.SetAnimationDirectionBackward = function(name) {
		var m, name;
		m = this;
		m.p.setAnimationDirectionBackward(name);
		return m;
	};
	MorphBlendMesh.prototype.SetAnimationDirectionBackward = function(name) { return this.$val.SetAnimationDirectionBackward(name); };
	MorphBlendMesh.ptr.prototype.SetAnimationFPS = function(name, fps) {
		var fps, m, name;
		m = this;
		m.p.setAnimationFPS(name, fps);
		return m;
	};
	MorphBlendMesh.prototype.SetAnimationFPS = function(name, fps) { return this.$val.SetAnimationFPS(name, fps); };
	MorphBlendMesh.ptr.prototype.SetAnimationDuration = function(name, duration) {
		var duration, m, name;
		m = this;
		m.p.setAnimationDuration(name, duration);
		return m;
	};
	MorphBlendMesh.prototype.SetAnimationDuration = function(name, duration) { return this.$val.SetAnimationDuration(name, duration); };
	MorphBlendMesh.ptr.prototype.SetAnimationWeight = function(name, weight) {
		var m, name, weight;
		m = this;
		m.p.setAnimationWeight(name, weight);
		return m;
	};
	MorphBlendMesh.prototype.SetAnimationWeight = function(name, weight) { return this.$val.SetAnimationWeight(name, weight); };
	MorphBlendMesh.ptr.prototype.SetAnimationTime = function(name, time) {
		var m, name, time;
		m = this;
		m.p.setAnimationTime(name, time);
		return m;
	};
	MorphBlendMesh.prototype.SetAnimationTime = function(name, time) { return this.$val.SetAnimationTime(name, time); };
	MorphBlendMesh.ptr.prototype.GetAnimationTime = function(name) {
		var m, name;
		m = this;
		m.p.getAnimationTime(name);
		return m;
	};
	MorphBlendMesh.prototype.GetAnimationTime = function(name) { return this.$val.GetAnimationTime(name); };
	MorphBlendMesh.ptr.prototype.GetAnimationDuration = function(name) {
		var m, name;
		m = this;
		m.p.getAnimationDuration(name);
		return m;
	};
	MorphBlendMesh.prototype.GetAnimationDuration = function(name) { return this.$val.GetAnimationDuration(name); };
	MorphBlendMesh.ptr.prototype.PlayAnimation = function(name) {
		var m, name;
		m = this;
		m.p.playAnimation(name);
		return m;
	};
	MorphBlendMesh.prototype.PlayAnimation = function(name) { return this.$val.PlayAnimation(name); };
	MorphBlendMesh.ptr.prototype.StopAnimation = function(name) {
		var m, name;
		m = this;
		m.p.stopAnimation(name);
		return m;
	};
	MorphBlendMesh.prototype.StopAnimation = function(name) { return this.$val.StopAnimation(name); };
	MorphBlendMesh.ptr.prototype.Update = function(delta) {
		var delta, m;
		m = this;
		m.p.update(delta);
		return m;
	};
	MorphBlendMesh.prototype.Update = function(delta) { return this.$val.Update(delta); };
	MultiMaterial.ptr.prototype.JSObject = function() {
		var m;
		m = this;
		return m.p;
	};
	MultiMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.MultiMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.MultiMaterial;
		return MultiMaterialFromJSObject(p);
	};
	Three.prototype.MultiMaterial = function() { return this.$val.MultiMaterial(); };
	MultiMaterialFromJSObject = function(p) {
		var p;
		return new MultiMaterial.ptr(p);
	};
	$pkg.MultiMaterialFromJSObject = MultiMaterialFromJSObject;
	Three.ptr.prototype.NewMultiMaterial = function(materials) {
		var i, m, materials, p, t;
		t = this;
		m = sliceType$13.nil;
		i = 0;
		while (true) {
			if (!(i < materials.$length)) { break; }
			m = $append(m, ((i < 0 || i >= materials.$length) ? ($throwRuntimeError("index out of range"), undefined) : materials.$array[materials.$offset + i]).JSObject());
			i = i + (1) >> 0;
		}
		p = new (t.ctx.MultiMaterial)($externalize(m, sliceType$13));
		return MultiMaterialFromJSObject(p);
	};
	Three.prototype.NewMultiMaterial = function(materials) { return this.$val.NewMultiMaterial(materials); };
	MultiMaterial.ptr.prototype.ToJSON = function(meta) {
		var m, meta;
		m = this;
		m.p.toJSON(meta);
		return m;
	};
	MultiMaterial.prototype.ToJSON = function(meta) { return this.$val.ToJSON(meta); };
	MultiMaterial.ptr.prototype.Clone = function() {
		var m;
		m = this;
		m.p.clone();
		return m;
	};
	MultiMaterial.prototype.Clone = function() { return this.$val.Clone(); };
	NumberKeyframeTrack.ptr.prototype.JSObject = function() {
		var n;
		n = this;
		return n.p;
	};
	NumberKeyframeTrack.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.NumberKeyframeTrack = function() {
		var p, t;
		t = this;
		p = t.ctx.NumberKeyframeTrack;
		return NumberKeyframeTrackFromJSObject(p);
	};
	Three.prototype.NumberKeyframeTrack = function() { return this.$val.NumberKeyframeTrack(); };
	NumberKeyframeTrackFromJSObject = function(p) {
		var p;
		return new NumberKeyframeTrack.ptr(p);
	};
	$pkg.NumberKeyframeTrackFromJSObject = NumberKeyframeTrackFromJSObject;
	Three.ptr.prototype.NewNumberKeyframeTrack = function(name, times, values, interpolation) {
		var interpolation, name, p, t, times, values;
		t = this;
		p = new (t.ctx.NumberKeyframeTrack)(name, times, values, interpolation);
		return NumberKeyframeTrackFromJSObject(p);
	};
	Three.prototype.NewNumberKeyframeTrack = function(name, times, values, interpolation) { return this.$val.NewNumberKeyframeTrack(name, times, values, interpolation); };
	Object3D.ptr.prototype.JSObject = function() {
		var o;
		o = this;
		return o.p;
	};
	Object3D.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Object3D = function() {
		var p, t;
		t = this;
		p = t.ctx.Object3D;
		return Object3DFromJSObject(p);
	};
	Three.prototype.Object3D = function() { return this.$val.Object3D(); };
	Object3DFromJSObject = function(p) {
		var p;
		return new Object3D.ptr(p);
	};
	$pkg.Object3DFromJSObject = Object3DFromJSObject;
	Three.ptr.prototype.NewObject3D = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Object3D)();
		return Object3DFromJSObject(p);
	};
	Three.prototype.NewObject3D = function() { return this.$val.NewObject3D(); };
	Object3D.ptr.prototype.ApplyMatrix = function(matrix) {
		var matrix, o;
		o = this;
		o.p.applyMatrix(matrix.p);
		return o;
	};
	Object3D.prototype.ApplyMatrix = function(matrix) { return this.$val.ApplyMatrix(matrix); };
	Object3D.ptr.prototype.SetRotationFromAxisAngle = function(axis, angle) {
		var angle, axis, o;
		o = this;
		o.p.setRotationFromAxisAngle(axis, angle);
		return o;
	};
	Object3D.prototype.SetRotationFromAxisAngle = function(axis, angle) { return this.$val.SetRotationFromAxisAngle(axis, angle); };
	Object3D.ptr.prototype.SetRotationFromEuler = function(euler) {
		var euler, o;
		o = this;
		o.p.setRotationFromEuler(euler);
		return o;
	};
	Object3D.prototype.SetRotationFromEuler = function(euler) { return this.$val.SetRotationFromEuler(euler); };
	Object3D.ptr.prototype.SetRotationFromMatrix = function(m) {
		var m, o;
		o = this;
		o.p.setRotationFromMatrix(m);
		return o;
	};
	Object3D.prototype.SetRotationFromMatrix = function(m) { return this.$val.SetRotationFromMatrix(m); };
	Object3D.ptr.prototype.SetRotationFromQuaternion = function(q) {
		var o, q;
		o = this;
		o.p.setRotationFromQuaternion(q);
		return o;
	};
	Object3D.prototype.SetRotationFromQuaternion = function(q) { return this.$val.SetRotationFromQuaternion(q); };
	Object3D.ptr.prototype.RotateOnAxis = function() {
		var o;
		o = this;
		o.p.rotateOnAxis();
		return o;
	};
	Object3D.prototype.RotateOnAxis = function() { return this.$val.RotateOnAxis(); };
	Object3D.ptr.prototype.RotateX = function() {
		var o;
		o = this;
		o.p.rotateX();
		return o;
	};
	Object3D.prototype.RotateX = function() { return this.$val.RotateX(); };
	Object3D.ptr.prototype.RotateY = function() {
		var o;
		o = this;
		o.p.rotateY();
		return o;
	};
	Object3D.prototype.RotateY = function() { return this.$val.RotateY(); };
	Object3D.ptr.prototype.RotateZ = function() {
		var o;
		o = this;
		o.p.rotateZ();
		return o;
	};
	Object3D.prototype.RotateZ = function() { return this.$val.RotateZ(); };
	Object3D.ptr.prototype.TranslateOnAxis = function() {
		var o;
		o = this;
		o.p.translateOnAxis();
		return o;
	};
	Object3D.prototype.TranslateOnAxis = function() { return this.$val.TranslateOnAxis(); };
	Object3D.ptr.prototype.TranslateX = function(distance) {
		var distance, o;
		o = this;
		o.p.translateX(distance);
		return o;
	};
	Object3D.prototype.TranslateX = function(distance) { return this.$val.TranslateX(distance); };
	Object3D.ptr.prototype.TranslateY = function(distance) {
		var distance, o;
		o = this;
		o.p.translateY(distance);
		return o;
	};
	Object3D.prototype.TranslateY = function(distance) { return this.$val.TranslateY(distance); };
	Object3D.ptr.prototype.TranslateZ = function() {
		var o;
		o = this;
		o.p.translateZ();
		return o;
	};
	Object3D.prototype.TranslateZ = function() { return this.$val.TranslateZ(); };
	Object3D.ptr.prototype.LocalToWorld = function(vector) {
		var o, vector;
		o = this;
		o.p.localToWorld(vector);
		return o;
	};
	Object3D.prototype.LocalToWorld = function(vector) { return this.$val.LocalToWorld(vector); };
	Object3D.ptr.prototype.WorldToLocal = function() {
		var o;
		o = this;
		o.p.worldToLocal();
		return o;
	};
	Object3D.prototype.WorldToLocal = function() { return this.$val.WorldToLocal(); };
	Object3D.ptr.prototype.LookAt = function() {
		var o;
		o = this;
		o.p.lookAt();
		return o;
	};
	Object3D.prototype.LookAt = function() { return this.$val.LookAt(); };
	Object3D.ptr.prototype.Add = function(obj) {
		var _r, _tuple, o, obj, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; o = $f.o; obj = $f.obj; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		o = this;
		_tuple = $assertType(obj, JSObject, true);
		v = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = v.JSObject(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			o.p.add(_r);
			$s = 3; continue;
		/* } else { */ case 2:
			o.p.add($externalize(obj, $emptyInterface));
		/* } */ case 3:
		$s = -1; return o;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Object3D.ptr.prototype.Add }; } $f._r = _r; $f._tuple = _tuple; $f.o = o; $f.obj = obj; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Object3D.prototype.Add = function(obj) { return this.$val.Add(obj); };
	Object3D.ptr.prototype.Remove = function(obj) {
		var _r, _tuple, o, obj, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; o = $f.o; obj = $f.obj; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		o = this;
		_tuple = $assertType(obj, JSObject, true);
		v = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = v.JSObject(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			o.p.remove(_r);
			$s = 3; continue;
		/* } else { */ case 2:
			o.p.remove($externalize(obj, $emptyInterface));
		/* } */ case 3:
		$s = -1; return o;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Object3D.ptr.prototype.Remove }; } $f._r = _r; $f._tuple = _tuple; $f.o = o; $f.obj = obj; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Object3D.prototype.Remove = function(obj) { return this.$val.Remove(obj); };
	Object3D.ptr.prototype.GetObjectByID = function(id) {
		var id, o;
		o = this;
		o.p.getObjectById(id);
		return o;
	};
	Object3D.prototype.GetObjectByID = function(id) { return this.$val.GetObjectByID(id); };
	Object3D.ptr.prototype.GetObjectByName = function(name) {
		var name, o;
		o = this;
		o.p.getObjectByName($externalize(name, $String));
		return o;
	};
	Object3D.prototype.GetObjectByName = function(name) { return this.$val.GetObjectByName(name); };
	Object3D.ptr.prototype.GetObjectByProperty = function(name, value) {
		var name, o, value;
		o = this;
		o.p.getObjectByProperty($externalize(name, $String), value);
		return o;
	};
	Object3D.prototype.GetObjectByProperty = function(name, value) { return this.$val.GetObjectByProperty(name, value); };
	Object3D.ptr.prototype.GetWorldPosition = function(optionalTarget) {
		var o, optionalTarget;
		o = this;
		o.p.getWorldPosition(optionalTarget);
		return o;
	};
	Object3D.prototype.GetWorldPosition = function(optionalTarget) { return this.$val.GetWorldPosition(optionalTarget); };
	Object3D.ptr.prototype.GetWorldQuaternion = function() {
		var o;
		o = this;
		o.p.getWorldQuaternion();
		return o;
	};
	Object3D.prototype.GetWorldQuaternion = function() { return this.$val.GetWorldQuaternion(); };
	Object3D.ptr.prototype.GetWorldRotation = function() {
		var o;
		o = this;
		o.p.getWorldRotation();
		return o;
	};
	Object3D.prototype.GetWorldRotation = function() { return this.$val.GetWorldRotation(); };
	Object3D.ptr.prototype.GetWorldScale = function() {
		var o;
		o = this;
		o.p.getWorldScale();
		return o;
	};
	Object3D.prototype.GetWorldScale = function() { return this.$val.GetWorldScale(); };
	Object3D.ptr.prototype.GetWorldDirection = function() {
		var o;
		o = this;
		o.p.getWorldDirection();
		return o;
	};
	Object3D.prototype.GetWorldDirection = function() { return this.$val.GetWorldDirection(); };
	Object3D.ptr.prototype.Raycast = function() {
		var o;
		o = this;
		o.p.raycast();
		return o;
	};
	Object3D.prototype.Raycast = function() { return this.$val.Raycast(); };
	Object3D.ptr.prototype.Traverse = function(callback) {
		var callback, o;
		o = this;
		o.p.traverse(callback);
		return o;
	};
	Object3D.prototype.Traverse = function(callback) { return this.$val.Traverse(callback); };
	Object3D.ptr.prototype.TraverseVisible = function(callback) {
		var callback, o;
		o = this;
		o.p.traverseVisible(callback);
		return o;
	};
	Object3D.prototype.TraverseVisible = function(callback) { return this.$val.TraverseVisible(callback); };
	Object3D.ptr.prototype.TraverseAncestors = function(callback) {
		var callback, o;
		o = this;
		o.p.traverseAncestors(callback);
		return o;
	};
	Object3D.prototype.TraverseAncestors = function(callback) { return this.$val.TraverseAncestors(callback); };
	Object3D.ptr.prototype.UpdateMatrix = function() {
		var o;
		o = this;
		o.p.updateMatrix();
		return o;
	};
	Object3D.prototype.UpdateMatrix = function() { return this.$val.UpdateMatrix(); };
	Object3D.ptr.prototype.UpdateMatrixWorld = function(force) {
		var force, o;
		o = this;
		o.p.updateMatrixWorld(force);
		return o;
	};
	Object3D.prototype.UpdateMatrixWorld = function(force) { return this.$val.UpdateMatrixWorld(force); };
	Object3D.ptr.prototype.ToJSON = function(meta) {
		var meta, o;
		o = this;
		o.p.toJSON(meta);
		return o;
	};
	Object3D.prototype.ToJSON = function(meta) { return this.$val.ToJSON(meta); };
	Object3D.ptr.prototype.Clone = function(recursive) {
		var o, recursive;
		o = this;
		o.p.clone(recursive);
		return o;
	};
	Object3D.prototype.Clone = function(recursive) { return this.$val.Clone(recursive); };
	Object3D.ptr.prototype.Copy = function(source, recursive) {
		var o, recursive, source;
		o = this;
		o.p.copy(source.p, $externalize(recursive, $Bool));
		return o;
	};
	Object3D.prototype.Copy = function(source, recursive) { return this.$val.Copy(source, recursive); };
	Object3D.ptr.prototype.ID = function() {
		var o;
		o = this;
		return $parseInt(o.p.id) >> 0;
	};
	Object3D.prototype.ID = function() { return this.$val.ID(); };
	Object3D.ptr.prototype.UUID = function() {
		var o;
		o = this;
		return $parseInt(o.p.uuid) >> 0;
	};
	Object3D.prototype.UUID = function() { return this.$val.UUID(); };
	Object3D.ptr.prototype.Name = function() {
		var o;
		o = this;
		return $internalize(o.p.name, $String);
	};
	Object3D.prototype.Name = function() { return this.$val.Name(); };
	Object3D.ptr.prototype.SetName = function(value) {
		var o, value;
		o = this;
		o.p.name = $externalize(value, $String);
		return o;
	};
	Object3D.prototype.SetName = function(value) { return this.$val.SetName(value); };
	Object3D.ptr.prototype.Type = function() {
		var o;
		o = this;
		return $internalize(o.p.type, $String);
	};
	Object3D.prototype.Type = function() { return this.$val.Type(); };
	Object3D.ptr.prototype.Parent = function() {
		var o;
		o = this;
		return Object3DFromJSObject(o.p.parent);
	};
	Object3D.prototype.Parent = function() { return this.$val.Parent(); };
	Object3D.ptr.prototype.Children = function() {
		var children, i, o, result;
		o = this;
		result = sliceType$17.nil;
		children = o.p.children;
		i = 0;
		while (true) {
			if (!(i < $parseInt(children.length))) { break; }
			result = $append(result, Object3DFromJSObject(children[i]));
			i = i + (1) >> 0;
		}
		return result;
	};
	Object3D.prototype.Children = function() { return this.$val.Children(); };
	Object3D.ptr.prototype.Up = function() {
		var o;
		o = this;
		return Vector3FromJSObject(o.p.up);
	};
	Object3D.prototype.Up = function() { return this.$val.Up(); };
	Object3D.ptr.prototype.Position = function() {
		var o;
		o = this;
		return Vector3FromJSObject(o.p.position);
	};
	Object3D.prototype.Position = function() { return this.$val.Position(); };
	Object3D.ptr.prototype.Rotation = function() {
		var o;
		o = this;
		return EulerFromJSObject(o.p.rotation);
	};
	Object3D.prototype.Rotation = function() { return this.$val.Rotation(); };
	Object3D.ptr.prototype.Quaternion = function() {
		var o;
		o = this;
		return QuaternionFromJSObject(o.p.quaternion);
	};
	Object3D.prototype.Quaternion = function() { return this.$val.Quaternion(); };
	Object3D.ptr.prototype.Scale = function() {
		var o;
		o = this;
		return Vector3FromJSObject(o.p.scale);
	};
	Object3D.prototype.Scale = function() { return this.$val.Scale(); };
	Object3D.ptr.prototype.ModelViewMatrix = function() {
		var o;
		o = this;
		return Matrix4FromJSObject(o.p.modelViewMatrix);
	};
	Object3D.prototype.ModelViewMatrix = function() { return this.$val.ModelViewMatrix(); };
	Object3D.ptr.prototype.NormalMatrix = function() {
		var o;
		o = this;
		return Matrix3FromJSObject(o.p.normalMatrix);
	};
	Object3D.prototype.NormalMatrix = function() { return this.$val.NormalMatrix(); };
	Object3D.ptr.prototype.Matrix = function() {
		var o;
		o = this;
		return Matrix4FromJSObject(o.p.matrix);
	};
	Object3D.prototype.Matrix = function() { return this.$val.Matrix(); };
	Object3D.ptr.prototype.SetMatrix = function(value) {
		var o, value;
		o = this;
		o.p.matrix = value.p;
		return o;
	};
	Object3D.prototype.SetMatrix = function(value) { return this.$val.SetMatrix(value); };
	Object3D.ptr.prototype.MatrixWorld = function() {
		var o;
		o = this;
		return Matrix4FromJSObject(o.p.matrixWorld);
	};
	Object3D.prototype.MatrixWorld = function() { return this.$val.MatrixWorld(); };
	Object3D.ptr.prototype.SetMatrixWorld = function(value) {
		var o, value;
		o = this;
		o.p.matrixWorld = value.p;
		return o;
	};
	Object3D.prototype.SetMatrixWorld = function(value) { return this.$val.SetMatrixWorld(value); };
	Object3D.ptr.prototype.RotationAutoUpdate = function() {
		var o;
		o = this;
		return !!(o.p.rotationAutoUpdate);
	};
	Object3D.prototype.RotationAutoUpdate = function() { return this.$val.RotationAutoUpdate(); };
	Object3D.ptr.prototype.SetRotationAutoUpdate = function(value) {
		var o, value;
		o = this;
		o.p.rotationAutoUpdate = $externalize(value, $Bool);
		return o;
	};
	Object3D.prototype.SetRotationAutoUpdate = function(value) { return this.$val.SetRotationAutoUpdate(value); };
	Object3D.ptr.prototype.MatrixWorldNeedsUpdate = function() {
		var o;
		o = this;
		return !!(o.p.matrixWorldNeedsUpdate);
	};
	Object3D.prototype.MatrixWorldNeedsUpdate = function() { return this.$val.MatrixWorldNeedsUpdate(); };
	Object3D.ptr.prototype.SetMatrixWorldNeedsUpdate = function(value) {
		var o, value;
		o = this;
		o.p.matrixWorldNeedsUpdate = $externalize(value, $Bool);
		return o;
	};
	Object3D.prototype.SetMatrixWorldNeedsUpdate = function(value) { return this.$val.SetMatrixWorldNeedsUpdate(value); };
	Object3D.ptr.prototype.Layers = function() {
		var o;
		o = this;
		return LayersFromJSObject(o.p.layers);
	};
	Object3D.prototype.Layers = function() { return this.$val.Layers(); };
	Object3D.ptr.prototype.SetLayers = function(value) {
		var o, value;
		o = this;
		o.p.layers = value.p;
		return o;
	};
	Object3D.prototype.SetLayers = function(value) { return this.$val.SetLayers(value); };
	Object3D.ptr.prototype.Visible = function() {
		var o;
		o = this;
		return !!(o.p.visible);
	};
	Object3D.prototype.Visible = function() { return this.$val.Visible(); };
	Object3D.ptr.prototype.SetVisible = function(value) {
		var o, value;
		o = this;
		o.p.visible = $externalize(value, $Bool);
		return o;
	};
	Object3D.prototype.SetVisible = function(value) { return this.$val.SetVisible(value); };
	Object3D.ptr.prototype.CastShadow = function() {
		var o;
		o = this;
		return !!(o.p.castShadow);
	};
	Object3D.prototype.CastShadow = function() { return this.$val.CastShadow(); };
	Object3D.ptr.prototype.SetCastShadow = function(value) {
		var o, value;
		o = this;
		o.p.castShadow = $externalize(value, $Bool);
		return o;
	};
	Object3D.prototype.SetCastShadow = function(value) { return this.$val.SetCastShadow(value); };
	Object3D.ptr.prototype.ReceiveShadow = function() {
		var o;
		o = this;
		return !!(o.p.receiveShadow);
	};
	Object3D.prototype.ReceiveShadow = function() { return this.$val.ReceiveShadow(); };
	Object3D.ptr.prototype.SetReceiveShadow = function(value) {
		var o, value;
		o = this;
		o.p.receiveShadow = $externalize(value, $Bool);
		return o;
	};
	Object3D.prototype.SetReceiveShadow = function(value) { return this.$val.SetReceiveShadow(value); };
	Object3D.ptr.prototype.FrustumCulled = function() {
		var o;
		o = this;
		return !!(o.p.frustumCulled);
	};
	Object3D.prototype.FrustumCulled = function() { return this.$val.FrustumCulled(); };
	Object3D.ptr.prototype.SetFrustumCulled = function(value) {
		var o, value;
		o = this;
		o.p.frustumCulled = $externalize(value, $Bool);
		return o;
	};
	Object3D.prototype.SetFrustumCulled = function(value) { return this.$val.SetFrustumCulled(value); };
	Object3D.ptr.prototype.MatrixAutoUpdate = function() {
		var o;
		o = this;
		return !!(o.p.matrixAutoUpdate);
	};
	Object3D.prototype.MatrixAutoUpdate = function() { return this.$val.MatrixAutoUpdate(); };
	Object3D.ptr.prototype.SetMatrixAutoUpdate = function(value) {
		var o, value;
		o = this;
		o.p.matrixAutoUpdate = $externalize(value, $Bool);
		return o;
	};
	Object3D.prototype.SetMatrixAutoUpdate = function(value) { return this.$val.SetMatrixAutoUpdate(value); };
	Object3D.ptr.prototype.RenderOrder = function() {
		var o;
		o = this;
		return $parseInt(o.p.renderOrder) >> 0;
	};
	Object3D.prototype.RenderOrder = function() { return this.$val.RenderOrder(); };
	Object3D.ptr.prototype.SetRenderOrder = function(value) {
		var o, value;
		o = this;
		o.p.renderOrder = value;
		return o;
	};
	Object3D.prototype.SetRenderOrder = function(value) { return this.$val.SetRenderOrder(value); };
	Object3D.ptr.prototype.UserData = function() {
		var o;
		o = this;
		return o.p.userData;
	};
	Object3D.prototype.UserData = function() { return this.$val.UserData(); };
	Object3D.ptr.prototype.SetUserData = function(value) {
		var o, value;
		o = this;
		o.p.userData = value;
		return o;
	};
	Object3D.prototype.SetUserData = function(value) { return this.$val.SetUserData(value); };
	ObjectLoader.ptr.prototype.JSObject = function() {
		var o;
		o = this;
		return o.p;
	};
	ObjectLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ObjectLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.ObjectLoader;
		return ObjectLoaderFromJSObject(p);
	};
	Three.prototype.ObjectLoader = function() { return this.$val.ObjectLoader(); };
	ObjectLoaderFromJSObject = function(p) {
		var p;
		return new ObjectLoader.ptr(p);
	};
	$pkg.ObjectLoaderFromJSObject = ObjectLoaderFromJSObject;
	Three.ptr.prototype.NewObjectLoader = function(manager) {
		var manager, p, t;
		t = this;
		p = new (t.ctx.ObjectLoader)(manager);
		return ObjectLoaderFromJSObject(p);
	};
	Three.prototype.NewObjectLoader = function(manager) { return this.$val.NewObjectLoader(manager); };
	ObjectLoader.ptr.prototype.Load = function(url, onLoad, onProgress, onError) {
		var o, onError, onLoad, onProgress, url;
		o = this;
		o.p.load(url, onLoad, onProgress, onError);
		return o;
	};
	ObjectLoader.prototype.Load = function(url, onLoad, onProgress, onError) { return this.$val.Load(url, onLoad, onProgress, onError); };
	ObjectLoader.ptr.prototype.SetTexturePath = function(value) {
		var o, value;
		o = this;
		o.p.setTexturePath(value);
		return o;
	};
	ObjectLoader.prototype.SetTexturePath = function(value) { return this.$val.SetTexturePath(value); };
	ObjectLoader.ptr.prototype.SetCrossOrigin = function(value) {
		var o, value;
		o = this;
		o.p.setCrossOrigin(value);
		return o;
	};
	ObjectLoader.prototype.SetCrossOrigin = function(value) { return this.$val.SetCrossOrigin(value); };
	ObjectLoader.ptr.prototype.Parse = function(json, onLoad) {
		var json, o, onLoad;
		o = this;
		o.p.parse(json, onLoad);
		return o;
	};
	ObjectLoader.prototype.Parse = function(json, onLoad) { return this.$val.Parse(json, onLoad); };
	ObjectLoader.ptr.prototype.ParseGeometries = function(json) {
		var json, o;
		o = this;
		o.p.parseGeometries(json);
		return o;
	};
	ObjectLoader.prototype.ParseGeometries = function(json) { return this.$val.ParseGeometries(json); };
	ObjectLoader.ptr.prototype.ParseMaterials = function(json, textures) {
		var json, o, textures;
		o = this;
		o.p.parseMaterials(json, textures);
		return o;
	};
	ObjectLoader.prototype.ParseMaterials = function(json, textures) { return this.$val.ParseMaterials(json, textures); };
	ObjectLoader.ptr.prototype.ParseAnimations = function(json) {
		var json, o;
		o = this;
		o.p.parseAnimations(json);
		return o;
	};
	ObjectLoader.prototype.ParseAnimations = function(json) { return this.$val.ParseAnimations(json); };
	ObjectLoader.ptr.prototype.ParseImages = function(json, onLoad) {
		var json, o, onLoad;
		o = this;
		o.p.parseImages(json, onLoad);
		return o;
	};
	ObjectLoader.prototype.ParseImages = function(json, onLoad) { return this.$val.ParseImages(json, onLoad); };
	ObjectLoader.ptr.prototype.ParseTextures = function(json, images) {
		var images, json, o;
		o = this;
		o.p.parseTextures(json, images);
		return o;
	};
	ObjectLoader.prototype.ParseTextures = function(json, images) { return this.$val.ParseTextures(json, images); };
	ObjectLoader.ptr.prototype.ParseObject = function() {
		var o;
		o = this;
		o.p.parseObject();
		return o;
	};
	ObjectLoader.prototype.ParseObject = function() { return this.$val.ParseObject(); };
	OctahedronGeometry.ptr.prototype.JSObject = function() {
		var o;
		o = this;
		return o.p;
	};
	OctahedronGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.OctahedronGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.OctahedronGeometry;
		return OctahedronGeometryFromJSObject(p);
	};
	Three.prototype.OctahedronGeometry = function() { return this.$val.OctahedronGeometry(); };
	OctahedronGeometryFromJSObject = function(p) {
		var p;
		return new OctahedronGeometry.ptr(p);
	};
	$pkg.OctahedronGeometryFromJSObject = OctahedronGeometryFromJSObject;
	Three.ptr.prototype.NewOctahedronGeometry = function(radius, detail) {
		var detail, p, radius, t;
		t = this;
		p = new (t.ctx.OctahedronGeometry)(radius, detail);
		return OctahedronGeometryFromJSObject(p);
	};
	Three.prototype.NewOctahedronGeometry = function(radius, detail) { return this.$val.NewOctahedronGeometry(radius, detail); };
	OrthographicCamera.ptr.prototype.JSObject = function() {
		var o;
		o = this;
		return o.Camera.Object3D.p;
	};
	OrthographicCamera.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.OrthographicCamera = function() {
		var t;
		t = this;
		return OrthographicCameraFromJSObject(t.ctx.OrthographicCamera);
	};
	Three.prototype.OrthographicCamera = function() { return this.$val.OrthographicCamera(); };
	OrthographicCameraFromJSObject = function(p) {
		var p;
		return new OrthographicCamera.ptr(new Camera.ptr(new Object3D.ptr(p)));
	};
	$pkg.OrthographicCameraFromJSObject = OrthographicCameraFromJSObject;
	Three.ptr.prototype.NewOrthographicCamera = function(left, right, top, bottom, near, far) {
		var bottom, far, left, near, right, t, top;
		t = this;
		return OrthographicCameraFromJSObject(new (t.ctx.OrthographicCamera)(left, right, top, bottom, near, far));
	};
	Three.prototype.NewOrthographicCamera = function(left, right, top, bottom, near, far) { return this.$val.NewOrthographicCamera(left, right, top, bottom, near, far); };
	OrthographicCamera.ptr.prototype.Copy = function(source) {
		var o, source;
		o = this;
		o.Camera.Object3D.p.copy(source.Camera.Object3D.p);
		return o;
	};
	OrthographicCamera.prototype.Copy = function(source) { return this.$val.Copy(source); };
	OrthographicCamera.ptr.prototype.ToJSON = function(meta) {
		var meta, o;
		o = this;
		o.Camera.Object3D.p.toJSON(meta);
		return o;
	};
	OrthographicCamera.prototype.ToJSON = function(meta) { return this.$val.ToJSON(meta); };
	OrthographicCamera.ptr.prototype.Zoom = function() {
		var o;
		o = this;
		return $parseFloat(o.Camera.Object3D.p.zoom);
	};
	OrthographicCamera.prototype.Zoom = function() { return this.$val.Zoom(); };
	OrthographicCamera.ptr.prototype.Left = function() {
		var o;
		o = this;
		return $parseFloat(o.Camera.Object3D.p.left);
	};
	OrthographicCamera.prototype.Left = function() { return this.$val.Left(); };
	OrthographicCamera.ptr.prototype.Right = function() {
		var o;
		o = this;
		return $parseFloat(o.Camera.Object3D.p.right);
	};
	OrthographicCamera.prototype.Right = function() { return this.$val.Right(); };
	OrthographicCamera.ptr.prototype.Top = function() {
		var o;
		o = this;
		return $parseFloat(o.Camera.Object3D.p.top);
	};
	OrthographicCamera.prototype.Top = function() { return this.$val.Top(); };
	OrthographicCamera.ptr.prototype.Bottom = function() {
		var o;
		o = this;
		return $parseFloat(o.Camera.Object3D.p.bottom);
	};
	OrthographicCamera.prototype.Bottom = function() { return this.$val.Bottom(); };
	OrthographicCamera.ptr.prototype.Near = function() {
		var o;
		o = this;
		return $parseFloat(o.Camera.Object3D.p.near);
	};
	OrthographicCamera.prototype.Near = function() { return this.$val.Near(); };
	OrthographicCamera.ptr.prototype.Far = function() {
		var o;
		o = this;
		return $parseFloat(o.Camera.Object3D.p.far);
	};
	OrthographicCamera.prototype.Far = function() { return this.$val.Far(); };
	ParametricGeometry.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.p;
	};
	ParametricGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ParametricGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.ParametricGeometry;
		return ParametricGeometryFromJSObject(p);
	};
	Three.prototype.ParametricGeometry = function() { return this.$val.ParametricGeometry(); };
	ParametricGeometryFromJSObject = function(p) {
		var p;
		return new ParametricGeometry.ptr(p);
	};
	$pkg.ParametricGeometryFromJSObject = ParametricGeometryFromJSObject;
	Three.ptr.prototype.NewParametricGeometry = function(fn, slices, stacks) {
		var fn, p, slices, stacks, t;
		t = this;
		p = new (t.ctx.ParametricGeometry)($externalize(fn, funcType$2), slices, stacks);
		return ParametricGeometryFromJSObject(p);
	};
	Three.prototype.NewParametricGeometry = function(fn, slices, stacks) { return this.$val.NewParametricGeometry(fn, slices, stacks); };
	Path.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.CurvePath.Curve.p;
	};
	Path.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Path = function() {
		var p, t;
		t = this;
		p = t.ctx.Path;
		return PathFromJSObject(p);
	};
	Three.prototype.Path = function() { return this.$val.Path(); };
	PathFromJSObject = function(p) {
		var p;
		return new Path.ptr(CurvePathFromJSObject(p));
	};
	$pkg.PathFromJSObject = PathFromJSObject;
	Three.ptr.prototype.NewPath = function(points) {
		var p, points, t;
		t = this;
		p = new (t.ctx.Path)(points);
		return PathFromJSObject(p);
	};
	Three.prototype.NewPath = function(points) { return this.$val.NewPath(points); };
	Path.ptr.prototype.FromPoints = function(vectors) {
		var p, vectors;
		p = this;
		p.CurvePath.Curve.p.fromPoints(vectors);
		return p;
	};
	Path.prototype.FromPoints = function(vectors) { return this.$val.FromPoints(vectors); };
	Path.ptr.prototype.MoveTo = function(x, y) {
		var p, x, y;
		p = this;
		p.CurvePath.Curve.p.moveTo(x, y);
		return p;
	};
	Path.prototype.MoveTo = function(x, y) { return this.$val.MoveTo(x, y); };
	Path.ptr.prototype.LineTo = function(x, y) {
		var p, x, y;
		p = this;
		p.CurvePath.Curve.p.lineTo(x, y);
		return p;
	};
	Path.prototype.LineTo = function(x, y) { return this.$val.LineTo(x, y); };
	Path.ptr.prototype.QuadraticCurveTo = function(aCPx, aCPy, aX, aY) {
		var aCPx, aCPy, aX, aY, p;
		p = this;
		p.CurvePath.Curve.p.quadraticCurveTo(aCPx, aCPy, aX, aY);
		return p;
	};
	Path.prototype.QuadraticCurveTo = function(aCPx, aCPy, aX, aY) { return this.$val.QuadraticCurveTo(aCPx, aCPy, aX, aY); };
	Path.ptr.prototype.BezierCurveTo = function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
		var aCP1x, aCP1y, aCP2x, aCP2y, aX, aY, p;
		p = this;
		p.CurvePath.Curve.p.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
		return p;
	};
	Path.prototype.BezierCurveTo = function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) { return this.$val.BezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY); };
	Path.ptr.prototype.SplineThru = function(pts) {
		var p, pts;
		p = this;
		p.CurvePath.Curve.p.splineThru(pts);
		return p;
	};
	Path.prototype.SplineThru = function(pts) { return this.$val.SplineThru(pts); };
	Path.ptr.prototype.Arc = function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
		var aClockwise, aEndAngle, aRadius, aStartAngle, aX, aY, p;
		p = this;
		p.CurvePath.Curve.p.arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise);
		return p;
	};
	Path.prototype.Arc = function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) { return this.$val.Arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise); };
	Path.ptr.prototype.Absarc = function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
		var aClockwise, aEndAngle, aRadius, aStartAngle, aX, aY, p;
		p = this;
		p.CurvePath.Curve.p.absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise);
		return p;
	};
	Path.prototype.Absarc = function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) { return this.$val.Absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise); };
	Path.ptr.prototype.Ellipse = function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
		var aClockwise, aEndAngle, aRotation, aStartAngle, aX, aY, p, xRadius, yRadius;
		p = this;
		p.CurvePath.Curve.p.ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
		return p;
	};
	Path.prototype.Ellipse = function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) { return this.$val.Ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation); };
	Path.ptr.prototype.Absellipse = function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
		var aClockwise, aEndAngle, aRotation, aStartAngle, aX, aY, p, xRadius, yRadius;
		p = this;
		p.CurvePath.Curve.p.absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
		return p;
	};
	Path.prototype.Absellipse = function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) { return this.$val.Absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation); };
	Path.ptr.prototype.GetSpacedPoints = function(divisions) {
		var divisions, p;
		p = this;
		p.CurvePath.Curve.p.getSpacedPoints(divisions);
		return p;
	};
	Path.prototype.GetSpacedPoints = function(divisions) { return this.$val.GetSpacedPoints(divisions); };
	Path.ptr.prototype.GetPoints = function(divisions) {
		var divisions, p;
		p = this;
		p.CurvePath.Curve.p.getPoints(divisions);
		return p;
	};
	Path.prototype.GetPoints = function(divisions) { return this.$val.GetPoints(divisions); };
	Path.ptr.prototype.ToShapes = function(isCCW, noHoles) {
		var isCCW, noHoles, p;
		p = this;
		p.CurvePath.Curve.p.toShapes(isCCW, noHoles);
		return p;
	};
	Path.prototype.ToShapes = function(isCCW, noHoles) { return this.$val.ToShapes(isCCW, noHoles); };
	PerspectiveCamera.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.Camera.Object3D.p;
	};
	PerspectiveCamera.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.PerspectiveCamera = function() {
		var t;
		t = this;
		return PerspectiveCameraFromJSObject(t.ctx.PerspectiveCamera);
	};
	Three.prototype.PerspectiveCamera = function() { return this.$val.PerspectiveCamera(); };
	PerspectiveCameraFromJSObject = function(p) {
		var p;
		return new PerspectiveCamera.ptr(new Camera.ptr(new Object3D.ptr(p)));
	};
	$pkg.PerspectiveCameraFromJSObject = PerspectiveCameraFromJSObject;
	Three.ptr.prototype.NewPerspectiveCamera = function(fov, aspect, near, far) {
		var aspect, far, fov, near, t;
		t = this;
		return PerspectiveCameraFromJSObject(new (t.ctx.PerspectiveCamera)(fov, aspect, near, far));
	};
	Three.prototype.NewPerspectiveCamera = function(fov, aspect, near, far) { return this.$val.NewPerspectiveCamera(fov, aspect, near, far); };
	PerspectiveCamera.ptr.prototype.SetLens = function(focalLength, frameHeight) {
		var focalLength, frameHeight, p;
		p = this;
		p.Camera.Object3D.p.setLens(focalLength, frameHeight);
		return p;
	};
	PerspectiveCamera.prototype.SetLens = function(focalLength, frameHeight) { return this.$val.SetLens(focalLength, frameHeight); };
	PerspectiveCamera.ptr.prototype.SetViewOffset = function(fullWidth, fullHeight, x, y, width, height) {
		var fullHeight, fullWidth, height, p, width, x, y;
		p = this;
		p.Camera.Object3D.p.setViewOffset(fullWidth, fullHeight, x, y, width, height);
		return p;
	};
	PerspectiveCamera.prototype.SetViewOffset = function(fullWidth, fullHeight, x, y, width, height) { return this.$val.SetViewOffset(fullWidth, fullHeight, x, y, width, height); };
	PerspectiveCamera.ptr.prototype.Copy = function(source) {
		var p, source;
		p = this;
		p.Camera.Object3D.p.copy(source.Camera.Object3D.p);
		return p;
	};
	PerspectiveCamera.prototype.Copy = function(source) { return this.$val.Copy(source); };
	PerspectiveCamera.ptr.prototype.ToJSON = function(meta) {
		var meta, p;
		p = this;
		p.Camera.Object3D.p.toJSON(meta);
		return p;
	};
	PerspectiveCamera.prototype.ToJSON = function(meta) { return this.$val.ToJSON(meta); };
	PerspectiveCamera.ptr.prototype.Zoom = function() {
		var p;
		p = this;
		return $parseFloat(p.Camera.Object3D.p.zoom);
	};
	PerspectiveCamera.prototype.Zoom = function() { return this.$val.Zoom(); };
	PerspectiveCamera.ptr.prototype.FocalLength = function() {
		var p;
		p = this;
		return $parseFloat(p.Camera.Object3D.p.focalLength);
	};
	PerspectiveCamera.prototype.FocalLength = function() { return this.$val.FocalLength(); };
	PerspectiveCamera.ptr.prototype.FOV = function() {
		var p;
		p = this;
		return $parseFloat(p.Camera.Object3D.p.fov);
	};
	PerspectiveCamera.prototype.FOV = function() { return this.$val.FOV(); };
	PerspectiveCamera.ptr.prototype.Aspect = function() {
		var p;
		p = this;
		return $parseFloat(p.Camera.Object3D.p.aspect);
	};
	PerspectiveCamera.prototype.Aspect = function() { return this.$val.Aspect(); };
	PerspectiveCamera.ptr.prototype.SetAspect = function(value) {
		var p, value;
		p = this;
		p.Camera.Object3D.p.aspect = value;
		return p;
	};
	PerspectiveCamera.prototype.SetAspect = function(value) { return this.$val.SetAspect(value); };
	PerspectiveCamera.ptr.prototype.Near = function() {
		var p;
		p = this;
		return $parseFloat(p.Camera.Object3D.p.near);
	};
	PerspectiveCamera.prototype.Near = function() { return this.$val.Near(); };
	PerspectiveCamera.ptr.prototype.Far = function() {
		var p;
		p = this;
		return $parseFloat(p.Camera.Object3D.p.far);
	};
	PerspectiveCamera.prototype.Far = function() { return this.$val.Far(); };
	Plane.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.p;
	};
	Plane.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Plane = function() {
		var p, t;
		t = this;
		p = t.ctx.Plane;
		return PlaneFromJSObject(p);
	};
	Three.prototype.Plane = function() { return this.$val.Plane(); };
	PlaneFromJSObject = function(p) {
		var p;
		return new Plane.ptr(p);
	};
	$pkg.PlaneFromJSObject = PlaneFromJSObject;
	Three.ptr.prototype.NewPlane = function(normal, constant) {
		var constant, normal, p, t;
		t = this;
		p = new (t.ctx.Plane)(normal, constant);
		return PlaneFromJSObject(p);
	};
	Three.prototype.NewPlane = function(normal, constant) { return this.$val.NewPlane(normal, constant); };
	Plane.ptr.prototype.Set = function(normal, constant) {
		var constant, normal, p;
		p = this;
		p.p.set(normal, constant);
		return p;
	};
	Plane.prototype.Set = function(normal, constant) { return this.$val.Set(normal, constant); };
	Plane.ptr.prototype.SetComponents = function(x, y, z, w) {
		var p, w, x, y, z;
		p = this;
		p.p.setComponents(x, y, z, w);
		return p;
	};
	Plane.prototype.SetComponents = function(x, y, z, w) { return this.$val.SetComponents(x, y, z, w); };
	Plane.ptr.prototype.SetFromNormalAndCoplanarPoint = function(normal, point) {
		var normal, p, point;
		p = this;
		p.p.setFromNormalAndCoplanarPoint(normal, point);
		return p;
	};
	Plane.prototype.SetFromNormalAndCoplanarPoint = function(normal, point) { return this.$val.SetFromNormalAndCoplanarPoint(normal, point); };
	Plane.ptr.prototype.SetFromCoplanarPoints = function() {
		var p;
		p = this;
		p.p.setFromCoplanarPoints();
		return p;
	};
	Plane.prototype.SetFromCoplanarPoints = function() { return this.$val.SetFromCoplanarPoints(); };
	Plane.ptr.prototype.Clone = function() {
		var p;
		p = this;
		p.p.clone();
		return p;
	};
	Plane.prototype.Clone = function() { return this.$val.Clone(); };
	Plane.ptr.prototype.Copy = function(plane) {
		var p, plane;
		p = this;
		p.p.copy(plane.p);
		return p;
	};
	Plane.prototype.Copy = function(plane) { return this.$val.Copy(plane); };
	Plane.ptr.prototype.Normalize = function() {
		var p;
		p = this;
		p.p.normalize();
		return p;
	};
	Plane.prototype.Normalize = function() { return this.$val.Normalize(); };
	Plane.ptr.prototype.Negate = function() {
		var p;
		p = this;
		p.p.negate();
		return p;
	};
	Plane.prototype.Negate = function() { return this.$val.Negate(); };
	Plane.ptr.prototype.DistanceToPoint = function(point) {
		var p, point;
		p = this;
		p.p.distanceToPoint(point);
		return p;
	};
	Plane.prototype.DistanceToPoint = function(point) { return this.$val.DistanceToPoint(point); };
	Plane.ptr.prototype.DistanceToSphere = function(sphere) {
		var p, sphere;
		p = this;
		p.p.distanceToSphere(sphere);
		return p;
	};
	Plane.prototype.DistanceToSphere = function(sphere) { return this.$val.DistanceToSphere(sphere); };
	Plane.ptr.prototype.ProjectPoint = function(point, optionalTarget) {
		var optionalTarget, p, point;
		p = this;
		p.p.projectPoint(point, optionalTarget);
		return p;
	};
	Plane.prototype.ProjectPoint = function(point, optionalTarget) { return this.$val.ProjectPoint(point, optionalTarget); };
	Plane.ptr.prototype.OrthoPoint = function(point, optionalTarget) {
		var optionalTarget, p, point;
		p = this;
		p.p.orthoPoint(point, optionalTarget);
		return p;
	};
	Plane.prototype.OrthoPoint = function(point, optionalTarget) { return this.$val.OrthoPoint(point, optionalTarget); };
	Plane.ptr.prototype.IntersectLine = function() {
		var p;
		p = this;
		p.p.intersectLine();
		return p;
	};
	Plane.prototype.IntersectLine = function() { return this.$val.IntersectLine(); };
	Plane.ptr.prototype.IntersectsLine = function(line) {
		var line, p;
		p = this;
		p.p.intersectsLine(line);
		return p;
	};
	Plane.prototype.IntersectsLine = function(line) { return this.$val.IntersectsLine(line); };
	Plane.ptr.prototype.IntersectsBox = function(box) {
		var box, p;
		p = this;
		p.p.intersectsBox(box);
		return p;
	};
	Plane.prototype.IntersectsBox = function(box) { return this.$val.IntersectsBox(box); };
	Plane.ptr.prototype.IntersectsSphere = function(sphere) {
		var p, sphere;
		p = this;
		p.p.intersectsSphere(sphere);
		return p;
	};
	Plane.prototype.IntersectsSphere = function(sphere) { return this.$val.IntersectsSphere(sphere); };
	Plane.ptr.prototype.CoplanarPoint = function(optionalTarget) {
		var optionalTarget, p;
		p = this;
		p.p.coplanarPoint(optionalTarget);
		return p;
	};
	Plane.prototype.CoplanarPoint = function(optionalTarget) { return this.$val.CoplanarPoint(optionalTarget); };
	Plane.ptr.prototype.ApplyMatrix4 = function() {
		var p;
		p = this;
		p.p.applyMatrix4();
		return p;
	};
	Plane.prototype.ApplyMatrix4 = function() { return this.$val.ApplyMatrix4(); };
	Plane.ptr.prototype.Translate = function(offset) {
		var offset, p;
		p = this;
		p.p.translate(offset);
		return p;
	};
	Plane.prototype.Translate = function(offset) { return this.$val.Translate(offset); };
	Plane.ptr.prototype.Equals = function(plane) {
		var p, plane;
		p = this;
		p.p.equals(plane);
		return p;
	};
	Plane.prototype.Equals = function(plane) { return this.$val.Equals(plane); };
	PlaneBufferGeometry.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.p;
	};
	PlaneBufferGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.PlaneBufferGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.PlaneBufferGeometry;
		return PlaneBufferGeometryFromJSObject(p);
	};
	Three.prototype.PlaneBufferGeometry = function() { return this.$val.PlaneBufferGeometry(); };
	PlaneBufferGeometryFromJSObject = function(p) {
		var p;
		return new PlaneBufferGeometry.ptr(p);
	};
	$pkg.PlaneBufferGeometryFromJSObject = PlaneBufferGeometryFromJSObject;
	Three.ptr.prototype.NewPlaneBufferGeometry = function(width, height, widthSegments, heightSegments) {
		var height, heightSegments, p, t, width, widthSegments;
		t = this;
		p = new (t.ctx.PlaneBufferGeometry)(width, height, widthSegments, heightSegments);
		return PlaneBufferGeometryFromJSObject(p);
	};
	Three.prototype.NewPlaneBufferGeometry = function(width, height, widthSegments, heightSegments) { return this.$val.NewPlaneBufferGeometry(width, height, widthSegments, heightSegments); };
	PlaneGeometry.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.p;
	};
	PlaneGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.PlaneGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.PlaneGeometry;
		return PlaneGeometryFromJSObject(p);
	};
	Three.prototype.PlaneGeometry = function() { return this.$val.PlaneGeometry(); };
	PlaneGeometryFromJSObject = function(p) {
		var p;
		return new PlaneGeometry.ptr(p);
	};
	$pkg.PlaneGeometryFromJSObject = PlaneGeometryFromJSObject;
	Three.ptr.prototype.NewPlaneGeometry = function(width, height, widthSegments, heightSegments) {
		var height, heightSegments, p, t, width, widthSegments;
		t = this;
		p = new (t.ctx.PlaneGeometry)(width, height, widthSegments, heightSegments);
		return PlaneGeometryFromJSObject(p);
	};
	Three.prototype.NewPlaneGeometry = function(width, height, widthSegments, heightSegments) { return this.$val.NewPlaneGeometry(width, height, widthSegments, heightSegments); };
	PointLight.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.Light.Object3D.p;
	};
	PointLight.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.PointLight = function() {
		var t;
		t = this;
		return PointLightFromJSObject(t.ctx.PointLight);
	};
	Three.prototype.PointLight = function() { return this.$val.PointLight(); };
	PointLightFromJSObject = function(p) {
		var p;
		return new PointLight.ptr(new Light.ptr(new Object3D.ptr(p)));
	};
	$pkg.PointLightFromJSObject = PointLightFromJSObject;
	Three.ptr.prototype.NewPointLight = function(color, intensity, distance, decay) {
		var color, decay, distance, intensity, t;
		t = this;
		return PointLightFromJSObject(new (t.ctx.PointLight)(color, intensity, distance, decay));
	};
	Three.prototype.NewPointLight = function(color, intensity, distance, decay) { return this.$val.NewPointLight(color, intensity, distance, decay); };
	PointLight.ptr.prototype.Get = function() {
		var p;
		p = this;
		p.Light.Object3D.p.get();
		return p;
	};
	PointLight.prototype.Get = function() { return this.$val.Get(); };
	PointLight.ptr.prototype.Set = function(power) {
		var p, power;
		p = this;
		p.Light.Object3D.p.set(power);
		return p;
	};
	PointLight.prototype.Set = function(power) { return this.$val.Set(power); };
	PointLight.ptr.prototype.Copy = function(source) {
		var p, source;
		p = this;
		p.Light.Object3D.p.copy(source.Light.Object3D.p);
		return p;
	};
	PointLight.prototype.Copy = function(source) { return this.$val.Copy(source); };
	PointLightHelper.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.p;
	};
	PointLightHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.PointLightHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.PointLightHelper;
		return PointLightHelperFromJSObject(p);
	};
	Three.prototype.PointLightHelper = function() { return this.$val.PointLightHelper(); };
	PointLightHelperFromJSObject = function(p) {
		var p;
		return new PointLightHelper.ptr(p);
	};
	$pkg.PointLightHelperFromJSObject = PointLightHelperFromJSObject;
	Three.ptr.prototype.NewPointLightHelper = function(light, sphereSize) {
		var light, p, sphereSize, t;
		t = this;
		p = new (t.ctx.PointLightHelper)(light, sphereSize);
		return PointLightHelperFromJSObject(p);
	};
	Three.prototype.NewPointLightHelper = function(light, sphereSize) { return this.$val.NewPointLightHelper(light, sphereSize); };
	Points.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.p;
	};
	Points.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Points = function() {
		var p, t;
		t = this;
		p = t.ctx.Points;
		return PointsFromJSObject(p);
	};
	Three.prototype.Points = function() { return this.$val.Points(); };
	PointsFromJSObject = function(p) {
		var p;
		return new Points.ptr(p);
	};
	$pkg.PointsFromJSObject = PointsFromJSObject;
	Three.ptr.prototype.NewPoints = function(geometry, material) {
		var geometry, material, p, t;
		t = this;
		p = new (t.ctx.Points)(geometry, material);
		return PointsFromJSObject(p);
	};
	Three.prototype.NewPoints = function(geometry, material) { return this.$val.NewPoints(geometry, material); };
	PointsMaterial.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.p;
	};
	PointsMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.PointsMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.PointsMaterial;
		return PointsMaterialFromJSObject(p);
	};
	Three.prototype.PointsMaterial = function() { return this.$val.PointsMaterial(); };
	PointsMaterialFromJSObject = function(p) {
		var p;
		return new PointsMaterial.ptr(p);
	};
	$pkg.PointsMaterialFromJSObject = PointsMaterialFromJSObject;
	Three.ptr.prototype.NewPointsMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.PointsMaterial)($externalize(parameters, mapType));
		return PointsMaterialFromJSObject(p);
	};
	Three.prototype.NewPointsMaterial = function(parameters) { return this.$val.NewPointsMaterial(parameters); };
	PointsMaterial.ptr.prototype.Copy = function(source) {
		var p, source;
		p = this;
		p.p.copy(source.p);
		return p;
	};
	PointsMaterial.prototype.Copy = function(source) { return this.$val.Copy(source); };
	PolyhedronGeometry.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.Geometry.p;
	};
	PolyhedronGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.PolyhedronGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.PolyhedronGeometry;
		return PolyhedronGeometryFromJSObject(p);
	};
	Three.prototype.PolyhedronGeometry = function() { return this.$val.PolyhedronGeometry(); };
	PolyhedronGeometryFromJSObject = function(p) {
		var p;
		return new PolyhedronGeometry.ptr(new Geometry.ptr(p));
	};
	$pkg.PolyhedronGeometryFromJSObject = PolyhedronGeometryFromJSObject;
	Three.ptr.prototype.NewPolyhedronGeometry = function(vertices, indices, radius, detail) {
		var detail, indices, p, radius, t, vertices;
		t = this;
		p = new (t.ctx.PolyhedronGeometry)($externalize(vertices, sliceType$7), $externalize(indices, sliceType$8), radius, detail);
		return PolyhedronGeometryFromJSObject(p);
	};
	Three.prototype.NewPolyhedronGeometry = function(vertices, indices, radius, detail) { return this.$val.NewPolyhedronGeometry(vertices, indices, radius, detail); };
	PositionalAudio.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.p;
	};
	PositionalAudio.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.PositionalAudio = function() {
		var p, t;
		t = this;
		p = t.ctx.PositionalAudio;
		return PositionalAudioFromJSObject(p);
	};
	Three.prototype.PositionalAudio = function() { return this.$val.PositionalAudio(); };
	PositionalAudioFromJSObject = function(p) {
		var p;
		return new PositionalAudio.ptr(p);
	};
	$pkg.PositionalAudioFromJSObject = PositionalAudioFromJSObject;
	Three.ptr.prototype.NewPositionalAudio = function(listener) {
		var listener, p, t;
		t = this;
		p = new (t.ctx.PositionalAudio)(listener);
		return PositionalAudioFromJSObject(p);
	};
	Three.prototype.NewPositionalAudio = function(listener) { return this.$val.NewPositionalAudio(listener); };
	PositionalAudio.ptr.prototype.SetRefDistance = function(value) {
		var p, value;
		p = this;
		p.p.setRefDistance(value);
		return p;
	};
	PositionalAudio.prototype.SetRefDistance = function(value) { return this.$val.SetRefDistance(value); };
	PositionalAudio.ptr.prototype.SetRolloffFactor = function(value) {
		var p, value;
		p = this;
		p.p.setRolloffFactor(value);
		return p;
	};
	PositionalAudio.prototype.SetRolloffFactor = function(value) { return this.$val.SetRolloffFactor(value); };
	PositionalAudio.ptr.prototype.SetDistanceModel = function(value) {
		var p, value;
		p = this;
		p.p.setDistanceModel(value);
		return p;
	};
	PositionalAudio.prototype.SetDistanceModel = function(value) { return this.$val.SetDistanceModel(value); };
	PositionalAudio.ptr.prototype.SetMaxDistance = function(value) {
		var p, value;
		p = this;
		p.p.setMaxDistance(value);
		return p;
	};
	PositionalAudio.prototype.SetMaxDistance = function(value) { return this.$val.SetMaxDistance(value); };
	PropertyBinding.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.p;
	};
	PropertyBinding.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.PropertyBinding = function() {
		var p, t;
		t = this;
		p = t.ctx.PropertyBinding;
		return PropertyBindingFromJSObject(p);
	};
	Three.prototype.PropertyBinding = function() { return this.$val.PropertyBinding(); };
	PropertyBindingFromJSObject = function(p) {
		var p;
		return new PropertyBinding.ptr(p);
	};
	$pkg.PropertyBindingFromJSObject = PropertyBindingFromJSObject;
	Three.ptr.prototype.NewPropertyBinding = function(rootNode, path, parsedPath) {
		var p, parsedPath, path, rootNode, t;
		t = this;
		p = new (t.ctx.PropertyBinding)(rootNode, path, parsedPath);
		return PropertyBindingFromJSObject(p);
	};
	Three.prototype.NewPropertyBinding = function(rootNode, path, parsedPath) { return this.$val.NewPropertyBinding(rootNode, path, parsedPath); };
	PropertyBinding.ptr.prototype.Bind = function() {
		var p;
		p = this;
		p.p.bind();
		return p;
	};
	PropertyBinding.prototype.Bind = function() { return this.$val.Bind(); };
	PropertyBinding.ptr.prototype.Unbind = function() {
		var p;
		p = this;
		p.p.unbind();
		return p;
	};
	PropertyBinding.prototype.Unbind = function() { return this.$val.Unbind(); };
	PropertyBinding.ptr.prototype.GetValue = function(array, offset) {
		var array, offset, p;
		p = this;
		p.p.getValue(array, offset);
		return p;
	};
	PropertyBinding.prototype.GetValue = function(array, offset) { return this.$val.GetValue(array, offset); };
	PropertyBinding.ptr.prototype.SetValue = function(array, offset) {
		var array, offset, p;
		p = this;
		p.p.setValue(array, offset);
		return p;
	};
	PropertyBinding.prototype.SetValue = function(array, offset) { return this.$val.SetValue(array, offset); };
	PropertyMixer.ptr.prototype.JSObject = function() {
		var p;
		p = this;
		return p.p;
	};
	PropertyMixer.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.PropertyMixer = function() {
		var p, t;
		t = this;
		p = t.ctx.PropertyMixer;
		return PropertyMixerFromJSObject(p);
	};
	Three.prototype.PropertyMixer = function() { return this.$val.PropertyMixer(); };
	PropertyMixerFromJSObject = function(p) {
		var p;
		return new PropertyMixer.ptr(p);
	};
	$pkg.PropertyMixerFromJSObject = PropertyMixerFromJSObject;
	Three.ptr.prototype.NewPropertyMixer = function(binding, typName, valueSize) {
		var binding, p, t, typName, valueSize;
		t = this;
		p = new (t.ctx.PropertyMixer)(binding, typName, valueSize);
		return PropertyMixerFromJSObject(p);
	};
	Three.prototype.NewPropertyMixer = function(binding, typName, valueSize) { return this.$val.NewPropertyMixer(binding, typName, valueSize); };
	PropertyMixer.ptr.prototype.Accumulate = function(accuIndex, weight) {
		var accuIndex, p, weight;
		p = this;
		p.p.accumulate(accuIndex, weight);
		return p;
	};
	PropertyMixer.prototype.Accumulate = function(accuIndex, weight) { return this.$val.Accumulate(accuIndex, weight); };
	PropertyMixer.ptr.prototype.Apply = function(accuIndex) {
		var accuIndex, p;
		p = this;
		p.p.apply(accuIndex);
		return p;
	};
	PropertyMixer.prototype.Apply = function(accuIndex) { return this.$val.Apply(accuIndex); };
	PropertyMixer.ptr.prototype.SaveOriginalState = function() {
		var p;
		p = this;
		p.p.saveOriginalState();
		return p;
	};
	PropertyMixer.prototype.SaveOriginalState = function() { return this.$val.SaveOriginalState(); };
	PropertyMixer.ptr.prototype.RestoreOriginalState = function() {
		var p;
		p = this;
		p.p.restoreOriginalState();
		return p;
	};
	PropertyMixer.prototype.RestoreOriginalState = function() { return this.$val.RestoreOriginalState(); };
	QuadraticBezierCurve.ptr.prototype.JSObject = function() {
		var q;
		q = this;
		return q.p;
	};
	QuadraticBezierCurve.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.QuadraticBezierCurve = function() {
		var p, t;
		t = this;
		p = t.ctx.QuadraticBezierCurve;
		return QuadraticBezierCurveFromJSObject(p);
	};
	Three.prototype.QuadraticBezierCurve = function() { return this.$val.QuadraticBezierCurve(); };
	QuadraticBezierCurveFromJSObject = function(p) {
		var p;
		return new QuadraticBezierCurve.ptr(p);
	};
	$pkg.QuadraticBezierCurveFromJSObject = QuadraticBezierCurveFromJSObject;
	Three.ptr.prototype.NewQuadraticBezierCurve = function(v0, v1, v2) {
		var p, t, v0, v1, v2;
		t = this;
		p = new (t.ctx.QuadraticBezierCurve)(v0, v1, v2);
		return QuadraticBezierCurveFromJSObject(p);
	};
	Three.prototype.NewQuadraticBezierCurve = function(v0, v1, v2) { return this.$val.NewQuadraticBezierCurve(v0, v1, v2); };
	QuadraticBezierCurve.ptr.prototype.GetPoint = function(t) {
		var q, t;
		q = this;
		q.p.getPoint(t);
		return q;
	};
	QuadraticBezierCurve.prototype.GetPoint = function(t) { return this.$val.GetPoint(t); };
	QuadraticBezierCurve.ptr.prototype.GetTangent = function(t) {
		var q, t;
		q = this;
		q.p.getTangent(t);
		return q;
	};
	QuadraticBezierCurve.prototype.GetTangent = function(t) { return this.$val.GetTangent(t); };
	Quaternion.ptr.prototype.JSObject = function() {
		var q;
		q = this;
		return q.p;
	};
	Quaternion.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Quaternion = function() {
		var p, t;
		t = this;
		p = t.ctx.Quaternion;
		return QuaternionFromJSObject(p);
	};
	Three.prototype.Quaternion = function() { return this.$val.Quaternion(); };
	QuaternionFromJSObject = function(p) {
		var p;
		return new Quaternion.ptr(p);
	};
	$pkg.QuaternionFromJSObject = QuaternionFromJSObject;
	Three.ptr.prototype.NewQuaternion = function(x, y, z, w) {
		var p, t, w, x, y, z;
		t = this;
		p = new (t.ctx.Quaternion)(x, y, z, w);
		return QuaternionFromJSObject(p);
	};
	Three.prototype.NewQuaternion = function(x, y, z, w) { return this.$val.NewQuaternion(x, y, z, w); };
	Quaternion.ptr.prototype.X = function() {
		var q;
		q = this;
		return $parseFloat(q.p.x);
	};
	Quaternion.prototype.X = function() { return this.$val.X(); };
	Quaternion.ptr.prototype.Y = function() {
		var q;
		q = this;
		return $parseFloat(q.p.y);
	};
	Quaternion.prototype.Y = function() { return this.$val.Y(); };
	Quaternion.ptr.prototype.Z = function() {
		var q;
		q = this;
		return $parseFloat(q.p.z);
	};
	Quaternion.prototype.Z = function() { return this.$val.Z(); };
	Quaternion.ptr.prototype.W = function() {
		var q;
		q = this;
		return $parseFloat(q.p.w);
	};
	Quaternion.prototype.W = function() { return this.$val.W(); };
	Quaternion.ptr.prototype.SetX = function(value) {
		var q, value;
		q = this;
		q.p.x = value;
		return q;
	};
	Quaternion.prototype.SetX = function(value) { return this.$val.SetX(value); };
	Quaternion.ptr.prototype.SetY = function(value) {
		var q, value;
		q = this;
		q.p.y = value;
		return q;
	};
	Quaternion.prototype.SetY = function(value) { return this.$val.SetY(value); };
	Quaternion.ptr.prototype.SetZ = function(value) {
		var q, value;
		q = this;
		q.p.z = value;
		return q;
	};
	Quaternion.prototype.SetZ = function(value) { return this.$val.SetZ(value); };
	Quaternion.ptr.prototype.SetW = function(value) {
		var q, value;
		q = this;
		q.p.w = value;
		return q;
	};
	Quaternion.prototype.SetW = function(value) { return this.$val.SetW(value); };
	Quaternion.ptr.prototype.Set = function(x, y, z, w) {
		var q, w, x, y, z;
		q = this;
		q.p.set(x, y, z, w);
		return q;
	};
	Quaternion.prototype.Set = function(x, y, z, w) { return this.$val.Set(x, y, z, w); };
	Quaternion.ptr.prototype.Clone = function() {
		var q;
		q = this;
		q.p.clone();
		return q;
	};
	Quaternion.prototype.Clone = function() { return this.$val.Clone(); };
	Quaternion.ptr.prototype.Copy = function(quaternion) {
		var q, quaternion;
		q = this;
		q.p.copy(quaternion.p);
		return q;
	};
	Quaternion.prototype.Copy = function(quaternion) { return this.$val.Copy(quaternion); };
	Quaternion.ptr.prototype.SetFromEuler = function(euler, update) {
		var euler, q, update;
		q = this;
		q.p.setFromEuler(euler, update);
		return q;
	};
	Quaternion.prototype.SetFromEuler = function(euler, update) { return this.$val.SetFromEuler(euler, update); };
	Quaternion.ptr.prototype.SetFromAxisAngle = function(axis, angle) {
		var angle, axis, q;
		q = this;
		q.p.setFromAxisAngle(axis, angle);
		return q;
	};
	Quaternion.prototype.SetFromAxisAngle = function(axis, angle) { return this.$val.SetFromAxisAngle(axis, angle); };
	Quaternion.ptr.prototype.SetFromRotationMatrix = function(m) {
		var m, q;
		q = this;
		q.p.setFromRotationMatrix(m.p);
		return q;
	};
	Quaternion.prototype.SetFromRotationMatrix = function(m) { return this.$val.SetFromRotationMatrix(m); };
	Quaternion.ptr.prototype.SetFromUnitVectors = function() {
		var q;
		q = this;
		q.p.setFromUnitVectors();
		return q;
	};
	Quaternion.prototype.SetFromUnitVectors = function() { return this.$val.SetFromUnitVectors(); };
	Quaternion.ptr.prototype.Inverse = function() {
		var q;
		q = this;
		q.p.inverse();
		return q;
	};
	Quaternion.prototype.Inverse = function() { return this.$val.Inverse(); };
	Quaternion.ptr.prototype.Conjugate = function() {
		var q;
		q = this;
		q.p.conjugate();
		return q;
	};
	Quaternion.prototype.Conjugate = function() { return this.$val.Conjugate(); };
	Quaternion.ptr.prototype.Dot = function(src) {
		var q, src;
		q = this;
		q.p.dot(src.p);
		return q;
	};
	Quaternion.prototype.Dot = function(src) { return this.$val.Dot(src); };
	Quaternion.ptr.prototype.LengthSq = function() {
		var q;
		q = this;
		q.p.lengthSq();
		return q;
	};
	Quaternion.prototype.LengthSq = function() { return this.$val.LengthSq(); };
	Quaternion.ptr.prototype.Length = function() {
		var q;
		q = this;
		q.p.length();
		return q;
	};
	Quaternion.prototype.Length = function() { return this.$val.Length(); };
	Quaternion.ptr.prototype.Normalize = function() {
		var q;
		q = this;
		q.p.normalize();
		return q;
	};
	Quaternion.prototype.Normalize = function() { return this.$val.Normalize(); };
	Quaternion.ptr.prototype.Multiply = function(src) {
		var q, src;
		q = this;
		q.p.multiply(src.p);
		return q;
	};
	Quaternion.prototype.Multiply = function(src) { return this.$val.Multiply(src); };
	Quaternion.ptr.prototype.MultiplyQuaternions = function(a, b) {
		var a, b, q;
		q = this;
		q.p.multiplyQuaternions(a.p, b.p);
		return q;
	};
	Quaternion.prototype.MultiplyQuaternions = function(a, b) { return this.$val.MultiplyQuaternions(a, b); };
	Quaternion.ptr.prototype.Slerp = function(qb, t) {
		var q, qb, t;
		q = this;
		q.p.slerp(qb.p, t);
		return q;
	};
	Quaternion.prototype.Slerp = function(qb, t) { return this.$val.Slerp(qb, t); };
	Quaternion.ptr.prototype.Equals = function(quaternion) {
		var q, quaternion;
		q = this;
		return !!(q.p.equals(quaternion.p));
	};
	Quaternion.prototype.Equals = function(quaternion) { return this.$val.Equals(quaternion); };
	Quaternion.ptr.prototype.FromArray = function(array, offset) {
		var array, offset, q;
		q = this;
		q.p.fromArray($externalize(array, sliceType$7), offset);
		return q;
	};
	Quaternion.prototype.FromArray = function(array, offset) { return this.$val.FromArray(array, offset); };
	Quaternion.ptr.prototype.ToArray = function(array, offset) {
		var array, offset, q;
		q = this;
		q.p.toArray($externalize(array, sliceType$7), offset);
		return q;
	};
	Quaternion.prototype.ToArray = function(array, offset) { return this.$val.ToArray(array, offset); };
	Quaternion.ptr.prototype.OnChange = function(callback) {
		var callback, q;
		q = this;
		q.p.onChange(callback);
		return q;
	};
	Quaternion.prototype.OnChange = function(callback) { return this.$val.OnChange(callback); };
	Quaternion.ptr.prototype.OnChangeCallback = function() {
		var q;
		q = this;
		q.p.onChangeCallback();
		return q;
	};
	Quaternion.prototype.OnChangeCallback = function() { return this.$val.OnChangeCallback(); };
	Quaternion.ptr.prototype.SlerpFlat = function(dsq, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
		var dsq, dstOffset, q, src0, src1, srcOffset0, srcOffset1, t;
		q = this;
		q.p.slerpFlat(dsq.p, dstOffset, src0.p, srcOffset0, src1.p, srcOffset1, t);
		return q;
	};
	Quaternion.prototype.SlerpFlat = function(dsq, dstOffset, src0, srcOffset0, src1, srcOffset1, t) { return this.$val.SlerpFlat(dsq, dstOffset, src0, srcOffset0, src1, srcOffset1, t); };
	QuaternionKeyframeTrack.ptr.prototype.JSObject = function() {
		var q;
		q = this;
		return q.p;
	};
	QuaternionKeyframeTrack.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.QuaternionKeyframeTrack = function() {
		var p, t;
		t = this;
		p = t.ctx.QuaternionKeyframeTrack;
		return QuaternionKeyframeTrackFromJSObject(p);
	};
	Three.prototype.QuaternionKeyframeTrack = function() { return this.$val.QuaternionKeyframeTrack(); };
	QuaternionKeyframeTrackFromJSObject = function(p) {
		var p;
		return new QuaternionKeyframeTrack.ptr(p);
	};
	$pkg.QuaternionKeyframeTrackFromJSObject = QuaternionKeyframeTrackFromJSObject;
	Three.ptr.prototype.NewQuaternionKeyframeTrack = function(name, times, values, interpolation) {
		var interpolation, name, p, t, times, values;
		t = this;
		p = new (t.ctx.QuaternionKeyframeTrack)(name, times, values, interpolation);
		return QuaternionKeyframeTrackFromJSObject(p);
	};
	Three.prototype.NewQuaternionKeyframeTrack = function(name, times, values, interpolation) { return this.$val.NewQuaternionKeyframeTrack(name, times, values, interpolation); };
	QuaternionKeyframeTrack.ptr.prototype.InterpolantFactoryMethodLinear = function(result) {
		var q, result;
		q = this;
		q.p.InterpolantFactoryMethodLinear(result);
		return q;
	};
	QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodLinear = function(result) { return this.$val.InterpolantFactoryMethodLinear(result); };
	QuaternionLinearInterpolant.ptr.prototype.JSObject = function() {
		var q;
		q = this;
		return q.p;
	};
	QuaternionLinearInterpolant.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.QuaternionLinearInterpolant = function() {
		var p, t;
		t = this;
		p = t.ctx.QuaternionLinearInterpolant;
		return QuaternionLinearInterpolantFromJSObject(p);
	};
	Three.prototype.QuaternionLinearInterpolant = function() { return this.$val.QuaternionLinearInterpolant(); };
	QuaternionLinearInterpolantFromJSObject = function(p) {
		var p;
		return new QuaternionLinearInterpolant.ptr(p);
	};
	$pkg.QuaternionLinearInterpolantFromJSObject = QuaternionLinearInterpolantFromJSObject;
	Three.ptr.prototype.NewQuaternionLinearInterpolant = function(parameterPositions, sampleValues, sampleSize, resultBuffer) {
		var p, parameterPositions, resultBuffer, sampleSize, sampleValues, t;
		t = this;
		p = new (t.ctx.QuaternionLinearInterpolant)(parameterPositions, sampleValues, sampleSize, resultBuffer);
		return QuaternionLinearInterpolantFromJSObject(p);
	};
	Three.prototype.NewQuaternionLinearInterpolant = function(parameterPositions, sampleValues, sampleSize, resultBuffer) { return this.$val.NewQuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer); };
	QuaternionLinearInterpolant.ptr.prototype.Interpolate = function(i1, t0, t, t1) {
		var i1, q, t, t0, t1;
		q = this;
		q.p.interpolate_(i1, t0, t, t1);
		return q;
	};
	QuaternionLinearInterpolant.prototype.Interpolate = function(i1, t0, t, t1) { return this.$val.Interpolate(i1, t0, t, t1); };
	RawShaderMaterial.ptr.prototype.JSObject = function() {
		var r;
		r = this;
		return r.p;
	};
	RawShaderMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.RawShaderMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.RawShaderMaterial;
		return RawShaderMaterialFromJSObject(p);
	};
	Three.prototype.RawShaderMaterial = function() { return this.$val.RawShaderMaterial(); };
	RawShaderMaterialFromJSObject = function(p) {
		var p;
		return new RawShaderMaterial.ptr(p);
	};
	$pkg.RawShaderMaterialFromJSObject = RawShaderMaterialFromJSObject;
	Three.ptr.prototype.NewRawShaderMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.RawShaderMaterial)(parameters);
		return RawShaderMaterialFromJSObject(p);
	};
	Three.prototype.NewRawShaderMaterial = function(parameters) { return this.$val.NewRawShaderMaterial(parameters); };
	Ray.ptr.prototype.JSObject = function() {
		var r;
		r = this;
		return r.p;
	};
	Ray.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Ray = function() {
		var p, t;
		t = this;
		p = t.ctx.Ray;
		return RayFromJSObject(p);
	};
	Three.prototype.Ray = function() { return this.$val.Ray(); };
	RayFromJSObject = function(p) {
		var p;
		return new Ray.ptr(p);
	};
	$pkg.RayFromJSObject = RayFromJSObject;
	Three.ptr.prototype.NewRay = function(origin, direction) {
		var direction, origin, p, t;
		t = this;
		p = new (t.ctx.Ray)(origin, direction);
		return RayFromJSObject(p);
	};
	Three.prototype.NewRay = function(origin, direction) { return this.$val.NewRay(origin, direction); };
	Ray.ptr.prototype.Set = function(origin, direction) {
		var direction, origin, r;
		r = this;
		r.p.set(origin, direction);
		return r;
	};
	Ray.prototype.Set = function(origin, direction) { return this.$val.Set(origin, direction); };
	Ray.ptr.prototype.Clone = function() {
		var r;
		r = this;
		r.p.clone();
		return r;
	};
	Ray.prototype.Clone = function() { return this.$val.Clone(); };
	Ray.ptr.prototype.Copy = function(ray) {
		var r, ray;
		r = this;
		r.p.copy(ray.p);
		return r;
	};
	Ray.prototype.Copy = function(ray) { return this.$val.Copy(ray); };
	Ray.ptr.prototype.At = function(t, optionalTarget) {
		var optionalTarget, r, t;
		r = this;
		r.p.at(t, optionalTarget);
		return r;
	};
	Ray.prototype.At = function(t, optionalTarget) { return this.$val.At(t, optionalTarget); };
	Ray.ptr.prototype.LookAt = function(v) {
		var r, v;
		r = this;
		r.p.lookAt(v);
		return r;
	};
	Ray.prototype.LookAt = function(v) { return this.$val.LookAt(v); };
	Ray.ptr.prototype.Recast = function() {
		var r;
		r = this;
		r.p.recast();
		return r;
	};
	Ray.prototype.Recast = function() { return this.$val.Recast(); };
	Ray.ptr.prototype.ClosestPointToPoint = function(point, optionalTarget) {
		var optionalTarget, point, r;
		r = this;
		r.p.closestPointToPoint(point, optionalTarget);
		return r;
	};
	Ray.prototype.ClosestPointToPoint = function(point, optionalTarget) { return this.$val.ClosestPointToPoint(point, optionalTarget); };
	Ray.ptr.prototype.DistanceToPoint = function(point) {
		var point, r;
		r = this;
		r.p.distanceToPoint(point);
		return r;
	};
	Ray.prototype.DistanceToPoint = function(point) { return this.$val.DistanceToPoint(point); };
	Ray.ptr.prototype.DistanceSqToPoint = function() {
		var r;
		r = this;
		r.p.distanceSqToPoint();
		return r;
	};
	Ray.prototype.DistanceSqToPoint = function() { return this.$val.DistanceSqToPoint(); };
	Ray.ptr.prototype.DistanceSqToSegment = function() {
		var r;
		r = this;
		r.p.distanceSqToSegment();
		return r;
	};
	Ray.prototype.DistanceSqToSegment = function() { return this.$val.DistanceSqToSegment(); };
	Ray.ptr.prototype.IntersectSphere = function() {
		var r;
		r = this;
		r.p.intersectSphere();
		return r;
	};
	Ray.prototype.IntersectSphere = function() { return this.$val.IntersectSphere(); };
	Ray.ptr.prototype.IntersectsSphere = function(sphere) {
		var r, sphere;
		r = this;
		r.p.intersectsSphere(sphere);
		return r;
	};
	Ray.prototype.IntersectsSphere = function(sphere) { return this.$val.IntersectsSphere(sphere); };
	Ray.ptr.prototype.DistanceToPlane = function(plane) {
		var plane, r;
		r = this;
		r.p.distanceToPlane(plane);
		return r;
	};
	Ray.prototype.DistanceToPlane = function(plane) { return this.$val.DistanceToPlane(plane); };
	Ray.ptr.prototype.IntersectPlane = function(plane, optionalTarget) {
		var optionalTarget, plane, r;
		r = this;
		r.p.intersectPlane(plane, optionalTarget);
		return r;
	};
	Ray.prototype.IntersectPlane = function(plane, optionalTarget) { return this.$val.IntersectPlane(plane, optionalTarget); };
	Ray.ptr.prototype.IntersectsPlane = function(plane) {
		var plane, r;
		r = this;
		r.p.intersectsPlane(plane);
		return r;
	};
	Ray.prototype.IntersectsPlane = function(plane) { return this.$val.IntersectsPlane(plane); };
	Ray.ptr.prototype.IntersectBox = function(box, optionalTarget) {
		var box, optionalTarget, r;
		r = this;
		r.p.intersectBox(box, optionalTarget);
		return r;
	};
	Ray.prototype.IntersectBox = function(box, optionalTarget) { return this.$val.IntersectBox(box, optionalTarget); };
	Ray.ptr.prototype.IntersectTriangle = function() {
		var r;
		r = this;
		r.p.intersectTriangle();
		return r;
	};
	Ray.prototype.IntersectTriangle = function() { return this.$val.IntersectTriangle(); };
	Ray.ptr.prototype.ApplyMatrix4 = function(matrix4) {
		var matrix4, r;
		r = this;
		r.p.applyMatrix4(matrix4);
		return r;
	};
	Ray.prototype.ApplyMatrix4 = function(matrix4) { return this.$val.ApplyMatrix4(matrix4); };
	Ray.ptr.prototype.Equals = function(ray) {
		var r, ray;
		r = this;
		r.p.equals(ray);
		return r;
	};
	Ray.prototype.Equals = function(ray) { return this.$val.Equals(ray); };
	Raycaster.ptr.prototype.JSObject = function() {
		var r;
		r = this;
		return r.p;
	};
	Raycaster.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Raycaster = function() {
		var p, t;
		t = this;
		p = t.ctx.Raycaster;
		return RaycasterFromJSObject(p);
	};
	Three.prototype.Raycaster = function() { return this.$val.Raycaster(); };
	RaycasterFromJSObject = function(p) {
		var p;
		return new Raycaster.ptr(p);
	};
	$pkg.RaycasterFromJSObject = RaycasterFromJSObject;
	Three.ptr.prototype.NewRaycaster = function(origin, direction, near, far) {
		var direction, far, near, origin, p, t;
		t = this;
		p = new (t.ctx.Raycaster)(origin, direction, near, far);
		return RaycasterFromJSObject(p);
	};
	Three.prototype.NewRaycaster = function(origin, direction, near, far) { return this.$val.NewRaycaster(origin, direction, near, far); };
	Raycaster.ptr.prototype.Get = function() {
		var r;
		r = this;
		r.p.get();
		return r;
	};
	Raycaster.prototype.Get = function() { return this.$val.Get(); };
	Raycaster.ptr.prototype.Set = function(origin, direction) {
		var direction, origin, r;
		r = this;
		r.p.set(origin, direction);
		return r;
	};
	Raycaster.prototype.Set = function(origin, direction) { return this.$val.Set(origin, direction); };
	Raycaster.ptr.prototype.SetFromCamera = function(coords, camera) {
		var camera, coords, r;
		r = this;
		r.p.setFromCamera(coords, camera);
		return r;
	};
	Raycaster.prototype.SetFromCamera = function(coords, camera) { return this.$val.SetFromCamera(coords, camera); };
	Raycaster.ptr.prototype.IntersectObject = function(object, recursive) {
		var object, r, recursive;
		r = this;
		r.p.intersectObject(object, recursive);
		return r;
	};
	Raycaster.prototype.IntersectObject = function(object, recursive) { return this.$val.IntersectObject(object, recursive); };
	Raycaster.ptr.prototype.IntersectObjects = function(objects, recursive) {
		var objects, r, recursive;
		r = this;
		r.p.intersectObjects(objects, recursive);
		return r;
	};
	Raycaster.prototype.IntersectObjects = function(objects, recursive) { return this.$val.IntersectObjects(objects, recursive); };
	RingBufferGeometry.ptr.prototype.JSObject = function() {
		var r;
		r = this;
		return r.p;
	};
	RingBufferGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.RingBufferGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.RingBufferGeometry;
		return RingBufferGeometryFromJSObject(p);
	};
	Three.prototype.RingBufferGeometry = function() { return this.$val.RingBufferGeometry(); };
	RingBufferGeometryFromJSObject = function(p) {
		var p;
		return new RingBufferGeometry.ptr(p);
	};
	$pkg.RingBufferGeometryFromJSObject = RingBufferGeometryFromJSObject;
	Three.ptr.prototype.NewRingBufferGeometry = function(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
		var innerRadius, outerRadius, p, phiSegments, t, thetaLength, thetaSegments, thetaStart;
		t = this;
		p = new (t.ctx.RingBufferGeometry)(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength);
		return RingBufferGeometryFromJSObject(p);
	};
	Three.prototype.NewRingBufferGeometry = function(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) { return this.$val.NewRingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength); };
	RingGeometry.ptr.prototype.JSObject = function() {
		var r;
		r = this;
		return r.p;
	};
	RingGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.RingGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.RingGeometry;
		return RingGeometryFromJSObject(p);
	};
	Three.prototype.RingGeometry = function() { return this.$val.RingGeometry(); };
	RingGeometryFromJSObject = function(p) {
		var p;
		return new RingGeometry.ptr(p);
	};
	$pkg.RingGeometryFromJSObject = RingGeometryFromJSObject;
	Three.ptr.prototype.NewRingGeometry = function(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
		var innerRadius, outerRadius, p, phiSegments, t, thetaLength, thetaSegments, thetaStart;
		t = this;
		p = new (t.ctx.RingGeometry)(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength);
		return RingGeometryFromJSObject(p);
	};
	Three.prototype.NewRingGeometry = function(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) { return this.$val.NewRingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength); };
	Scene.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.Object3D.p;
	};
	Scene.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Scene = function() {
		var p, t;
		t = this;
		p = t.ctx.Scene;
		return SceneFromJSObject(p);
	};
	Three.prototype.Scene = function() { return this.$val.Scene(); };
	SceneFromJSObject = function(p) {
		var p;
		return new Scene.ptr(Object3DFromJSObject(p));
	};
	$pkg.SceneFromJSObject = SceneFromJSObject;
	Three.ptr.prototype.NewScene = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Scene)();
		return SceneFromJSObject(p);
	};
	Three.prototype.NewScene = function() { return this.$val.NewScene(); };
	Scene.ptr.prototype.Copy = function(source, recursive) {
		var recursive, s, source;
		s = this;
		s.Object3D.p.copy(source.Object3D.p, $externalize(recursive, $Bool));
		return s;
	};
	Scene.prototype.Copy = function(source, recursive) { return this.$val.Copy(source, recursive); };
	SceneUtils.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	SceneUtils.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.SceneUtils = function() {
		var p, t;
		t = this;
		p = t.ctx.SceneUtils;
		return SceneUtilsFromJSObject(p);
	};
	Three.prototype.SceneUtils = function() { return this.$val.SceneUtils(); };
	SceneUtilsFromJSObject = function(p) {
		var p;
		return new SceneUtils.ptr(p);
	};
	$pkg.SceneUtilsFromJSObject = SceneUtilsFromJSObject;
	Three.ptr.prototype.NewSceneUtils = function() {
		var p, t;
		t = this;
		p = new (t.ctx.SceneUtils)();
		return SceneUtilsFromJSObject(p);
	};
	Three.prototype.NewSceneUtils = function() { return this.$val.NewSceneUtils(); };
	SceneUtils.ptr.prototype.CreateMultiMaterialObject = function(geometry, materials) {
		var $24r, _r, _r$1, _r$2, array, geometry, i, materials, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; array = $f.array; geometry = $f.geometry; i = $f.i; materials = $f.materials; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		array = new sliceType$13([]);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < materials.$length)) { break; } */ if(!(i < materials.$length)) { $s = 2; continue; }
			_r = ((i < 0 || i >= materials.$length) ? ($throwRuntimeError("index out of range"), undefined) : materials.$array[materials.$offset + i]).JSObject(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			array = $append(array, _r);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$1 = geometry.JSObject(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = GroupFromJSObject(s.p.createMultiMaterialObject(_r$1, $externalize(array, sliceType$13))); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 6; case 6: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SceneUtils.ptr.prototype.CreateMultiMaterialObject }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.array = array; $f.geometry = geometry; $f.i = i; $f.materials = materials; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	SceneUtils.prototype.CreateMultiMaterialObject = function(geometry, materials) { return this.$val.CreateMultiMaterialObject(geometry, materials); };
	SceneUtils.ptr.prototype.Detach = function(child, parent, scene) {
		var child, parent, s, scene;
		s = this;
		s.p.detach(child, parent, scene);
		return s;
	};
	SceneUtils.prototype.Detach = function(child, parent, scene) { return this.$val.Detach(child, parent, scene); };
	SceneUtils.ptr.prototype.Attach = function(child, scene, parent) {
		var child, parent, s, scene;
		s = this;
		s.p.attach(child, scene, parent);
		return s;
	};
	SceneUtils.prototype.Attach = function(child, scene, parent) { return this.$val.Attach(child, scene, parent); };
	ShaderChunk.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	ShaderChunk.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ShaderChunk = function() {
		var p, t;
		t = this;
		p = t.ctx.ShaderChunk;
		return ShaderChunkFromJSObject(p);
	};
	Three.prototype.ShaderChunk = function() { return this.$val.ShaderChunk(); };
	ShaderChunkFromJSObject = function(p) {
		var p;
		return new ShaderChunk.ptr(p);
	};
	$pkg.ShaderChunkFromJSObject = ShaderChunkFromJSObject;
	Three.ptr.prototype.NewShaderChunk = function() {
		var p, t;
		t = this;
		p = new (t.ctx.ShaderChunk)();
		return ShaderChunkFromJSObject(p);
	};
	Three.prototype.NewShaderChunk = function() { return this.$val.NewShaderChunk(); };
	ShaderLib.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	ShaderLib.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ShaderLib = function() {
		var p, t;
		t = this;
		p = t.ctx.ShaderLib;
		return ShaderLibFromJSObject(p);
	};
	Three.prototype.ShaderLib = function() { return this.$val.ShaderLib(); };
	ShaderLibFromJSObject = function(p) {
		var p;
		return new ShaderLib.ptr(p);
	};
	$pkg.ShaderLibFromJSObject = ShaderLibFromJSObject;
	Three.ptr.prototype.NewShaderLib = function() {
		var p, t;
		t = this;
		p = new (t.ctx.ShaderLib)();
		return ShaderLibFromJSObject(p);
	};
	Three.prototype.NewShaderLib = function() { return this.$val.NewShaderLib(); };
	ShaderMaterial.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	ShaderMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ShaderMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.ShaderMaterial;
		return ShaderMaterialFromJSObject(p);
	};
	Three.prototype.ShaderMaterial = function() { return this.$val.ShaderMaterial(); };
	ShaderMaterialFromJSObject = function(p) {
		var p;
		return new ShaderMaterial.ptr(p);
	};
	$pkg.ShaderMaterialFromJSObject = ShaderMaterialFromJSObject;
	Three.ptr.prototype.NewShaderMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.ShaderMaterial)(parameters);
		return ShaderMaterialFromJSObject(p);
	};
	Three.prototype.NewShaderMaterial = function(parameters) { return this.$val.NewShaderMaterial(parameters); };
	ShaderMaterial.ptr.prototype.Copy = function(source) {
		var s, source;
		s = this;
		s.p.copy(source.p);
		return s;
	};
	ShaderMaterial.prototype.Copy = function(source) { return this.$val.Copy(source); };
	ShaderMaterial.ptr.prototype.ToJSON = function(meta) {
		var meta, s;
		s = this;
		s.p.toJSON(meta);
		return s;
	};
	ShaderMaterial.prototype.ToJSON = function(meta) { return this.$val.ToJSON(meta); };
	Shape.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	Shape.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Shape = function() {
		var p, t;
		t = this;
		p = t.ctx.Shape;
		return ShapeFromJSObject(p);
	};
	Three.prototype.Shape = function() { return this.$val.Shape(); };
	ShapeFromJSObject = function(p) {
		var p;
		return new Shape.ptr(p);
	};
	$pkg.ShapeFromJSObject = ShapeFromJSObject;
	Three.ptr.prototype.NewShape = function() {
		var p, t;
		t = this;
		p = new (t.ctx.Shape)();
		return ShapeFromJSObject(p);
	};
	Three.prototype.NewShape = function() { return this.$val.NewShape(); };
	Shape.ptr.prototype.Extrude = function(options) {
		var options, s;
		s = this;
		s.p.extrude(options);
		return s;
	};
	Shape.prototype.Extrude = function(options) { return this.$val.Extrude(options); };
	Shape.ptr.prototype.MakeGeometry = function(options) {
		var options, s;
		s = this;
		s.p.makeGeometry(options);
		return s;
	};
	Shape.prototype.MakeGeometry = function(options) { return this.$val.MakeGeometry(options); };
	Shape.ptr.prototype.GetPointsHoles = function(divisions) {
		var divisions, s;
		s = this;
		s.p.getPointsHoles(divisions);
		return s;
	};
	Shape.prototype.GetPointsHoles = function(divisions) { return this.$val.GetPointsHoles(divisions); };
	Shape.ptr.prototype.ExtractAllPoints = function(divisions) {
		var divisions, s;
		s = this;
		s.p.extractAllPoints(divisions);
		return s;
	};
	Shape.prototype.ExtractAllPoints = function(divisions) { return this.$val.ExtractAllPoints(divisions); };
	Shape.ptr.prototype.ExtractPoints = function(divisions) {
		var divisions, s;
		s = this;
		s.p.extractPoints(divisions);
		return s;
	};
	Shape.prototype.ExtractPoints = function(divisions) { return this.$val.ExtractPoints(divisions); };
	ShapeGeometry.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	ShapeGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ShapeGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.ShapeGeometry;
		return ShapeGeometryFromJSObject(p);
	};
	Three.prototype.ShapeGeometry = function() { return this.$val.ShapeGeometry(); };
	ShapeGeometryFromJSObject = function(p) {
		var p;
		return new ShapeGeometry.ptr(p);
	};
	$pkg.ShapeGeometryFromJSObject = ShapeGeometryFromJSObject;
	Three.ptr.prototype.NewShapeGeometry = function(shapes, options) {
		var options, p, shapes, t;
		t = this;
		p = new (t.ctx.ShapeGeometry)(shapes, options);
		return ShapeGeometryFromJSObject(p);
	};
	Three.prototype.NewShapeGeometry = function(shapes, options) { return this.$val.NewShapeGeometry(shapes, options); };
	ShapeGeometry.ptr.prototype.AddShapeList = function(shapes, options) {
		var options, s, shapes;
		s = this;
		s.p.addShapeList(shapes, options);
		return s;
	};
	ShapeGeometry.prototype.AddShapeList = function(shapes, options) { return this.$val.AddShapeList(shapes, options); };
	ShapeGeometry.ptr.prototype.AddShape = function(shape, options) {
		var options, s, shape;
		s = this;
		s.p.addShape(shape, options);
		return s;
	};
	ShapeGeometry.prototype.AddShape = function(shape, options) { return this.$val.AddShape(shape, options); };
	ShapeUtils.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	ShapeUtils.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.ShapeUtils = function() {
		var p, t;
		t = this;
		p = t.ctx.ShapeUtils;
		return ShapeUtilsFromJSObject(p);
	};
	Three.prototype.ShapeUtils = function() { return this.$val.ShapeUtils(); };
	ShapeUtilsFromJSObject = function(p) {
		var p;
		return new ShapeUtils.ptr(p);
	};
	$pkg.ShapeUtilsFromJSObject = ShapeUtilsFromJSObject;
	Three.ptr.prototype.NewShapeUtils = function() {
		var p, t;
		t = this;
		p = new (t.ctx.ShapeUtils)();
		return ShapeUtilsFromJSObject(p);
	};
	Three.prototype.NewShapeUtils = function() { return this.$val.NewShapeUtils(); };
	ShapeUtils.ptr.prototype.Area = function(contour) {
		var contour, s;
		s = this;
		s.p.area(contour);
		return s;
	};
	ShapeUtils.prototype.Area = function(contour) { return this.$val.Area(contour); };
	ShapeUtils.ptr.prototype.TriangulateShape = function(contour, holes) {
		var contour, holes, s;
		s = this;
		s.p.triangulateShape(contour, holes);
		return s;
	};
	ShapeUtils.prototype.TriangulateShape = function(contour, holes) { return this.$val.TriangulateShape(contour, holes); };
	ShapeUtils.ptr.prototype.IsClockWise = function(pts) {
		var pts, s;
		s = this;
		s.p.isClockWise(pts);
		return s;
	};
	ShapeUtils.prototype.IsClockWise = function(pts) { return this.$val.IsClockWise(pts); };
	Skeleton.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	Skeleton.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Skeleton = function() {
		var p, t;
		t = this;
		p = t.ctx.Skeleton;
		return SkeletonFromJSObject(p);
	};
	Three.prototype.Skeleton = function() { return this.$val.Skeleton(); };
	SkeletonFromJSObject = function(p) {
		var p;
		return new Skeleton.ptr(p);
	};
	$pkg.SkeletonFromJSObject = SkeletonFromJSObject;
	Three.ptr.prototype.NewSkeleton = function(bones, boneInverses, useVertexTexture) {
		var boneInverses, bones, p, t, useVertexTexture;
		t = this;
		p = new (t.ctx.Skeleton)($externalize(bones, sliceType$13), $externalize(boneInverses, sliceType$13), $externalize(useVertexTexture, $Bool));
		return SkeletonFromJSObject(p);
	};
	Three.prototype.NewSkeleton = function(bones, boneInverses, useVertexTexture) { return this.$val.NewSkeleton(bones, boneInverses, useVertexTexture); };
	SkeletonHelper.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	SkeletonHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.SkeletonHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.SkeletonHelper;
		return SkeletonHelperFromJSObject(p);
	};
	Three.prototype.SkeletonHelper = function() { return this.$val.SkeletonHelper(); };
	SkeletonHelperFromJSObject = function(p) {
		var p;
		return new SkeletonHelper.ptr(p);
	};
	$pkg.SkeletonHelperFromJSObject = SkeletonHelperFromJSObject;
	Three.ptr.prototype.NewSkeletonHelper = function(object) {
		var object, p, t;
		t = this;
		p = new (t.ctx.SkeletonHelper)(object);
		return SkeletonHelperFromJSObject(p);
	};
	Three.prototype.NewSkeletonHelper = function(object) { return this.$val.NewSkeletonHelper(object); };
	SkeletonHelper.ptr.prototype.GetBoneList = function(object) {
		var object, s;
		s = this;
		s.p.getBoneList(object);
		return s;
	};
	SkeletonHelper.prototype.GetBoneList = function(object) { return this.$val.GetBoneList(object); };
	SkinnedMesh.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.Mesh.Object3D.p;
	};
	SkinnedMesh.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.SkinnedMesh = function() {
		var t;
		t = this;
		return SkinnedMeshFromJSObject(t.ctx.SkinnedMesh);
	};
	Three.prototype.SkinnedMesh = function() { return this.$val.SkinnedMesh(); };
	SkinnedMeshFromJSObject = function(p) {
		var p;
		return new SkinnedMesh.ptr(new Mesh.ptr(new Object3D.ptr(p)));
	};
	$pkg.SkinnedMeshFromJSObject = SkinnedMeshFromJSObject;
	Three.ptr.prototype.NewSkinnedMesh = function(geometry, material, useVertexTexture) {
		var geometry, material, t, useVertexTexture;
		t = this;
		return SkinnedMeshFromJSObject(new (t.ctx.SkinnedMesh)(geometry, material, $externalize(useVertexTexture, $Bool)));
	};
	Three.prototype.NewSkinnedMesh = function(geometry, material, useVertexTexture) { return this.$val.NewSkinnedMesh(geometry, material, useVertexTexture); };
	SkinnedMesh.ptr.prototype.Bind = function(skeleton, bindMatrix) {
		var bindMatrix, s, skeleton;
		s = this;
		s.Mesh.Object3D.p.bind(skeleton, bindMatrix);
		return s;
	};
	SkinnedMesh.prototype.Bind = function(skeleton, bindMatrix) { return this.$val.Bind(skeleton, bindMatrix); };
	SkinnedMesh.ptr.prototype.UpdateMatrixWorld = function(force) {
		var force, s;
		s = this;
		s.Mesh.Object3D.p.updateMatrixWorld(force);
		return s;
	};
	SkinnedMesh.prototype.UpdateMatrixWorld = function(force) { return this.$val.UpdateMatrixWorld(force); };
	Sphere.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	Sphere.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Sphere = function() {
		var p, t;
		t = this;
		p = t.ctx.Sphere;
		return SphereFromJSObject(p);
	};
	Three.prototype.Sphere = function() { return this.$val.Sphere(); };
	SphereFromJSObject = function(p) {
		var p;
		return new Sphere.ptr(p);
	};
	$pkg.SphereFromJSObject = SphereFromJSObject;
	Three.ptr.prototype.NewSphere = function(center, radius) {
		var center, p, radius, t;
		t = this;
		p = new (t.ctx.Sphere)(center, radius);
		return SphereFromJSObject(p);
	};
	Three.prototype.NewSphere = function(center, radius) { return this.$val.NewSphere(center, radius); };
	Sphere.ptr.prototype.Set = function(center, radius) {
		var center, radius, s;
		s = this;
		s.p.set(center, radius);
		return s;
	};
	Sphere.prototype.Set = function(center, radius) { return this.$val.Set(center, radius); };
	Sphere.ptr.prototype.SetFromPoints = function() {
		var s;
		s = this;
		s.p.setFromPoints();
		return s;
	};
	Sphere.prototype.SetFromPoints = function() { return this.$val.SetFromPoints(); };
	Sphere.ptr.prototype.Clone = function() {
		var s;
		s = this;
		s.p.clone();
		return s;
	};
	Sphere.prototype.Clone = function() { return this.$val.Clone(); };
	Sphere.ptr.prototype.Copy = function(sphere) {
		var s, sphere;
		s = this;
		s.p.copy(sphere.p);
		return s;
	};
	Sphere.prototype.Copy = function(sphere) { return this.$val.Copy(sphere); };
	Sphere.ptr.prototype.Empty = function() {
		var s;
		s = this;
		s.p.empty();
		return s;
	};
	Sphere.prototype.Empty = function() { return this.$val.Empty(); };
	Sphere.ptr.prototype.ContainsPoint = function(point) {
		var point, s;
		s = this;
		s.p.containsPoint(point);
		return s;
	};
	Sphere.prototype.ContainsPoint = function(point) { return this.$val.ContainsPoint(point); };
	Sphere.ptr.prototype.DistanceToPoint = function(point) {
		var point, s;
		s = this;
		s.p.distanceToPoint(point);
		return s;
	};
	Sphere.prototype.DistanceToPoint = function(point) { return this.$val.DistanceToPoint(point); };
	Sphere.ptr.prototype.IntersectsSphere = function(sphere) {
		var s, sphere;
		s = this;
		s.p.intersectsSphere(sphere);
		return s;
	};
	Sphere.prototype.IntersectsSphere = function(sphere) { return this.$val.IntersectsSphere(sphere); };
	Sphere.ptr.prototype.IntersectsBox = function(box) {
		var box, s;
		s = this;
		s.p.intersectsBox(box);
		return s;
	};
	Sphere.prototype.IntersectsBox = function(box) { return this.$val.IntersectsBox(box); };
	Sphere.ptr.prototype.IntersectsPlane = function(plane) {
		var plane, s;
		s = this;
		s.p.intersectsPlane(plane);
		return s;
	};
	Sphere.prototype.IntersectsPlane = function(plane) { return this.$val.IntersectsPlane(plane); };
	Sphere.ptr.prototype.ClampPoint = function(point, optionalTarget) {
		var optionalTarget, point, s;
		s = this;
		s.p.clampPoint(point, optionalTarget);
		return s;
	};
	Sphere.prototype.ClampPoint = function(point, optionalTarget) { return this.$val.ClampPoint(point, optionalTarget); };
	Sphere.ptr.prototype.GetBoundingBox = function(optionalTarget) {
		var optionalTarget, s;
		s = this;
		s.p.getBoundingBox(optionalTarget);
		return s;
	};
	Sphere.prototype.GetBoundingBox = function(optionalTarget) { return this.$val.GetBoundingBox(optionalTarget); };
	Sphere.ptr.prototype.ApplyMatrix4 = function(matrix) {
		var matrix, s;
		s = this;
		s.p.applyMatrix4(matrix);
		return s;
	};
	Sphere.prototype.ApplyMatrix4 = function(matrix) { return this.$val.ApplyMatrix4(matrix); };
	Sphere.ptr.prototype.Translate = function(offset) {
		var offset, s;
		s = this;
		s.p.translate(offset);
		return s;
	};
	Sphere.prototype.Translate = function(offset) { return this.$val.Translate(offset); };
	Sphere.ptr.prototype.Equals = function(sphere) {
		var s, sphere;
		s = this;
		s.p.equals(sphere);
		return s;
	};
	Sphere.prototype.Equals = function(sphere) { return this.$val.Equals(sphere); };
	SphereBufferGeometry.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	SphereBufferGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.SphereBufferGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.SphereBufferGeometry;
		return SphereBufferGeometryFromJSObject(p);
	};
	Three.prototype.SphereBufferGeometry = function() { return this.$val.SphereBufferGeometry(); };
	SphereBufferGeometryFromJSObject = function(p) {
		var p;
		return new SphereBufferGeometry.ptr(p);
	};
	$pkg.SphereBufferGeometryFromJSObject = SphereBufferGeometryFromJSObject;
	Three.ptr.prototype.NewSphereBufferGeometry = function(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
		var heightSegments, p, phiLength, phiStart, radius, t, thetaLength, thetaStart, widthSegments;
		t = this;
		p = new (t.ctx.SphereBufferGeometry)(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength);
		return SphereBufferGeometryFromJSObject(p);
	};
	Three.prototype.NewSphereBufferGeometry = function(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) { return this.$val.NewSphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength); };
	SphereGeometry.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	SphereGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.SphereGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.SphereGeometry;
		return SphereGeometryFromJSObject(p);
	};
	Three.prototype.SphereGeometry = function() { return this.$val.SphereGeometry(); };
	SphereGeometryFromJSObject = function(p) {
		var p;
		return new SphereGeometry.ptr(p);
	};
	$pkg.SphereGeometryFromJSObject = SphereGeometryFromJSObject;
	Three.ptr.prototype.NewSphereGeometry = function(radius, widthSegments, heightSegments, opts) {
		var heightSegments, opts, p, radius, t, widthSegments;
		t = this;
		p = null;
		if (!(opts === ptrType$21.nil)) {
			p = new (t.ctx.SphereGeometry)(radius, widthSegments, heightSegments, opts.phiStart, opts.phiLength, opts.thetaStart, opts.thetaLength);
		} else {
			p = new (t.ctx.SphereGeometry)(radius, widthSegments, heightSegments);
		}
		return SphereGeometryFromJSObject(p);
	};
	Three.prototype.NewSphereGeometry = function(radius, widthSegments, heightSegments, opts) { return this.$val.NewSphereGeometry(radius, widthSegments, heightSegments, opts); };
	Spherical.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	Spherical.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Spherical = function() {
		var p, t;
		t = this;
		p = t.ctx.Spherical;
		return SphericalFromJSObject(p);
	};
	Three.prototype.Spherical = function() { return this.$val.Spherical(); };
	SphericalFromJSObject = function(p) {
		var p;
		return new Spherical.ptr(p);
	};
	$pkg.SphericalFromJSObject = SphericalFromJSObject;
	Three.ptr.prototype.NewSpherical = function(radius, phi, theta) {
		var p, phi, radius, t, theta;
		t = this;
		p = new (t.ctx.Spherical)(radius, phi, theta);
		return SphericalFromJSObject(p);
	};
	Three.prototype.NewSpherical = function(radius, phi, theta) { return this.$val.NewSpherical(radius, phi, theta); };
	Spherical.ptr.prototype.Set = function(radius, phi, theta) {
		var phi, radius, s, theta;
		s = this;
		s.p.set(radius, phi, theta);
		return s;
	};
	Spherical.prototype.Set = function(radius, phi, theta) { return this.$val.Set(radius, phi, theta); };
	Spherical.ptr.prototype.Clone = function() {
		var s;
		s = this;
		s.p.clone();
		return s;
	};
	Spherical.prototype.Clone = function() { return this.$val.Clone(); };
	Spherical.ptr.prototype.Copy = function(other) {
		var other, s;
		s = this;
		s.p.copy(other.p);
		return s;
	};
	Spherical.prototype.Copy = function(other) { return this.$val.Copy(other); };
	Spherical.ptr.prototype.MakeSafe = function() {
		var s;
		s = this;
		s.p.makeSafe();
		return s;
	};
	Spherical.prototype.MakeSafe = function() { return this.$val.MakeSafe(); };
	Spherical.ptr.prototype.SetFromVector3 = function(vec3) {
		var s, vec3;
		s = this;
		s.p.setFromVector3(vec3);
		return s;
	};
	Spherical.prototype.SetFromVector3 = function(vec3) { return this.$val.SetFromVector3(vec3); };
	Spline.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	Spline.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Spline = function() {
		var p, t;
		t = this;
		p = t.ctx.Spline;
		return SplineFromJSObject(p);
	};
	Three.prototype.Spline = function() { return this.$val.Spline(); };
	SplineFromJSObject = function(p) {
		var p;
		return new Spline.ptr(p);
	};
	$pkg.SplineFromJSObject = SplineFromJSObject;
	Three.ptr.prototype.NewSpline = function(points) {
		var p, points, t;
		t = this;
		p = new (t.ctx.Spline)(points);
		return SplineFromJSObject(p);
	};
	Three.prototype.NewSpline = function(points) { return this.$val.NewSpline(points); };
	SplineCurve.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	SplineCurve.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.SplineCurve = function() {
		var p, t;
		t = this;
		p = t.ctx.SplineCurve;
		return SplineCurveFromJSObject(p);
	};
	Three.prototype.SplineCurve = function() { return this.$val.SplineCurve(); };
	SplineCurveFromJSObject = function(p) {
		var p;
		return new SplineCurve.ptr(p);
	};
	$pkg.SplineCurveFromJSObject = SplineCurveFromJSObject;
	Three.ptr.prototype.NewSplineCurve = function(points) {
		var p, points, t;
		t = this;
		p = new (t.ctx.SplineCurve)(points);
		return SplineCurveFromJSObject(p);
	};
	Three.prototype.NewSplineCurve = function(points) { return this.$val.NewSplineCurve(points); };
	SplineCurve.ptr.prototype.GetPoint = function(t) {
		var s, t;
		s = this;
		s.p.getPoint(t);
		return s;
	};
	SplineCurve.prototype.GetPoint = function(t) { return this.$val.GetPoint(t); };
	SpotLight.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.Light.Object3D.p;
	};
	SpotLight.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.SpotLight = function() {
		var t;
		t = this;
		return SpotLightFromJSObject(t.ctx.SpotLight);
	};
	Three.prototype.SpotLight = function() { return this.$val.SpotLight(); };
	SpotLightFromJSObject = function(p) {
		var p;
		return new SpotLight.ptr(new Light.ptr(new Object3D.ptr(p)));
	};
	$pkg.SpotLightFromJSObject = SpotLightFromJSObject;
	Three.ptr.prototype.NewSpotLight = function(color, intensity, distance, angle, penumbra, decay) {
		var angle, color, decay, distance, intensity, penumbra, t;
		t = this;
		return SpotLightFromJSObject(new (t.ctx.SpotLight)(color, intensity, distance, angle, penumbra, decay));
	};
	Three.prototype.NewSpotLight = function(color, intensity, distance, angle, penumbra, decay) { return this.$val.NewSpotLight(color, intensity, distance, angle, penumbra, decay); };
	SpotLight.ptr.prototype.Get = function() {
		var s;
		s = this;
		s.Light.Object3D.p.get();
		return s;
	};
	SpotLight.prototype.Get = function() { return this.$val.Get(); };
	SpotLight.ptr.prototype.Set = function(power) {
		var power, s;
		s = this;
		s.Light.Object3D.p.set(power);
		return s;
	};
	SpotLight.prototype.Set = function(power) { return this.$val.Set(power); };
	SpotLight.ptr.prototype.Copy = function(source) {
		var s, source;
		s = this;
		s.Light.Object3D.p.copy(source.Light.Object3D.p);
		return s;
	};
	SpotLight.prototype.Copy = function(source) { return this.$val.Copy(source); };
	Object3D.ptr.prototype.Shadow = function() {
		var o;
		o = this;
		return new LightShadow.ptr(o.p.shadow);
	};
	Object3D.prototype.Shadow = function() { return this.$val.Shadow(); };
	SpotLightHelper.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	SpotLightHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.SpotLightHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.SpotLightHelper;
		return SpotLightHelperFromJSObject(p);
	};
	Three.prototype.SpotLightHelper = function() { return this.$val.SpotLightHelper(); };
	SpotLightHelperFromJSObject = function(p) {
		var p;
		return new SpotLightHelper.ptr(p);
	};
	$pkg.SpotLightHelperFromJSObject = SpotLightHelperFromJSObject;
	Three.ptr.prototype.NewSpotLightHelper = function(light) {
		var light, p, t;
		t = this;
		p = new (t.ctx.SpotLightHelper)(light);
		return SpotLightHelperFromJSObject(p);
	};
	Three.prototype.NewSpotLightHelper = function(light) { return this.$val.NewSpotLightHelper(light); };
	Sprite.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	Sprite.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Sprite = function() {
		var p, t;
		t = this;
		p = t.ctx.Sprite;
		return SpriteFromJSObject(p);
	};
	Three.prototype.Sprite = function() { return this.$val.Sprite(); };
	SpriteFromJSObject = function(p) {
		var p;
		return new Sprite.ptr(p);
	};
	$pkg.SpriteFromJSObject = SpriteFromJSObject;
	Three.ptr.prototype.NewSprite = function(material) {
		var material, p, t;
		t = this;
		p = new (t.ctx.Sprite)(material);
		return SpriteFromJSObject(p);
	};
	Three.prototype.NewSprite = function(material) { return this.$val.NewSprite(material); };
	SpriteMaterial.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	SpriteMaterial.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.SpriteMaterial = function() {
		var p, t;
		t = this;
		p = t.ctx.SpriteMaterial;
		return SpriteMaterialFromJSObject(p);
	};
	Three.prototype.SpriteMaterial = function() { return this.$val.SpriteMaterial(); };
	SpriteMaterialFromJSObject = function(p) {
		var p;
		return new SpriteMaterial.ptr(p);
	};
	$pkg.SpriteMaterialFromJSObject = SpriteMaterialFromJSObject;
	Three.ptr.prototype.NewSpriteMaterial = function(parameters) {
		var p, parameters, t;
		t = this;
		p = new (t.ctx.SpriteMaterial)($externalize(parameters, mapType));
		return SpriteMaterialFromJSObject(p);
	};
	Three.prototype.NewSpriteMaterial = function(parameters) { return this.$val.NewSpriteMaterial(parameters); };
	SpriteMaterial.ptr.prototype.Copy = function(source) {
		var s, source;
		s = this;
		s.p.copy(source.p);
		return s;
	};
	SpriteMaterial.prototype.Copy = function(source) { return this.$val.Copy(source); };
	SpritePlugin.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	SpritePlugin.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.SpritePlugin = function() {
		var p, t;
		t = this;
		p = t.ctx.SpritePlugin;
		return SpritePluginFromJSObject(p);
	};
	Three.prototype.SpritePlugin = function() { return this.$val.SpritePlugin(); };
	SpritePluginFromJSObject = function(p) {
		var p;
		return new SpritePlugin.ptr(p);
	};
	$pkg.SpritePluginFromJSObject = SpritePluginFromJSObject;
	Three.ptr.prototype.NewSpritePlugin = function(renderer, sprites) {
		var p, renderer, sprites, t;
		t = this;
		p = new (t.ctx.SpritePlugin)(renderer, sprites);
		return SpritePluginFromJSObject(p);
	};
	Three.prototype.NewSpritePlugin = function(renderer, sprites) { return this.$val.NewSpritePlugin(renderer, sprites); };
	StereoCamera.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	StereoCamera.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.StereoCamera = function() {
		var p, t;
		t = this;
		p = t.ctx.StereoCamera;
		return StereoCameraFromJSObject(p);
	};
	Three.prototype.StereoCamera = function() { return this.$val.StereoCamera(); };
	StereoCameraFromJSObject = function(p) {
		var p;
		return new StereoCamera.ptr(p);
	};
	$pkg.StereoCameraFromJSObject = StereoCameraFromJSObject;
	Three.ptr.prototype.NewStereoCamera = function() {
		var p, t;
		t = this;
		p = new (t.ctx.StereoCamera)();
		return StereoCameraFromJSObject(p);
	};
	Three.prototype.NewStereoCamera = function() { return this.$val.NewStereoCamera(); };
	StereoCamera.ptr.prototype.Type = function() {
		var s;
		s = this;
		return $internalize(s.p.type, $String);
	};
	StereoCamera.prototype.Type = function() { return this.$val.Type(); };
	StereoCamera.ptr.prototype.Aspect = function() {
		var s;
		s = this;
		return $parseFloat(s.p.aspect);
	};
	StereoCamera.prototype.Aspect = function() { return this.$val.Aspect(); };
	StereoCamera.ptr.prototype.CameraL = function() {
		var s;
		s = this;
		return new PerspectiveCamera.ptr(new Camera.ptr(new Object3D.ptr(s.p.cameraL)));
	};
	StereoCamera.prototype.CameraL = function() { return this.$val.CameraL(); };
	StereoCamera.ptr.prototype.CameraR = function() {
		var s;
		s = this;
		return new PerspectiveCamera.ptr(new Camera.ptr(new Object3D.ptr(s.p.cameraR)));
	};
	StereoCamera.prototype.CameraR = function() { return this.$val.CameraR(); };
	StringKeyframeTrack.ptr.prototype.JSObject = function() {
		var s;
		s = this;
		return s.p;
	};
	StringKeyframeTrack.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.StringKeyframeTrack = function() {
		var p, t;
		t = this;
		p = t.ctx.StringKeyframeTrack;
		return StringKeyframeTrackFromJSObject(p);
	};
	Three.prototype.StringKeyframeTrack = function() { return this.$val.StringKeyframeTrack(); };
	StringKeyframeTrackFromJSObject = function(p) {
		var p;
		return new StringKeyframeTrack.ptr(p);
	};
	$pkg.StringKeyframeTrackFromJSObject = StringKeyframeTrackFromJSObject;
	Three.ptr.prototype.NewStringKeyframeTrack = function(name, times, values, interpolation) {
		var interpolation, name, p, t, times, values;
		t = this;
		p = new (t.ctx.StringKeyframeTrack)(name, times, values, interpolation);
		return StringKeyframeTrackFromJSObject(p);
	};
	Three.prototype.NewStringKeyframeTrack = function(name, times, values, interpolation) { return this.$val.NewStringKeyframeTrack(name, times, values, interpolation); };
	TetrahedronGeometry.ptr.prototype.JSObject = function() {
		var t;
		t = this;
		return t.p;
	};
	TetrahedronGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.TetrahedronGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.TetrahedronGeometry;
		return TetrahedronGeometryFromJSObject(p);
	};
	Three.prototype.TetrahedronGeometry = function() { return this.$val.TetrahedronGeometry(); };
	TetrahedronGeometryFromJSObject = function(p) {
		var p;
		return new TetrahedronGeometry.ptr(p);
	};
	$pkg.TetrahedronGeometryFromJSObject = TetrahedronGeometryFromJSObject;
	Three.ptr.prototype.NewTetrahedronGeometry = function(radius, detail) {
		var detail, p, radius, t;
		t = this;
		p = new (t.ctx.TetrahedronGeometry)(radius, detail);
		return TetrahedronGeometryFromJSObject(p);
	};
	Three.prototype.NewTetrahedronGeometry = function(radius, detail) { return this.$val.NewTetrahedronGeometry(radius, detail); };
	TextGeometry.ptr.prototype.JSObject = function() {
		var t;
		t = this;
		return t.p;
	};
	TextGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.TextGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.TextGeometry;
		return TextGeometryFromJSObject(p);
	};
	Three.prototype.TextGeometry = function() { return this.$val.TextGeometry(); };
	TextGeometryFromJSObject = function(p) {
		var p;
		return new TextGeometry.ptr(p);
	};
	$pkg.TextGeometryFromJSObject = TextGeometryFromJSObject;
	Three.ptr.prototype.NewTextGeometry = function(text, parameters) {
		var p, parameters, t, text;
		t = this;
		p = new (t.ctx.TextGeometry)($externalize(text, $String), $externalize(parameters, mapType));
		return TextGeometryFromJSObject(p);
	};
	Three.prototype.NewTextGeometry = function(text, parameters) { return this.$val.NewTextGeometry(text, parameters); };
	Texture.ptr.prototype.JSObject = function() {
		var t;
		t = this;
		return t.p;
	};
	Texture.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Texture = function() {
		var p, t;
		t = this;
		p = t.ctx.Texture;
		return TextureFromJSObject(p);
	};
	Three.prototype.Texture = function() { return this.$val.Texture(); };
	TextureFromJSObject = function(p) {
		var p;
		return new Texture.ptr(p);
	};
	$pkg.TextureFromJSObject = TextureFromJSObject;
	Three.ptr.prototype.NewTexture = function(image, opts) {
		var image, opts, p, t;
		t = this;
		p = t.ctx.Texture;
		if (!(opts === ptrType$22.nil)) {
			p = new (p)(image, opts.mapping, opts.wrapS, opts.wrapT, opts.magFilter, opts.minFilter, opts.format, opts.typ, opts.anisotropy);
		} else {
			p = new (p)(image);
		}
		return TextureFromJSObject(p);
	};
	Three.prototype.NewTexture = function(image, opts) { return this.$val.NewTexture(image, opts); };
	Texture.ptr.prototype.SetNeedsUpdate = function(value) {
		var t, value;
		t = this;
		t.p.needsUpdate = $externalize(value, $Bool);
		return t;
	};
	Texture.prototype.SetNeedsUpdate = function(value) { return this.$val.SetNeedsUpdate(value); };
	Texture.ptr.prototype.Clone = function() {
		var t;
		t = this;
		t.p.clone();
		return t;
	};
	Texture.prototype.Clone = function() { return this.$val.Clone(); };
	Texture.ptr.prototype.Copy = function(source) {
		var source, t;
		t = this;
		t.p.copy(source.p);
		return t;
	};
	Texture.prototype.Copy = function(source) { return this.$val.Copy(source); };
	Texture.ptr.prototype.ToJSON = function(meta) {
		var meta, t;
		t = this;
		t.p.toJSON(meta);
		return t;
	};
	Texture.prototype.ToJSON = function(meta) { return this.$val.ToJSON(meta); };
	Texture.ptr.prototype.Dispose = function() {
		var t;
		t = this;
		t.p.dispose();
		return t;
	};
	Texture.prototype.Dispose = function() { return this.$val.Dispose(); };
	Texture.ptr.prototype.TransformUv = function(uv) {
		var t, uv;
		t = this;
		t.p.transformUv(uv);
		return t;
	};
	Texture.prototype.TransformUv = function(uv) { return this.$val.TransformUv(uv); };
	Texture.ptr.prototype.SetWrapS = function(value) {
		var t, value;
		t = this;
		t.p.wrapS = value;
		return t;
	};
	Texture.prototype.SetWrapS = function(value) { return this.$val.SetWrapS(value); };
	Texture.ptr.prototype.SetWrapT = function(value) {
		var t, value;
		t = this;
		t.p.wrapT = value;
		return t;
	};
	Texture.prototype.SetWrapT = function(value) { return this.$val.SetWrapT(value); };
	Texture.ptr.prototype.SetAnisotropy = function(value) {
		var t, value;
		t = this;
		t.p.anisotropy = value;
		return t;
	};
	Texture.prototype.SetAnisotropy = function(value) { return this.$val.SetAnisotropy(value); };
	TextureLoader.ptr.prototype.JSObject = function() {
		var t;
		t = this;
		return t.p;
	};
	TextureLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.TextureLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.TextureLoader;
		return TextureLoaderFromJSObject(p);
	};
	Three.prototype.TextureLoader = function() { return this.$val.TextureLoader(); };
	TextureLoaderFromJSObject = function(p) {
		var p;
		return new TextureLoader.ptr(p);
	};
	$pkg.TextureLoaderFromJSObject = TextureLoaderFromJSObject;
	Three.ptr.prototype.NewTextureLoader = function() {
		var p, t;
		t = this;
		p = new (t.ctx.TextureLoader)();
		return TextureLoaderFromJSObject(p);
	};
	Three.prototype.NewTextureLoader = function() { return this.$val.NewTextureLoader(); };
	onTextureLoadWrapperFunc = function(onLoad) {
		var onLoad;
		return (function $b(geom, materialArray) {
			var geom, i, materialArray, materials, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; geom = $f.geom; i = $f.i; materialArray = $f.materialArray; materials = $f.materials; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			materials = sliceType$12.nil;
			if (!(materialArray === null) && !(materialArray === undefined)) {
				i = 0;
				while (true) {
					if (!(i < $parseInt(materialArray.length))) { break; }
					materials = $append(materials, MaterialFromJSObject(materialArray[i]));
					i = i + (1) >> 0;
				}
			}
			$r = onLoad(GeometryFromJSObject(geom), materials); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.geom = geom; $f.i = i; $f.materialArray = materialArray; $f.materials = materials; $f.$s = $s; $f.$r = $r; return $f;
		});
	};
	TextureLoader.ptr.prototype.Load = function(url, onLoad, onProgress, onError) {
		var onError, onLoad, onLoadWrapper, onProgress, p, t, url;
		t = this;
		onLoadWrapper = $throwNilPointerError;
		if (!(onLoad === $throwNilPointerError)) {
			onLoadWrapper = onTextureLoadWrapperFunc(onLoad);
		}
		p = null;
		if (!(onLoad === $throwNilPointerError) && !($interfaceIsEqual(onProgress, $ifaceNil)) && !($interfaceIsEqual(onError, $ifaceNil))) {
			p = t.p.load($externalize(url, $String), $externalize(onLoadWrapper, funcType), $externalize(onProgress, $emptyInterface), $externalize(onError, $emptyInterface));
		} else if (!(onLoad === $throwNilPointerError) && !($interfaceIsEqual(onProgress, $ifaceNil))) {
			p = t.p.load($externalize(url, $String), $externalize(onLoadWrapper, funcType), $externalize(onProgress, $emptyInterface));
		} else if (!(onLoad === $throwNilPointerError)) {
			p = t.p.load($externalize(url, $String), $externalize(onLoadWrapper, funcType));
		} else {
			p = t.p.load($externalize(url, $String));
		}
		return TextureFromJSObject(p);
	};
	TextureLoader.prototype.Load = function(url, onLoad, onProgress, onError) { return this.$val.Load(url, onLoad, onProgress, onError); };
	TextureLoader.ptr.prototype.SetCrossOrigin = function(value) {
		var t, value;
		t = this;
		t.p.setCrossOrigin($externalize(value, $String));
		return t;
	};
	TextureLoader.prototype.SetCrossOrigin = function(value) { return this.$val.SetCrossOrigin(value); };
	TextureLoader.ptr.prototype.SetPath = function(value) {
		var t, value;
		t = this;
		t.p.setPath(value);
		return t;
	};
	TextureLoader.prototype.SetPath = function(value) { return this.$val.SetPath(value); };
	New = function() {
		return new Three.ptr($global.THREE);
	};
	$pkg.New = New;
	Three.ptr.prototype.JSObject = function() {
		var t;
		t = this;
		return t.ctx;
	};
	Three.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.MOUSE = function() {
		var p, t;
		t = this;
		p = t.ctx.MOUSE;
		return new MOUSE.ptr(p);
	};
	Three.prototype.MOUSE = function() { return this.$val.MOUSE(); };
	Three.ptr.prototype.NewJSObject = function() {
		var p, t;
		t = this;
		p = new (t.ctx.JSObject)();
		return new MOUSE.ptr(p);
	};
	Three.prototype.NewJSObject = function() { return this.$val.NewJSObject(); };
	MOUSE.ptr.prototype.Get = function() {
		var m;
		m = this;
		m.p.get();
		return m;
	};
	MOUSE.prototype.Get = function() { return this.$val.Get(); };
	MOUSE.ptr.prototype.Value = function(target) {
		var m, target;
		m = this;
		m.p.value(target);
		return m;
	};
	MOUSE.prototype.Value = function(target) { return this.$val.Value(target); };
	TorusBufferGeometry.ptr.prototype.JSObject = function() {
		var t;
		t = this;
		return t.p;
	};
	TorusBufferGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.TorusBufferGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.TorusBufferGeometry;
		return TorusBufferGeometryFromJSObject(p);
	};
	Three.prototype.TorusBufferGeometry = function() { return this.$val.TorusBufferGeometry(); };
	TorusBufferGeometryFromJSObject = function(p) {
		var p;
		return new TorusBufferGeometry.ptr(p);
	};
	$pkg.TorusBufferGeometryFromJSObject = TorusBufferGeometryFromJSObject;
	Three.ptr.prototype.NewTorusBufferGeometry = function(radius, tube, radialSegments, tubularSegments, arc) {
		var arc, p, radialSegments, radius, t, tube, tubularSegments;
		t = this;
		p = new (t.ctx.TorusBufferGeometry)(radius, tube, radialSegments, tubularSegments, arc);
		return TorusBufferGeometryFromJSObject(p);
	};
	Three.prototype.NewTorusBufferGeometry = function(radius, tube, radialSegments, tubularSegments, arc) { return this.$val.NewTorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc); };
	TorusGeometry.ptr.prototype.JSObject = function() {
		var t;
		t = this;
		return t.p;
	};
	TorusGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.TorusGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.TorusGeometry;
		return TorusGeometryFromJSObject(p);
	};
	Three.prototype.TorusGeometry = function() { return this.$val.TorusGeometry(); };
	TorusGeometryFromJSObject = function(p) {
		var p;
		return new TorusGeometry.ptr(p);
	};
	$pkg.TorusGeometryFromJSObject = TorusGeometryFromJSObject;
	Three.ptr.prototype.NewTorusGeometry = function(radius, tube, radialSegments, tubularSegments, arc) {
		var arc, p, radialSegments, radius, t, tube, tubularSegments;
		t = this;
		p = new (t.ctx.TorusGeometry)(radius, tube, radialSegments, tubularSegments, arc);
		return TorusGeometryFromJSObject(p);
	};
	Three.prototype.NewTorusGeometry = function(radius, tube, radialSegments, tubularSegments, arc) { return this.$val.NewTorusGeometry(radius, tube, radialSegments, tubularSegments, arc); };
	TorusKnotBufferGeometry.ptr.prototype.JSObject = function() {
		var t;
		t = this;
		return t.p;
	};
	TorusKnotBufferGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.TorusKnotBufferGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.TorusKnotBufferGeometry;
		return TorusKnotBufferGeometryFromJSObject(p);
	};
	Three.prototype.TorusKnotBufferGeometry = function() { return this.$val.TorusKnotBufferGeometry(); };
	TorusKnotBufferGeometryFromJSObject = function(p) {
		var p;
		return new TorusKnotBufferGeometry.ptr(p);
	};
	$pkg.TorusKnotBufferGeometryFromJSObject = TorusKnotBufferGeometryFromJSObject;
	Three.ptr.prototype.NewTorusKnotBufferGeometry = function(radius, tube, tubularSegments, radialSegments, p, q) {
		var p, q, radialSegments, radius, s, t, tube, tubularSegments;
		t = this;
		s = new (t.ctx.TorusKnotBufferGeometry)(radius, tube, tubularSegments, radialSegments, p, q);
		return TorusKnotBufferGeometryFromJSObject(s);
	};
	Three.prototype.NewTorusKnotBufferGeometry = function(radius, tube, tubularSegments, radialSegments, p, q) { return this.$val.NewTorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q); };
	TorusKnotGeometry.ptr.prototype.JSObject = function() {
		var t;
		t = this;
		return t.p;
	};
	TorusKnotGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.TorusKnotGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.TorusKnotGeometry;
		return TorusKnotGeometryFromJSObject(p);
	};
	Three.prototype.TorusKnotGeometry = function() { return this.$val.TorusKnotGeometry(); };
	TorusKnotGeometryFromJSObject = function(p) {
		var p;
		return new TorusKnotGeometry.ptr(p);
	};
	$pkg.TorusKnotGeometryFromJSObject = TorusKnotGeometryFromJSObject;
	Three.ptr.prototype.NewTorusKnotGeometry = function(radius, tube, tubularSegments, radialSegments, p, q, heightScale) {
		var heightScale, p, q, radialSegments, radius, s, t, tube, tubularSegments;
		t = this;
		s = new (t.ctx.TorusKnotGeometry)(radius, tube, tubularSegments, radialSegments, p, q, heightScale);
		return TorusKnotGeometryFromJSObject(s);
	};
	Three.prototype.NewTorusKnotGeometry = function(radius, tube, tubularSegments, radialSegments, p, q, heightScale) { return this.$val.NewTorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q, heightScale); };
	Triangle.ptr.prototype.JSObject = function() {
		var t;
		t = this;
		return t.p;
	};
	Triangle.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Triangle = function() {
		var p, t;
		t = this;
		p = t.ctx.Triangle;
		return TriangleFromJSObject(p);
	};
	Three.prototype.Triangle = function() { return this.$val.Triangle(); };
	TriangleFromJSObject = function(p) {
		var p;
		return new Triangle.ptr(p);
	};
	$pkg.TriangleFromJSObject = TriangleFromJSObject;
	Three.ptr.prototype.NewTriangle = function(a, b, c) {
		var a, b, c, p, t;
		t = this;
		p = new (t.ctx.Triangle)(a, b, c);
		return TriangleFromJSObject(p);
	};
	Three.prototype.NewTriangle = function(a, b, c) { return this.$val.NewTriangle(a, b, c); };
	Triangle.ptr.prototype.Set = function(a, b, c) {
		var a, b, c, t;
		t = this;
		t.p.set(a, b, c);
		return t;
	};
	Triangle.prototype.Set = function(a, b, c) { return this.$val.Set(a, b, c); };
	Triangle.ptr.prototype.SetFromPointsAndIndices = function(points, i0, i1, i2) {
		var i0, i1, i2, points, t;
		t = this;
		t.p.setFromPointsAndIndices(points, i0, i1, i2);
		return t;
	};
	Triangle.prototype.SetFromPointsAndIndices = function(points, i0, i1, i2) { return this.$val.SetFromPointsAndIndices(points, i0, i1, i2); };
	Triangle.ptr.prototype.Clone = function() {
		var t;
		t = this;
		t.p.clone();
		return t;
	};
	Triangle.prototype.Clone = function() { return this.$val.Clone(); };
	Triangle.ptr.prototype.Copy = function(triangle) {
		var t, triangle;
		t = this;
		t.p.copy(triangle.p);
		return t;
	};
	Triangle.prototype.Copy = function(triangle) { return this.$val.Copy(triangle); };
	Triangle.ptr.prototype.Area = function() {
		var t;
		t = this;
		t.p.area();
		return t;
	};
	Triangle.prototype.Area = function() { return this.$val.Area(); };
	Triangle.ptr.prototype.Midpoint = function(optionalTarget) {
		var optionalTarget, t;
		t = this;
		t.p.midpoint(optionalTarget);
		return t;
	};
	Triangle.prototype.Midpoint = function(optionalTarget) { return this.$val.Midpoint(optionalTarget); };
	Triangle.ptr.prototype.Normal = function(optionalTarget) {
		var optionalTarget, t;
		t = this;
		t.p.normal(optionalTarget);
		return t;
	};
	Triangle.prototype.Normal = function(optionalTarget) { return this.$val.Normal(optionalTarget); };
	Triangle.ptr.prototype.Plane = function(optionalTarget) {
		var optionalTarget, t;
		t = this;
		t.p.plane(optionalTarget);
		return t;
	};
	Triangle.prototype.Plane = function(optionalTarget) { return this.$val.Plane(optionalTarget); };
	Triangle.ptr.prototype.BarycoordFromPoint = function(point, optionalTarget) {
		var optionalTarget, point, t;
		t = this;
		t.p.barycoordFromPoint(point, optionalTarget);
		return t;
	};
	Triangle.prototype.BarycoordFromPoint = function(point, optionalTarget) { return this.$val.BarycoordFromPoint(point, optionalTarget); };
	Triangle.ptr.prototype.ContainsPoint = function(point) {
		var point, t;
		t = this;
		t.p.containsPoint(point);
		return t;
	};
	Triangle.prototype.ContainsPoint = function(point) { return this.$val.ContainsPoint(point); };
	Triangle.ptr.prototype.Equals = function(triangle) {
		var t, triangle;
		t = this;
		t.p.equals(triangle);
		return t;
	};
	Triangle.prototype.Equals = function(triangle) { return this.$val.Equals(triangle); };
	TubeGeometry.ptr.prototype.JSObject = function() {
		var t;
		t = this;
		return t.p;
	};
	TubeGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.TubeGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.TubeGeometry;
		return TubeGeometryFromJSObject(p);
	};
	Three.prototype.TubeGeometry = function() { return this.$val.TubeGeometry(); };
	TubeGeometryFromJSObject = function(p) {
		var p;
		return new TubeGeometry.ptr(p);
	};
	$pkg.TubeGeometryFromJSObject = TubeGeometryFromJSObject;
	Three.ptr.prototype.NewTubeGeometry = function(path, segments, radius, radialSegments, closed, taper) {
		var closed, p, path, radialSegments, radius, segments, t, taper;
		t = this;
		p = new (t.ctx.TubeGeometry)(path, segments, radius, radialSegments, closed, taper);
		return TubeGeometryFromJSObject(p);
	};
	Three.prototype.NewTubeGeometry = function(path, segments, radius, radialSegments, closed, taper) { return this.$val.NewTubeGeometry(path, segments, radius, radialSegments, closed, taper); };
	Uniform.ptr.prototype.JSObject = function() {
		var u;
		u = this;
		return u.p;
	};
	Uniform.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Uniform = function() {
		var p, t;
		t = this;
		p = t.ctx.Uniform;
		return UniformFromJSObject(p);
	};
	Three.prototype.Uniform = function() { return this.$val.Uniform(); };
	UniformFromJSObject = function(p) {
		var p;
		return new Uniform.ptr(p);
	};
	$pkg.UniformFromJSObject = UniformFromJSObject;
	Three.ptr.prototype.NewUniform = function(typ, value) {
		var p, t, typ, value;
		t = this;
		p = new (t.ctx.Uniform)(typ, value);
		return UniformFromJSObject(p);
	};
	Three.prototype.NewUniform = function(typ, value) { return this.$val.NewUniform(typ, value); };
	Uniform.ptr.prototype.OnUpdate = function(callback) {
		var callback, u;
		u = this;
		u.p.onUpdate(callback);
		return u;
	};
	Uniform.prototype.OnUpdate = function(callback) { return this.$val.OnUpdate(callback); };
	UniformsLib.ptr.prototype.JSObject = function() {
		var u;
		u = this;
		return u.p;
	};
	UniformsLib.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.UniformsLib = function() {
		var p, t;
		t = this;
		p = t.ctx.UniformsLib;
		return UniformsLibFromJSObject(p);
	};
	Three.prototype.UniformsLib = function() { return this.$val.UniformsLib(); };
	UniformsLibFromJSObject = function(p) {
		var p;
		return new UniformsLib.ptr(p);
	};
	$pkg.UniformsLibFromJSObject = UniformsLibFromJSObject;
	Three.ptr.prototype.NewUniformsLib = function() {
		var p, t;
		t = this;
		p = new (t.ctx.UniformsLib)();
		return UniformsLibFromJSObject(p);
	};
	Three.prototype.NewUniformsLib = function() { return this.$val.NewUniformsLib(); };
	UniformsUtils.ptr.prototype.JSObject = function() {
		var u;
		u = this;
		return u.p;
	};
	UniformsUtils.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.UniformsUtils = function() {
		var p, t;
		t = this;
		p = t.ctx.UniformsUtils;
		return UniformsUtilsFromJSObject(p);
	};
	Three.prototype.UniformsUtils = function() { return this.$val.UniformsUtils(); };
	UniformsUtilsFromJSObject = function(p) {
		var p;
		return new UniformsUtils.ptr(p);
	};
	$pkg.UniformsUtilsFromJSObject = UniformsUtilsFromJSObject;
	Three.ptr.prototype.NewUniformsUtils = function() {
		var p, t;
		t = this;
		p = new (t.ctx.UniformsUtils)();
		return UniformsUtilsFromJSObject(p);
	};
	Three.prototype.NewUniformsUtils = function() { return this.$val.NewUniformsUtils(); };
	UniformsUtils.ptr.prototype.Merge = function(uniforms) {
		var u, uniforms;
		u = this;
		u.p.merge(uniforms);
		return u;
	};
	UniformsUtils.prototype.Merge = function(uniforms) { return this.$val.Merge(uniforms); };
	UniformsUtils.ptr.prototype.Clone = function(uniformsSrc) {
		var _r, u, uniformsSrc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; u = $f.u; uniformsSrc = $f.uniformsSrc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		_r = uniformsSrc.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		u.p.clone(_r);
		$s = -1; return u;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UniformsUtils.ptr.prototype.Clone }; } $f._r = _r; $f.u = u; $f.uniformsSrc = uniformsSrc; $f.$s = $s; $f.$r = $r; return $f;
	};
	UniformsUtils.prototype.Clone = function(uniformsSrc) { return this.$val.Clone(uniformsSrc); };
	Vector2.ptr.prototype.JSObject = function() {
		var v;
		v = this;
		return v.p;
	};
	Vector2.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Vector2 = function() {
		var p, t;
		t = this;
		p = t.ctx.Vector2;
		return Vector2FromJSObject(p);
	};
	Three.prototype.Vector2 = function() { return this.$val.Vector2(); };
	Vector2FromJSObject = function(p) {
		var p;
		return new Vector2.ptr(p);
	};
	$pkg.Vector2FromJSObject = Vector2FromJSObject;
	Three.ptr.prototype.NewVector2 = function(x, y) {
		var p, t, x, y;
		t = this;
		p = new (t.ctx.Vector2)(x, y);
		return Vector2FromJSObject(p);
	};
	Three.prototype.NewVector2 = function(x, y) { return this.$val.NewVector2(x, y); };
	Vector2.ptr.prototype.Width = function() {
		var v;
		v = this;
		return $parseFloat(v.p.width);
	};
	Vector2.prototype.Width = function() { return this.$val.Width(); };
	Vector2.ptr.prototype.Height = function() {
		var v;
		v = this;
		return $parseFloat(v.p.height);
	};
	Vector2.prototype.Height = function() { return this.$val.Height(); };
	Vector2.ptr.prototype.SetWidth = function(value) {
		var v, value;
		v = this;
		v.p.width = value;
		return v;
	};
	Vector2.prototype.SetWidth = function(value) { return this.$val.SetWidth(value); };
	Vector2.ptr.prototype.SetHeight = function(value) {
		var v, value;
		v = this;
		v.p.height = value;
		return v;
	};
	Vector2.prototype.SetHeight = function(value) { return this.$val.SetHeight(value); };
	Vector2.ptr.prototype.Set = function(x, y) {
		var v, x, y;
		v = this;
		v.p.set(x, y);
		return v;
	};
	Vector2.prototype.Set = function(x, y) { return this.$val.Set(x, y); };
	Vector2.ptr.prototype.SetScalar = function(scalar) {
		var scalar, v;
		v = this;
		v.p.setScalar(scalar);
		return v;
	};
	Vector2.prototype.SetScalar = function(scalar) { return this.$val.SetScalar(scalar); };
	Vector2.ptr.prototype.SetX = function(x) {
		var v, x;
		v = this;
		v.p.setX(x);
		return v;
	};
	Vector2.prototype.SetX = function(x) { return this.$val.SetX(x); };
	Vector2.ptr.prototype.SetY = function(y) {
		var v, y;
		v = this;
		v.p.setY(y);
		return v;
	};
	Vector2.prototype.SetY = function(y) { return this.$val.SetY(y); };
	Vector2.ptr.prototype.SetComponent = function(index, value) {
		var index, v, value;
		v = this;
		v.p.setComponent(index, value);
		return v;
	};
	Vector2.prototype.SetComponent = function(index, value) { return this.$val.SetComponent(index, value); };
	Vector2.ptr.prototype.GetComponent = function(index) {
		var index, v;
		v = this;
		return $parseFloat(v.p.getComponent(index));
	};
	Vector2.prototype.GetComponent = function(index) { return this.$val.GetComponent(index); };
	Vector2.ptr.prototype.Clone = function() {
		var v;
		v = this;
		v.p.clone();
		return v;
	};
	Vector2.prototype.Clone = function() { return this.$val.Clone(); };
	Vector2.ptr.prototype.Copy = function(src) {
		var src, v;
		v = this;
		v.p.copy(src.p);
		return v;
	};
	Vector2.prototype.Copy = function(src) { return this.$val.Copy(src); };
	Vector2.ptr.prototype.Add = function(src) {
		var src, v;
		v = this;
		v.p.add(src.p);
		return v;
	};
	Vector2.prototype.Add = function(src) { return this.$val.Add(src); };
	Vector2.ptr.prototype.AddScalar = function(s) {
		var s, v;
		v = this;
		v.p.addScalar(s);
		return v;
	};
	Vector2.prototype.AddScalar = function(s) { return this.$val.AddScalar(s); };
	Vector2.ptr.prototype.AddVectors = function(a, b) {
		var a, b, v;
		v = this;
		v.p.addVectors(a.p, b.p);
		return v;
	};
	Vector2.prototype.AddVectors = function(a, b) { return this.$val.AddVectors(a, b); };
	Vector2.ptr.prototype.AddScaledVector = function(src, s) {
		var s, src, v;
		v = this;
		v.p.addScaledVector(src.p, s);
		return v;
	};
	Vector2.prototype.AddScaledVector = function(src, s) { return this.$val.AddScaledVector(src, s); };
	Vector2.ptr.prototype.Sub = function(src) {
		var src, v;
		v = this;
		v.p.sub(src.p);
		return v;
	};
	Vector2.prototype.Sub = function(src) { return this.$val.Sub(src); };
	Vector2.ptr.prototype.SubScalar = function(s) {
		var s, v;
		v = this;
		v.p.subScalar(s);
		return v;
	};
	Vector2.prototype.SubScalar = function(s) { return this.$val.SubScalar(s); };
	Vector2.ptr.prototype.SubVectors = function(a, b) {
		var a, b, v;
		v = this;
		v.p.subVectors(a.p, b.p);
		return v;
	};
	Vector2.prototype.SubVectors = function(a, b) { return this.$val.SubVectors(a, b); };
	Vector2.ptr.prototype.Multiply = function(src) {
		var src, v;
		v = this;
		v.p.multiply(src.p);
		return v;
	};
	Vector2.prototype.Multiply = function(src) { return this.$val.Multiply(src); };
	Vector2.ptr.prototype.MultiplyScalar = function(scalar) {
		var scalar, v;
		v = this;
		v.p.multiplyScalar(scalar);
		return v;
	};
	Vector2.prototype.MultiplyScalar = function(scalar) { return this.$val.MultiplyScalar(scalar); };
	Vector2.ptr.prototype.Divide = function(src) {
		var src, v;
		v = this;
		v.p.divide(src.p);
		return v;
	};
	Vector2.prototype.Divide = function(src) { return this.$val.Divide(src); };
	Vector2.ptr.prototype.DivideScalar = function(scalar) {
		var scalar, v;
		v = this;
		v.p.divideScalar(scalar);
		return v;
	};
	Vector2.prototype.DivideScalar = function(scalar) { return this.$val.DivideScalar(scalar); };
	Vector2.ptr.prototype.Min = function(src) {
		var src, v;
		v = this;
		v.p.min(src.p);
		return v;
	};
	Vector2.prototype.Min = function(src) { return this.$val.Min(src); };
	Vector2.ptr.prototype.Max = function(src) {
		var src, v;
		v = this;
		v.p.max(src.p);
		return v;
	};
	Vector2.prototype.Max = function(src) { return this.$val.Max(src); };
	Vector2.ptr.prototype.Clamp = function(min, max) {
		var max, min, v;
		v = this;
		v.p.clamp(min.p, max.p);
		return v;
	};
	Vector2.prototype.Clamp = function(min, max) { return this.$val.Clamp(min, max); };
	Vector2.ptr.prototype.ClampScalar = function() {
		var v;
		v = this;
		v.p.clampScalar();
		return v;
	};
	Vector2.prototype.ClampScalar = function() { return this.$val.ClampScalar(); };
	Vector2.ptr.prototype.ClampLength = function(min, max) {
		var max, min, v;
		v = this;
		v.p.clampLength(min, max);
		return v;
	};
	Vector2.prototype.ClampLength = function(min, max) { return this.$val.ClampLength(min, max); };
	Vector2.ptr.prototype.Floor = function() {
		var v;
		v = this;
		v.p.floor();
		return v;
	};
	Vector2.prototype.Floor = function() { return this.$val.Floor(); };
	Vector2.ptr.prototype.Ceil = function() {
		var v;
		v = this;
		v.p.ceil();
		return v;
	};
	Vector2.prototype.Ceil = function() { return this.$val.Ceil(); };
	Vector2.ptr.prototype.Round = function() {
		var v;
		v = this;
		v.p.round();
		return v;
	};
	Vector2.prototype.Round = function() { return this.$val.Round(); };
	Vector2.ptr.prototype.RoundToZero = function() {
		var v;
		v = this;
		v.p.roundToZero();
		return v;
	};
	Vector2.prototype.RoundToZero = function() { return this.$val.RoundToZero(); };
	Vector2.ptr.prototype.Negate = function() {
		var v;
		v = this;
		v.p.negate();
		return v;
	};
	Vector2.prototype.Negate = function() { return this.$val.Negate(); };
	Vector2.ptr.prototype.Dot = function(src) {
		var src, v;
		v = this;
		return $parseFloat(v.p.dot(src.p));
	};
	Vector2.prototype.Dot = function(src) { return this.$val.Dot(src); };
	Vector2.ptr.prototype.LengthSq = function() {
		var v;
		v = this;
		v.p.lengthSq();
		return v;
	};
	Vector2.prototype.LengthSq = function() { return this.$val.LengthSq(); };
	Vector2.ptr.prototype.Length = function() {
		var v;
		v = this;
		v.p.length();
		return v;
	};
	Vector2.prototype.Length = function() { return this.$val.Length(); };
	Vector2.ptr.prototype.LengthManhattan = function() {
		var v;
		v = this;
		v.p.lengthManhattan();
		return v;
	};
	Vector2.prototype.LengthManhattan = function() { return this.$val.LengthManhattan(); };
	Vector2.ptr.prototype.Normalize = function() {
		var v;
		v = this;
		v.p.normalize();
		return v;
	};
	Vector2.prototype.Normalize = function() { return this.$val.Normalize(); };
	Vector2.ptr.prototype.Angle = function() {
		var v;
		v = this;
		return $parseFloat(v.p.angle());
	};
	Vector2.prototype.Angle = function() { return this.$val.Angle(); };
	Vector2.ptr.prototype.DistanceTo = function(src) {
		var src, v;
		v = this;
		return $parseFloat(v.p.distanceTo(src.p));
	};
	Vector2.prototype.DistanceTo = function(src) { return this.$val.DistanceTo(src); };
	Vector2.ptr.prototype.DistanceToSquared = function(src) {
		var src, v;
		v = this;
		return $parseFloat(v.p.distanceToSquared(src.p));
	};
	Vector2.prototype.DistanceToSquared = function(src) { return this.$val.DistanceToSquared(src); };
	Vector2.ptr.prototype.SetLength = function(length) {
		var length, v;
		v = this;
		v.p.setLength(length);
		return v;
	};
	Vector2.prototype.SetLength = function(length) { return this.$val.SetLength(length); };
	Vector2.ptr.prototype.Lerp = function(src, alpha) {
		var alpha, src, v;
		v = this;
		v.p.lerp(src.p, alpha);
		return v;
	};
	Vector2.prototype.Lerp = function(src, alpha) { return this.$val.Lerp(src, alpha); };
	Vector2.ptr.prototype.LerpVectors = function(v1, v2, alpha) {
		var alpha, v, v1, v2;
		v = this;
		v.p.lerpVectors(v1.p, v2.p, alpha);
		return v;
	};
	Vector2.prototype.LerpVectors = function(v1, v2, alpha) { return this.$val.LerpVectors(v1, v2, alpha); };
	Vector2.ptr.prototype.Equals = function(src) {
		var src, v;
		v = this;
		return !!(v.p.equals(src.p));
	};
	Vector2.prototype.Equals = function(src) { return this.$val.Equals(src); };
	Vector2.ptr.prototype.FromArray = function(array, offset) {
		var array, offset, v;
		v = this;
		v.p.fromArray($externalize(array, sliceType$7), offset);
		return v;
	};
	Vector2.prototype.FromArray = function(array, offset) { return this.$val.FromArray(array, offset); };
	Vector2.ptr.prototype.FromAttribute = function(attribute, index, offset) {
		var attribute, index, offset, v;
		v = this;
		v.p.fromAttribute(attribute, index, offset);
		return v;
	};
	Vector2.prototype.FromAttribute = function(attribute, index, offset) { return this.$val.FromAttribute(attribute, index, offset); };
	Vector2.ptr.prototype.RotateAround = function(center, angle) {
		var angle, center, v;
		v = this;
		v.p.rotateAround(center.p, angle);
		return v;
	};
	Vector2.prototype.RotateAround = function(center, angle) { return this.$val.RotateAround(center, angle); };
	Vector3.ptr.prototype.JSObject = function() {
		var v;
		v = this;
		return v.p;
	};
	Vector3.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Vector3 = function() {
		var p, t;
		t = this;
		p = t.ctx.Vector3;
		return Vector3FromJSObject(p);
	};
	Three.prototype.Vector3 = function() { return this.$val.Vector3(); };
	Vector3FromJSObject = function(p) {
		var p;
		return new Vector3.ptr(p);
	};
	$pkg.Vector3FromJSObject = Vector3FromJSObject;
	Three.ptr.prototype.NewVector3 = function(x, y, z) {
		var p, t, x, y, z;
		t = this;
		p = new (t.ctx.Vector3)(x, y, z);
		return Vector3FromJSObject(p);
	};
	Three.prototype.NewVector3 = function(x, y, z) { return this.$val.NewVector3(x, y, z); };
	Vector3.ptr.prototype.Set = function(x, y, z) {
		var v, x, y, z;
		v = this;
		v.p.set(x, y, z);
		return v;
	};
	Vector3.prototype.Set = function(x, y, z) { return this.$val.Set(x, y, z); };
	Vector3.ptr.prototype.SetScalar = function(scalar) {
		var scalar, v;
		v = this;
		v.p.setScalar(scalar);
		return v;
	};
	Vector3.prototype.SetScalar = function(scalar) { return this.$val.SetScalar(scalar); };
	Vector3.ptr.prototype.X = function() {
		var v;
		v = this;
		return $parseFloat(v.p.x);
	};
	Vector3.prototype.X = function() { return this.$val.X(); };
	Vector3.ptr.prototype.SetX = function(x) {
		var v, x;
		v = this;
		v.p.setX(x);
		return v;
	};
	Vector3.prototype.SetX = function(x) { return this.$val.SetX(x); };
	Vector3.ptr.prototype.Y = function() {
		var v;
		v = this;
		return $parseFloat(v.p.y);
	};
	Vector3.prototype.Y = function() { return this.$val.Y(); };
	Vector3.ptr.prototype.SetY = function(y) {
		var v, y;
		v = this;
		v.p.setY(y);
		return v;
	};
	Vector3.prototype.SetY = function(y) { return this.$val.SetY(y); };
	Vector3.ptr.prototype.Z = function() {
		var v;
		v = this;
		return $parseFloat(v.p.z);
	};
	Vector3.prototype.Z = function() { return this.$val.Z(); };
	Vector3.ptr.prototype.SetZ = function(z) {
		var v, z;
		v = this;
		v.p.setZ(z);
		return v;
	};
	Vector3.prototype.SetZ = function(z) { return this.$val.SetZ(z); };
	Vector3.ptr.prototype.SetComponent = function(index, value) {
		var index, v, value;
		v = this;
		v.p.setComponent(index, value);
		return v;
	};
	Vector3.prototype.SetComponent = function(index, value) { return this.$val.SetComponent(index, value); };
	Vector3.ptr.prototype.GetComponent = function(index) {
		var index, v;
		v = this;
		v.p.getComponent(index);
		return v;
	};
	Vector3.prototype.GetComponent = function(index) { return this.$val.GetComponent(index); };
	Vector3.ptr.prototype.Clone = function() {
		var v;
		v = this;
		v.p.clone();
		return v;
	};
	Vector3.prototype.Clone = function() { return this.$val.Clone(); };
	Vector3.ptr.prototype.Copy = function(src) {
		var src, v;
		v = this;
		v.p.copy(src.p);
		return v;
	};
	Vector3.prototype.Copy = function(src) { return this.$val.Copy(src); };
	Vector3.ptr.prototype.Add = function(src) {
		var src, v;
		v = this;
		v.p.add(src.p);
		return v;
	};
	Vector3.prototype.Add = function(src) { return this.$val.Add(src); };
	Vector3.ptr.prototype.AddScalar = function(s) {
		var s, v;
		v = this;
		v.p.addScalar(s);
		return v;
	};
	Vector3.prototype.AddScalar = function(s) { return this.$val.AddScalar(s); };
	Vector3.ptr.prototype.AddVectors = function(a, b) {
		var a, b, v;
		v = this;
		v.p.addVectors(a.p, b.p);
		return v;
	};
	Vector3.prototype.AddVectors = function(a, b) { return this.$val.AddVectors(a, b); };
	Vector3.ptr.prototype.AddScaledVector = function(src, s) {
		var s, src, v;
		v = this;
		v.p.addScaledVector(src.p, s);
		return v;
	};
	Vector3.prototype.AddScaledVector = function(src, s) { return this.$val.AddScaledVector(src, s); };
	Vector3.ptr.prototype.Sub = function(src) {
		var src, v;
		v = this;
		v.p.sub(src.p);
		return v;
	};
	Vector3.prototype.Sub = function(src) { return this.$val.Sub(src); };
	Vector3.ptr.prototype.SubScalar = function(s) {
		var s, v;
		v = this;
		v.p.subScalar(s);
		return v;
	};
	Vector3.prototype.SubScalar = function(s) { return this.$val.SubScalar(s); };
	Vector3.ptr.prototype.SubVectors = function(a, b) {
		var a, b, v;
		v = this;
		v.p.subVectors(a.p, b.p);
		return v;
	};
	Vector3.prototype.SubVectors = function(a, b) { return this.$val.SubVectors(a, b); };
	Vector3.ptr.prototype.Multiply = function(src) {
		var src, v;
		v = this;
		v.p.multiply(src.p);
		return v;
	};
	Vector3.prototype.Multiply = function(src) { return this.$val.Multiply(src); };
	Vector3.ptr.prototype.MultiplyScalar = function(scalar) {
		var scalar, v;
		v = this;
		v.p.multiplyScalar(scalar);
		return v;
	};
	Vector3.prototype.MultiplyScalar = function(scalar) { return this.$val.MultiplyScalar(scalar); };
	Vector3.ptr.prototype.MultiplyVectors = function(a, b) {
		var a, b, v;
		v = this;
		v.p.multiplyVectors(a.p, b.p);
		return v;
	};
	Vector3.prototype.MultiplyVectors = function(a, b) { return this.$val.MultiplyVectors(a, b); };
	Vector3.ptr.prototype.ApplyEuler = function(euler) {
		var euler, v;
		v = this;
		v.p.applyEuler(euler.p);
		return v;
	};
	Vector3.prototype.ApplyEuler = function(euler) { return this.$val.ApplyEuler(euler); };
	Vector3.ptr.prototype.ApplyAxisAngle = function() {
		var v;
		v = this;
		v.p.applyAxisAngle();
		return v;
	};
	Vector3.prototype.ApplyAxisAngle = function() { return this.$val.ApplyAxisAngle(); };
	Vector3.ptr.prototype.ApplyMatrix3 = function(m) {
		var m, v;
		v = this;
		v.p.applyMatrix3(m.p);
		return v;
	};
	Vector3.prototype.ApplyMatrix3 = function(m) { return this.$val.ApplyMatrix3(m); };
	Vector3.ptr.prototype.ApplyMatrix4 = function(m) {
		var m, v;
		v = this;
		v.p.applyMatrix4(m.p);
		return v;
	};
	Vector3.prototype.ApplyMatrix4 = function(m) { return this.$val.ApplyMatrix4(m); };
	Vector3.ptr.prototype.ApplyProjection = function(m) {
		var m, v;
		v = this;
		v.p.applyProjection(m.p);
		return v;
	};
	Vector3.prototype.ApplyProjection = function(m) { return this.$val.ApplyProjection(m); };
	Vector3.ptr.prototype.ApplyQuaternion = function(q) {
		var q, v;
		v = this;
		v.p.applyQuaternion(q.p);
		return v;
	};
	Vector3.prototype.ApplyQuaternion = function(q) { return this.$val.ApplyQuaternion(q); };
	Vector3.ptr.prototype.Project = function() {
		var v;
		v = this;
		v.p.project();
		return v;
	};
	Vector3.prototype.Project = function() { return this.$val.Project(); };
	Vector3.ptr.prototype.Unproject = function() {
		var v;
		v = this;
		v.p.unproject();
		return v;
	};
	Vector3.prototype.Unproject = function() { return this.$val.Unproject(); };
	Vector3.ptr.prototype.TransformDirection = function(m) {
		var m, v;
		v = this;
		v.p.transformDirection(m.p);
		return v;
	};
	Vector3.prototype.TransformDirection = function(m) { return this.$val.TransformDirection(m); };
	Vector3.ptr.prototype.Divide = function(src) {
		var src, v;
		v = this;
		v.p.divide(src.p);
		return v;
	};
	Vector3.prototype.Divide = function(src) { return this.$val.Divide(src); };
	Vector3.ptr.prototype.DivideScalar = function(scalar) {
		var scalar, v;
		v = this;
		v.p.divideScalar(scalar);
		return v;
	};
	Vector3.prototype.DivideScalar = function(scalar) { return this.$val.DivideScalar(scalar); };
	Vector3.ptr.prototype.Min = function(src) {
		var src, v;
		v = this;
		v.p.min(src.p);
		return v;
	};
	Vector3.prototype.Min = function(src) { return this.$val.Min(src); };
	Vector3.ptr.prototype.Max = function(src) {
		var src, v;
		v = this;
		v.p.max(src.p);
		return v;
	};
	Vector3.prototype.Max = function(src) { return this.$val.Max(src); };
	Vector3.ptr.prototype.Clamp = function(min, max) {
		var max, min, v;
		v = this;
		v.p.clamp(min.p, max.p);
		return v;
	};
	Vector3.prototype.Clamp = function(min, max) { return this.$val.Clamp(min, max); };
	Vector3.ptr.prototype.ClampScalar = function() {
		var v;
		v = this;
		v.p.clampScalar();
		return v;
	};
	Vector3.prototype.ClampScalar = function() { return this.$val.ClampScalar(); };
	Vector3.ptr.prototype.ClampLength = function(min, max) {
		var max, min, v;
		v = this;
		v.p.clampLength(min, max);
		return v;
	};
	Vector3.prototype.ClampLength = function(min, max) { return this.$val.ClampLength(min, max); };
	Vector3.ptr.prototype.Floor = function() {
		var v;
		v = this;
		v.p.floor();
		return v;
	};
	Vector3.prototype.Floor = function() { return this.$val.Floor(); };
	Vector3.ptr.prototype.Ceil = function() {
		var v;
		v = this;
		v.p.ceil();
		return v;
	};
	Vector3.prototype.Ceil = function() { return this.$val.Ceil(); };
	Vector3.ptr.prototype.Round = function() {
		var v;
		v = this;
		v.p.round();
		return v;
	};
	Vector3.prototype.Round = function() { return this.$val.Round(); };
	Vector3.ptr.prototype.RoundToZero = function() {
		var v;
		v = this;
		v.p.roundToZero();
		return v;
	};
	Vector3.prototype.RoundToZero = function() { return this.$val.RoundToZero(); };
	Vector3.ptr.prototype.Negate = function() {
		var v;
		v = this;
		v.p.negate();
		return v;
	};
	Vector3.prototype.Negate = function() { return this.$val.Negate(); };
	Vector3.ptr.prototype.Dot = function(src) {
		var src, v;
		v = this;
		return $parseFloat(v.p.dot(src.p));
	};
	Vector3.prototype.Dot = function(src) { return this.$val.Dot(src); };
	Vector3.ptr.prototype.LengthSq = function() {
		var v;
		v = this;
		return $parseFloat(v.p.lengthSq());
	};
	Vector3.prototype.LengthSq = function() { return this.$val.LengthSq(); };
	Vector3.ptr.prototype.Length = function() {
		var v;
		v = this;
		return $parseFloat(v.p.length());
	};
	Vector3.prototype.Length = function() { return this.$val.Length(); };
	Vector3.ptr.prototype.LengthManhattan = function() {
		var v;
		v = this;
		return $parseFloat(v.p.lengthManhattan());
	};
	Vector3.prototype.LengthManhattan = function() { return this.$val.LengthManhattan(); };
	Vector3.ptr.prototype.Normalize = function() {
		var v;
		v = this;
		v.p.normalize();
		return v;
	};
	Vector3.prototype.Normalize = function() { return this.$val.Normalize(); };
	Vector3.ptr.prototype.SetLength = function(length) {
		var length, v;
		v = this;
		v.p.setLength(length);
		return v;
	};
	Vector3.prototype.SetLength = function(length) { return this.$val.SetLength(length); };
	Vector3.ptr.prototype.Lerp = function(src, alpha) {
		var alpha, src, v;
		v = this;
		v.p.lerp(src.p, alpha);
		return v;
	};
	Vector3.prototype.Lerp = function(src, alpha) { return this.$val.Lerp(src, alpha); };
	Vector3.ptr.prototype.LerpVectors = function(v1, v2, alpha) {
		var alpha, v, v1, v2;
		v = this;
		v.p.lerpVectors(v1.p, v2.p, alpha);
		return v;
	};
	Vector3.prototype.LerpVectors = function(v1, v2, alpha) { return this.$val.LerpVectors(v1, v2, alpha); };
	Vector3.ptr.prototype.Cross = function(src) {
		var src, v;
		v = this;
		v.p.cross(src.p);
		return v;
	};
	Vector3.prototype.Cross = function(src) { return this.$val.Cross(src); };
	Vector3.ptr.prototype.CrossVectors = function(a, b) {
		var a, b, v;
		v = this;
		v.p.crossVectors(a.p, b.p);
		return v;
	};
	Vector3.prototype.CrossVectors = function(a, b) { return this.$val.CrossVectors(a, b); };
	Vector3.ptr.prototype.ProjectOnVector = function() {
		var v;
		v = this;
		v.p.projectOnVector();
		return v;
	};
	Vector3.prototype.ProjectOnVector = function() { return this.$val.ProjectOnVector(); };
	Vector3.ptr.prototype.ProjectOnPlane = function() {
		var v;
		v = this;
		v.p.projectOnPlane();
		return v;
	};
	Vector3.prototype.ProjectOnPlane = function() { return this.$val.ProjectOnPlane(); };
	Vector3.ptr.prototype.Reflect = function() {
		var v;
		v = this;
		v.p.reflect();
		return v;
	};
	Vector3.prototype.Reflect = function() { return this.$val.Reflect(); };
	Vector3.ptr.prototype.AngleTo = function(src) {
		var src, v;
		v = this;
		return $parseFloat(v.p.angleTo(src.p));
	};
	Vector3.prototype.AngleTo = function(src) { return this.$val.AngleTo(src); };
	Vector3.ptr.prototype.DistanceTo = function(src) {
		var src, v;
		v = this;
		return $parseFloat(v.p.distanceTo(src.p));
	};
	Vector3.prototype.DistanceTo = function(src) { return this.$val.DistanceTo(src); };
	Vector3.ptr.prototype.DistanceToSquared = function(src) {
		var src, v;
		v = this;
		return $parseFloat(v.p.distanceToSquared(src.p));
	};
	Vector3.prototype.DistanceToSquared = function(src) { return this.$val.DistanceToSquared(src); };
	Vector3.ptr.prototype.SetFromSpherical = function(s) {
		var s, v;
		v = this;
		v.p.setFromSpherical(s);
		return v;
	};
	Vector3.prototype.SetFromSpherical = function(s) { return this.$val.SetFromSpherical(s); };
	Vector3.ptr.prototype.SetFromMatrixPosition = function(m) {
		var m, v;
		v = this;
		v.p.setFromMatrixPosition(m.p);
		return v;
	};
	Vector3.prototype.SetFromMatrixPosition = function(m) { return this.$val.SetFromMatrixPosition(m); };
	Vector3.ptr.prototype.SetFromMatrixScale = function(m) {
		var m, v;
		v = this;
		v.p.setFromMatrixScale(m.p);
		return v;
	};
	Vector3.prototype.SetFromMatrixScale = function(m) { return this.$val.SetFromMatrixScale(m); };
	Vector3.ptr.prototype.SetFromMatrixColumn = function(m, index) {
		var index, m, v;
		v = this;
		v.p.setFromMatrixColumn(m.p, index);
		return v;
	};
	Vector3.prototype.SetFromMatrixColumn = function(m, index) { return this.$val.SetFromMatrixColumn(m, index); };
	Vector3.ptr.prototype.Equals = function(src) {
		var src, v;
		v = this;
		return !!(v.p.equals($externalize(v, ptrType$6)));
	};
	Vector3.prototype.Equals = function(src) { return this.$val.Equals(src); };
	Vector3.ptr.prototype.FromArray = function(array, offset) {
		var array, offset, v;
		v = this;
		v.p.fromArray($externalize(array, sliceType$7), offset);
		return v;
	};
	Vector3.prototype.FromArray = function(array, offset) { return this.$val.FromArray(array, offset); };
	Vector3.ptr.prototype.ToArray = function(array, offset) {
		var array, offset, v;
		v = this;
		v.p.toArray($externalize(array, sliceType$7), offset);
		return v;
	};
	Vector3.prototype.ToArray = function(array, offset) { return this.$val.ToArray(array, offset); };
	Vector3.ptr.prototype.FromAttribute = function(attribute, index, offset) {
		var attribute, index, offset, v;
		v = this;
		v.p.fromAttribute(attribute, index, offset);
		return v;
	};
	Vector3.prototype.FromAttribute = function(attribute, index, offset) { return this.$val.FromAttribute(attribute, index, offset); };
	Vector4.ptr.prototype.JSObject = function() {
		var v;
		v = this;
		return v.p;
	};
	Vector4.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.Vector4 = function() {
		var p, t;
		t = this;
		p = t.ctx.Vector4;
		return Vector4FromJSObject(p);
	};
	Three.prototype.Vector4 = function() { return this.$val.Vector4(); };
	Vector4FromJSObject = function(p) {
		var p;
		return new Vector4.ptr(p);
	};
	$pkg.Vector4FromJSObject = Vector4FromJSObject;
	Three.ptr.prototype.NewVector4 = function(x, y, z, w) {
		var p, t, w, x, y, z;
		t = this;
		p = new (t.ctx.Vector4)(x, y, z, w);
		return Vector4FromJSObject(p);
	};
	Three.prototype.NewVector4 = function(x, y, z, w) { return this.$val.NewVector4(x, y, z, w); };
	Vector4.ptr.prototype.Set = function(x, y, z, w) {
		var v, w, x, y, z;
		v = this;
		v.p.set(x, y, z, w);
		return v;
	};
	Vector4.prototype.Set = function(x, y, z, w) { return this.$val.Set(x, y, z, w); };
	Vector4.ptr.prototype.SetScalar = function(scalar) {
		var scalar, v;
		v = this;
		v.p.setScalar(scalar);
		return v;
	};
	Vector4.prototype.SetScalar = function(scalar) { return this.$val.SetScalar(scalar); };
	Vector4.ptr.prototype.SetX = function(x) {
		var v, x;
		v = this;
		v.p.setX(x);
		return v;
	};
	Vector4.prototype.SetX = function(x) { return this.$val.SetX(x); };
	Vector4.ptr.prototype.SetY = function(y) {
		var v, y;
		v = this;
		v.p.setY(y);
		return v;
	};
	Vector4.prototype.SetY = function(y) { return this.$val.SetY(y); };
	Vector4.ptr.prototype.SetZ = function(z) {
		var v, z;
		v = this;
		v.p.setZ(z);
		return v;
	};
	Vector4.prototype.SetZ = function(z) { return this.$val.SetZ(z); };
	Vector4.ptr.prototype.SetW = function(w) {
		var v, w;
		v = this;
		v.p.setW(w);
		return v;
	};
	Vector4.prototype.SetW = function(w) { return this.$val.SetW(w); };
	Vector4.ptr.prototype.SetComponent = function(index, value) {
		var index, v, value;
		v = this;
		v.p.setComponent(index, value);
		return v;
	};
	Vector4.prototype.SetComponent = function(index, value) { return this.$val.SetComponent(index, value); };
	Vector4.ptr.prototype.GetComponent = function(index) {
		var index, v;
		v = this;
		v.p.getComponent(index);
		return v;
	};
	Vector4.prototype.GetComponent = function(index) { return this.$val.GetComponent(index); };
	Vector4.ptr.prototype.Clone = function() {
		var v;
		v = this;
		v.p.clone();
		return v;
	};
	Vector4.prototype.Clone = function() { return this.$val.Clone(); };
	Vector4.ptr.prototype.Copy = function(src) {
		var src, v;
		v = this;
		v.p.copy(src.p);
		return v;
	};
	Vector4.prototype.Copy = function(src) { return this.$val.Copy(src); };
	Vector4.ptr.prototype.Add = function(src) {
		var src, v;
		v = this;
		v.p.add(src.p);
		return v;
	};
	Vector4.prototype.Add = function(src) { return this.$val.Add(src); };
	Vector4.ptr.prototype.AddScalar = function(s) {
		var s, v;
		v = this;
		v.p.addScalar(s);
		return v;
	};
	Vector4.prototype.AddScalar = function(s) { return this.$val.AddScalar(s); };
	Vector4.ptr.prototype.AddVectors = function(a, b) {
		var a, b, v;
		v = this;
		v.p.addVectors(a.p, b.p);
		return v;
	};
	Vector4.prototype.AddVectors = function(a, b) { return this.$val.AddVectors(a, b); };
	Vector4.ptr.prototype.AddScaledVector = function(src, s) {
		var s, src, v;
		v = this;
		v.p.addScaledVector(src.p, s);
		return v;
	};
	Vector4.prototype.AddScaledVector = function(src, s) { return this.$val.AddScaledVector(src, s); };
	Vector4.ptr.prototype.Sub = function(src) {
		var src, v;
		v = this;
		v.p.sub(src.p);
		return v;
	};
	Vector4.prototype.Sub = function(src) { return this.$val.Sub(src); };
	Vector4.ptr.prototype.SubScalar = function(s) {
		var s, v;
		v = this;
		v.p.subScalar(s);
		return v;
	};
	Vector4.prototype.SubScalar = function(s) { return this.$val.SubScalar(s); };
	Vector4.ptr.prototype.SubVectors = function(a, b) {
		var a, b, v;
		v = this;
		v.p.subVectors(a.p, b.p);
		return v;
	};
	Vector4.prototype.SubVectors = function(a, b) { return this.$val.SubVectors(a, b); };
	Vector4.ptr.prototype.MultiplyScalar = function(scalar) {
		var scalar, v;
		v = this;
		v.p.multiplyScalar(scalar);
		return v;
	};
	Vector4.prototype.MultiplyScalar = function(scalar) { return this.$val.MultiplyScalar(scalar); };
	Vector4.ptr.prototype.ApplyMatrix4 = function(m) {
		var m, v;
		v = this;
		v.p.applyMatrix4(m.p);
		return v;
	};
	Vector4.prototype.ApplyMatrix4 = function(m) { return this.$val.ApplyMatrix4(m); };
	Vector4.ptr.prototype.DivideScalar = function(scalar) {
		var scalar, v;
		v = this;
		v.p.divideScalar(scalar);
		return v;
	};
	Vector4.prototype.DivideScalar = function(scalar) { return this.$val.DivideScalar(scalar); };
	Vector4.ptr.prototype.SetAxisAngleFromQuaternion = function(q) {
		var q, v;
		v = this;
		v.p.setAxisAngleFromQuaternion(q.p);
		return v;
	};
	Vector4.prototype.SetAxisAngleFromQuaternion = function(q) { return this.$val.SetAxisAngleFromQuaternion(q); };
	Vector4.ptr.prototype.SetAxisAngleFromRotationMatrix = function(m) {
		var m, v;
		v = this;
		v.p.setAxisAngleFromRotationMatrix(m.p);
		return v;
	};
	Vector4.prototype.SetAxisAngleFromRotationMatrix = function(m) { return this.$val.SetAxisAngleFromRotationMatrix(m); };
	Vector4.ptr.prototype.Min = function(src) {
		var src, v;
		v = this;
		v.p.min(src.p);
		return v;
	};
	Vector4.prototype.Min = function(src) { return this.$val.Min(src); };
	Vector4.ptr.prototype.Max = function(src) {
		var src, v;
		v = this;
		v.p.max(src.p);
		return v;
	};
	Vector4.prototype.Max = function(src) { return this.$val.Max(src); };
	Vector4.ptr.prototype.Clamp = function(min, max) {
		var max, min, v;
		v = this;
		v.p.clamp(min.p, max.p);
		return v;
	};
	Vector4.prototype.Clamp = function(min, max) { return this.$val.Clamp(min, max); };
	Vector4.ptr.prototype.ClampScalar = function() {
		var v;
		v = this;
		v.p.clampScalar();
		return v;
	};
	Vector4.prototype.ClampScalar = function() { return this.$val.ClampScalar(); };
	Vector4.ptr.prototype.Floor = function() {
		var v;
		v = this;
		v.p.floor();
		return v;
	};
	Vector4.prototype.Floor = function() { return this.$val.Floor(); };
	Vector4.ptr.prototype.Ceil = function() {
		var v;
		v = this;
		v.p.ceil();
		return v;
	};
	Vector4.prototype.Ceil = function() { return this.$val.Ceil(); };
	Vector4.ptr.prototype.Round = function() {
		var v;
		v = this;
		v.p.round();
		return v;
	};
	Vector4.prototype.Round = function() { return this.$val.Round(); };
	Vector4.ptr.prototype.RoundToZero = function() {
		var v;
		v = this;
		v.p.roundToZero();
		return v;
	};
	Vector4.prototype.RoundToZero = function() { return this.$val.RoundToZero(); };
	Vector4.ptr.prototype.Negate = function() {
		var v;
		v = this;
		v.p.negate();
		return v;
	};
	Vector4.prototype.Negate = function() { return this.$val.Negate(); };
	Vector4.ptr.prototype.Dot = function(src) {
		var src, v;
		v = this;
		v.p.dot(src.p);
		return v;
	};
	Vector4.prototype.Dot = function(src) { return this.$val.Dot(src); };
	Vector4.ptr.prototype.LengthSq = function() {
		var v;
		v = this;
		v.p.lengthSq();
		return v;
	};
	Vector4.prototype.LengthSq = function() { return this.$val.LengthSq(); };
	Vector4.ptr.prototype.Length = function() {
		var v;
		v = this;
		v.p.length();
		return v;
	};
	Vector4.prototype.Length = function() { return this.$val.Length(); };
	Vector4.ptr.prototype.LengthManhattan = function() {
		var v;
		v = this;
		v.p.lengthManhattan();
		return v;
	};
	Vector4.prototype.LengthManhattan = function() { return this.$val.LengthManhattan(); };
	Vector4.ptr.prototype.Normalize = function() {
		var v;
		v = this;
		v.p.normalize();
		return v;
	};
	Vector4.prototype.Normalize = function() { return this.$val.Normalize(); };
	Vector4.ptr.prototype.SetLength = function(length) {
		var length, v;
		v = this;
		v.p.setLength(length);
		return v;
	};
	Vector4.prototype.SetLength = function(length) { return this.$val.SetLength(length); };
	Vector4.ptr.prototype.Lerp = function(src, alpha) {
		var alpha, src, v;
		v = this;
		v.p.lerp(src.p, alpha);
		return v;
	};
	Vector4.prototype.Lerp = function(src, alpha) { return this.$val.Lerp(src, alpha); };
	Vector4.ptr.prototype.LerpVectors = function(v1, v2, alpha) {
		var alpha, v, v1, v2;
		v = this;
		v.p.lerpVectors(v1.p, v2.p, alpha);
		return v;
	};
	Vector4.prototype.LerpVectors = function(v1, v2, alpha) { return this.$val.LerpVectors(v1, v2, alpha); };
	Vector4.ptr.prototype.Equals = function(src) {
		var src, v;
		v = this;
		return !!(v.p.equals(src.p));
	};
	Vector4.prototype.Equals = function(src) { return this.$val.Equals(src); };
	Vector4.ptr.prototype.FromArray = function(array, offset) {
		var array, offset, v;
		v = this;
		v.p.fromArray($externalize(array, sliceType$7), offset);
		return v;
	};
	Vector4.prototype.FromArray = function(array, offset) { return this.$val.FromArray(array, offset); };
	Vector4.ptr.prototype.FromAttribute = function(attribute, index, offset) {
		var attribute, index, offset, v;
		v = this;
		v.p.fromAttribute(attribute, index, offset);
		return v;
	};
	Vector4.prototype.FromAttribute = function(attribute, index, offset) { return this.$val.FromAttribute(attribute, index, offset); };
	VectorKeyframeTrack.ptr.prototype.JSObject = function() {
		var v;
		v = this;
		return v.p;
	};
	VectorKeyframeTrack.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.VectorKeyframeTrack = function() {
		var p, t;
		t = this;
		p = t.ctx.VectorKeyframeTrack;
		return VectorKeyframeTrackFromJSObject(p);
	};
	Three.prototype.VectorKeyframeTrack = function() { return this.$val.VectorKeyframeTrack(); };
	VectorKeyframeTrackFromJSObject = function(p) {
		var p;
		return new VectorKeyframeTrack.ptr(p);
	};
	$pkg.VectorKeyframeTrackFromJSObject = VectorKeyframeTrackFromJSObject;
	Three.ptr.prototype.NewVectorKeyframeTrack = function(name, times, values, interpolation) {
		var interpolation, name, p, t, times, values;
		t = this;
		p = new (t.ctx.VectorKeyframeTrack)(name, times, values, interpolation);
		return VectorKeyframeTrackFromJSObject(p);
	};
	Three.prototype.NewVectorKeyframeTrack = function(name, times, values, interpolation) { return this.$val.NewVectorKeyframeTrack(name, times, values, interpolation); };
	VertexNormalsHelper.ptr.prototype.JSObject = function() {
		var v;
		v = this;
		return v.p;
	};
	VertexNormalsHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.VertexNormalsHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.VertexNormalsHelper;
		return VertexNormalsHelperFromJSObject(p);
	};
	Three.prototype.VertexNormalsHelper = function() { return this.$val.VertexNormalsHelper(); };
	VertexNormalsHelperFromJSObject = function(p) {
		var p;
		return new VertexNormalsHelper.ptr(p);
	};
	$pkg.VertexNormalsHelperFromJSObject = VertexNormalsHelperFromJSObject;
	Three.ptr.prototype.NewVertexNormalsHelper = function(object, size, hex, linewidth) {
		var hex, linewidth, object, p, size, t;
		t = this;
		p = new (t.ctx.VertexNormalsHelper)(object, size, hex, linewidth);
		return VertexNormalsHelperFromJSObject(p);
	};
	Three.prototype.NewVertexNormalsHelper = function(object, size, hex, linewidth) { return this.$val.NewVertexNormalsHelper(object, size, hex, linewidth); };
	VideoTexture.ptr.prototype.JSObject = function() {
		var v;
		v = this;
		return v.p;
	};
	VideoTexture.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.VideoTexture = function() {
		var p, t;
		t = this;
		p = t.ctx.VideoTexture;
		return VideoTextureFromJSObject(p);
	};
	Three.prototype.VideoTexture = function() { return this.$val.VideoTexture(); };
	VideoTextureFromJSObject = function(p) {
		var p;
		return new VideoTexture.ptr(p);
	};
	$pkg.VideoTextureFromJSObject = VideoTextureFromJSObject;
	Three.ptr.prototype.NewVideoTexture = function(video, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy) {
		var anisotropy, format, magFilter, mapping, minFilter, p, t, typ, video, wrapS, wrapT;
		t = this;
		p = new (t.ctx.VideoTexture)(video, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy);
		return VideoTextureFromJSObject(p);
	};
	Three.prototype.NewVideoTexture = function(video, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy) { return this.$val.NewVideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, typ, anisotropy); };
	WebGLBufferRenderer.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLBufferRenderer.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLBufferRenderer = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLBufferRenderer;
		return WebGLBufferRendererFromJSObject(p);
	};
	Three.prototype.WebGLBufferRenderer = function() { return this.$val.WebGLBufferRenderer(); };
	WebGLBufferRendererFromJSObject = function(p) {
		var p;
		return new WebGLBufferRenderer.ptr(p);
	};
	$pkg.WebGLBufferRendererFromJSObject = WebGLBufferRendererFromJSObject;
	Three.ptr.prototype.NewWebGLBufferRenderer = function(_gl, extensions, _infoRender) {
		var _gl, _infoRender, extensions, p, t;
		t = this;
		p = new (t.ctx.WebGLBufferRenderer)(_gl, extensions, _infoRender);
		return WebGLBufferRendererFromJSObject(p);
	};
	Three.prototype.NewWebGLBufferRenderer = function(_gl, extensions, _infoRender) { return this.$val.NewWebGLBufferRenderer(_gl, extensions, _infoRender); };
	WebGLCapabilities.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLCapabilities.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLCapabilities = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLCapabilities;
		return WebGLCapabilitiesFromJSObject(p);
	};
	Three.prototype.WebGLCapabilities = function() { return this.$val.WebGLCapabilities(); };
	WebGLCapabilitiesFromJSObject = function(p) {
		var p;
		return new WebGLCapabilities.ptr(p);
	};
	$pkg.WebGLCapabilitiesFromJSObject = WebGLCapabilitiesFromJSObject;
	Three.ptr.prototype.NewWebGLCapabilities = function(gl, extensions, parameters) {
		var extensions, gl, p, parameters, t;
		t = this;
		p = new (t.ctx.WebGLCapabilities)(gl, extensions, parameters);
		return WebGLCapabilitiesFromJSObject(p);
	};
	Three.prototype.NewWebGLCapabilities = function(gl, extensions, parameters) { return this.$val.NewWebGLCapabilities(gl, extensions, parameters); };
	WebGLExtensions.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLExtensions.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLExtensions = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLExtensions;
		return WebGLExtensionsFromJSObject(p);
	};
	Three.prototype.WebGLExtensions = function() { return this.$val.WebGLExtensions(); };
	WebGLExtensionsFromJSObject = function(p) {
		var p;
		return new WebGLExtensions.ptr(p);
	};
	$pkg.WebGLExtensionsFromJSObject = WebGLExtensionsFromJSObject;
	Three.ptr.prototype.NewWebGLExtensions = function(gl) {
		var gl, p, t;
		t = this;
		p = new (t.ctx.WebGLExtensions)(gl);
		return WebGLExtensionsFromJSObject(p);
	};
	Three.prototype.NewWebGLExtensions = function(gl) { return this.$val.NewWebGLExtensions(gl); };
	WebGLGeometries.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLGeometries.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLGeometries = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLGeometries;
		return WebGLGeometriesFromJSObject(p);
	};
	Three.prototype.WebGLGeometries = function() { return this.$val.WebGLGeometries(); };
	WebGLGeometriesFromJSObject = function(p) {
		var p;
		return new WebGLGeometries.ptr(p);
	};
	$pkg.WebGLGeometriesFromJSObject = WebGLGeometriesFromJSObject;
	Three.ptr.prototype.NewWebGLGeometries = function(gl, properties, info) {
		var gl, info, p, properties, t;
		t = this;
		p = new (t.ctx.WebGLGeometries)(gl, properties, info);
		return WebGLGeometriesFromJSObject(p);
	};
	Three.prototype.NewWebGLGeometries = function(gl, properties, info) { return this.$val.NewWebGLGeometries(gl, properties, info); };
	WebGLIndexedBufferRenderer.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLIndexedBufferRenderer.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLIndexedBufferRenderer = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLIndexedBufferRenderer;
		return WebGLIndexedBufferRendererFromJSObject(p);
	};
	Three.prototype.WebGLIndexedBufferRenderer = function() { return this.$val.WebGLIndexedBufferRenderer(); };
	WebGLIndexedBufferRendererFromJSObject = function(p) {
		var p;
		return new WebGLIndexedBufferRenderer.ptr(p);
	};
	$pkg.WebGLIndexedBufferRendererFromJSObject = WebGLIndexedBufferRendererFromJSObject;
	Three.ptr.prototype.NewWebGLIndexedBufferRenderer = function(_gl, extensions, _infoRender) {
		var _gl, _infoRender, extensions, p, t;
		t = this;
		p = new (t.ctx.WebGLIndexedBufferRenderer)(_gl, extensions, _infoRender);
		return WebGLIndexedBufferRendererFromJSObject(p);
	};
	Three.prototype.NewWebGLIndexedBufferRenderer = function(_gl, extensions, _infoRender) { return this.$val.NewWebGLIndexedBufferRenderer(_gl, extensions, _infoRender); };
	WebGLLights.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLLights.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLLights = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLLights;
		return WebGLLightsFromJSObject(p);
	};
	Three.prototype.WebGLLights = function() { return this.$val.WebGLLights(); };
	WebGLLightsFromJSObject = function(p) {
		var p;
		return new WebGLLights.ptr(p);
	};
	$pkg.WebGLLightsFromJSObject = WebGLLightsFromJSObject;
	Three.ptr.prototype.NewWebGLLights = function() {
		var p, t;
		t = this;
		p = new (t.ctx.WebGLLights)();
		return WebGLLightsFromJSObject(p);
	};
	Three.prototype.NewWebGLLights = function() { return this.$val.NewWebGLLights(); };
	WebGLObjects.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLObjects.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLObjects = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLObjects;
		return WebGLObjectsFromJSObject(p);
	};
	Three.prototype.WebGLObjects = function() { return this.$val.WebGLObjects(); };
	WebGLObjectsFromJSObject = function(p) {
		var p;
		return new WebGLObjects.ptr(p);
	};
	$pkg.WebGLObjectsFromJSObject = WebGLObjectsFromJSObject;
	Three.ptr.prototype.NewWebGLObjects = function(gl, properties, info) {
		var gl, info, p, properties, t;
		t = this;
		p = new (t.ctx.WebGLObjects)(gl, properties, info);
		return WebGLObjectsFromJSObject(p);
	};
	Three.prototype.NewWebGLObjects = function(gl, properties, info) { return this.$val.NewWebGLObjects(gl, properties, info); };
	WebGLProgram.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLProgram.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLProgram = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLProgram;
		return WebGLProgramFromJSObject(p);
	};
	Three.prototype.WebGLProgram = function() { return this.$val.WebGLProgram(); };
	WebGLProgramFromJSObject = function(p) {
		var p;
		return new WebGLProgram.ptr(p);
	};
	$pkg.WebGLProgramFromJSObject = WebGLProgramFromJSObject;
	Three.ptr.prototype.NewWebGLProgram = function() {
		var p, t;
		t = this;
		p = new (t.ctx.WebGLProgram)();
		return WebGLProgramFromJSObject(p);
	};
	Three.prototype.NewWebGLProgram = function() { return this.$val.NewWebGLProgram(); };
	WebGLProgram.ptr.prototype.Get = function() {
		var w;
		w = this;
		w.p.get();
		return w;
	};
	WebGLProgram.prototype.Get = function() { return this.$val.Get(); };
	WebGLPrograms.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLPrograms.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLPrograms = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLPrograms;
		return WebGLProgramsFromJSObject(p);
	};
	Three.prototype.WebGLPrograms = function() { return this.$val.WebGLPrograms(); };
	WebGLProgramsFromJSObject = function(p) {
		var p;
		return new WebGLPrograms.ptr(p);
	};
	$pkg.WebGLProgramsFromJSObject = WebGLProgramsFromJSObject;
	Three.ptr.prototype.NewWebGLPrograms = function(renderer, capabilities) {
		var capabilities, p, renderer, t;
		t = this;
		p = new (t.ctx.WebGLPrograms)(renderer, capabilities);
		return WebGLProgramsFromJSObject(p);
	};
	Three.prototype.NewWebGLPrograms = function(renderer, capabilities) { return this.$val.NewWebGLPrograms(renderer, capabilities); };
	WebGLProperties.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLProperties.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLProperties = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLProperties;
		return WebGLPropertiesFromJSObject(p);
	};
	Three.prototype.WebGLProperties = function() { return this.$val.WebGLProperties(); };
	WebGLPropertiesFromJSObject = function(p) {
		var p;
		return new WebGLProperties.ptr(p);
	};
	$pkg.WebGLPropertiesFromJSObject = WebGLPropertiesFromJSObject;
	Three.ptr.prototype.NewWebGLProperties = function() {
		var p, t;
		t = this;
		p = new (t.ctx.WebGLProperties)();
		return WebGLPropertiesFromJSObject(p);
	};
	Three.prototype.NewWebGLProperties = function() { return this.$val.NewWebGLProperties(); };
	WebGLRenderTarget.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLRenderTarget.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLRenderTarget = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLRenderTarget;
		return WebGLRenderTargetFromJSObject(p);
	};
	Three.prototype.WebGLRenderTarget = function() { return this.$val.WebGLRenderTarget(); };
	WebGLRenderTargetFromJSObject = function(p) {
		var p;
		return new WebGLRenderTarget.ptr(p);
	};
	$pkg.WebGLRenderTargetFromJSObject = WebGLRenderTargetFromJSObject;
	Three.ptr.prototype.NewWebGLRenderTarget = function(width, height, options) {
		var height, options, p, t, width;
		t = this;
		p = new (t.ctx.WebGLRenderTarget)(width, height, options);
		return WebGLRenderTargetFromJSObject(p);
	};
	Three.prototype.NewWebGLRenderTarget = function(width, height, options) { return this.$val.NewWebGLRenderTarget(width, height, options); };
	WebGLRenderTarget.ptr.prototype.SetSize = function(width, height) {
		var height, w, width;
		w = this;
		w.p.setSize(width, height);
		return w;
	};
	WebGLRenderTarget.prototype.SetSize = function(width, height) { return this.$val.SetSize(width, height); };
	WebGLRenderTarget.ptr.prototype.Clone = function() {
		var w;
		w = this;
		w.p.clone();
		return w;
	};
	WebGLRenderTarget.prototype.Clone = function() { return this.$val.Clone(); };
	WebGLRenderTarget.ptr.prototype.Copy = function(source) {
		var source, w;
		w = this;
		w.p.copy(source.p);
		return w;
	};
	WebGLRenderTarget.prototype.Copy = function(source) { return this.$val.Copy(source); };
	WebGLRenderTarget.ptr.prototype.Dispose = function() {
		var w;
		w = this;
		w.p.dispose();
		return w;
	};
	WebGLRenderTarget.prototype.Dispose = function() { return this.$val.Dispose(); };
	WebGLRenderTargetCube.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLRenderTargetCube.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLRenderTargetCube = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLRenderTargetCube;
		return WebGLRenderTargetCubeFromJSObject(p);
	};
	Three.prototype.WebGLRenderTargetCube = function() { return this.$val.WebGLRenderTargetCube(); };
	WebGLRenderTargetCubeFromJSObject = function(p) {
		var p;
		return new WebGLRenderTargetCube.ptr(p);
	};
	$pkg.WebGLRenderTargetCubeFromJSObject = WebGLRenderTargetCubeFromJSObject;
	Three.ptr.prototype.NewWebGLRenderTargetCube = function(width, height, options) {
		var height, options, p, t, width;
		t = this;
		p = new (t.ctx.WebGLRenderTargetCube)(width, height, options);
		return WebGLRenderTargetCubeFromJSObject(p);
	};
	Three.prototype.NewWebGLRenderTargetCube = function(width, height, options) { return this.$val.NewWebGLRenderTargetCube(width, height, options); };
	WebGLRenderer.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLRenderer.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLRenderer = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLRenderer;
		return WebGLRendererFromJSObject(p);
	};
	Three.prototype.WebGLRenderer = function() { return this.$val.WebGLRenderer(); };
	WebGLRendererFromJSObject = function(p) {
		var p;
		return new WebGLRenderer.ptr(p);
	};
	$pkg.WebGLRendererFromJSObject = WebGLRendererFromJSObject;
	Three.ptr.prototype.NewWebGLRenderer = function(opts) {
		var _key, _key$1, _key$2, _key$3, _key$4, _key$5, _key$6, _key$7, opts, p, params, t;
		t = this;
		params = $makeMap($String.keyFor, []);
		if (!(opts === ptrType$26.nil)) {
			if (!(opts.Precision === ptrType$25.nil)) {
				_key = "precision"; (params || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new $String(opts.Precision.$get()) };
			}
			if (!(opts.Alpha === ptrType$23.nil)) {
				_key$1 = "alpha"; (params || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: new $Bool(opts.Alpha.$get()) };
			}
			if (!(opts.PremultipliedAlpha === ptrType$23.nil)) {
				_key$2 = "premultipliedAlpha"; (params || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: new $Bool(opts.PremultipliedAlpha.$get()) };
			}
			if (!(opts.Antialias === ptrType$23.nil)) {
				_key$3 = "antialias"; (params || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: new $Bool(opts.Antialias.$get()) };
			}
			if (!(opts.Stencil === ptrType$23.nil)) {
				_key$4 = "stencil"; (params || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: new $Bool(opts.Stencil.$get()) };
			}
			if (!(opts.PreserveDrawingBuffer === ptrType$23.nil)) {
				_key$5 = "preserveDrawingBuffer"; (params || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$5)] = { k: _key$5, v: new $Bool(opts.PreserveDrawingBuffer.$get()) };
			}
			if (!(opts.Depth === ptrType$23.nil)) {
				_key$6 = "depth"; (params || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$6)] = { k: _key$6, v: new $Bool(opts.Depth.$get()) };
			}
			if (!(opts.LogarithmicDepthBuffer === ptrType$23.nil)) {
				_key$7 = "logarithmicDepthBuffer"; (params || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$7)] = { k: _key$7, v: new $Bool(opts.LogarithmicDepthBuffer.$get()) };
			}
		}
		p = new (t.ctx.WebGLRenderer)($externalize(params, mapType));
		return WebGLRendererFromJSObject(p);
	};
	Three.prototype.NewWebGLRenderer = function(opts) { return this.$val.NewWebGLRenderer(opts); };
	WebGLRenderer.ptr.prototype.DOMElement = function() {
		var w;
		w = this;
		return w.p.domElement;
	};
	WebGLRenderer.prototype.DOMElement = function() { return this.$val.DOMElement(); };
	WebGLRenderer.ptr.prototype.GetContext = function() {
		var w;
		w = this;
		return w.p.getContext();
	};
	WebGLRenderer.prototype.GetContext = function() { return this.$val.GetContext(); };
	WebGLRenderer.ptr.prototype.GetContextAttributes = function() {
		var w;
		w = this;
		return w.p.getContextAttributes();
	};
	WebGLRenderer.prototype.GetContextAttributes = function() { return this.$val.GetContextAttributes(); };
	WebGLRenderer.ptr.prototype.ForceContextLoss = function() {
		var w;
		w = this;
		w.p.forceContextLoss();
		return w;
	};
	WebGLRenderer.prototype.ForceContextLoss = function() { return this.$val.ForceContextLoss(); };
	WebGLRenderer.ptr.prototype.GetMaxAnisotropy = function() {
		var w;
		w = this;
		return $parseFloat(w.p.getMaxAnisotropy());
	};
	WebGLRenderer.prototype.GetMaxAnisotropy = function() { return this.$val.GetMaxAnisotropy(); };
	WebGLRenderer.ptr.prototype.GetPrecision = function() {
		var w;
		w = this;
		return $parseFloat(w.p.getPrecision());
	};
	WebGLRenderer.prototype.GetPrecision = function() { return this.$val.GetPrecision(); };
	WebGLRenderer.ptr.prototype.GetPixelRatio = function() {
		var w;
		w = this;
		return $parseFloat(w.p.getPixelRatio());
	};
	WebGLRenderer.prototype.GetPixelRatio = function() { return this.$val.GetPixelRatio(); };
	WebGLRenderer.ptr.prototype.SetPixelRatio = function(value) {
		var value, w;
		w = this;
		w.p.setPixelRatio(value);
		return w;
	};
	WebGLRenderer.prototype.SetPixelRatio = function(value) { return this.$val.SetPixelRatio(value); };
	WebGLRenderer.ptr.prototype.GetSize = function() {
		var _tmp, _tmp$1, height, result, w, width;
		width = 0;
		height = 0;
		w = this;
		result = w.p.getSize();
		_tmp = $parseFloat(result.width);
		_tmp$1 = $parseFloat(result.height);
		width = _tmp;
		height = _tmp$1;
		return [width, height];
	};
	WebGLRenderer.prototype.GetSize = function() { return this.$val.GetSize(); };
	WebGLRenderer.ptr.prototype.SetSize = function(width, height, updateStyle) {
		var height, updateStyle, w, width;
		w = this;
		w.p.setSize(width, height, $externalize(updateStyle, $Bool));
		return w;
	};
	WebGLRenderer.prototype.SetSize = function(width, height, updateStyle) { return this.$val.SetSize(width, height, updateStyle); };
	WebGLRenderer.ptr.prototype.SetViewport = function(x, y, width, height) {
		var height, w, width, x, y;
		w = this;
		w.p.setViewport(x, y, width, height);
		return w;
	};
	WebGLRenderer.prototype.SetViewport = function(x, y, width, height) { return this.$val.SetViewport(x, y, width, height); };
	WebGLRenderer.ptr.prototype.SetScissor = function(x, y, width, height) {
		var height, w, width, x, y;
		w = this;
		w.p.setScissor(x, y, width, height);
		return w;
	};
	WebGLRenderer.prototype.SetScissor = function(x, y, width, height) { return this.$val.SetScissor(x, y, width, height); };
	WebGLRenderer.ptr.prototype.SetScissorTest = function(value) {
		var value, w;
		w = this;
		w.p.setScissorTest($externalize(value, $Bool));
		return w;
	};
	WebGLRenderer.prototype.SetScissorTest = function(value) { return this.$val.SetScissorTest(value); };
	WebGLRenderer.ptr.prototype.GetClearColor = function() {
		var p, w;
		w = this;
		p = w.p.getClearColor();
		return new Color.ptr(p);
	};
	WebGLRenderer.prototype.GetClearColor = function() { return this.$val.GetClearColor(); };
	WebGLRenderer.ptr.prototype.SetClearColor = function(color, alpha) {
		var alpha, color, w;
		w = this;
		w.p.setClearColor(color.p, alpha);
		return w;
	};
	WebGLRenderer.prototype.SetClearColor = function(color, alpha) { return this.$val.SetClearColor(color, alpha); };
	WebGLRenderer.ptr.prototype.GetClearAlpha = function() {
		var w;
		w = this;
		return $parseFloat(w.p.getClearAlpha());
	};
	WebGLRenderer.prototype.GetClearAlpha = function() { return this.$val.GetClearAlpha(); };
	WebGLRenderer.ptr.prototype.SetClearAlpha = function(alpha) {
		var alpha, w;
		w = this;
		w.p.setClearAlpha(alpha);
		return w;
	};
	WebGLRenderer.prototype.SetClearAlpha = function(alpha) { return this.$val.SetClearAlpha(alpha); };
	WebGLRenderer.ptr.prototype.Clear = function(color, depth, stencil) {
		var color, depth, stencil, w;
		w = this;
		w.p.clear($externalize(color, $Bool), $externalize(depth, $Bool), $externalize(stencil, $Bool));
		return w;
	};
	WebGLRenderer.prototype.Clear = function(color, depth, stencil) { return this.$val.Clear(color, depth, stencil); };
	WebGLRenderer.ptr.prototype.ClearColor = function() {
		var w;
		w = this;
		w.p.clearColor();
		return w;
	};
	WebGLRenderer.prototype.ClearColor = function() { return this.$val.ClearColor(); };
	WebGLRenderer.ptr.prototype.ClearDepth = function() {
		var w;
		w = this;
		w.p.clearDepth();
		return w;
	};
	WebGLRenderer.prototype.ClearDepth = function() { return this.$val.ClearDepth(); };
	WebGLRenderer.ptr.prototype.ClearStencil = function() {
		var w;
		w = this;
		w.p.clearStencil();
		return w;
	};
	WebGLRenderer.prototype.ClearStencil = function() { return this.$val.ClearStencil(); };
	WebGLRenderer.ptr.prototype.ClearTarget = function(renderTarget, color, depth, stencil) {
		var _r, color, depth, renderTarget, stencil, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; color = $f.color; depth = $f.depth; renderTarget = $f.renderTarget; stencil = $f.stencil; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_r = renderTarget.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		w.p.clearStencil(_r, $externalize(color, $Bool), $externalize(depth, $Bool), $externalize(stencil, $Bool));
		$s = -1; return w;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGLRenderer.ptr.prototype.ClearTarget }; } $f._r = _r; $f.color = color; $f.depth = depth; $f.renderTarget = renderTarget; $f.stencil = stencil; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGLRenderer.prototype.ClearTarget = function(renderTarget, color, depth, stencil) { return this.$val.ClearTarget(renderTarget, color, depth, stencil); };
	WebGLRenderer.ptr.prototype.ResetGLState = function() {
		var w;
		w = this;
		w.p.resetGLState();
		return w;
	};
	WebGLRenderer.prototype.ResetGLState = function() { return this.$val.ResetGLState(); };
	WebGLRenderer.ptr.prototype.RenderBufferImmediate = function(object, program, material) {
		var _r, _r$1, _r$2, material, object, program, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; material = $f.material; object = $f.object; program = $f.program; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_r = object.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = program.JSObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = material.JSObject(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		w.p.renderBufferImmediate(_r, _r$1, _r$2);
		$s = -1; return w;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGLRenderer.ptr.prototype.RenderBufferImmediate }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.material = material; $f.object = object; $f.program = program; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGLRenderer.prototype.RenderBufferImmediate = function(object, program, material) { return this.$val.RenderBufferImmediate(object, program, material); };
	WebGLRenderer.ptr.prototype.RenderBufferDirect = function(camera, fog, geometry, material, object, group) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, camera, fog, geometry, group, material, object, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; camera = $f.camera; fog = $f.fog; geometry = $f.geometry; group = $f.group; material = $f.material; object = $f.object; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_r = camera.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = fog.JSObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = geometry.JSObject(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = material.JSObject(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = object.JSObject(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = group.JSObject(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		w.p.renderBufferDirect(_r, _r$1, _r$2, _r$3, _r$4, _r$5);
		$s = -1; return w;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGLRenderer.ptr.prototype.RenderBufferDirect }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.camera = camera; $f.fog = fog; $f.geometry = geometry; $f.group = group; $f.material = material; $f.object = object; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGLRenderer.prototype.RenderBufferDirect = function(camera, fog, geometry, material, object, group) { return this.$val.RenderBufferDirect(camera, fog, geometry, material, object, group); };
	WebGLRenderer.ptr.prototype.Render = function(scene, camera, opts) {
		var _r, _r$1, _r$2, _r$3, _r$4, camera, opts, scene, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; camera = $f.camera; opts = $f.opts; scene = $f.scene; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		/* */ if (!(opts === ptrType$27.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(opts === ptrType$27.nil)) { */ case 1:
			_r = scene.JSObject(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = camera.JSObject(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = opts.renderTarget.JSObject(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			w.p.render(_r, _r$1, _r$2, $externalize(opts.forceClear, $Bool));
			$s = 3; continue;
		/* } else { */ case 2:
			_r$3 = scene.JSObject(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = camera.JSObject(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			w.p.render(_r$3, _r$4);
		/* } */ case 3:
		$s = -1; return w;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGLRenderer.ptr.prototype.Render }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.camera = camera; $f.opts = opts; $f.scene = scene; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGLRenderer.prototype.Render = function(scene, camera, opts) { return this.$val.Render(scene, camera, opts); };
	WebGLRenderer.ptr.prototype.SetFaceCulling = function(cullFace, frontFaceDirection) {
		var cullFace, frontFaceDirection, w;
		w = this;
		w.p.setFaceCulling(cullFace, frontFaceDirection);
		return w;
	};
	WebGLRenderer.prototype.SetFaceCulling = function(cullFace, frontFaceDirection) { return this.$val.SetFaceCulling(cullFace, frontFaceDirection); };
	WebGLRenderer.ptr.prototype.SetTexture = function(texture, slot) {
		var _r, _r$1, slot, texture, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; slot = $f.slot; texture = $f.texture; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_r = texture.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = slot.JSObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		w.p.setTexture(_r, _r$1);
		$s = -1; return w;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGLRenderer.ptr.prototype.SetTexture }; } $f._r = _r; $f._r$1 = _r$1; $f.slot = slot; $f.texture = texture; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGLRenderer.prototype.SetTexture = function(texture, slot) { return this.$val.SetTexture(texture, slot); };
	WebGLRenderer.ptr.prototype.GetCurrentRenderTarget = function() {
		var w;
		w = this;
		return w.p.getCurrentRenderTarget();
	};
	WebGLRenderer.prototype.GetCurrentRenderTarget = function() { return this.$val.GetCurrentRenderTarget(); };
	WebGLRenderer.ptr.prototype.SetRenderTarget = function(renderTarget) {
		var _r, renderTarget, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; renderTarget = $f.renderTarget; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_r = renderTarget.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		w.p.setRenderTarget(_r);
		$s = -1; return w;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGLRenderer.ptr.prototype.SetRenderTarget }; } $f._r = _r; $f.renderTarget = renderTarget; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGLRenderer.prototype.SetRenderTarget = function(renderTarget) { return this.$val.SetRenderTarget(renderTarget); };
	WebGLRenderer.ptr.prototype.ReadRenderTargetPixels = function(renderTarget, x, y, width, height, buffer) {
		var _r, _r$1, buffer, height, renderTarget, w, width, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; buffer = $f.buffer; height = $f.height; renderTarget = $f.renderTarget; w = $f.w; width = $f.width; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_r = renderTarget.JSObject(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = buffer.JSObject(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		w.p.readRenderTargetPixels(_r, x, y, width, height, _r$1);
		$s = -1; return w;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGLRenderer.ptr.prototype.ReadRenderTargetPixels }; } $f._r = _r; $f._r$1 = _r$1; $f.buffer = buffer; $f.height = height; $f.renderTarget = renderTarget; $f.w = w; $f.width = width; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGLRenderer.prototype.ReadRenderTargetPixels = function(renderTarget, x, y, width, height, buffer) { return this.$val.ReadRenderTargetPixels(renderTarget, x, y, width, height, buffer); };
	WebGLShader.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLShader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLShader = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLShader;
		return WebGLShaderFromJSObject(p);
	};
	Three.prototype.WebGLShader = function() { return this.$val.WebGLShader(); };
	WebGLShaderFromJSObject = function(p) {
		var p;
		return new WebGLShader.ptr(p);
	};
	$pkg.WebGLShaderFromJSObject = WebGLShaderFromJSObject;
	Three.ptr.prototype.NewWebGLShader = function() {
		var p, t;
		t = this;
		p = new (t.ctx.WebGLShader)();
		return WebGLShaderFromJSObject(p);
	};
	Three.prototype.NewWebGLShader = function() { return this.$val.NewWebGLShader(); };
	WebGLShadowMap.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLShadowMap.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLShadowMap = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLShadowMap;
		return WebGLShadowMapFromJSObject(p);
	};
	Three.prototype.WebGLShadowMap = function() { return this.$val.WebGLShadowMap(); };
	WebGLShadowMapFromJSObject = function(p) {
		var p;
		return new WebGLShadowMap.ptr(p);
	};
	$pkg.WebGLShadowMapFromJSObject = WebGLShadowMapFromJSObject;
	Three.ptr.prototype.NewWebGLShadowMap = function(_renderer, _lights, _objects) {
		var _lights, _objects, _renderer, p, t;
		t = this;
		p = new (t.ctx.WebGLShadowMap)(_renderer, _lights, _objects);
		return WebGLShadowMapFromJSObject(p);
	};
	Three.prototype.NewWebGLShadowMap = function(_renderer, _lights, _objects) { return this.$val.NewWebGLShadowMap(_renderer, _lights, _objects); };
	WebGLState.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WebGLState.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WebGLState = function() {
		var p, t;
		t = this;
		p = t.ctx.WebGLState;
		return WebGLStateFromJSObject(p);
	};
	Three.prototype.WebGLState = function() { return this.$val.WebGLState(); };
	WebGLStateFromJSObject = function(p) {
		var p;
		return new WebGLState.ptr(p);
	};
	$pkg.WebGLStateFromJSObject = WebGLStateFromJSObject;
	Three.ptr.prototype.NewWebGLState = function(gl, extensions, paramThreeToGL) {
		var extensions, gl, p, paramThreeToGL, t;
		t = this;
		p = new (t.ctx.WebGLState)(gl, extensions, paramThreeToGL);
		return WebGLStateFromJSObject(p);
	};
	Three.prototype.NewWebGLState = function(gl, extensions, paramThreeToGL) { return this.$val.NewWebGLState(gl, extensions, paramThreeToGL); };
	WireframeGeometry.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WireframeGeometry.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WireframeGeometry = function() {
		var p, t;
		t = this;
		p = t.ctx.WireframeGeometry;
		return WireframeGeometryFromJSObject(p);
	};
	Three.prototype.WireframeGeometry = function() { return this.$val.WireframeGeometry(); };
	WireframeGeometryFromJSObject = function(p) {
		var p;
		return new WireframeGeometry.ptr(p);
	};
	$pkg.WireframeGeometryFromJSObject = WireframeGeometryFromJSObject;
	Three.ptr.prototype.NewWireframeGeometry = function(geometry) {
		var geometry, p, t;
		t = this;
		p = new (t.ctx.WireframeGeometry)(geometry);
		return WireframeGeometryFromJSObject(p);
	};
	Three.prototype.NewWireframeGeometry = function(geometry) { return this.$val.NewWireframeGeometry(geometry); };
	WireframeHelper.ptr.prototype.JSObject = function() {
		var w;
		w = this;
		return w.p;
	};
	WireframeHelper.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.WireframeHelper = function() {
		var p, t;
		t = this;
		p = t.ctx.WireframeHelper;
		return WireframeHelperFromJSObject(p);
	};
	Three.prototype.WireframeHelper = function() { return this.$val.WireframeHelper(); };
	WireframeHelperFromJSObject = function(p) {
		var p;
		return new WireframeHelper.ptr(p);
	};
	$pkg.WireframeHelperFromJSObject = WireframeHelperFromJSObject;
	Three.ptr.prototype.NewWireframeHelper = function(object, hex) {
		var hex, object, p, t;
		t = this;
		p = new (t.ctx.WireframeHelper)(object, hex);
		return WireframeHelperFromJSObject(p);
	};
	Three.prototype.NewWireframeHelper = function(object, hex) { return this.$val.NewWireframeHelper(object, hex); };
	XHRLoader.ptr.prototype.JSObject = function() {
		var x;
		x = this;
		return x.p;
	};
	XHRLoader.prototype.JSObject = function() { return this.$val.JSObject(); };
	Three.ptr.prototype.XHRLoader = function() {
		var p, t;
		t = this;
		p = t.ctx.XHRLoader;
		return XHRLoaderFromJSObject(p);
	};
	Three.prototype.XHRLoader = function() { return this.$val.XHRLoader(); };
	XHRLoaderFromJSObject = function(p) {
		var p;
		return new XHRLoader.ptr(p);
	};
	$pkg.XHRLoaderFromJSObject = XHRLoaderFromJSObject;
	Three.ptr.prototype.NewXHRLoader = function(manager) {
		var manager, p, t;
		t = this;
		p = new (t.ctx.XHRLoader)(manager);
		return XHRLoaderFromJSObject(p);
	};
	Three.prototype.NewXHRLoader = function(manager) { return this.$val.NewXHRLoader(manager); };
	XHRLoader.ptr.prototype.Load = function(url, onLoad, onProgress, onError) {
		var onError, onLoad, onProgress, url, x;
		x = this;
		x.p.load(url, onLoad, onProgress, onError);
		return x;
	};
	XHRLoader.prototype.Load = function(url, onLoad, onProgress, onError) { return this.$val.Load(url, onLoad, onProgress, onError); };
	XHRLoader.ptr.prototype.SetPath = function(value) {
		var value, x;
		x = this;
		x.p.setPath(value);
		return x;
	};
	XHRLoader.prototype.SetPath = function(value) { return this.$val.SetPath(value); };
	XHRLoader.ptr.prototype.SetResponseType = function(value) {
		var value, x;
		x = this;
		x.p.setResponseType(value);
		return x;
	};
	XHRLoader.prototype.SetResponseType = function(value) { return this.$val.SetResponseType(value); };
	XHRLoader.ptr.prototype.SetWithCredentials = function(value) {
		var value, x;
		x = this;
		x.p.setWithCredentials(value);
		return x;
	};
	XHRLoader.prototype.SetWithCredentials = function(value) { return this.$val.SetWithCredentials(value); };
	ptrType$29.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$30.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "ResetDuration", name: "ResetDuration", pkg: "", typ: $funcType([], [ptrType$30], false)}, {prop: "Trim", name: "Trim", pkg: "", typ: $funcType([], [ptrType$30], false)}, {prop: "Optimize", name: "Optimize", pkg: "", typ: $funcType([], [ptrType$30], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$Float64], [ptrType$30], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([$Float64], [ptrType$30], false)}, {prop: "CreateFromMorphTargetSequence", name: "CreateFromMorphTargetSequence", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$30], false)}, {prop: "FindByName", name: "FindByName", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$30], false)}, {prop: "CreateClipsFromMorphTargetSequences", name: "CreateClipsFromMorphTargetSequences", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$30], false)}, {prop: "ParseAnimation", name: "ParseAnimation", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$30], false)}];
	ptrType$31.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$31], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$31], false)}];
	ptrType$32.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Total", name: "Total", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "InUse", name: "InUse", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "ClipAction", name: "ClipAction", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$32], false)}, {prop: "ExistingAction", name: "ExistingAction", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$32], false)}, {prop: "StopAllAction", name: "StopAllAction", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "GetRoot", name: "GetRoot", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "UncacheClip", name: "UncacheClip", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "UncacheRoot", name: "UncacheRoot", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "UncacheAction", name: "UncacheAction", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$32], false)}, {prop: "Play", name: "Play", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "Stop", name: "Stop", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "IsRunning", name: "IsRunning", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "IsScheduled", name: "IsScheduled", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "StartAt", name: "StartAt", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "SetLoop", name: "SetLoop", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$32], false)}, {prop: "SetEffectiveWeight", name: "SetEffectiveWeight", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "GetEffectiveWeight", name: "GetEffectiveWeight", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "FadeIn", name: "FadeIn", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "FadeOut", name: "FadeOut", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "CrossFadeFrom", name: "CrossFadeFrom", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$32], false)}, {prop: "CrossFadeTo", name: "CrossFadeTo", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$32], false)}, {prop: "StopFading", name: "StopFading", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "SetEffectiveTimeScale", name: "SetEffectiveTimeScale", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "GetEffectiveTimeScale", name: "GetEffectiveTimeScale", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "SetDuration", name: "SetDuration", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "SyncWith", name: "SyncWith", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "Halt", name: "Halt", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "Warp", name: "Warp", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$32], false)}, {prop: "StopWarping", name: "StopWarping", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "GetMixer", name: "GetMixer", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "GetClip", name: "GetClip", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "_update", name: "_update", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$32], false)}, {prop: "_updateWeight", name: "_updateWeight", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_updateTimeScale", name: "_updateTimeScale", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_updateTime", name: "_updateTime", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_setEndings", name: "_setEndings", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$32], false)}, {prop: "_scheduleFading", name: "_scheduleFading", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$32], false)}, {prop: "_bindAction", name: "_bindAction", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64, $Float64], [ptrType$32], false)}, {prop: "_activateAction", name: "_activateAction", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_deactivateAction", name: "_deactivateAction", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_initMemoryManager", name: "_initMemoryManager", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([], [ptrType$32], false)}, {prop: "_isActiveAction", name: "_isActiveAction", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_addInactiveAction", name: "_addInactiveAction", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$32], false)}, {prop: "_removeInactiveAction", name: "_removeInactiveAction", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_removeInactiveBindingsForAction", name: "_removeInactiveBindingsForAction", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_lendAction", name: "_lendAction", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_takeBackAction", name: "_takeBackAction", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_addInactiveBinding", name: "_addInactiveBinding", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$32], false)}, {prop: "_removeInactiveBinding", name: "_removeInactiveBinding", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_lendBinding", name: "_lendBinding", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_takeBackBinding", name: "_takeBackBinding", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "_lendControlInterpolant", name: "_lendControlInterpolant", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([], [ptrType$32], false)}, {prop: "_takeBackControlInterpolant", name: "_takeBackControlInterpolant", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$32], false)}];
	ptrType$33.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Total", name: "Total", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "InUse", name: "InUse", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "BindingsPerObject", name: "BindingsPerObject", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([JSObject], [ptrType$33], false)}, {prop: "Remove", name: "Remove", pkg: "", typ: $funcType([JSObject], [ptrType$33], false)}, {prop: "Uncache", name: "Uncache", pkg: "", typ: $funcType([JSObject], [ptrType$33], false)}, {prop: "Subscribe", name: "Subscribe", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$33], false)}, {prop: "Unsubscribe", name: "Unsubscribe", pkg: "", typ: $funcType([$Float64], [ptrType$33], false)}];
	ptrType$34.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "ArraySlice", name: "ArraySlice", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$34], false)}, {prop: "ConvertArray", name: "ConvertArray", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$34], false)}, {prop: "IsTypedArray", name: "IsTypedArray", pkg: "", typ: $funcType([$Float64], [ptrType$34], false)}, {prop: "GetKeyframeOrder", name: "GetKeyframeOrder", pkg: "", typ: $funcType([$Float64], [ptrType$34], false)}, {prop: "SortedArray", name: "SortedArray", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$34], false)}, {prop: "FlattenJSON", name: "FlattenJSON", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$34], false)}];
	ptrType$36.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$37.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "SetLength", name: "SetLength", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$37], false)}, {prop: "SetColor", name: "SetColor", pkg: "", typ: $funcType([$Float64], [ptrType$37], false)}];
	ptrType$38.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$Float64], [ptrType$38], false)}, {prop: "SetNodeSource", name: "SetNodeSource", pkg: "", typ: $funcType([$Float64], [ptrType$38], false)}, {prop: "SetBuffer", name: "SetBuffer", pkg: "", typ: $funcType([$Float64], [ptrType$38], false)}, {prop: "SetFilter", name: "SetFilter", pkg: "", typ: $funcType([$Float64], [ptrType$38], false)}, {prop: "SetPlaybackRate", name: "SetPlaybackRate", pkg: "", typ: $funcType([$Float64], [ptrType$38], false)}, {prop: "SetLoop", name: "SetLoop", pkg: "", typ: $funcType([$Float64], [ptrType$38], false)}, {prop: "SetVolume", name: "SetVolume", pkg: "", typ: $funcType([$Float64], [ptrType$38], false)}];
	ptrType$39.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetData", name: "GetData", pkg: "", typ: $funcType([], [ptrType$39], false)}];
	ptrType$40.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$Float64], [ptrType$40], false)}, {prop: "OnReady", name: "OnReady", pkg: "", typ: $funcType([$Float64], [ptrType$40], false)}];
	ptrType$41.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "RemoveFilter", name: "RemoveFilter", pkg: "", typ: $funcType([$Float64], [ptrType$41], false)}, {prop: "SetFilter", name: "SetFilter", pkg: "", typ: $funcType([$Float64], [ptrType$41], false)}, {prop: "SetMasterVolume", name: "SetMasterVolume", pkg: "", typ: $funcType([$Float64], [ptrType$41], false)}];
	ptrType$43.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$44.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$44], false)}];
	ptrType$45.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$45], [ptrType$45], false)}];
	ptrType$46.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$48.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([], [ptrType$48], false)}];
	ptrType$49.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$49], false)}, {prop: "SetFromPoints", name: "SetFromPoints", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "SetFromCenterAndSize", name: "SetFromCenterAndSize", pkg: "", typ: $funcType([], [ptrType$49], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$49], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$49], [ptrType$49], false)}, {prop: "MakeEmpty", name: "MakeEmpty", pkg: "", typ: $funcType([], [ptrType$49], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [ptrType$49], false)}, {prop: "Center", name: "Center", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "ExpandByPoint", name: "ExpandByPoint", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "ExpandByVector", name: "ExpandByVector", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "ExpandByScalar", name: "ExpandByScalar", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "ContainsPoint", name: "ContainsPoint", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "ContainsBox", name: "ContainsBox", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "GetParameter", name: "GetParameter", pkg: "", typ: $funcType([ptrType$3, ptrType$3], [ptrType$49], false)}, {prop: "IntersectsBox", name: "IntersectsBox", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "ClampPoint", name: "ClampPoint", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$49], false)}, {prop: "DistanceToPoint", name: "DistanceToPoint", pkg: "", typ: $funcType([], [ptrType$49], false)}, {prop: "Intersect", name: "Intersect", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "Union", name: "Union", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([$Float64], [ptrType$49], false)}];
	ptrType$50.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$50], false)}, {prop: "SetFromArray", name: "SetFromArray", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "SetFromPoints", name: "SetFromPoints", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "SetFromCenterAndSize", name: "SetFromCenterAndSize", pkg: "", typ: $funcType([], [ptrType$50], false)}, {prop: "SetFromObject", name: "SetFromObject", pkg: "", typ: $funcType([], [ptrType$50], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$50], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$50], [ptrType$50], false)}, {prop: "MakeEmpty", name: "MakeEmpty", pkg: "", typ: $funcType([], [ptrType$50], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [ptrType$50], false)}, {prop: "Center", name: "Center", pkg: "", typ: $funcType([ptrType$10], [ptrType$6], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "ExpandByPoint", name: "ExpandByPoint", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "ExpandByVector", name: "ExpandByVector", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "ExpandByScalar", name: "ExpandByScalar", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "ContainsPoint", name: "ContainsPoint", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "ContainsBox", name: "ContainsBox", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "GetParameter", name: "GetParameter", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$50], false)}, {prop: "IntersectsBox", name: "IntersectsBox", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "IntersectsPlane", name: "IntersectsPlane", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "ClampPoint", name: "ClampPoint", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$50], false)}, {prop: "DistanceToPoint", name: "DistanceToPoint", pkg: "", typ: $funcType([], [ptrType$50], false)}, {prop: "GetBoundingSphere", name: "GetBoundingSphere", pkg: "", typ: $funcType([], [ptrType$50], false)}, {prop: "Intersect", name: "Intersect", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "Union", name: "Union", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "ApplyMatrix4", name: "ApplyMatrix4", pkg: "", typ: $funcType([], [ptrType$50], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([$Float64], [ptrType$50], false)}];
	ptrType$52.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$54.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$56.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([], [ptrType$56], false)}];
	ptrType$57.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Count", name: "Count", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetNeedsUpdate", name: "SetNeedsUpdate", pkg: "", typ: $funcType([$Float64], [ptrType$57], false)}, {prop: "SetDynamic", name: "SetDynamic", pkg: "", typ: $funcType([$Float64], [ptrType$57], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$57], [ptrType$57], false)}, {prop: "CopyAt", name: "CopyAt", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$57], false)}, {prop: "CopyArray", name: "CopyArray", pkg: "", typ: $funcType([sliceType$7], [ptrType$57], false)}, {prop: "CopyColorsArray", name: "CopyColorsArray", pkg: "", typ: $funcType([sliceType$7], [ptrType$57], false)}, {prop: "CopyIndicesArray", name: "CopyIndicesArray", pkg: "", typ: $funcType([sliceType$8], [ptrType$57], false)}, {prop: "CopyVector2sArray", name: "CopyVector2sArray", pkg: "", typ: $funcType([sliceType$9], [ptrType$57], false)}, {prop: "CopyVector3sArray", name: "CopyVector3sArray", pkg: "", typ: $funcType([sliceType$10], [ptrType$57], false)}, {prop: "CopyVector4sArray", name: "CopyVector4sArray", pkg: "", typ: $funcType([sliceType$11], [ptrType$57], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Int], [ptrType$57], false)}, {prop: "GetX", name: "GetX", pkg: "", typ: $funcType([$Int], [ptrType$57], false)}, {prop: "SetX", name: "SetX", pkg: "", typ: $funcType([$Int, $Float64], [ptrType$57], false)}, {prop: "GetY", name: "GetY", pkg: "", typ: $funcType([$Int], [ptrType$57], false)}, {prop: "SetY", name: "SetY", pkg: "", typ: $funcType([$Int, $Float64], [ptrType$57], false)}, {prop: "GetZ", name: "GetZ", pkg: "", typ: $funcType([$Int], [ptrType$57], false)}, {prop: "SetZ", name: "SetZ", pkg: "", typ: $funcType([$Int, $Float64], [ptrType$57], false)}, {prop: "GetW", name: "GetW", pkg: "", typ: $funcType([$Int], [ptrType$57], false)}, {prop: "SetW", name: "SetW", pkg: "", typ: $funcType([$Int, $Float64], [ptrType$57], false)}, {prop: "SetXY", name: "SetXY", pkg: "", typ: $funcType([$Int, $Float64, $Float64], [ptrType$57], false)}, {prop: "SetXYZ", name: "SetXYZ", pkg: "", typ: $funcType([$Int, $Float64, $Float64, $Float64], [ptrType$57], false)}, {prop: "SetXYZW", name: "SetXYZW", pkg: "", typ: $funcType([$Int, $Float64, $Float64, $Float64, $Float64], [ptrType$57], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "UUID", name: "UUID", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Array", name: "Array", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "ItemSize", name: "ItemSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Dynamic", name: "Dynamic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "UpdateRange", name: "UpdateRange", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Version", name: "Version", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$51.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetIndex", name: "GetIndex", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int], [ptrType$51], false)}, {prop: "AddAttribute", name: "AddAttribute", pkg: "", typ: $funcType([$String, ptrType$10], [ptrType$51], false)}, {prop: "GetAttribute", name: "GetAttribute", pkg: "", typ: $funcType([$String], [ptrType$51], false)}, {prop: "RemoveAttribute", name: "RemoveAttribute", pkg: "", typ: $funcType([$String], [ptrType$51], false)}, {prop: "AddGroup", name: "AddGroup", pkg: "", typ: $funcType([$Int, $Int, $Int], [ptrType$51], false)}, {prop: "ClearGroups", name: "ClearGroups", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "SetDrawRange", name: "SetDrawRange", pkg: "", typ: $funcType([$Int, $Int], [ptrType$51], false)}, {prop: "ApplyMatrix", name: "ApplyMatrix", pkg: "", typ: $funcType([ptrType$8], [ptrType$51], false)}, {prop: "RotateX", name: "RotateX", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "RotateY", name: "RotateY", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "RotateZ", name: "RotateZ", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "LookAt", name: "LookAt", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "Center", name: "Center", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "SetFromObject", name: "SetFromObject", pkg: "", typ: $funcType([JSObject], [ptrType$51], false)}, {prop: "UpdateFromObject", name: "UpdateFromObject", pkg: "", typ: $funcType([JSObject], [ptrType$51], false)}, {prop: "FromGeometry", name: "FromGeometry", pkg: "", typ: $funcType([JSObject], [ptrType$51], false)}, {prop: "FromDirectGeometry", name: "FromDirectGeometry", pkg: "", typ: $funcType([JSObject], [ptrType$51], false)}, {prop: "ComputeBoundingBox", name: "ComputeBoundingBox", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "ComputeBoundingSphere", name: "ComputeBoundingSphere", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "ComputeFaceNormals", name: "ComputeFaceNormals", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "ComputeVertexNormals", name: "ComputeVertexNormals", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "Merge", name: "Merge", pkg: "", typ: $funcType([JSObject, $Int], [ptrType$51], false)}, {prop: "NormalizeNormals", name: "NormalizeNormals", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "ToNonIndexed", name: "ToNonIndexed", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$51], [ptrType$51], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "UUID", name: "UUID", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Attributes", name: "Attributes", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "MortphAttributes", name: "MortphAttributes", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Groups", name: "Groups", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "BoundingBox", name: "BoundingBox", pkg: "", typ: $funcType([], [ptrType$50], false)}, {prop: "BoundingSphere", name: "BoundingSphere", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "DrawRange", name: "DrawRange", pkg: "", typ: $funcType([], [$Int, $Int], false)}];
	ptrType$58.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$String, BufferGeometryLoadFunc, $emptyInterface, $emptyInterface], [ptrType$58], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$Float64], [ptrType$58], false)}];
	ptrType$59.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$59], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$Float64], [ptrType$59], false)}, {prop: "Remove", name: "Remove", pkg: "", typ: $funcType([$Float64], [ptrType$59], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [ptrType$59], false)}];
	ptrType$11.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$11], [ptrType$11], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [$String], false)}, {prop: "MatrixWorldInverse", name: "MatrixWorldInverse", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "ProjectionMatrix", name: "ProjectionMatrix", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "UpdateProjectionMatrix", name: "UpdateProjectionMatrix", pkg: "", typ: $funcType([], [ptrType$11], false)}, {prop: "SetNear", name: "SetNear", pkg: "", typ: $funcType([$Float64], [ptrType$11], false)}, {prop: "SetFar", name: "SetFar", pkg: "", typ: $funcType([$Float64], [ptrType$11], false)}, {prop: "SetFOV", name: "SetFOV", pkg: "", typ: $funcType([$Float64], [ptrType$11], false)}, {prop: "GetWorldDirection", name: "GetWorldDirection", pkg: "", typ: $funcType([ptrType$6], [ptrType$6], false)}, {prop: "LookAt", name: "LookAt", pkg: "", typ: $funcType([ptrType$6], [ptrType$11], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([ptrType$11], [ptrType$11], false)}];
	ptrType$60.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$61.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$63.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$64.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$65.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$66.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Start", name: "Start", pkg: "", typ: $funcType([], [ptrType$66], false)}, {prop: "Stop", name: "Stop", pkg: "", typ: $funcType([], [ptrType$66], false)}, {prop: "GetElapsedTime", name: "GetElapsedTime", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "GetDelta", name: "GetDelta", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Running", name: "Running", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$2.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}, {prop: "SetScalar", name: "SetScalar", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}, {prop: "SetHex", name: "SetHex", pkg: "", typ: $funcType([$Int], [ptrType$2], false)}, {prop: "SetRGB", name: "SetRGB", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$2], false)}, {prop: "SetHSL", name: "SetHSL", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$2], false)}, {prop: "SetStyle", name: "SetStyle", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "CopyGammaToLinear", name: "CopyGammaToLinear", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$2], false)}, {prop: "CopyLinearToGamma", name: "CopyLinearToGamma", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$2], false)}, {prop: "ConvertGammaToLinear", name: "ConvertGammaToLinear", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "ConvertLinearToGamma", name: "ConvertLinearToGamma", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "GetHex", name: "GetHex", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "GetHexString", name: "GetHexString", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "GetHSL", name: "GetHSL", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}, {prop: "GetStyle", name: "GetStyle", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "OffsetHSL", name: "OffsetHSL", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$2], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}, {prop: "AddColors", name: "AddColors", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$2], false)}, {prop: "AddScalar", name: "AddScalar", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}, {prop: "MultiplyScalar", name: "MultiplyScalar", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}, {prop: "Lerp", name: "Lerp", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$2], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "FromArray", name: "FromArray", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$2], false)}, {prop: "ToArray", name: "ToArray", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$2], false)}, {prop: "R", name: "R", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "G", name: "G", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "B", name: "B", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$67.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$68.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$69.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$69], false)}, {prop: "SetPath", name: "SetPath", pkg: "", typ: $funcType([$Float64], [ptrType$69], false)}];
	ptrType$71.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [$String], false)}, {prop: "RenderTarget", name: "RenderTarget", pkg: "", typ: $funcType([], [ptrType$70], false)}, {prop: "UpdateCubeMap", name: "UpdateCubeMap", pkg: "", typ: $funcType([JSObject, JSObject], [ptrType$71], false)}];
	ptrType$73.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [ptrType$73], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64], [ptrType$73], false)}];
	ptrType$74.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([sliceType$15, CubeTextureLoadFunc, $emptyInterface, $emptyInterface], [ptrType$74], false)}, {prop: "SetCrossOrigin", name: "SetCrossOrigin", pkg: "", typ: $funcType([$String], [ptrType$74], false)}, {prop: "SetPath", name: "SetPath", pkg: "", typ: $funcType([$String], [ptrType$74], false)}];
	ptrType$75.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetPoint", name: "GetPoint", pkg: "", typ: $funcType([$Float64], [ptrType$75], false)}, {prop: "GetTangent", name: "GetTangent", pkg: "", typ: $funcType([$Float64], [ptrType$75], false)}];
	ptrType$76.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetPoint", name: "GetPoint", pkg: "", typ: $funcType([$Float64], [ptrType$76], false)}, {prop: "GetTangent", name: "GetTangent", pkg: "", typ: $funcType([$Float64], [ptrType$76], false)}];
	ptrType$77.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "IntervalChanged", name: "IntervalChanged", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$77], false)}, {prop: "Interpolate", name: "Interpolate", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$77], false)}];
	ptrType$62.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetPoint", name: "GetPoint", pkg: "", typ: $funcType([$Int], [ptrType$10], false)}, {prop: "GetPointAt", name: "GetPointAt", pkg: "", typ: $funcType([$Int], [ptrType$10], false)}, {prop: "GetPoints", name: "GetPoints", pkg: "", typ: $funcType([$Int], [ptrType$10], false)}, {prop: "GetSpacedPoints", name: "GetSpacedPoints", pkg: "", typ: $funcType([$Int], [ptrType$10], false)}, {prop: "GetLength", name: "GetLength", pkg: "", typ: $funcType([], [ptrType$62], false)}, {prop: "GetLengths", name: "GetLengths", pkg: "", typ: $funcType([$Float64], [ptrType$62], false)}, {prop: "UpdateArcLengths", name: "UpdateArcLengths", pkg: "", typ: $funcType([], [ptrType$62], false)}, {prop: "GetUtoTmapping", name: "GetUtoTmapping", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$62], false)}, {prop: "GetTangent", name: "GetTangent", pkg: "", typ: $funcType([$Float64], [ptrType$62], false)}, {prop: "GetTangentAt", name: "GetTangentAt", pkg: "", typ: $funcType([$Float64], [ptrType$62], false)}];
	ptrType$78.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([$Float64], [ptrType$78], false)}, {prop: "GetPoint", name: "GetPoint", pkg: "", typ: $funcType([$Float64], [ptrType$78], false)}, {prop: "GetTangent", name: "GetTangent", pkg: "", typ: $funcType([$Float64], [ptrType$78], false)}, {prop: "CreatePointsGeometry", name: "CreatePointsGeometry", pkg: "", typ: $funcType([$Float64], [ptrType$53], false)}, {prop: "CreateSpacedPointsGeometry", name: "CreateSpacedPointsGeometry", pkg: "", typ: $funcType([$Float64], [ptrType$53], false)}, {prop: "CreateGeometry", name: "CreateGeometry", pkg: "", typ: $funcType([JSObject], [ptrType$53], false)}];
	ptrType$79.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "TangentQuadraticBezier", name: "TangentQuadraticBezier", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$79], false)}, {prop: "TangentCubicBezier", name: "TangentCubicBezier", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$79], false)}, {prop: "TangentSpline", name: "TangentSpline", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$79], false)}, {prop: "Interpolate", name: "Interpolate", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$79], false)}];
	ptrType$80.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$81.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$82.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$83.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "ComputeFaceNormals", name: "ComputeFaceNormals", pkg: "", typ: $funcType([], [ptrType$83], false)}, {prop: "ComputeVertexNormals", name: "ComputeVertexNormals", pkg: "", typ: $funcType([], [ptrType$83], false)}, {prop: "ComputeGroups", name: "ComputeGroups", pkg: "", typ: $funcType([$Float64], [ptrType$83], false)}, {prop: "FromGeometry", name: "FromGeometry", pkg: "", typ: $funcType([$Float64], [ptrType$83], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [ptrType$83], false)}];
	ptrType$84.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$84], [ptrType$84], false)}];
	ptrType$85.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$86.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Interpolate", name: "Interpolate", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$86], false)}];
	ptrType$88.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$89.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$90.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$35.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetPoint", name: "GetPoint", pkg: "", typ: $funcType([$Float64], [ptrType$35], false)}];
	ptrType$91.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "X", name: "X", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Y", name: "Y", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Z", name: "Z", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Order", name: "Order", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetX", name: "SetX", pkg: "", typ: $funcType([$Float64], [ptrType$91], false)}, {prop: "SetY", name: "SetY", pkg: "", typ: $funcType([$Float64], [ptrType$91], false)}, {prop: "SetZ", name: "SetZ", pkg: "", typ: $funcType([$Float64], [ptrType$91], false)}, {prop: "SetOrder", name: "SetOrder", pkg: "", typ: $funcType([$Float64], [ptrType$91], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$91], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$91], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$91], [ptrType$91], false)}, {prop: "SetFromRotationMatrix", name: "SetFromRotationMatrix", pkg: "", typ: $funcType([ptrType$8, $String, $Bool], [ptrType$91], false)}, {prop: "SetFromQuaternion", name: "SetFromQuaternion", pkg: "", typ: $funcType([], [ptrType$91], false)}, {prop: "SetFromVector3", name: "SetFromVector3", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$91], false)}, {prop: "Reorder", name: "Reorder", pkg: "", typ: $funcType([], [ptrType$91], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([$Float64], [ptrType$91], false)}, {prop: "FromArray", name: "FromArray", pkg: "", typ: $funcType([$Float64], [ptrType$91], false)}, {prop: "ToArray", name: "ToArray", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$91], false)}, {prop: "ToVector3", name: "ToVector3", pkg: "", typ: $funcType([$Float64], [ptrType$91], false)}, {prop: "OnChange", name: "OnChange", pkg: "", typ: $funcType([$Float64], [ptrType$91], false)}, {prop: "OnChangeCallback", name: "OnChangeCallback", pkg: "", typ: $funcType([], [ptrType$91], false)}];
	ptrType$92.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Apply", name: "Apply", pkg: "", typ: $funcType([$Float64], [ptrType$92], false)}, {prop: "AddEventListener", name: "AddEventListener", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$92], false)}, {prop: "HasEventListener", name: "HasEventListener", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$92], false)}, {prop: "RemoveEventListener", name: "RemoveEventListener", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$92], false)}, {prop: "DispatchEvent", name: "DispatchEvent", pkg: "", typ: $funcType([$Float64], [ptrType$92], false)}];
	ptrType$93.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GenerateTopUV", name: "GenerateTopUV", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$93], false)}, {prop: "GenerateSideWallUV", name: "GenerateSideWallUV", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$93], false)}, {prop: "AddShapeList", name: "AddShapeList", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$93], false)}, {prop: "AddShape", name: "AddShape", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$93], false)}];
	ptrType$18.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$18], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$18], [ptrType$18], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "SetVertexColor", name: "SetVertexColor", pkg: "", typ: $funcType([$Int, ptrType$2], [ptrType$18], false)}];
	ptrType$95.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$96.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$97.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$98.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GenerateShapes", name: "GenerateShapes", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$98], false)}];
	ptrType$99.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$99], false)}];
	ptrType$100.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$100], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$100], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$100], [ptrType$100], false)}, {prop: "SetFromMatrix", name: "SetFromMatrix", pkg: "", typ: $funcType([$Float64], [ptrType$100], false)}, {prop: "IntersectsObject", name: "IntersectsObject", pkg: "", typ: $funcType([], [ptrType$100], false)}, {prop: "IntersectsSphere", name: "IntersectsSphere", pkg: "", typ: $funcType([$Float64], [ptrType$100], false)}, {prop: "IntersectsBox", name: "IntersectsBox", pkg: "", typ: $funcType([], [ptrType$100], false)}, {prop: "ContainsPoint", name: "ContainsPoint", pkg: "", typ: $funcType([$Float64], [ptrType$100], false)}];
	ptrType$53.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "ApplyMatrix", name: "ApplyMatrix", pkg: "", typ: $funcType([$Float64], [ptrType$53], false)}, {prop: "RotateX", name: "RotateX", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "RotateY", name: "RotateY", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "RotateZ", name: "RotateZ", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "LookAt", name: "LookAt", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "FromBufferGeometry", name: "FromBufferGeometry", pkg: "", typ: $funcType([$Float64], [ptrType$53], false)}, {prop: "Center", name: "Center", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "ComputeFaceNormals", name: "ComputeFaceNormals", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "ComputeVertexNormals", name: "ComputeVertexNormals", pkg: "", typ: $funcType([$Bool], [ptrType$53], false)}, {prop: "ComputeMorphNormals", name: "ComputeMorphNormals", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "ComputeTangents", name: "ComputeTangents", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "ComputeLineDistances", name: "ComputeLineDistances", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "ComputeBoundingBox", name: "ComputeBoundingBox", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "ComputeBoundingSphere", name: "ComputeBoundingSphere", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "Merge", name: "Merge", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$53], false)}, {prop: "MergeMesh", name: "MergeMesh", pkg: "", typ: $funcType([$Float64], [ptrType$53], false)}, {prop: "MergeVertices", name: "MergeVertices", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "SortFacesByMaterialIndex", name: "SortFacesByMaterialIndex", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$53], [ptrType$53], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "Faces", name: "Faces", pkg: "", typ: $funcType([], [sliceType$16], false)}, {prop: "Vertex", name: "Vertex", pkg: "", typ: $funcType([$Int], [ptrType$6], false)}, {prop: "VerticesLength", name: "VerticesLength", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Vertices", name: "Vertices", pkg: "", typ: $funcType([], [sliceType$10], false)}, {prop: "SetVertices", name: "SetVertices", pkg: "", typ: $funcType([ptrType$10], [ptrType$53], false)}, {prop: "BoundingBox", name: "BoundingBox", pkg: "", typ: $funcType([], [ptrType$50], false)}];
	ptrType$101.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "SetColors", name: "SetColors", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$101], false)}];
	ptrType$102.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$103.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$103], [ptrType$103], false)}];
	ptrType$104.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$105.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$106.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$106], false)}, {prop: "SetCrossOrigin", name: "SetCrossOrigin", pkg: "", typ: $funcType([$Float64], [ptrType$106], false)}, {prop: "SetPath", name: "SetPath", pkg: "", typ: $funcType([$Float64], [ptrType$106], false)}];
	ptrType$107.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$108.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$108], [ptrType$108], false)}];
	ptrType$109.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "AddGroup", name: "AddGroup", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$109], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$109], [ptrType$109], false)}];
	ptrType$110.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$110], [ptrType$110], false)}];
	ptrType$111.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Count", name: "Count", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetNeedsUpdate", name: "SetNeedsUpdate", pkg: "", typ: $funcType([$Float64], [ptrType$111], false)}, {prop: "SetDynamic", name: "SetDynamic", pkg: "", typ: $funcType([$Float64], [ptrType$111], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$111], [ptrType$111], false)}, {prop: "CopyAt", name: "CopyAt", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$111], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$111], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$111], false)}];
	ptrType$112.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Count", name: "Count", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetX", name: "SetX", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$112], false)}, {prop: "SetY", name: "SetY", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$112], false)}, {prop: "SetZ", name: "SetZ", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$112], false)}, {prop: "SetW", name: "SetW", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$112], false)}, {prop: "GetX", name: "GetX", pkg: "", typ: $funcType([$Float64], [ptrType$112], false)}, {prop: "GetY", name: "GetY", pkg: "", typ: $funcType([$Float64], [ptrType$112], false)}, {prop: "GetZ", name: "GetZ", pkg: "", typ: $funcType([$Float64], [ptrType$112], false)}, {prop: "GetW", name: "GetW", pkg: "", typ: $funcType([$Float64], [ptrType$112], false)}, {prop: "SetXY", name: "SetXY", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$112], false)}, {prop: "SetXYZ", name: "SetXYZ", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$112], false)}, {prop: "SetXYZW", name: "SetXYZW", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$112], false)}];
	ptrType$113.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Evaluate", name: "Evaluate", pkg: "", typ: $funcType([$Float64], [ptrType$113], false)}, {prop: "GetSettings", name: "GetSettings", pkg: "", typ: $funcType([], [ptrType$113], false)}, {prop: "CopySampleValue", name: "CopySampleValue", pkg: "", typ: $funcType([$Float64], [ptrType$113], false)}, {prop: "Interpolate", name: "Interpolate", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$113], false)}, {prop: "IntervalChanged", name: "IntervalChanged", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$113], false)}];
	ptrType$114.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "StatusDomElement", name: "StatusDomElement", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$String, JSONLoadFunc, $emptyInterface, $emptyInterface], [ptrType$114], false)}, {prop: "SetTexturePath", name: "SetTexturePath", pkg: "", typ: $funcType([$Float64], [ptrType$114], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$114], false)}];
	ptrType$115.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "InterpolantFactoryMethodDiscrete", name: "InterpolantFactoryMethodDiscrete", pkg: "", typ: $funcType([$Float64], [ptrType$115], false)}, {prop: "InterpolantFactoryMethodLinear", name: "InterpolantFactoryMethodLinear", pkg: "", typ: $funcType([$Float64], [ptrType$115], false)}, {prop: "InterpolantFactoryMethodSmooth", name: "InterpolantFactoryMethodSmooth", pkg: "", typ: $funcType([$Float64], [ptrType$115], false)}, {prop: "SetInterpolation", name: "SetInterpolation", pkg: "", typ: $funcType([$Float64], [ptrType$115], false)}, {prop: "GetInterpolation", name: "GetInterpolation", pkg: "", typ: $funcType([], [ptrType$115], false)}, {prop: "GetValueSize", name: "GetValueSize", pkg: "", typ: $funcType([], [ptrType$115], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Float64], [ptrType$115], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([$Float64], [ptrType$115], false)}, {prop: "Trim", name: "Trim", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$115], false)}, {prop: "Validate", name: "Validate", pkg: "", typ: $funcType([], [ptrType$115], false)}, {prop: "Optimize", name: "Optimize", pkg: "", typ: $funcType([], [ptrType$115], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$Float64], [ptrType$115], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([$Float64], [ptrType$115], false)}, {prop: "_getTrackTypeForValueTypeName", name: "_getTrackTypeForValueTypeName", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64], [ptrType$115], false)}];
	ptrType$116.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$117.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$118.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64], [ptrType$118], false)}, {prop: "Enable", name: "Enable", pkg: "", typ: $funcType([$Float64], [ptrType$118], false)}, {prop: "Toggle", name: "Toggle", pkg: "", typ: $funcType([$Float64], [ptrType$118], false)}, {prop: "Disable", name: "Disable", pkg: "", typ: $funcType([$Float64], [ptrType$118], false)}, {prop: "Test", name: "Test", pkg: "", typ: $funcType([$Float64], [ptrType$118], false)}];
	ptrType$119.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$10, $Float64, $Float64, $Int, $Int, $Int], [ptrType$119], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$119], [ptrType$119], false)}];
	ptrType$120.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$28.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$28], [ptrType$28], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([$Float64], [ptrType$28], false)}];
	ptrType$121.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$121], [ptrType$121], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$121], false)}, {prop: "Camera", name: "Camera", pkg: "", typ: $funcType([], [ptrType$11], false)}, {prop: "MapSize", name: "MapSize", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "SetMapSize", name: "SetMapSize", pkg: "", typ: $funcType([ptrType$3], [ptrType$121], false)}, {prop: "Matrix", name: "Matrix", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "SetMatrix", name: "SetMatrix", pkg: "", typ: $funcType([ptrType$8], [ptrType$121], false)}, {prop: "Bias", name: "Bias", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetBias", name: "SetBias", pkg: "", typ: $funcType([$Float64], [ptrType$121], false)}, {prop: "Radius", name: "Radius", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetRadius", name: "SetRadius", pkg: "", typ: $funcType([$Float64], [ptrType$121], false)}];
	ptrType$55.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$122.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$122], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$122], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$122], [ptrType$122], false)}, {prop: "Center", name: "Center", pkg: "", typ: $funcType([$Float64], [ptrType$122], false)}, {prop: "Delta", name: "Delta", pkg: "", typ: $funcType([$Float64], [ptrType$122], false)}, {prop: "DistanceSq", name: "DistanceSq", pkg: "", typ: $funcType([], [ptrType$122], false)}, {prop: "Distance", name: "Distance", pkg: "", typ: $funcType([], [ptrType$122], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$122], false)}, {prop: "ClosestPointToPointParameter", name: "ClosestPointToPointParameter", pkg: "", typ: $funcType([], [ptrType$122], false)}, {prop: "ClosestPointToPoint", name: "ClosestPointToPoint", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$122], false)}, {prop: "ApplyMatrix4", name: "ApplyMatrix4", pkg: "", typ: $funcType([$Float64], [ptrType$122], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([$Float64], [ptrType$122], false)}];
	ptrType$123.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$123], [ptrType$123], false)}];
	ptrType$124.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetPoint", name: "GetPoint", pkg: "", typ: $funcType([$Float64], [ptrType$124], false)}, {prop: "GetPointAt", name: "GetPointAt", pkg: "", typ: $funcType([$Float64], [ptrType$124], false)}, {prop: "GetTangent", name: "GetTangent", pkg: "", typ: $funcType([$Float64], [ptrType$124], false)}];
	ptrType$125.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$125], [ptrType$125], false)}];
	ptrType$42.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$126.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Interpolate", name: "Interpolate", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$126], false)}];
	ptrType$127.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "ExtractURLBase", name: "ExtractURLBase", pkg: "", typ: $funcType([$Float64], [ptrType$127], false)}, {prop: "InitMaterials", name: "InitMaterials", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$127], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$127], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$Float64], [ptrType$127], false)}];
	ptrType$128.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$129.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [ptrType$129], false)}, {prop: "AddLevel", name: "AddLevel", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$129], false)}, {prop: "GetObjectForDistance", name: "GetObjectForDistance", pkg: "", typ: $funcType([$Float64], [ptrType$129], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$129], [ptrType$129], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([$Float64], [ptrType$129], false)}];
	ptrType$19.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64], [ptrType$19], false)}, {prop: "SetMin", name: "SetMin", pkg: "", typ: $funcType([$Float64], [ptrType$19], false)}, {prop: "SetMax", name: "SetMax", pkg: "", typ: $funcType([$Float64], [ptrType$19], false)}, {prop: "ChangeNumberOfColors", name: "ChangeNumberOfColors", pkg: "", typ: $funcType([$Int], [ptrType$19], false)}, {prop: "ChangeColorMap", name: "ChangeColorMap", pkg: "", typ: $funcType([$String], [ptrType$19], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$19], [ptrType$19], false)}, {prop: "GetColor", name: "GetColor", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}, {prop: "AddColorMap", name: "AddColorMap", pkg: "", typ: $funcType([$String, ptrType$10], [ptrType$19], false)}, {prop: "SetLegendOn", name: "SetLegendOn", pkg: "", typ: $funcType([LUTLegendOpts], [ptrType$47], false)}, {prop: "SetLegendOff", name: "SetLegendOff", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetLegendLayout", name: "SetLegendLayout", pkg: "", typ: $funcType([$Bool], [$Bool], false)}, {prop: "SetLegendPosition", name: "SetLegendPosition", pkg: "", typ: $funcType([ptrType$6], [ptrType$10], false)}, {prop: "SetLegendLabels", name: "SetLegendLabels", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [ptrType$10], false)}];
	ptrType$9.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "NeedsUpdate", name: "NeedsUpdate", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetNeedsUpdate", name: "SetNeedsUpdate", pkg: "", typ: $funcType([$Float64], [ptrType$9], false)}, {prop: "SetValues", name: "SetValues", pkg: "", typ: $funcType([$Float64], [ptrType$9], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([$Float64], [ptrType$9], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$9], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$9], [ptrType$9], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([], [ptrType$9], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [ptrType$9], false)}, {prop: "SetShading", name: "SetShading", pkg: "", typ: $funcType([$Int], [ptrType$9], false)}];
	ptrType$130.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$130], false)}, {prop: "SetTextures", name: "SetTextures", pkg: "", typ: $funcType([$Float64], [ptrType$130], false)}, {prop: "GetTexture", name: "GetTexture", pkg: "", typ: $funcType([$Float64], [ptrType$130], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$Float64], [ptrType$130], false)}];
	ptrType$131.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GenerateUUID", name: "GenerateUUID", pkg: "", typ: $funcType([], [ptrType$131], false)}, {prop: "Clamp", name: "Clamp", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$131], false)}, {prop: "EuclideanModulo", name: "EuclideanModulo", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$131], false)}, {prop: "MapLinear", name: "MapLinear", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$131], false)}, {prop: "Smoothstep", name: "Smoothstep", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$131], false)}, {prop: "Smootherstep", name: "Smootherstep", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$131], false)}, {prop: "Random16", name: "Random16", pkg: "", typ: $funcType([], [ptrType$131], false)}, {prop: "RandInt", name: "RandInt", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$131], false)}, {prop: "RandFloat", name: "RandFloat", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$131], false)}, {prop: "RandFloatSpread", name: "RandFloatSpread", pkg: "", typ: $funcType([$Float64], [ptrType$131], false)}, {prop: "DegToRad", name: "DegToRad", pkg: "", typ: $funcType([], [ptrType$131], false)}, {prop: "RadToDeg", name: "RadToDeg", pkg: "", typ: $funcType([], [ptrType$131], false)}, {prop: "IsPowerOfTwo", name: "IsPowerOfTwo", pkg: "", typ: $funcType([$Float64], [ptrType$131], false)}, {prop: "NearestPowerOfTwo", name: "NearestPowerOfTwo", pkg: "", typ: $funcType([$Float64], [ptrType$131], false)}, {prop: "NextPowerOfTwo", name: "NextPowerOfTwo", pkg: "", typ: $funcType([$Float64], [ptrType$131], false)}];
	ptrType$132.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$132], false)}, {prop: "Identity", name: "Identity", pkg: "", typ: $funcType([], [ptrType$132], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$132], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$132], [ptrType$132], false)}, {prop: "SetFromMatrix4", name: "SetFromMatrix4", pkg: "", typ: $funcType([ptrType$8], [ptrType$132], false)}, {prop: "ApplyToVector3Array", name: "ApplyToVector3Array", pkg: "", typ: $funcType([], [ptrType$132], false)}, {prop: "ApplyToBuffer", name: "ApplyToBuffer", pkg: "", typ: $funcType([], [ptrType$132], false)}, {prop: "MultiplyScalar", name: "MultiplyScalar", pkg: "", typ: $funcType([$Float64], [ptrType$132], false)}, {prop: "Determinant", name: "Determinant", pkg: "", typ: $funcType([], [ptrType$132], false)}, {prop: "GetInverse", name: "GetInverse", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$132], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [ptrType$132], false)}, {prop: "FlattenToArrayOffset", name: "FlattenToArrayOffset", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$132], false)}, {prop: "GetNormalMatrix", name: "GetNormalMatrix", pkg: "", typ: $funcType([$Float64], [ptrType$132], false)}, {prop: "TransposeIntoArray", name: "TransposeIntoArray", pkg: "", typ: $funcType([$Float64], [ptrType$132], false)}, {prop: "FromArray", name: "FromArray", pkg: "", typ: $funcType([$Float64], [ptrType$132], false)}, {prop: "ToArray", name: "ToArray", pkg: "", typ: $funcType([], [ptrType$132], false)}];
	ptrType$8.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$8], false)}, {prop: "Identity", name: "Identity", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$8], [ptrType$8], false)}, {prop: "CopyPosition", name: "CopyPosition", pkg: "", typ: $funcType([ptrType$8], [ptrType$8], false)}, {prop: "ExtractBasis", name: "ExtractBasis", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$8], false)}, {prop: "MakeBasis", name: "MakeBasis", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$8], false)}, {prop: "ExtractRotation", name: "ExtractRotation", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "MakeRotationFromEuler", name: "MakeRotationFromEuler", pkg: "", typ: $funcType([$Float64], [ptrType$8], false)}, {prop: "MakeRotationFromQuaternion", name: "MakeRotationFromQuaternion", pkg: "", typ: $funcType([$Float64], [ptrType$8], false)}, {prop: "LookAt", name: "LookAt", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([ptrType$8], [ptrType$8], false)}, {prop: "MultiplyMatrices", name: "MultiplyMatrices", pkg: "", typ: $funcType([ptrType$8, ptrType$8], [ptrType$8], false)}, {prop: "MultiplyToArray", name: "MultiplyToArray", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$8], false)}, {prop: "MultiplyScalar", name: "MultiplyScalar", pkg: "", typ: $funcType([$Float64], [ptrType$8], false)}, {prop: "ApplyToVector3Array", name: "ApplyToVector3Array", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "ApplyToBuffer", name: "ApplyToBuffer", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "Determinant", name: "Determinant", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "FlattenToArrayOffset", name: "FlattenToArrayOffset", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$8], false)}, {prop: "GetPosition", name: "GetPosition", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "SetPosition", name: "SetPosition", pkg: "", typ: $funcType([$Float64], [ptrType$8], false)}, {prop: "GetInverse", name: "GetInverse", pkg: "", typ: $funcType([ptrType$8, $Bool], [ptrType$8], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([$Float64], [ptrType$8], false)}, {prop: "GetMaxScaleOnAxis", name: "GetMaxScaleOnAxis", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "MakeTranslation", name: "MakeTranslation", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$8], false)}, {prop: "MakeRotationX", name: "MakeRotationX", pkg: "", typ: $funcType([$Float64], [ptrType$8], false)}, {prop: "MakeRotationY", name: "MakeRotationY", pkg: "", typ: $funcType([$Float64], [ptrType$8], false)}, {prop: "MakeRotationZ", name: "MakeRotationZ", pkg: "", typ: $funcType([$Float64], [ptrType$8], false)}, {prop: "MakeRotationAxis", name: "MakeRotationAxis", pkg: "", typ: $funcType([ptrType$6, $Float64], [ptrType$8], false)}, {prop: "MakeScale", name: "MakeScale", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$8], false)}, {prop: "Compose", name: "Compose", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$8], false)}, {prop: "Decompose", name: "Decompose", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "MakeFrustum", name: "MakeFrustum", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$8], false)}, {prop: "MakePerspective", name: "MakePerspective", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$8], false)}, {prop: "MakeOrthographic", name: "MakeOrthographic", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$8], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([$Float64], [ptrType$8], false)}, {prop: "FromArray", name: "FromArray", pkg: "", typ: $funcType([$Float64], [ptrType$8], false)}, {prop: "ToArray", name: "ToArray", pkg: "", typ: $funcType([], [ptrType$8], false)}];
	ptrType$47.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "SetDrawMode", name: "SetDrawMode", pkg: "", typ: $funcType([$Bool], [ptrType$47], false)}, {prop: "GetMorphTargetIndexByName", name: "GetMorphTargetIndexByName", pkg: "", typ: $funcType([$String], [ptrType$47], false)}];
	ptrType$133.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$133], [ptrType$133], false)}];
	ptrType$134.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$134], [ptrType$134], false)}];
	ptrType$135.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$135], [ptrType$135], false)}];
	ptrType$136.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$136], [ptrType$136], false)}];
	ptrType$137.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$137], [ptrType$137], false)}];
	ptrType$138.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$138], [ptrType$138], false)}];
	ptrType$139.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "CreateAnimation", name: "CreateAnimation", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$139], false)}, {prop: "AutoCreateAnimations", name: "AutoCreateAnimations", pkg: "", typ: $funcType([$Float64], [ptrType$139], false)}, {prop: "SetAnimationDirectionForward", name: "SetAnimationDirectionForward", pkg: "", typ: $funcType([$Float64], [ptrType$139], false)}, {prop: "SetAnimationDirectionBackward", name: "SetAnimationDirectionBackward", pkg: "", typ: $funcType([$Float64], [ptrType$139], false)}, {prop: "SetAnimationFPS", name: "SetAnimationFPS", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$139], false)}, {prop: "SetAnimationDuration", name: "SetAnimationDuration", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$139], false)}, {prop: "SetAnimationWeight", name: "SetAnimationWeight", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$139], false)}, {prop: "SetAnimationTime", name: "SetAnimationTime", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$139], false)}, {prop: "GetAnimationTime", name: "GetAnimationTime", pkg: "", typ: $funcType([$Float64], [ptrType$139], false)}, {prop: "GetAnimationDuration", name: "GetAnimationDuration", pkg: "", typ: $funcType([$Float64], [ptrType$139], false)}, {prop: "PlayAnimation", name: "PlayAnimation", pkg: "", typ: $funcType([$Float64], [ptrType$139], false)}, {prop: "StopAnimation", name: "StopAnimation", pkg: "", typ: $funcType([$Float64], [ptrType$139], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([$Float64], [ptrType$139], false)}];
	ptrType$140.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([$Float64], [ptrType$140], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$140], false)}];
	ptrType$141.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$20.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "ApplyMatrix", name: "ApplyMatrix", pkg: "", typ: $funcType([ptrType$8], [ptrType$20], false)}, {prop: "SetRotationFromAxisAngle", name: "SetRotationFromAxisAngle", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$20], false)}, {prop: "SetRotationFromEuler", name: "SetRotationFromEuler", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "SetRotationFromMatrix", name: "SetRotationFromMatrix", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "SetRotationFromQuaternion", name: "SetRotationFromQuaternion", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "RotateOnAxis", name: "RotateOnAxis", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "RotateX", name: "RotateX", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "RotateY", name: "RotateY", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "RotateZ", name: "RotateZ", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "TranslateOnAxis", name: "TranslateOnAxis", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "TranslateX", name: "TranslateX", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "TranslateY", name: "TranslateY", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "TranslateZ", name: "TranslateZ", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "LocalToWorld", name: "LocalToWorld", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "WorldToLocal", name: "WorldToLocal", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "LookAt", name: "LookAt", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([$emptyInterface], [ptrType$20], false)}, {prop: "Remove", name: "Remove", pkg: "", typ: $funcType([$emptyInterface], [ptrType$20], false)}, {prop: "GetObjectByID", name: "GetObjectByID", pkg: "", typ: $funcType([$Int], [ptrType$20], false)}, {prop: "GetObjectByName", name: "GetObjectByName", pkg: "", typ: $funcType([$String], [ptrType$20], false)}, {prop: "GetObjectByProperty", name: "GetObjectByProperty", pkg: "", typ: $funcType([$String, $Float64], [ptrType$20], false)}, {prop: "GetWorldPosition", name: "GetWorldPosition", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "GetWorldQuaternion", name: "GetWorldQuaternion", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "GetWorldRotation", name: "GetWorldRotation", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "GetWorldScale", name: "GetWorldScale", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "GetWorldDirection", name: "GetWorldDirection", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "Raycast", name: "Raycast", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "Traverse", name: "Traverse", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "TraverseVisible", name: "TraverseVisible", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "TraverseAncestors", name: "TraverseAncestors", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "UpdateMatrix", name: "UpdateMatrix", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "UpdateMatrixWorld", name: "UpdateMatrixWorld", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([$Float64], [ptrType$20], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$20, $Bool], [ptrType$20], false)}, {prop: "ID", name: "ID", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "UUID", name: "UUID", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetName", name: "SetName", pkg: "", typ: $funcType([$String], [ptrType$20], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "Children", name: "Children", pkg: "", typ: $funcType([], [sliceType$17], false)}, {prop: "Up", name: "Up", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "Rotation", name: "Rotation", pkg: "", typ: $funcType([], [ptrType$91], false)}, {prop: "Quaternion", name: "Quaternion", pkg: "", typ: $funcType([], [ptrType$142], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "ModelViewMatrix", name: "ModelViewMatrix", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "NormalMatrix", name: "NormalMatrix", pkg: "", typ: $funcType([], [ptrType$132], false)}, {prop: "Matrix", name: "Matrix", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "SetMatrix", name: "SetMatrix", pkg: "", typ: $funcType([ptrType$8], [ptrType$20], false)}, {prop: "MatrixWorld", name: "MatrixWorld", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "SetMatrixWorld", name: "SetMatrixWorld", pkg: "", typ: $funcType([ptrType$8], [ptrType$20], false)}, {prop: "RotationAutoUpdate", name: "RotationAutoUpdate", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetRotationAutoUpdate", name: "SetRotationAutoUpdate", pkg: "", typ: $funcType([$Bool], [ptrType$20], false)}, {prop: "MatrixWorldNeedsUpdate", name: "MatrixWorldNeedsUpdate", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetMatrixWorldNeedsUpdate", name: "SetMatrixWorldNeedsUpdate", pkg: "", typ: $funcType([$Bool], [ptrType$20], false)}, {prop: "Layers", name: "Layers", pkg: "", typ: $funcType([], [ptrType$118], false)}, {prop: "SetLayers", name: "SetLayers", pkg: "", typ: $funcType([ptrType$118], [ptrType$20], false)}, {prop: "Visible", name: "Visible", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetVisible", name: "SetVisible", pkg: "", typ: $funcType([$Bool], [ptrType$20], false)}, {prop: "CastShadow", name: "CastShadow", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCastShadow", name: "SetCastShadow", pkg: "", typ: $funcType([$Bool], [ptrType$20], false)}, {prop: "ReceiveShadow", name: "ReceiveShadow", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetReceiveShadow", name: "SetReceiveShadow", pkg: "", typ: $funcType([$Bool], [ptrType$20], false)}, {prop: "FrustumCulled", name: "FrustumCulled", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetFrustumCulled", name: "SetFrustumCulled", pkg: "", typ: $funcType([$Bool], [ptrType$20], false)}, {prop: "MatrixAutoUpdate", name: "MatrixAutoUpdate", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetMatrixAutoUpdate", name: "SetMatrixAutoUpdate", pkg: "", typ: $funcType([$Bool], [ptrType$20], false)}, {prop: "RenderOrder", name: "RenderOrder", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetRenderOrder", name: "SetRenderOrder", pkg: "", typ: $funcType([$Int], [ptrType$20], false)}, {prop: "UserData", name: "UserData", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "SetUserData", name: "SetUserData", pkg: "", typ: $funcType([ptrType$10], [ptrType$20], false)}, {prop: "Shadow", name: "Shadow", pkg: "", typ: $funcType([], [ptrType$121], false)}];
	ptrType$143.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$143], false)}, {prop: "SetTexturePath", name: "SetTexturePath", pkg: "", typ: $funcType([$Float64], [ptrType$143], false)}, {prop: "SetCrossOrigin", name: "SetCrossOrigin", pkg: "", typ: $funcType([$Float64], [ptrType$143], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$143], false)}, {prop: "ParseGeometries", name: "ParseGeometries", pkg: "", typ: $funcType([$Float64], [ptrType$143], false)}, {prop: "ParseMaterials", name: "ParseMaterials", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$143], false)}, {prop: "ParseAnimations", name: "ParseAnimations", pkg: "", typ: $funcType([$Float64], [ptrType$143], false)}, {prop: "ParseImages", name: "ParseImages", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$143], false)}, {prop: "ParseTextures", name: "ParseTextures", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$143], false)}, {prop: "ParseObject", name: "ParseObject", pkg: "", typ: $funcType([], [ptrType$143], false)}];
	ptrType$144.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$145.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$145], [ptrType$145], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([$Float64], [ptrType$145], false)}, {prop: "Zoom", name: "Zoom", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Left", name: "Left", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Right", name: "Right", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Top", name: "Top", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Bottom", name: "Bottom", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Near", name: "Near", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Far", name: "Far", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$146.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$147.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "FromPoints", name: "FromPoints", pkg: "", typ: $funcType([ptrType$10], [ptrType$147], false)}, {prop: "MoveTo", name: "MoveTo", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$147], false)}, {prop: "LineTo", name: "LineTo", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$147], false)}, {prop: "QuadraticCurveTo", name: "QuadraticCurveTo", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$147], false)}, {prop: "BezierCurveTo", name: "BezierCurveTo", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$147], false)}, {prop: "SplineThru", name: "SplineThru", pkg: "", typ: $funcType([$Float64], [ptrType$147], false)}, {prop: "Arc", name: "Arc", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$147], false)}, {prop: "Absarc", name: "Absarc", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$147], false)}, {prop: "Ellipse", name: "Ellipse", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$147], false)}, {prop: "Absellipse", name: "Absellipse", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$147], false)}, {prop: "GetSpacedPoints", name: "GetSpacedPoints", pkg: "", typ: $funcType([$Float64], [ptrType$147], false)}, {prop: "GetPoints", name: "GetPoints", pkg: "", typ: $funcType([$Float64], [ptrType$147], false)}, {prop: "ToShapes", name: "ToShapes", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$147], false)}];
	ptrType$148.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "SetLens", name: "SetLens", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$148], false)}, {prop: "SetViewOffset", name: "SetViewOffset", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$148], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$148], [ptrType$148], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([$Float64], [ptrType$148], false)}, {prop: "Zoom", name: "Zoom", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "FocalLength", name: "FocalLength", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "FOV", name: "FOV", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Aspect", name: "Aspect", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetAspect", name: "SetAspect", pkg: "", typ: $funcType([$Float64], [ptrType$148], false)}, {prop: "Near", name: "Near", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Far", name: "Far", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$149.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$149], false)}, {prop: "SetComponents", name: "SetComponents", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$149], false)}, {prop: "SetFromNormalAndCoplanarPoint", name: "SetFromNormalAndCoplanarPoint", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$149], false)}, {prop: "SetFromCoplanarPoints", name: "SetFromCoplanarPoints", pkg: "", typ: $funcType([], [ptrType$149], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$149], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$149], [ptrType$149], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [ptrType$149], false)}, {prop: "Negate", name: "Negate", pkg: "", typ: $funcType([], [ptrType$149], false)}, {prop: "DistanceToPoint", name: "DistanceToPoint", pkg: "", typ: $funcType([$Float64], [ptrType$149], false)}, {prop: "DistanceToSphere", name: "DistanceToSphere", pkg: "", typ: $funcType([$Float64], [ptrType$149], false)}, {prop: "ProjectPoint", name: "ProjectPoint", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$149], false)}, {prop: "OrthoPoint", name: "OrthoPoint", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$149], false)}, {prop: "IntersectLine", name: "IntersectLine", pkg: "", typ: $funcType([], [ptrType$149], false)}, {prop: "IntersectsLine", name: "IntersectsLine", pkg: "", typ: $funcType([$Float64], [ptrType$149], false)}, {prop: "IntersectsBox", name: "IntersectsBox", pkg: "", typ: $funcType([$Float64], [ptrType$149], false)}, {prop: "IntersectsSphere", name: "IntersectsSphere", pkg: "", typ: $funcType([$Float64], [ptrType$149], false)}, {prop: "CoplanarPoint", name: "CoplanarPoint", pkg: "", typ: $funcType([$Float64], [ptrType$149], false)}, {prop: "ApplyMatrix4", name: "ApplyMatrix4", pkg: "", typ: $funcType([], [ptrType$149], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Float64], [ptrType$149], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([$Float64], [ptrType$149], false)}];
	ptrType$150.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$151.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$152.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [ptrType$152], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64], [ptrType$152], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$152], [ptrType$152], false)}];
	ptrType$153.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$154.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$155.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$155], [ptrType$155], false)}];
	ptrType$87.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$156.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "SetRefDistance", name: "SetRefDistance", pkg: "", typ: $funcType([$Float64], [ptrType$156], false)}, {prop: "SetRolloffFactor", name: "SetRolloffFactor", pkg: "", typ: $funcType([$Float64], [ptrType$156], false)}, {prop: "SetDistanceModel", name: "SetDistanceModel", pkg: "", typ: $funcType([$Float64], [ptrType$156], false)}, {prop: "SetMaxDistance", name: "SetMaxDistance", pkg: "", typ: $funcType([$Float64], [ptrType$156], false)}];
	ptrType$157.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Bind", name: "Bind", pkg: "", typ: $funcType([], [ptrType$157], false)}, {prop: "Unbind", name: "Unbind", pkg: "", typ: $funcType([], [ptrType$157], false)}, {prop: "GetValue", name: "GetValue", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$157], false)}, {prop: "SetValue", name: "SetValue", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$157], false)}];
	ptrType$158.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Accumulate", name: "Accumulate", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$158], false)}, {prop: "Apply", name: "Apply", pkg: "", typ: $funcType([$Float64], [ptrType$158], false)}, {prop: "SaveOriginalState", name: "SaveOriginalState", pkg: "", typ: $funcType([], [ptrType$158], false)}, {prop: "RestoreOriginalState", name: "RestoreOriginalState", pkg: "", typ: $funcType([], [ptrType$158], false)}, {prop: "_select", name: "_select", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$158], false)}, {prop: "_slerp", name: "_slerp", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$158], false)}, {prop: "_lerp", name: "_lerp", pkg: "github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$158], false)}];
	ptrType$159.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetPoint", name: "GetPoint", pkg: "", typ: $funcType([$Float64], [ptrType$159], false)}, {prop: "GetTangent", name: "GetTangent", pkg: "", typ: $funcType([$Float64], [ptrType$159], false)}];
	ptrType$142.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "X", name: "X", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Y", name: "Y", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Z", name: "Z", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "W", name: "W", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetX", name: "SetX", pkg: "", typ: $funcType([$Float64], [ptrType$142], false)}, {prop: "SetY", name: "SetY", pkg: "", typ: $funcType([$Float64], [ptrType$142], false)}, {prop: "SetZ", name: "SetZ", pkg: "", typ: $funcType([$Float64], [ptrType$142], false)}, {prop: "SetW", name: "SetW", pkg: "", typ: $funcType([$Float64], [ptrType$142], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$142], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$142], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$142], [ptrType$142], false)}, {prop: "SetFromEuler", name: "SetFromEuler", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$142], false)}, {prop: "SetFromAxisAngle", name: "SetFromAxisAngle", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$142], false)}, {prop: "SetFromRotationMatrix", name: "SetFromRotationMatrix", pkg: "", typ: $funcType([ptrType$132], [ptrType$142], false)}, {prop: "SetFromUnitVectors", name: "SetFromUnitVectors", pkg: "", typ: $funcType([], [ptrType$142], false)}, {prop: "Inverse", name: "Inverse", pkg: "", typ: $funcType([], [ptrType$142], false)}, {prop: "Conjugate", name: "Conjugate", pkg: "", typ: $funcType([], [ptrType$142], false)}, {prop: "Dot", name: "Dot", pkg: "", typ: $funcType([ptrType$142], [ptrType$142], false)}, {prop: "LengthSq", name: "LengthSq", pkg: "", typ: $funcType([], [ptrType$142], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [ptrType$142], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [ptrType$142], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([ptrType$142], [ptrType$142], false)}, {prop: "MultiplyQuaternions", name: "MultiplyQuaternions", pkg: "", typ: $funcType([ptrType$142, ptrType$142], [ptrType$142], false)}, {prop: "Slerp", name: "Slerp", pkg: "", typ: $funcType([ptrType$142, $Float64], [ptrType$142], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([ptrType$142], [$Bool], false)}, {prop: "FromArray", name: "FromArray", pkg: "", typ: $funcType([sliceType$7, $Int], [ptrType$142], false)}, {prop: "ToArray", name: "ToArray", pkg: "", typ: $funcType([sliceType$7, $Int], [ptrType$142], false)}, {prop: "OnChange", name: "OnChange", pkg: "", typ: $funcType([$Float64], [ptrType$142], false)}, {prop: "OnChangeCallback", name: "OnChangeCallback", pkg: "", typ: $funcType([], [ptrType$142], false)}, {prop: "SlerpFlat", name: "SlerpFlat", pkg: "", typ: $funcType([ptrType$142, $Int, ptrType$142, $Int, ptrType$142, $Int, $Float64], [ptrType$142], false)}];
	ptrType$160.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "InterpolantFactoryMethodLinear", name: "InterpolantFactoryMethodLinear", pkg: "", typ: $funcType([$Float64], [ptrType$160], false)}];
	ptrType$161.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Interpolate", name: "Interpolate", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$161], false)}];
	ptrType$162.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$163.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$163], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$163], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$163], [ptrType$163], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$163], false)}, {prop: "LookAt", name: "LookAt", pkg: "", typ: $funcType([$Float64], [ptrType$163], false)}, {prop: "Recast", name: "Recast", pkg: "", typ: $funcType([], [ptrType$163], false)}, {prop: "ClosestPointToPoint", name: "ClosestPointToPoint", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$163], false)}, {prop: "DistanceToPoint", name: "DistanceToPoint", pkg: "", typ: $funcType([$Float64], [ptrType$163], false)}, {prop: "DistanceSqToPoint", name: "DistanceSqToPoint", pkg: "", typ: $funcType([], [ptrType$163], false)}, {prop: "DistanceSqToSegment", name: "DistanceSqToSegment", pkg: "", typ: $funcType([], [ptrType$163], false)}, {prop: "IntersectSphere", name: "IntersectSphere", pkg: "", typ: $funcType([], [ptrType$163], false)}, {prop: "IntersectsSphere", name: "IntersectsSphere", pkg: "", typ: $funcType([$Float64], [ptrType$163], false)}, {prop: "DistanceToPlane", name: "DistanceToPlane", pkg: "", typ: $funcType([$Float64], [ptrType$163], false)}, {prop: "IntersectPlane", name: "IntersectPlane", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$163], false)}, {prop: "IntersectsPlane", name: "IntersectsPlane", pkg: "", typ: $funcType([$Float64], [ptrType$163], false)}, {prop: "IntersectBox", name: "IntersectBox", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$163], false)}, {prop: "IntersectTriangle", name: "IntersectTriangle", pkg: "", typ: $funcType([], [ptrType$163], false)}, {prop: "ApplyMatrix4", name: "ApplyMatrix4", pkg: "", typ: $funcType([$Float64], [ptrType$163], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([$Float64], [ptrType$163], false)}];
	ptrType$164.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [ptrType$164], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$164], false)}, {prop: "SetFromCamera", name: "SetFromCamera", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$164], false)}, {prop: "IntersectObject", name: "IntersectObject", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$164], false)}, {prop: "IntersectObjects", name: "IntersectObjects", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$164], false)}];
	ptrType$165.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$166.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$167.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$167, $Bool], [ptrType$167], false)}];
	ptrType$168.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "CreateMultiMaterialObject", name: "CreateMultiMaterialObject", pkg: "", typ: $funcType([JSObject, sliceType$18], [ptrType$102], false)}, {prop: "Detach", name: "Detach", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$168], false)}, {prop: "Attach", name: "Attach", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$168], false)}];
	ptrType$169.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$170.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$171.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$171], [ptrType$171], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([$Float64], [ptrType$171], false)}];
	ptrType$172.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Extrude", name: "Extrude", pkg: "", typ: $funcType([$Float64], [ptrType$172], false)}, {prop: "MakeGeometry", name: "MakeGeometry", pkg: "", typ: $funcType([$Float64], [ptrType$172], false)}, {prop: "GetPointsHoles", name: "GetPointsHoles", pkg: "", typ: $funcType([$Float64], [ptrType$172], false)}, {prop: "ExtractAllPoints", name: "ExtractAllPoints", pkg: "", typ: $funcType([$Float64], [ptrType$172], false)}, {prop: "ExtractPoints", name: "ExtractPoints", pkg: "", typ: $funcType([$Float64], [ptrType$172], false)}];
	ptrType$173.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "AddShapeList", name: "AddShapeList", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$173], false)}, {prop: "AddShape", name: "AddShape", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$173], false)}];
	ptrType$174.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Area", name: "Area", pkg: "", typ: $funcType([$Float64], [ptrType$174], false)}, {prop: "TriangulateShape", name: "TriangulateShape", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$174], false)}, {prop: "IsClockWise", name: "IsClockWise", pkg: "", typ: $funcType([$Float64], [ptrType$174], false)}];
	ptrType$175.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$176.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetBoneList", name: "GetBoneList", pkg: "", typ: $funcType([$Float64], [ptrType$176], false)}];
	ptrType$177.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Bind", name: "Bind", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$177], false)}, {prop: "UpdateMatrixWorld", name: "UpdateMatrixWorld", pkg: "", typ: $funcType([$Float64], [ptrType$177], false)}];
	ptrType$178.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$178], false)}, {prop: "SetFromPoints", name: "SetFromPoints", pkg: "", typ: $funcType([], [ptrType$178], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$178], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$178], [ptrType$178], false)}, {prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [ptrType$178], false)}, {prop: "ContainsPoint", name: "ContainsPoint", pkg: "", typ: $funcType([$Float64], [ptrType$178], false)}, {prop: "DistanceToPoint", name: "DistanceToPoint", pkg: "", typ: $funcType([$Float64], [ptrType$178], false)}, {prop: "IntersectsSphere", name: "IntersectsSphere", pkg: "", typ: $funcType([$Float64], [ptrType$178], false)}, {prop: "IntersectsBox", name: "IntersectsBox", pkg: "", typ: $funcType([$Float64], [ptrType$178], false)}, {prop: "IntersectsPlane", name: "IntersectsPlane", pkg: "", typ: $funcType([$Float64], [ptrType$178], false)}, {prop: "ClampPoint", name: "ClampPoint", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$178], false)}, {prop: "GetBoundingBox", name: "GetBoundingBox", pkg: "", typ: $funcType([$Float64], [ptrType$178], false)}, {prop: "ApplyMatrix4", name: "ApplyMatrix4", pkg: "", typ: $funcType([$Float64], [ptrType$178], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Float64], [ptrType$178], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([$Float64], [ptrType$178], false)}];
	ptrType$179.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$180.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$181.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$181], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$181], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$181], [ptrType$181], false)}, {prop: "MakeSafe", name: "MakeSafe", pkg: "", typ: $funcType([], [ptrType$181], false)}, {prop: "SetFromVector3", name: "SetFromVector3", pkg: "", typ: $funcType([$Float64], [ptrType$181], false)}];
	ptrType$182.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$183.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetPoint", name: "GetPoint", pkg: "", typ: $funcType([$Float64], [ptrType$183], false)}];
	ptrType$184.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [ptrType$184], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64], [ptrType$184], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$184], [ptrType$184], false)}];
	ptrType$185.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$186.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$187.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$187], [ptrType$187], false)}];
	ptrType$188.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$189.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Aspect", name: "Aspect", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "CameraL", name: "CameraL", pkg: "", typ: $funcType([], [ptrType$148], false)}, {prop: "CameraR", name: "CameraR", pkg: "", typ: $funcType([], [ptrType$148], false)}];
	ptrType$190.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$191.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$192.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$72.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "SetNeedsUpdate", name: "SetNeedsUpdate", pkg: "", typ: $funcType([$Bool], [ptrType$72], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$72], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$72], [ptrType$72], false)}, {prop: "ToJSON", name: "ToJSON", pkg: "", typ: $funcType([$Float64], [ptrType$72], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [ptrType$72], false)}, {prop: "TransformUv", name: "TransformUv", pkg: "", typ: $funcType([$Float64], [ptrType$72], false)}, {prop: "SetWrapS", name: "SetWrapS", pkg: "", typ: $funcType([$Int], [ptrType$72], false)}, {prop: "SetWrapT", name: "SetWrapT", pkg: "", typ: $funcType([$Int], [ptrType$72], false)}, {prop: "SetAnisotropy", name: "SetAnisotropy", pkg: "", typ: $funcType([$Int], [ptrType$72], false)}];
	ptrType$193.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$String, TextureLoadFunc, $emptyInterface, $emptyInterface], [ptrType$72], false)}, {prop: "SetCrossOrigin", name: "SetCrossOrigin", pkg: "", typ: $funcType([$String], [ptrType$193], false)}, {prop: "SetPath", name: "SetPath", pkg: "", typ: $funcType([$Float64], [ptrType$193], false)}];
	ptrType$233.methods = [{prop: "AmbientLight", name: "AmbientLight", pkg: "", typ: $funcType([], [ptrType$29], false)}, {prop: "NewAmbientLight", name: "NewAmbientLight", pkg: "", typ: $funcType([$Int, $Float64], [ptrType$29], false)}, {prop: "AnimationClip", name: "AnimationClip", pkg: "", typ: $funcType([], [ptrType$30], false)}, {prop: "NewAnimationClip", name: "NewAnimationClip", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$30], false)}, {prop: "AnimationLoader", name: "AnimationLoader", pkg: "", typ: $funcType([], [ptrType$31], false)}, {prop: "NewAnimationLoader", name: "NewAnimationLoader", pkg: "", typ: $funcType([$Float64], [ptrType$31], false)}, {prop: "AnimationMixer", name: "AnimationMixer", pkg: "", typ: $funcType([], [ptrType$32], false)}, {prop: "NewAnimationMixer", name: "NewAnimationMixer", pkg: "", typ: $funcType([$Float64], [ptrType$32], false)}, {prop: "AnimationObjectGroup", name: "AnimationObjectGroup", pkg: "", typ: $funcType([], [ptrType$33], false)}, {prop: "NewAnimationObjectGroup", name: "NewAnimationObjectGroup", pkg: "", typ: $funcType([JSObject], [ptrType$33], false)}, {prop: "AnimationUtils", name: "AnimationUtils", pkg: "", typ: $funcType([], [ptrType$34], false)}, {prop: "NewAnimationUtils", name: "NewAnimationUtils", pkg: "", typ: $funcType([], [ptrType$34], false)}, {prop: "ArcCurve", name: "ArcCurve", pkg: "", typ: $funcType([], [ptrType$36], false)}, {prop: "NewArcCurve", name: "NewArcCurve", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$36], false)}, {prop: "ArrowHelper", name: "ArrowHelper", pkg: "", typ: $funcType([], [ptrType$37], false)}, {prop: "NewArrowHelper", name: "NewArrowHelper", pkg: "", typ: $funcType([ptrType$6, ptrType$6, ptrType], [ptrType$37], false)}, {prop: "Audio", name: "Audio", pkg: "", typ: $funcType([], [ptrType$38], false)}, {prop: "NewAudio", name: "NewAudio", pkg: "", typ: $funcType([$Float64], [ptrType$38], false)}, {prop: "AudioAnalyser", name: "AudioAnalyser", pkg: "", typ: $funcType([], [ptrType$39], false)}, {prop: "NewAudioAnalyser", name: "NewAudioAnalyser", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$39], false)}, {prop: "AudioBuffer", name: "AudioBuffer", pkg: "", typ: $funcType([], [ptrType$40], false)}, {prop: "NewAudioBuffer", name: "NewAudioBuffer", pkg: "", typ: $funcType([$Float64], [ptrType$40], false)}, {prop: "AudioListener", name: "AudioListener", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "NewAudioListener", name: "NewAudioListener", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "AxisHelper", name: "AxisHelper", pkg: "", typ: $funcType([], [ptrType$43], false)}, {prop: "NewAxisHelper", name: "NewAxisHelper", pkg: "", typ: $funcType([$Float64], [ptrType$43], false)}, {prop: "BinaryTextureLoader", name: "BinaryTextureLoader", pkg: "", typ: $funcType([], [ptrType$44], false)}, {prop: "NewBinaryTextureLoader", name: "NewBinaryTextureLoader", pkg: "", typ: $funcType([], [ptrType$44], false)}, {prop: "Bone", name: "Bone", pkg: "", typ: $funcType([], [ptrType$45], false)}, {prop: "NewBone", name: "NewBone", pkg: "", typ: $funcType([$Float64], [ptrType$45], false)}, {prop: "BooleanKeyframeTrack", name: "BooleanKeyframeTrack", pkg: "", typ: $funcType([], [ptrType$46], false)}, {prop: "NewBooleanKeyframeTrack", name: "NewBooleanKeyframeTrack", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$46], false)}, {prop: "BoundingBoxHelper", name: "BoundingBoxHelper", pkg: "", typ: $funcType([], [ptrType$48], false)}, {prop: "NewBoundingBoxHelper", name: "NewBoundingBoxHelper", pkg: "", typ: $funcType([JSObject, $Int], [ptrType$48], false)}, {prop: "Box2", name: "Box2", pkg: "", typ: $funcType([], [ptrType$49], false)}, {prop: "NewBox2", name: "NewBox2", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$49], false)}, {prop: "Box3", name: "Box3", pkg: "", typ: $funcType([], [ptrType$50], false)}, {prop: "NewBox3", name: "NewBox3", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$50], false)}, {prop: "BoxBufferGeometry", name: "BoxBufferGeometry", pkg: "", typ: $funcType([], [ptrType$52], false)}, {prop: "NewBoxBufferGeometry", name: "NewBoxBufferGeometry", pkg: "", typ: $funcType([$Int, $Int, $Int, ptrType$4], [ptrType$52], false)}, {prop: "BoxGeometry", name: "BoxGeometry", pkg: "", typ: $funcType([], [ptrType$54], false)}, {prop: "NewBoxGeometry", name: "NewBoxGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, ptrType$5], [ptrType$54], false)}, {prop: "BoxHelper", name: "BoxHelper", pkg: "", typ: $funcType([], [ptrType$56], false)}, {prop: "NewBoxHelper", name: "NewBoxHelper", pkg: "", typ: $funcType([JSObject], [ptrType$56], false)}, {prop: "BufferAttribute", name: "BufferAttribute", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "NewBufferAttribute", name: "NewBufferAttribute", pkg: "", typ: $funcType([$emptyInterface, $Int], [ptrType$57], false)}, {prop: "Int8Attribute", name: "Int8Attribute", pkg: "", typ: $funcType([], [ptrType$194], false)}, {prop: "NewInt8Attribute", name: "NewInt8Attribute", pkg: "", typ: $funcType([sliceType, $Int], [ptrType$194], false)}, {prop: "Uint8Attribute", name: "Uint8Attribute", pkg: "", typ: $funcType([], [ptrType$195], false)}, {prop: "NewUint8Attribute", name: "NewUint8Attribute", pkg: "", typ: $funcType([sliceType$1, $Int], [ptrType$195], false)}, {prop: "Uint8ClampedAttribute", name: "Uint8ClampedAttribute", pkg: "", typ: $funcType([], [ptrType$196], false)}, {prop: "NewUint8ClampedAttribute", name: "NewUint8ClampedAttribute", pkg: "", typ: $funcType([sliceType$1, $Int], [ptrType$196], false)}, {prop: "Int16Attribute", name: "Int16Attribute", pkg: "", typ: $funcType([], [ptrType$197], false)}, {prop: "NewInt16Attribute", name: "NewInt16Attribute", pkg: "", typ: $funcType([sliceType$2, $Int], [ptrType$197], false)}, {prop: "Uint16Attribute", name: "Uint16Attribute", pkg: "", typ: $funcType([], [ptrType$198], false)}, {prop: "NewUint16Attribute", name: "NewUint16Attribute", pkg: "", typ: $funcType([sliceType$3, $Int], [ptrType$198], false)}, {prop: "Int32Attribute", name: "Int32Attribute", pkg: "", typ: $funcType([], [ptrType$199], false)}, {prop: "NewInt32Attribute", name: "NewInt32Attribute", pkg: "", typ: $funcType([sliceType$4, $Int], [ptrType$199], false)}, {prop: "Uint32Attribute", name: "Uint32Attribute", pkg: "", typ: $funcType([], [ptrType$200], false)}, {prop: "NewUint32Attribute", name: "NewUint32Attribute", pkg: "", typ: $funcType([sliceType$5, $Int], [ptrType$200], false)}, {prop: "Float32Attribute", name: "Float32Attribute", pkg: "", typ: $funcType([], [ptrType$201], false)}, {prop: "NewFloat32Attribute", name: "NewFloat32Attribute", pkg: "", typ: $funcType([sliceType$6, $Int], [ptrType$201], false)}, {prop: "Float64Attribute", name: "Float64Attribute", pkg: "", typ: $funcType([], [ptrType$202], false)}, {prop: "NewFloat64Attribute", name: "NewFloat64Attribute", pkg: "", typ: $funcType([sliceType$7, $Int], [ptrType$202], false)}, {prop: "BufferGeometry", name: "BufferGeometry", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "NewBufferGeometry", name: "NewBufferGeometry", pkg: "", typ: $funcType([], [ptrType$51], false)}, {prop: "BufferGeometryLoader", name: "BufferGeometryLoader", pkg: "", typ: $funcType([], [ptrType$58], false)}, {prop: "NewBufferGeometryLoader", name: "NewBufferGeometryLoader", pkg: "", typ: $funcType([], [ptrType$58], false)}, {prop: "Cache", name: "Cache", pkg: "", typ: $funcType([], [ptrType$59], false)}, {prop: "NewCache", name: "NewCache", pkg: "", typ: $funcType([], [ptrType$59], false)}, {prop: "Camera", name: "Camera", pkg: "", typ: $funcType([], [ptrType$11], false)}, {prop: "NewCamera", name: "NewCamera", pkg: "", typ: $funcType([], [ptrType$11], false)}, {prop: "CameraHelper", name: "CameraHelper", pkg: "", typ: $funcType([], [ptrType$60], false)}, {prop: "NewCameraHelper", name: "NewCameraHelper", pkg: "", typ: $funcType([$Float64], [ptrType$60], false)}, {prop: "CanvasTexture", name: "CanvasTexture", pkg: "", typ: $funcType([], [ptrType$61], false)}, {prop: "NewCanvasTexture", name: "NewCanvasTexture", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$61], false)}, {prop: "CatmullRomCurve3", name: "CatmullRomCurve3", pkg: "", typ: $funcType([], [ptrType$63], false)}, {prop: "NewCatmullRomCurve3", name: "NewCatmullRomCurve3", pkg: "", typ: $funcType([sliceType$13], [ptrType$63], false)}, {prop: "CircleBufferGeometry", name: "CircleBufferGeometry", pkg: "", typ: $funcType([], [ptrType$64], false)}, {prop: "NewCircleBufferGeometry", name: "NewCircleBufferGeometry", pkg: "", typ: $funcType([$Float64, $Int, ptrType$12], [ptrType$64], false)}, {prop: "CircleGeometry", name: "CircleGeometry", pkg: "", typ: $funcType([], [ptrType$65], false)}, {prop: "NewCircleGeometry", name: "NewCircleGeometry", pkg: "", typ: $funcType([$Float64, $Int, ptrType$13], [ptrType$65], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [ptrType$66], false)}, {prop: "NewClock", name: "NewClock", pkg: "", typ: $funcType([$Bool], [ptrType$66], false)}, {prop: "Color", name: "Color", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "NewColor", name: "NewColor", pkg: "", typ: $funcType([sliceType$14], [ptrType$2], true)}, {prop: "ColorKeyframeTrack", name: "ColorKeyframeTrack", pkg: "", typ: $funcType([], [ptrType$67], false)}, {prop: "NewColorKeyframeTrack", name: "NewColorKeyframeTrack", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$67], false)}, {prop: "CompressedTexture", name: "CompressedTexture", pkg: "", typ: $funcType([], [ptrType$68], false)}, {prop: "NewCompressedTexture", name: "NewCompressedTexture", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$68], false)}, {prop: "CompressedTextureLoader", name: "CompressedTextureLoader", pkg: "", typ: $funcType([], [ptrType$69], false)}, {prop: "NewCompressedTextureLoader", name: "NewCompressedTextureLoader", pkg: "", typ: $funcType([$Float64], [ptrType$69], false)}, {prop: "CubeCamera", name: "CubeCamera", pkg: "", typ: $funcType([], [ptrType$71], false)}, {prop: "NewCubeCamera", name: "NewCubeCamera", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$71], false)}, {prop: "CubeTexture", name: "CubeTexture", pkg: "", typ: $funcType([], [ptrType$73], false)}, {prop: "NewCubeTexture", name: "NewCubeTexture", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$73], false)}, {prop: "CubeTextureLoader", name: "CubeTextureLoader", pkg: "", typ: $funcType([], [ptrType$74], false)}, {prop: "NewCubeTextureLoader", name: "NewCubeTextureLoader", pkg: "", typ: $funcType([], [ptrType$74], false)}, {prop: "CubicBezierCurve", name: "CubicBezierCurve", pkg: "", typ: $funcType([], [ptrType$75], false)}, {prop: "NewCubicBezierCurve", name: "NewCubicBezierCurve", pkg: "", typ: $funcType([ptrType$6, ptrType$6, ptrType$6, ptrType$6], [ptrType$75], false)}, {prop: "CubicBezierCurve3", name: "CubicBezierCurve3", pkg: "", typ: $funcType([], [ptrType$76], false)}, {prop: "NewCubicBezierCurve3", name: "NewCubicBezierCurve3", pkg: "", typ: $funcType([ptrType$6, ptrType$6, ptrType$6, ptrType$6], [ptrType$76], false)}, {prop: "CubicInterpolant", name: "CubicInterpolant", pkg: "", typ: $funcType([], [ptrType$77], false)}, {prop: "NewCubicInterpolant", name: "NewCubicInterpolant", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$77], false)}, {prop: "Curve", name: "Curve", pkg: "", typ: $funcType([], [ptrType$62], false)}, {prop: "NewCurve", name: "NewCurve", pkg: "", typ: $funcType([], [ptrType$62], false)}, {prop: "CurvePath", name: "CurvePath", pkg: "", typ: $funcType([], [ptrType$78], false)}, {prop: "NewCurvePath", name: "NewCurvePath", pkg: "", typ: $funcType([], [ptrType$78], false)}, {prop: "CurveUtils", name: "CurveUtils", pkg: "", typ: $funcType([], [ptrType$79], false)}, {prop: "NewCurveUtils", name: "NewCurveUtils", pkg: "", typ: $funcType([], [ptrType$79], false)}, {prop: "CylinderBufferGeometry", name: "CylinderBufferGeometry", pkg: "", typ: $funcType([], [ptrType$80], false)}, {prop: "NewCylinderBufferGeometry", name: "NewCylinderBufferGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Int, $Int, $Bool, ptrType$14], [ptrType$80], false)}, {prop: "CylinderGeometry", name: "CylinderGeometry", pkg: "", typ: $funcType([], [ptrType$81], false)}, {prop: "NewCylinderGeometry", name: "NewCylinderGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Int, $Int, $Bool, ptrType$15], [ptrType$81], false)}, {prop: "DataTexture", name: "DataTexture", pkg: "", typ: $funcType([], [ptrType$82], false)}, {prop: "NewDataTexture", name: "NewDataTexture", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$82], false)}, {prop: "DirectGeometry", name: "DirectGeometry", pkg: "", typ: $funcType([], [ptrType$83], false)}, {prop: "NewDirectGeometry", name: "NewDirectGeometry", pkg: "", typ: $funcType([], [ptrType$83], false)}, {prop: "DirectionalLight", name: "DirectionalLight", pkg: "", typ: $funcType([], [ptrType$84], false)}, {prop: "NewDirectionalLight", name: "NewDirectionalLight", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$84], false)}, {prop: "DirectionalLightHelper", name: "DirectionalLightHelper", pkg: "", typ: $funcType([], [ptrType$85], false)}, {prop: "NewDirectionalLightHelper", name: "NewDirectionalLightHelper", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$85], false)}, {prop: "DiscreteInterpolant", name: "DiscreteInterpolant", pkg: "", typ: $funcType([], [ptrType$86], false)}, {prop: "NewDiscreteInterpolant", name: "NewDiscreteInterpolant", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$86], false)}, {prop: "DodecahedronGeometry", name: "DodecahedronGeometry", pkg: "", typ: $funcType([], [ptrType$88], false)}, {prop: "NewDodecahedronGeometry", name: "NewDodecahedronGeometry", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$88], false)}, {prop: "EdgesGeometry", name: "EdgesGeometry", pkg: "", typ: $funcType([], [ptrType$89], false)}, {prop: "NewEdgesGeometry", name: "NewEdgesGeometry", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$89], false)}, {prop: "EdgesHelper", name: "EdgesHelper", pkg: "", typ: $funcType([], [ptrType$90], false)}, {prop: "NewEdgesHelper", name: "NewEdgesHelper", pkg: "", typ: $funcType([JSObject, $Int, $Float64], [ptrType$90], false)}, {prop: "EllipseCurve", name: "EllipseCurve", pkg: "", typ: $funcType([], [ptrType$35], false)}, {prop: "NewEllipseCurve", name: "NewEllipseCurve", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, ptrType$16], [ptrType$35], false)}, {prop: "Euler", name: "Euler", pkg: "", typ: $funcType([], [ptrType$91], false)}, {prop: "NewEuler", name: "NewEuler", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $String], [ptrType$91], false)}, {prop: "EventDispatcher", name: "EventDispatcher", pkg: "", typ: $funcType([], [ptrType$92], false)}, {prop: "NewEventDispatcher", name: "NewEventDispatcher", pkg: "", typ: $funcType([], [ptrType$92], false)}, {prop: "ExtrudeGeometry", name: "ExtrudeGeometry", pkg: "", typ: $funcType([], [ptrType$93], false)}, {prop: "NewExtrudeGeometry", name: "NewExtrudeGeometry", pkg: "", typ: $funcType([JSObject, ptrType$17], [ptrType$93], false)}, {prop: "Face3", name: "Face3", pkg: "", typ: $funcType([], [ptrType$18], false)}, {prop: "NewFace3", name: "NewFace3", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, ptrType$6, ptrType$2, $Int], [ptrType$18], false)}, {prop: "FaceNormalsHelper", name: "FaceNormalsHelper", pkg: "", typ: $funcType([], [ptrType$95], false)}, {prop: "NewFaceNormalsHelper", name: "NewFaceNormalsHelper", pkg: "", typ: $funcType([JSObject, $Float64, $Int, $Float64], [ptrType$95], false)}, {prop: "Fog", name: "Fog", pkg: "", typ: $funcType([], [ptrType$96], false)}, {prop: "NewFog", name: "NewFog", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$96], false)}, {prop: "FogExp2", name: "FogExp2", pkg: "", typ: $funcType([], [ptrType$97], false)}, {prop: "NewFogExp2", name: "NewFogExp2", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$97], false)}, {prop: "Font", name: "Font", pkg: "", typ: $funcType([], [ptrType$98], false)}, {prop: "NewFont", name: "NewFont", pkg: "", typ: $funcType([$Float64], [ptrType$98], false)}, {prop: "FontLoader", name: "FontLoader", pkg: "", typ: $funcType([], [ptrType$99], false)}, {prop: "NewFontLoader", name: "NewFontLoader", pkg: "", typ: $funcType([$Float64], [ptrType$99], false)}, {prop: "Frustum", name: "Frustum", pkg: "", typ: $funcType([], [ptrType$100], false)}, {prop: "NewFrustum", name: "NewFrustum", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$100], false)}, {prop: "Geometry", name: "Geometry", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "NewGeometry", name: "NewGeometry", pkg: "", typ: $funcType([], [ptrType$53], false)}, {prop: "GridHelper", name: "GridHelper", pkg: "", typ: $funcType([], [ptrType$101], false)}, {prop: "NewGridHelper", name: "NewGridHelper", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$101], false)}, {prop: "Group", name: "Group", pkg: "", typ: $funcType([], [ptrType$102], false)}, {prop: "NewGroup", name: "NewGroup", pkg: "", typ: $funcType([], [ptrType$102], false)}, {prop: "HemisphereLight", name: "HemisphereLight", pkg: "", typ: $funcType([], [ptrType$103], false)}, {prop: "NewHemisphereLight", name: "NewHemisphereLight", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$103], false)}, {prop: "HemisphereLightHelper", name: "HemisphereLightHelper", pkg: "", typ: $funcType([], [ptrType$104], false)}, {prop: "NewHemisphereLightHelper", name: "NewHemisphereLightHelper", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$104], false)}, {prop: "IcosahedronGeometry", name: "IcosahedronGeometry", pkg: "", typ: $funcType([], [ptrType$105], false)}, {prop: "NewIcosahedronGeometry", name: "NewIcosahedronGeometry", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$105], false)}, {prop: "ImageLoader", name: "ImageLoader", pkg: "", typ: $funcType([], [ptrType$106], false)}, {prop: "NewImageLoader", name: "NewImageLoader", pkg: "", typ: $funcType([$Float64], [ptrType$106], false)}, {prop: "ImmediateRenderObject", name: "ImmediateRenderObject", pkg: "", typ: $funcType([], [ptrType$107], false)}, {prop: "NewImmediateRenderObject", name: "NewImmediateRenderObject", pkg: "", typ: $funcType([$Float64], [ptrType$107], false)}, {prop: "InstancedBufferAttribute", name: "InstancedBufferAttribute", pkg: "", typ: $funcType([], [ptrType$108], false)}, {prop: "NewInstancedBufferAttribute", name: "NewInstancedBufferAttribute", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$108], false)}, {prop: "InstancedBufferGeometry", name: "InstancedBufferGeometry", pkg: "", typ: $funcType([], [ptrType$109], false)}, {prop: "NewInstancedBufferGeometry", name: "NewInstancedBufferGeometry", pkg: "", typ: $funcType([], [ptrType$109], false)}, {prop: "InstancedInterleavedBuffer", name: "InstancedInterleavedBuffer", pkg: "", typ: $funcType([], [ptrType$110], false)}, {prop: "NewInstancedInterleavedBuffer", name: "NewInstancedInterleavedBuffer", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$110], false)}, {prop: "InterleavedBuffer", name: "InterleavedBuffer", pkg: "", typ: $funcType([], [ptrType$111], false)}, {prop: "NewInterleavedBuffer", name: "NewInterleavedBuffer", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$111], false)}, {prop: "InterleavedBufferAttribute", name: "InterleavedBufferAttribute", pkg: "", typ: $funcType([], [ptrType$112], false)}, {prop: "NewInterleavedBufferAttribute", name: "NewInterleavedBufferAttribute", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$112], false)}, {prop: "Interpolant", name: "Interpolant", pkg: "", typ: $funcType([], [ptrType$113], false)}, {prop: "NewInterpolant", name: "NewInterpolant", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$113], false)}, {prop: "JSONLoader", name: "JSONLoader", pkg: "", typ: $funcType([], [ptrType$114], false)}, {prop: "NewJSONLoader", name: "NewJSONLoader", pkg: "", typ: $funcType([], [ptrType$114], false)}, {prop: "KeyframeTrack", name: "KeyframeTrack", pkg: "", typ: $funcType([], [ptrType$115], false)}, {prop: "NewKeyframeTrack", name: "NewKeyframeTrack", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$115], false)}, {prop: "LatheBufferGeometry", name: "LatheBufferGeometry", pkg: "", typ: $funcType([], [ptrType$116], false)}, {prop: "NewLatheBufferGeometry", name: "NewLatheBufferGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$116], false)}, {prop: "LatheGeometry", name: "LatheGeometry", pkg: "", typ: $funcType([], [ptrType$117], false)}, {prop: "NewLatheGeometry", name: "NewLatheGeometry", pkg: "", typ: $funcType([sliceType$13, $Int, $Float64, $Float64], [ptrType$117], false)}, {prop: "Layers", name: "Layers", pkg: "", typ: $funcType([], [ptrType$118], false)}, {prop: "NewLayers", name: "NewLayers", pkg: "", typ: $funcType([], [ptrType$118], false)}, {prop: "LensFlare", name: "LensFlare", pkg: "", typ: $funcType([], [ptrType$119], false)}, {prop: "NewLensFlare", name: "NewLensFlare", pkg: "", typ: $funcType([ptrType$10, $Float64, $Float64, $Int, $Int], [ptrType$119], false)}, {prop: "LensFlarePlugin", name: "LensFlarePlugin", pkg: "", typ: $funcType([], [ptrType$120], false)}, {prop: "NewLensFlarePlugin", name: "NewLensFlarePlugin", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$120], false)}, {prop: "Light", name: "Light", pkg: "", typ: $funcType([], [ptrType$28], false)}, {prop: "NewLight", name: "NewLight", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$28], false)}, {prop: "LightShadow", name: "LightShadow", pkg: "", typ: $funcType([], [ptrType$121], false)}, {prop: "NewLightShadow", name: "NewLightShadow", pkg: "", typ: $funcType([ptrType$11], [ptrType$121], false)}, {prop: "Line", name: "Line", pkg: "", typ: $funcType([], [ptrType$55], false)}, {prop: "NewLine", name: "NewLine", pkg: "", typ: $funcType([JSObject, JSObject], [ptrType$55], false)}, {prop: "Line3", name: "Line3", pkg: "", typ: $funcType([], [ptrType$122], false)}, {prop: "NewLine3", name: "NewLine3", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$122], false)}, {prop: "LineBasicMaterial", name: "LineBasicMaterial", pkg: "", typ: $funcType([], [ptrType$123], false)}, {prop: "NewLineBasicMaterial", name: "NewLineBasicMaterial", pkg: "", typ: $funcType([LineBasicMaterialOpts], [ptrType$123], false)}, {prop: "LineCurve", name: "LineCurve", pkg: "", typ: $funcType([], [ptrType$124], false)}, {prop: "NewLineCurve", name: "NewLineCurve", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$124], false)}, {prop: "LineDashedMaterial", name: "LineDashedMaterial", pkg: "", typ: $funcType([], [ptrType$125], false)}, {prop: "NewLineDashedMaterial", name: "NewLineDashedMaterial", pkg: "", typ: $funcType([mapType], [ptrType$125], false)}, {prop: "LineSegments", name: "LineSegments", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "NewLineSegments", name: "NewLineSegments", pkg: "", typ: $funcType([sliceType$13, ptrType$10], [ptrType$42], false)}, {prop: "LinearInterpolant", name: "LinearInterpolant", pkg: "", typ: $funcType([], [ptrType$126], false)}, {prop: "NewLinearInterpolant", name: "NewLinearInterpolant", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$126], false)}, {prop: "Loader", name: "Loader", pkg: "", typ: $funcType([], [ptrType$127], false)}, {prop: "NewLoader", name: "NewLoader", pkg: "", typ: $funcType([], [ptrType$127], false)}, {prop: "LoadingManager", name: "LoadingManager", pkg: "", typ: $funcType([], [ptrType$128], false)}, {prop: "NewLoadingManager", name: "NewLoadingManager", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$128], false)}, {prop: "LOD", name: "LOD", pkg: "", typ: $funcType([], [ptrType$129], false)}, {prop: "NewLOD", name: "NewLOD", pkg: "", typ: $funcType([], [ptrType$129], false)}, {prop: "NewLUT", name: "NewLUT", pkg: "", typ: $funcType([$String, $Int], [ptrType$19], false)}, {prop: "Material", name: "Material", pkg: "", typ: $funcType([], [ptrType$9], false)}, {prop: "NewMaterial", name: "NewMaterial", pkg: "", typ: $funcType([], [ptrType$9], false)}, {prop: "MaterialLoader", name: "MaterialLoader", pkg: "", typ: $funcType([], [ptrType$130], false)}, {prop: "NewMaterialLoader", name: "NewMaterialLoader", pkg: "", typ: $funcType([$Float64], [ptrType$130], false)}, {prop: "Math", name: "Math", pkg: "", typ: $funcType([], [ptrType$131], false)}, {prop: "NewMath", name: "NewMath", pkg: "", typ: $funcType([], [ptrType$131], false)}, {prop: "Matrix3", name: "Matrix3", pkg: "", typ: $funcType([], [ptrType$132], false)}, {prop: "NewMatrix3", name: "NewMatrix3", pkg: "", typ: $funcType([], [ptrType$132], false)}, {prop: "Matrix4", name: "Matrix4", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "NewMatrix4", name: "NewMatrix4", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "Mesh", name: "Mesh", pkg: "", typ: $funcType([], [ptrType$47], false)}, {prop: "NewMesh", name: "NewMesh", pkg: "", typ: $funcType([JSObject, JSObject], [ptrType$47], false)}, {prop: "MeshBasicMaterial", name: "MeshBasicMaterial", pkg: "", typ: $funcType([], [ptrType$133], false)}, {prop: "NewMeshBasicMaterial", name: "NewMeshBasicMaterial", pkg: "", typ: $funcType([MeshBasicMaterialOpts], [ptrType$133], false)}, {prop: "MeshDepthMaterial", name: "MeshDepthMaterial", pkg: "", typ: $funcType([], [ptrType$134], false)}, {prop: "NewMeshDepthMaterial", name: "NewMeshDepthMaterial", pkg: "", typ: $funcType([MeshDepthMaterialOpts], [ptrType$134], false)}, {prop: "MeshLambertMaterial", name: "MeshLambertMaterial", pkg: "", typ: $funcType([], [ptrType$135], false)}, {prop: "NewMeshLambertMaterial", name: "NewMeshLambertMaterial", pkg: "", typ: $funcType([MeshLambertMaterialOpts], [ptrType$135], false)}, {prop: "MeshNormalMaterial", name: "MeshNormalMaterial", pkg: "", typ: $funcType([], [ptrType$136], false)}, {prop: "NewMeshNormalMaterial", name: "NewMeshNormalMaterial", pkg: "", typ: $funcType([MeshNormalMaterialOpts], [ptrType$136], false)}, {prop: "MeshPhongMaterial", name: "MeshPhongMaterial", pkg: "", typ: $funcType([], [ptrType$137], false)}, {prop: "NewMeshPhongMaterial", name: "NewMeshPhongMaterial", pkg: "", typ: $funcType([MeshPhongMaterialOpts], [ptrType$137], false)}, {prop: "MeshStandardMaterial", name: "MeshStandardMaterial", pkg: "", typ: $funcType([], [ptrType$138], false)}, {prop: "NewMeshStandardMaterial", name: "NewMeshStandardMaterial", pkg: "", typ: $funcType([MeshStandardMaterialOpts], [ptrType$138], false)}, {prop: "MorphBlendMesh", name: "MorphBlendMesh", pkg: "", typ: $funcType([], [ptrType$139], false)}, {prop: "NewMorphBlendMesh", name: "NewMorphBlendMesh", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$139], false)}, {prop: "MultiMaterial", name: "MultiMaterial", pkg: "", typ: $funcType([], [ptrType$140], false)}, {prop: "NewMultiMaterial", name: "NewMultiMaterial", pkg: "", typ: $funcType([sliceType$12], [ptrType$140], false)}, {prop: "NumberKeyframeTrack", name: "NumberKeyframeTrack", pkg: "", typ: $funcType([], [ptrType$141], false)}, {prop: "NewNumberKeyframeTrack", name: "NewNumberKeyframeTrack", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$141], false)}, {prop: "Object3D", name: "Object3D", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "NewObject3D", name: "NewObject3D", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "ObjectLoader", name: "ObjectLoader", pkg: "", typ: $funcType([], [ptrType$143], false)}, {prop: "NewObjectLoader", name: "NewObjectLoader", pkg: "", typ: $funcType([$Float64], [ptrType$143], false)}, {prop: "OctahedronGeometry", name: "OctahedronGeometry", pkg: "", typ: $funcType([], [ptrType$144], false)}, {prop: "NewOctahedronGeometry", name: "NewOctahedronGeometry", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$144], false)}, {prop: "OrthographicCamera", name: "OrthographicCamera", pkg: "", typ: $funcType([], [ptrType$145], false)}, {prop: "NewOrthographicCamera", name: "NewOrthographicCamera", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$145], false)}, {prop: "ParametricGeometry", name: "ParametricGeometry", pkg: "", typ: $funcType([], [ptrType$146], false)}, {prop: "NewParametricGeometry", name: "NewParametricGeometry", pkg: "", typ: $funcType([funcType$2, $Int, $Int], [ptrType$146], false)}, {prop: "Path", name: "Path", pkg: "", typ: $funcType([], [ptrType$147], false)}, {prop: "NewPath", name: "NewPath", pkg: "", typ: $funcType([ptrType$10], [ptrType$147], false)}, {prop: "PerspectiveCamera", name: "PerspectiveCamera", pkg: "", typ: $funcType([], [ptrType$148], false)}, {prop: "NewPerspectiveCamera", name: "NewPerspectiveCamera", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$148], false)}, {prop: "Plane", name: "Plane", pkg: "", typ: $funcType([], [ptrType$149], false)}, {prop: "NewPlane", name: "NewPlane", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$149], false)}, {prop: "PlaneBufferGeometry", name: "PlaneBufferGeometry", pkg: "", typ: $funcType([], [ptrType$150], false)}, {prop: "NewPlaneBufferGeometry", name: "NewPlaneBufferGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$150], false)}, {prop: "PlaneGeometry", name: "PlaneGeometry", pkg: "", typ: $funcType([], [ptrType$151], false)}, {prop: "NewPlaneGeometry", name: "NewPlaneGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Int, $Int], [ptrType$151], false)}, {prop: "PointLight", name: "PointLight", pkg: "", typ: $funcType([], [ptrType$152], false)}, {prop: "NewPointLight", name: "NewPointLight", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$152], false)}, {prop: "PointLightHelper", name: "PointLightHelper", pkg: "", typ: $funcType([], [ptrType$153], false)}, {prop: "NewPointLightHelper", name: "NewPointLightHelper", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$153], false)}, {prop: "Points", name: "Points", pkg: "", typ: $funcType([], [ptrType$154], false)}, {prop: "NewPoints", name: "NewPoints", pkg: "", typ: $funcType([ptrType$10, ptrType$10], [ptrType$154], false)}, {prop: "PointsMaterial", name: "PointsMaterial", pkg: "", typ: $funcType([], [ptrType$155], false)}, {prop: "NewPointsMaterial", name: "NewPointsMaterial", pkg: "", typ: $funcType([mapType], [ptrType$155], false)}, {prop: "PolyhedronGeometry", name: "PolyhedronGeometry", pkg: "", typ: $funcType([], [ptrType$87], false)}, {prop: "NewPolyhedronGeometry", name: "NewPolyhedronGeometry", pkg: "", typ: $funcType([sliceType$7, sliceType$8, $Float64, $Int], [ptrType$87], false)}, {prop: "PositionalAudio", name: "PositionalAudio", pkg: "", typ: $funcType([], [ptrType$156], false)}, {prop: "NewPositionalAudio", name: "NewPositionalAudio", pkg: "", typ: $funcType([$Float64], [ptrType$156], false)}, {prop: "PropertyBinding", name: "PropertyBinding", pkg: "", typ: $funcType([], [ptrType$157], false)}, {prop: "NewPropertyBinding", name: "NewPropertyBinding", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$157], false)}, {prop: "PropertyMixer", name: "PropertyMixer", pkg: "", typ: $funcType([], [ptrType$158], false)}, {prop: "NewPropertyMixer", name: "NewPropertyMixer", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$158], false)}, {prop: "QuadraticBezierCurve", name: "QuadraticBezierCurve", pkg: "", typ: $funcType([], [ptrType$159], false)}, {prop: "NewQuadraticBezierCurve", name: "NewQuadraticBezierCurve", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$159], false)}, {prop: "Quaternion", name: "Quaternion", pkg: "", typ: $funcType([], [ptrType$142], false)}, {prop: "NewQuaternion", name: "NewQuaternion", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$142], false)}, {prop: "QuaternionKeyframeTrack", name: "QuaternionKeyframeTrack", pkg: "", typ: $funcType([], [ptrType$160], false)}, {prop: "NewQuaternionKeyframeTrack", name: "NewQuaternionKeyframeTrack", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$160], false)}, {prop: "QuaternionLinearInterpolant", name: "QuaternionLinearInterpolant", pkg: "", typ: $funcType([], [ptrType$161], false)}, {prop: "NewQuaternionLinearInterpolant", name: "NewQuaternionLinearInterpolant", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$161], false)}, {prop: "RawShaderMaterial", name: "RawShaderMaterial", pkg: "", typ: $funcType([], [ptrType$162], false)}, {prop: "NewRawShaderMaterial", name: "NewRawShaderMaterial", pkg: "", typ: $funcType([$Float64], [ptrType$162], false)}, {prop: "Ray", name: "Ray", pkg: "", typ: $funcType([], [ptrType$163], false)}, {prop: "NewRay", name: "NewRay", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$163], false)}, {prop: "Raycaster", name: "Raycaster", pkg: "", typ: $funcType([], [ptrType$164], false)}, {prop: "NewRaycaster", name: "NewRaycaster", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$164], false)}, {prop: "RingBufferGeometry", name: "RingBufferGeometry", pkg: "", typ: $funcType([], [ptrType$165], false)}, {prop: "NewRingBufferGeometry", name: "NewRingBufferGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$165], false)}, {prop: "RingGeometry", name: "RingGeometry", pkg: "", typ: $funcType([], [ptrType$166], false)}, {prop: "NewRingGeometry", name: "NewRingGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Int, $Int, $Float64, $Float64], [ptrType$166], false)}, {prop: "Scene", name: "Scene", pkg: "", typ: $funcType([], [ptrType$167], false)}, {prop: "NewScene", name: "NewScene", pkg: "", typ: $funcType([], [ptrType$167], false)}, {prop: "SceneUtils", name: "SceneUtils", pkg: "", typ: $funcType([], [ptrType$168], false)}, {prop: "NewSceneUtils", name: "NewSceneUtils", pkg: "", typ: $funcType([], [ptrType$168], false)}, {prop: "ShaderChunk", name: "ShaderChunk", pkg: "", typ: $funcType([], [ptrType$169], false)}, {prop: "NewShaderChunk", name: "NewShaderChunk", pkg: "", typ: $funcType([], [ptrType$169], false)}, {prop: "ShaderLib", name: "ShaderLib", pkg: "", typ: $funcType([], [ptrType$170], false)}, {prop: "NewShaderLib", name: "NewShaderLib", pkg: "", typ: $funcType([], [ptrType$170], false)}, {prop: "ShaderMaterial", name: "ShaderMaterial", pkg: "", typ: $funcType([], [ptrType$171], false)}, {prop: "NewShaderMaterial", name: "NewShaderMaterial", pkg: "", typ: $funcType([$Float64], [ptrType$171], false)}, {prop: "Shape", name: "Shape", pkg: "", typ: $funcType([], [ptrType$172], false)}, {prop: "NewShape", name: "NewShape", pkg: "", typ: $funcType([], [ptrType$172], false)}, {prop: "ShapeGeometry", name: "ShapeGeometry", pkg: "", typ: $funcType([], [ptrType$173], false)}, {prop: "NewShapeGeometry", name: "NewShapeGeometry", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$173], false)}, {prop: "ShapeUtils", name: "ShapeUtils", pkg: "", typ: $funcType([], [ptrType$174], false)}, {prop: "NewShapeUtils", name: "NewShapeUtils", pkg: "", typ: $funcType([], [ptrType$174], false)}, {prop: "Skeleton", name: "Skeleton", pkg: "", typ: $funcType([], [ptrType$175], false)}, {prop: "NewSkeleton", name: "NewSkeleton", pkg: "", typ: $funcType([sliceType$13, sliceType$13, $Bool], [ptrType$175], false)}, {prop: "SkeletonHelper", name: "SkeletonHelper", pkg: "", typ: $funcType([], [ptrType$176], false)}, {prop: "NewSkeletonHelper", name: "NewSkeletonHelper", pkg: "", typ: $funcType([$Float64], [ptrType$176], false)}, {prop: "SkinnedMesh", name: "SkinnedMesh", pkg: "", typ: $funcType([], [ptrType$177], false)}, {prop: "NewSkinnedMesh", name: "NewSkinnedMesh", pkg: "", typ: $funcType([ptrType$10, ptrType$10, $Bool], [ptrType$177], false)}, {prop: "Sphere", name: "Sphere", pkg: "", typ: $funcType([], [ptrType$178], false)}, {prop: "NewSphere", name: "NewSphere", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$178], false)}, {prop: "SphereBufferGeometry", name: "SphereBufferGeometry", pkg: "", typ: $funcType([], [ptrType$179], false)}, {prop: "NewSphereBufferGeometry", name: "NewSphereBufferGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$179], false)}, {prop: "SphereGeometry", name: "SphereGeometry", pkg: "", typ: $funcType([], [ptrType$180], false)}, {prop: "NewSphereGeometry", name: "NewSphereGeometry", pkg: "", typ: $funcType([$Float64, $Int, $Int, ptrType$21], [ptrType$180], false)}, {prop: "Spherical", name: "Spherical", pkg: "", typ: $funcType([], [ptrType$181], false)}, {prop: "NewSpherical", name: "NewSpherical", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$181], false)}, {prop: "Spline", name: "Spline", pkg: "", typ: $funcType([], [ptrType$182], false)}, {prop: "NewSpline", name: "NewSpline", pkg: "", typ: $funcType([$Float64], [ptrType$182], false)}, {prop: "SplineCurve", name: "SplineCurve", pkg: "", typ: $funcType([], [ptrType$183], false)}, {prop: "NewSplineCurve", name: "NewSplineCurve", pkg: "", typ: $funcType([$Float64], [ptrType$183], false)}, {prop: "SpotLight", name: "SpotLight", pkg: "", typ: $funcType([], [ptrType$184], false)}, {prop: "NewSpotLight", name: "NewSpotLight", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$184], false)}, {prop: "SpotLightHelper", name: "SpotLightHelper", pkg: "", typ: $funcType([], [ptrType$185], false)}, {prop: "NewSpotLightHelper", name: "NewSpotLightHelper", pkg: "", typ: $funcType([$Float64], [ptrType$185], false)}, {prop: "Sprite", name: "Sprite", pkg: "", typ: $funcType([], [ptrType$186], false)}, {prop: "NewSprite", name: "NewSprite", pkg: "", typ: $funcType([ptrType$10], [ptrType$186], false)}, {prop: "SpriteMaterial", name: "SpriteMaterial", pkg: "", typ: $funcType([], [ptrType$187], false)}, {prop: "NewSpriteMaterial", name: "NewSpriteMaterial", pkg: "", typ: $funcType([mapType], [ptrType$187], false)}, {prop: "SpritePlugin", name: "SpritePlugin", pkg: "", typ: $funcType([], [ptrType$188], false)}, {prop: "NewSpritePlugin", name: "NewSpritePlugin", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$188], false)}, {prop: "StereoCamera", name: "StereoCamera", pkg: "", typ: $funcType([], [ptrType$189], false)}, {prop: "NewStereoCamera", name: "NewStereoCamera", pkg: "", typ: $funcType([], [ptrType$189], false)}, {prop: "StringKeyframeTrack", name: "StringKeyframeTrack", pkg: "", typ: $funcType([], [ptrType$190], false)}, {prop: "NewStringKeyframeTrack", name: "NewStringKeyframeTrack", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$190], false)}, {prop: "TetrahedronGeometry", name: "TetrahedronGeometry", pkg: "", typ: $funcType([], [ptrType$191], false)}, {prop: "NewTetrahedronGeometry", name: "NewTetrahedronGeometry", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$191], false)}, {prop: "TextGeometry", name: "TextGeometry", pkg: "", typ: $funcType([], [ptrType$192], false)}, {prop: "NewTextGeometry", name: "NewTextGeometry", pkg: "", typ: $funcType([$String, mapType], [ptrType$192], false)}, {prop: "Texture", name: "Texture", pkg: "", typ: $funcType([], [ptrType$72], false)}, {prop: "NewTexture", name: "NewTexture", pkg: "", typ: $funcType([ptrType$10, ptrType$22], [ptrType$72], false)}, {prop: "TextureLoader", name: "TextureLoader", pkg: "", typ: $funcType([], [ptrType$193], false)}, {prop: "NewTextureLoader", name: "NewTextureLoader", pkg: "", typ: $funcType([], [ptrType$193], false)}, {prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "MOUSE", name: "MOUSE", pkg: "", typ: $funcType([], [ptrType$203], false)}, {prop: "NewJSObject", name: "NewJSObject", pkg: "", typ: $funcType([], [ptrType$203], false)}, {prop: "TorusBufferGeometry", name: "TorusBufferGeometry", pkg: "", typ: $funcType([], [ptrType$204], false)}, {prop: "NewTorusBufferGeometry", name: "NewTorusBufferGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$204], false)}, {prop: "TorusGeometry", name: "TorusGeometry", pkg: "", typ: $funcType([], [ptrType$205], false)}, {prop: "NewTorusGeometry", name: "NewTorusGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Int, $Int, $Float64], [ptrType$205], false)}, {prop: "TorusKnotBufferGeometry", name: "TorusKnotBufferGeometry", pkg: "", typ: $funcType([], [ptrType$206], false)}, {prop: "NewTorusKnotBufferGeometry", name: "NewTorusKnotBufferGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$206], false)}, {prop: "TorusKnotGeometry", name: "TorusKnotGeometry", pkg: "", typ: $funcType([], [ptrType$207], false)}, {prop: "NewTorusKnotGeometry", name: "NewTorusKnotGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Int, $Int, $Float64, $Float64, $Float64], [ptrType$207], false)}, {prop: "Triangle", name: "Triangle", pkg: "", typ: $funcType([], [ptrType$208], false)}, {prop: "NewTriangle", name: "NewTriangle", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$208], false)}, {prop: "TubeGeometry", name: "TubeGeometry", pkg: "", typ: $funcType([], [ptrType$94], false)}, {prop: "NewTubeGeometry", name: "NewTubeGeometry", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$94], false)}, {prop: "Uniform", name: "Uniform", pkg: "", typ: $funcType([], [ptrType$209], false)}, {prop: "NewUniform", name: "NewUniform", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$209], false)}, {prop: "UniformsLib", name: "UniformsLib", pkg: "", typ: $funcType([], [ptrType$210], false)}, {prop: "NewUniformsLib", name: "NewUniformsLib", pkg: "", typ: $funcType([], [ptrType$210], false)}, {prop: "UniformsUtils", name: "UniformsUtils", pkg: "", typ: $funcType([], [ptrType$211], false)}, {prop: "NewUniformsUtils", name: "NewUniformsUtils", pkg: "", typ: $funcType([], [ptrType$211], false)}, {prop: "Vector2", name: "Vector2", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "NewVector2", name: "NewVector2", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$3], false)}, {prop: "Vector3", name: "Vector3", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "NewVector3", name: "NewVector3", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$6], false)}, {prop: "Vector4", name: "Vector4", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "NewVector4", name: "NewVector4", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$7], false)}, {prop: "VectorKeyframeTrack", name: "VectorKeyframeTrack", pkg: "", typ: $funcType([], [ptrType$212], false)}, {prop: "NewVectorKeyframeTrack", name: "NewVectorKeyframeTrack", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$212], false)}, {prop: "VertexNormalsHelper", name: "VertexNormalsHelper", pkg: "", typ: $funcType([], [ptrType$213], false)}, {prop: "NewVertexNormalsHelper", name: "NewVertexNormalsHelper", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$213], false)}, {prop: "VideoTexture", name: "VideoTexture", pkg: "", typ: $funcType([], [ptrType$214], false)}, {prop: "NewVideoTexture", name: "NewVideoTexture", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [ptrType$214], false)}, {prop: "WebGLBufferRenderer", name: "WebGLBufferRenderer", pkg: "", typ: $funcType([], [ptrType$215], false)}, {prop: "NewWebGLBufferRenderer", name: "NewWebGLBufferRenderer", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$215], false)}, {prop: "WebGLCapabilities", name: "WebGLCapabilities", pkg: "", typ: $funcType([], [ptrType$216], false)}, {prop: "NewWebGLCapabilities", name: "NewWebGLCapabilities", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$216], false)}, {prop: "WebGLExtensions", name: "WebGLExtensions", pkg: "", typ: $funcType([], [ptrType$217], false)}, {prop: "NewWebGLExtensions", name: "NewWebGLExtensions", pkg: "", typ: $funcType([$Float64], [ptrType$217], false)}, {prop: "WebGLGeometries", name: "WebGLGeometries", pkg: "", typ: $funcType([], [ptrType$218], false)}, {prop: "NewWebGLGeometries", name: "NewWebGLGeometries", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$218], false)}, {prop: "WebGLIndexedBufferRenderer", name: "WebGLIndexedBufferRenderer", pkg: "", typ: $funcType([], [ptrType$219], false)}, {prop: "NewWebGLIndexedBufferRenderer", name: "NewWebGLIndexedBufferRenderer", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$219], false)}, {prop: "WebGLLights", name: "WebGLLights", pkg: "", typ: $funcType([], [ptrType$220], false)}, {prop: "NewWebGLLights", name: "NewWebGLLights", pkg: "", typ: $funcType([], [ptrType$220], false)}, {prop: "WebGLObjects", name: "WebGLObjects", pkg: "", typ: $funcType([], [ptrType$221], false)}, {prop: "NewWebGLObjects", name: "NewWebGLObjects", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$221], false)}, {prop: "WebGLProgram", name: "WebGLProgram", pkg: "", typ: $funcType([], [ptrType$222], false)}, {prop: "NewWebGLProgram", name: "NewWebGLProgram", pkg: "", typ: $funcType([], [ptrType$222], false)}, {prop: "WebGLPrograms", name: "WebGLPrograms", pkg: "", typ: $funcType([], [ptrType$223], false)}, {prop: "NewWebGLPrograms", name: "NewWebGLPrograms", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$223], false)}, {prop: "WebGLProperties", name: "WebGLProperties", pkg: "", typ: $funcType([], [ptrType$224], false)}, {prop: "NewWebGLProperties", name: "NewWebGLProperties", pkg: "", typ: $funcType([], [ptrType$224], false)}, {prop: "WebGLRenderTarget", name: "WebGLRenderTarget", pkg: "", typ: $funcType([], [ptrType$225], false)}, {prop: "NewWebGLRenderTarget", name: "NewWebGLRenderTarget", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$225], false)}, {prop: "WebGLRenderTargetCube", name: "WebGLRenderTargetCube", pkg: "", typ: $funcType([], [ptrType$70], false)}, {prop: "NewWebGLRenderTargetCube", name: "NewWebGLRenderTargetCube", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$70], false)}, {prop: "WebGLRenderer", name: "WebGLRenderer", pkg: "", typ: $funcType([], [ptrType$226], false)}, {prop: "NewWebGLRenderer", name: "NewWebGLRenderer", pkg: "", typ: $funcType([ptrType$26], [ptrType$226], false)}, {prop: "WebGLShader", name: "WebGLShader", pkg: "", typ: $funcType([], [ptrType$227], false)}, {prop: "NewWebGLShader", name: "NewWebGLShader", pkg: "", typ: $funcType([], [ptrType$227], false)}, {prop: "WebGLShadowMap", name: "WebGLShadowMap", pkg: "", typ: $funcType([], [ptrType$228], false)}, {prop: "NewWebGLShadowMap", name: "NewWebGLShadowMap", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$228], false)}, {prop: "WebGLState", name: "WebGLState", pkg: "", typ: $funcType([], [ptrType$229], false)}, {prop: "NewWebGLState", name: "NewWebGLState", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$229], false)}, {prop: "WireframeGeometry", name: "WireframeGeometry", pkg: "", typ: $funcType([], [ptrType$230], false)}, {prop: "NewWireframeGeometry", name: "NewWireframeGeometry", pkg: "", typ: $funcType([$Float64], [ptrType$230], false)}, {prop: "WireframeHelper", name: "WireframeHelper", pkg: "", typ: $funcType([], [ptrType$231], false)}, {prop: "NewWireframeHelper", name: "NewWireframeHelper", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$231], false)}, {prop: "XHRLoader", name: "XHRLoader", pkg: "", typ: $funcType([], [ptrType$232], false)}, {prop: "NewXHRLoader", name: "NewXHRLoader", pkg: "", typ: $funcType([$Float64], [ptrType$232], false)}];
	ptrType$203.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [ptrType$203], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([$Float64], [ptrType$203], false)}];
	ptrType$204.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$205.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$206.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$207.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$208.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$208], false)}, {prop: "SetFromPointsAndIndices", name: "SetFromPointsAndIndices", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$208], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$208], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$208], [ptrType$208], false)}, {prop: "Area", name: "Area", pkg: "", typ: $funcType([], [ptrType$208], false)}, {prop: "Midpoint", name: "Midpoint", pkg: "", typ: $funcType([$Float64], [ptrType$208], false)}, {prop: "Normal", name: "Normal", pkg: "", typ: $funcType([$Float64], [ptrType$208], false)}, {prop: "Plane", name: "Plane", pkg: "", typ: $funcType([$Float64], [ptrType$208], false)}, {prop: "BarycoordFromPoint", name: "BarycoordFromPoint", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$208], false)}, {prop: "ContainsPoint", name: "ContainsPoint", pkg: "", typ: $funcType([$Float64], [ptrType$208], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([$Float64], [ptrType$208], false)}];
	ptrType$94.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$209.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "OnUpdate", name: "OnUpdate", pkg: "", typ: $funcType([$Float64], [ptrType$209], false)}];
	ptrType$210.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$211.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Merge", name: "Merge", pkg: "", typ: $funcType([$Float64], [ptrType$211], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([JSObject], [ptrType$211], false)}];
	ptrType$3.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Height", name: "Height", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetWidth", name: "SetWidth", pkg: "", typ: $funcType([$Float64], [ptrType$3], false)}, {prop: "SetHeight", name: "SetHeight", pkg: "", typ: $funcType([$Float64], [ptrType$3], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$3], false)}, {prop: "SetScalar", name: "SetScalar", pkg: "", typ: $funcType([$Float64], [ptrType$3], false)}, {prop: "SetX", name: "SetX", pkg: "", typ: $funcType([$Float64], [ptrType$3], false)}, {prop: "SetY", name: "SetY", pkg: "", typ: $funcType([$Float64], [ptrType$3], false)}, {prop: "SetComponent", name: "SetComponent", pkg: "", typ: $funcType([$Int, $Float64], [ptrType$3], false)}, {prop: "GetComponent", name: "GetComponent", pkg: "", typ: $funcType([$Int], [$Float64], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "AddScalar", name: "AddScalar", pkg: "", typ: $funcType([$Float64], [ptrType$3], false)}, {prop: "AddVectors", name: "AddVectors", pkg: "", typ: $funcType([ptrType$3, ptrType$3], [ptrType$3], false)}, {prop: "AddScaledVector", name: "AddScaledVector", pkg: "", typ: $funcType([ptrType$3, $Float64], [ptrType$3], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "SubScalar", name: "SubScalar", pkg: "", typ: $funcType([$Float64], [ptrType$3], false)}, {prop: "SubVectors", name: "SubVectors", pkg: "", typ: $funcType([ptrType$3, ptrType$3], [ptrType$3], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "MultiplyScalar", name: "MultiplyScalar", pkg: "", typ: $funcType([$Float64], [ptrType$3], false)}, {prop: "Divide", name: "Divide", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "DivideScalar", name: "DivideScalar", pkg: "", typ: $funcType([$Float64], [ptrType$3], false)}, {prop: "Min", name: "Min", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "Max", name: "Max", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "Clamp", name: "Clamp", pkg: "", typ: $funcType([ptrType$3, ptrType$3], [ptrType$3], false)}, {prop: "ClampScalar", name: "ClampScalar", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "ClampLength", name: "ClampLength", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$3], false)}, {prop: "Floor", name: "Floor", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Ceil", name: "Ceil", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "RoundToZero", name: "RoundToZero", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Negate", name: "Negate", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Dot", name: "Dot", pkg: "", typ: $funcType([ptrType$3], [$Float64], false)}, {prop: "LengthSq", name: "LengthSq", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "LengthManhattan", name: "LengthManhattan", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Angle", name: "Angle", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "DistanceTo", name: "DistanceTo", pkg: "", typ: $funcType([ptrType$3], [$Float64], false)}, {prop: "DistanceToSquared", name: "DistanceToSquared", pkg: "", typ: $funcType([ptrType$3], [$Float64], false)}, {prop: "SetLength", name: "SetLength", pkg: "", typ: $funcType([$Float64], [ptrType$3], false)}, {prop: "Lerp", name: "Lerp", pkg: "", typ: $funcType([ptrType$3, $Float64], [ptrType$3], false)}, {prop: "LerpVectors", name: "LerpVectors", pkg: "", typ: $funcType([ptrType$3, ptrType$3, $Float64], [ptrType$3], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "FromArray", name: "FromArray", pkg: "", typ: $funcType([sliceType$7, $Float64], [ptrType$3], false)}, {prop: "FromAttribute", name: "FromAttribute", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$3], false)}, {prop: "RotateAround", name: "RotateAround", pkg: "", typ: $funcType([ptrType$3, $Float64], [ptrType$3], false)}];
	ptrType$6.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$6], false)}, {prop: "SetScalar", name: "SetScalar", pkg: "", typ: $funcType([$Float64], [ptrType$6], false)}, {prop: "X", name: "X", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetX", name: "SetX", pkg: "", typ: $funcType([$Float64], [ptrType$6], false)}, {prop: "Y", name: "Y", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetY", name: "SetY", pkg: "", typ: $funcType([$Float64], [ptrType$6], false)}, {prop: "Z", name: "Z", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetZ", name: "SetZ", pkg: "", typ: $funcType([$Float64], [ptrType$6], false)}, {prop: "SetComponent", name: "SetComponent", pkg: "", typ: $funcType([$Int, $Float64], [ptrType$6], false)}, {prop: "GetComponent", name: "GetComponent", pkg: "", typ: $funcType([$Int], [ptrType$6], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$6], [ptrType$6], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$6], [ptrType$6], false)}, {prop: "AddScalar", name: "AddScalar", pkg: "", typ: $funcType([$Float64], [ptrType$6], false)}, {prop: "AddVectors", name: "AddVectors", pkg: "", typ: $funcType([ptrType$6, ptrType$6], [ptrType$6], false)}, {prop: "AddScaledVector", name: "AddScaledVector", pkg: "", typ: $funcType([ptrType$6, $Float64], [ptrType$6], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$6], [ptrType$6], false)}, {prop: "SubScalar", name: "SubScalar", pkg: "", typ: $funcType([$Float64], [ptrType$6], false)}, {prop: "SubVectors", name: "SubVectors", pkg: "", typ: $funcType([ptrType$6, ptrType$6], [ptrType$6], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([ptrType$6], [ptrType$6], false)}, {prop: "MultiplyScalar", name: "MultiplyScalar", pkg: "", typ: $funcType([$Float64], [ptrType$6], false)}, {prop: "MultiplyVectors", name: "MultiplyVectors", pkg: "", typ: $funcType([ptrType$6, ptrType$6], [ptrType$6], false)}, {prop: "ApplyEuler", name: "ApplyEuler", pkg: "", typ: $funcType([ptrType$91], [ptrType$6], false)}, {prop: "ApplyAxisAngle", name: "ApplyAxisAngle", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "ApplyMatrix3", name: "ApplyMatrix3", pkg: "", typ: $funcType([ptrType$132], [ptrType$6], false)}, {prop: "ApplyMatrix4", name: "ApplyMatrix4", pkg: "", typ: $funcType([ptrType$8], [ptrType$6], false)}, {prop: "ApplyProjection", name: "ApplyProjection", pkg: "", typ: $funcType([ptrType$8], [ptrType$6], false)}, {prop: "ApplyQuaternion", name: "ApplyQuaternion", pkg: "", typ: $funcType([ptrType$142], [ptrType$6], false)}, {prop: "Project", name: "Project", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "Unproject", name: "Unproject", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "TransformDirection", name: "TransformDirection", pkg: "", typ: $funcType([ptrType$8], [ptrType$6], false)}, {prop: "Divide", name: "Divide", pkg: "", typ: $funcType([ptrType$6], [ptrType$6], false)}, {prop: "DivideScalar", name: "DivideScalar", pkg: "", typ: $funcType([$Float64], [ptrType$6], false)}, {prop: "Min", name: "Min", pkg: "", typ: $funcType([ptrType$6], [ptrType$6], false)}, {prop: "Max", name: "Max", pkg: "", typ: $funcType([ptrType$6], [ptrType$6], false)}, {prop: "Clamp", name: "Clamp", pkg: "", typ: $funcType([ptrType$6, ptrType$6], [ptrType$6], false)}, {prop: "ClampScalar", name: "ClampScalar", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "ClampLength", name: "ClampLength", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$6], false)}, {prop: "Floor", name: "Floor", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "Ceil", name: "Ceil", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "RoundToZero", name: "RoundToZero", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "Negate", name: "Negate", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "Dot", name: "Dot", pkg: "", typ: $funcType([ptrType$6], [$Float64], false)}, {prop: "LengthSq", name: "LengthSq", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "LengthManhattan", name: "LengthManhattan", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "SetLength", name: "SetLength", pkg: "", typ: $funcType([$Float64], [ptrType$6], false)}, {prop: "Lerp", name: "Lerp", pkg: "", typ: $funcType([ptrType$6, $Float64], [ptrType$6], false)}, {prop: "LerpVectors", name: "LerpVectors", pkg: "", typ: $funcType([ptrType$6, ptrType$6, $Float64], [ptrType$6], false)}, {prop: "Cross", name: "Cross", pkg: "", typ: $funcType([ptrType$6], [ptrType$6], false)}, {prop: "CrossVectors", name: "CrossVectors", pkg: "", typ: $funcType([ptrType$6, ptrType$6], [ptrType$6], false)}, {prop: "ProjectOnVector", name: "ProjectOnVector", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "ProjectOnPlane", name: "ProjectOnPlane", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "Reflect", name: "Reflect", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "AngleTo", name: "AngleTo", pkg: "", typ: $funcType([ptrType$6], [$Float64], false)}, {prop: "DistanceTo", name: "DistanceTo", pkg: "", typ: $funcType([ptrType$6], [$Float64], false)}, {prop: "DistanceToSquared", name: "DistanceToSquared", pkg: "", typ: $funcType([ptrType$6], [$Float64], false)}, {prop: "SetFromSpherical", name: "SetFromSpherical", pkg: "", typ: $funcType([$Float64], [ptrType$6], false)}, {prop: "SetFromMatrixPosition", name: "SetFromMatrixPosition", pkg: "", typ: $funcType([ptrType$132], [ptrType$6], false)}, {prop: "SetFromMatrixScale", name: "SetFromMatrixScale", pkg: "", typ: $funcType([ptrType$132], [ptrType$6], false)}, {prop: "SetFromMatrixColumn", name: "SetFromMatrixColumn", pkg: "", typ: $funcType([ptrType$132, $Int], [ptrType$6], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([ptrType$6], [$Bool], false)}, {prop: "FromArray", name: "FromArray", pkg: "", typ: $funcType([sliceType$7, $Int], [ptrType$6], false)}, {prop: "ToArray", name: "ToArray", pkg: "", typ: $funcType([sliceType$7, $Int], [ptrType$6], false)}, {prop: "FromAttribute", name: "FromAttribute", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$6], false)}];
	ptrType$7.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$7], false)}, {prop: "SetScalar", name: "SetScalar", pkg: "", typ: $funcType([$Float64], [ptrType$7], false)}, {prop: "SetX", name: "SetX", pkg: "", typ: $funcType([$Float64], [ptrType$7], false)}, {prop: "SetY", name: "SetY", pkg: "", typ: $funcType([$Float64], [ptrType$7], false)}, {prop: "SetZ", name: "SetZ", pkg: "", typ: $funcType([$Float64], [ptrType$7], false)}, {prop: "SetW", name: "SetW", pkg: "", typ: $funcType([$Float64], [ptrType$7], false)}, {prop: "SetComponent", name: "SetComponent", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$7], false)}, {prop: "GetComponent", name: "GetComponent", pkg: "", typ: $funcType([$Float64], [ptrType$7], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$7], [ptrType$7], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$7], [ptrType$7], false)}, {prop: "AddScalar", name: "AddScalar", pkg: "", typ: $funcType([$Float64], [ptrType$7], false)}, {prop: "AddVectors", name: "AddVectors", pkg: "", typ: $funcType([ptrType$7, ptrType$7], [ptrType$7], false)}, {prop: "AddScaledVector", name: "AddScaledVector", pkg: "", typ: $funcType([ptrType$7, $Float64], [ptrType$7], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$7], [ptrType$7], false)}, {prop: "SubScalar", name: "SubScalar", pkg: "", typ: $funcType([$Float64], [ptrType$7], false)}, {prop: "SubVectors", name: "SubVectors", pkg: "", typ: $funcType([ptrType$7, ptrType$7], [ptrType$7], false)}, {prop: "MultiplyScalar", name: "MultiplyScalar", pkg: "", typ: $funcType([$Float64], [ptrType$7], false)}, {prop: "ApplyMatrix4", name: "ApplyMatrix4", pkg: "", typ: $funcType([ptrType$8], [ptrType$7], false)}, {prop: "DivideScalar", name: "DivideScalar", pkg: "", typ: $funcType([$Float64], [ptrType$7], false)}, {prop: "SetAxisAngleFromQuaternion", name: "SetAxisAngleFromQuaternion", pkg: "", typ: $funcType([ptrType$142], [ptrType$7], false)}, {prop: "SetAxisAngleFromRotationMatrix", name: "SetAxisAngleFromRotationMatrix", pkg: "", typ: $funcType([ptrType$8], [ptrType$7], false)}, {prop: "Min", name: "Min", pkg: "", typ: $funcType([ptrType$7], [ptrType$7], false)}, {prop: "Max", name: "Max", pkg: "", typ: $funcType([ptrType$7], [ptrType$7], false)}, {prop: "Clamp", name: "Clamp", pkg: "", typ: $funcType([ptrType$7, ptrType$7], [ptrType$7], false)}, {prop: "ClampScalar", name: "ClampScalar", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Floor", name: "Floor", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Ceil", name: "Ceil", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "RoundToZero", name: "RoundToZero", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Negate", name: "Negate", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Dot", name: "Dot", pkg: "", typ: $funcType([ptrType$7], [ptrType$7], false)}, {prop: "LengthSq", name: "LengthSq", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "LengthManhattan", name: "LengthManhattan", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "SetLength", name: "SetLength", pkg: "", typ: $funcType([$Float64], [ptrType$7], false)}, {prop: "Lerp", name: "Lerp", pkg: "", typ: $funcType([ptrType$7, $Float64], [ptrType$7], false)}, {prop: "LerpVectors", name: "LerpVectors", pkg: "", typ: $funcType([ptrType$7, ptrType$7, $Float64], [ptrType$7], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([ptrType$7], [$Bool], false)}, {prop: "FromArray", name: "FromArray", pkg: "", typ: $funcType([sliceType$7, $Int], [ptrType$7], false)}, {prop: "FromAttribute", name: "FromAttribute", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [ptrType$7], false)}];
	ptrType$212.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$213.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$214.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$215.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$216.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$217.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$218.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$219.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$220.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$221.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$222.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [ptrType$222], false)}];
	ptrType$223.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$224.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$225.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "SetSize", name: "SetSize", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$225], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$225], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType$225], [ptrType$225], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [ptrType$225], false)}];
	ptrType$70.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$226.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "DOMElement", name: "DOMElement", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetContext", name: "GetContext", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetContextAttributes", name: "GetContextAttributes", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "ForceContextLoss", name: "ForceContextLoss", pkg: "", typ: $funcType([], [ptrType$226], false)}, {prop: "GetMaxAnisotropy", name: "GetMaxAnisotropy", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "GetPrecision", name: "GetPrecision", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "GetPixelRatio", name: "GetPixelRatio", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetPixelRatio", name: "SetPixelRatio", pkg: "", typ: $funcType([$Float64], [ptrType$226], false)}, {prop: "GetSize", name: "GetSize", pkg: "", typ: $funcType([], [$Float64, $Float64], false)}, {prop: "SetSize", name: "SetSize", pkg: "", typ: $funcType([$Float64, $Float64, $Bool], [ptrType$226], false)}, {prop: "SetViewport", name: "SetViewport", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$226], false)}, {prop: "SetScissor", name: "SetScissor", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$226], false)}, {prop: "SetScissorTest", name: "SetScissorTest", pkg: "", typ: $funcType([$Bool], [ptrType$226], false)}, {prop: "GetClearColor", name: "GetClearColor", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "SetClearColor", name: "SetClearColor", pkg: "", typ: $funcType([ptrType$2, $Float64], [ptrType$226], false)}, {prop: "GetClearAlpha", name: "GetClearAlpha", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetClearAlpha", name: "SetClearAlpha", pkg: "", typ: $funcType([$Float64], [ptrType$226], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([$Bool, $Bool, $Bool], [ptrType$226], false)}, {prop: "ClearColor", name: "ClearColor", pkg: "", typ: $funcType([], [ptrType$226], false)}, {prop: "ClearDepth", name: "ClearDepth", pkg: "", typ: $funcType([], [ptrType$226], false)}, {prop: "ClearStencil", name: "ClearStencil", pkg: "", typ: $funcType([], [ptrType$226], false)}, {prop: "ClearTarget", name: "ClearTarget", pkg: "", typ: $funcType([JSObject, $Bool, $Bool, $Bool], [ptrType$226], false)}, {prop: "ResetGLState", name: "ResetGLState", pkg: "", typ: $funcType([], [ptrType$226], false)}, {prop: "RenderBufferImmediate", name: "RenderBufferImmediate", pkg: "", typ: $funcType([JSObject, JSObject, JSObject], [ptrType$226], false)}, {prop: "RenderBufferDirect", name: "RenderBufferDirect", pkg: "", typ: $funcType([JSObject, JSObject, JSObject, JSObject, JSObject, JSObject], [ptrType$226], false)}, {prop: "Render", name: "Render", pkg: "", typ: $funcType([JSObject, JSObject, ptrType$27], [ptrType$226], false)}, {prop: "SetFaceCulling", name: "SetFaceCulling", pkg: "", typ: $funcType([$Int, $Int], [ptrType$226], false)}, {prop: "SetTexture", name: "SetTexture", pkg: "", typ: $funcType([JSObject, JSObject], [ptrType$226], false)}, {prop: "GetCurrentRenderTarget", name: "GetCurrentRenderTarget", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "SetRenderTarget", name: "SetRenderTarget", pkg: "", typ: $funcType([JSObject], [ptrType$226], false)}, {prop: "ReadRenderTargetPixels", name: "ReadRenderTargetPixels", pkg: "", typ: $funcType([JSObject, $Int, $Int, $Int, $Int, JSObject], [ptrType$226], false)}];
	ptrType$227.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$228.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$229.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$230.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$231.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}];
	ptrType$232.methods = [{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [ptrType$232], false)}, {prop: "SetPath", name: "SetPath", pkg: "", typ: $funcType([$Float64], [ptrType$232], false)}, {prop: "SetResponseType", name: "SetResponseType", pkg: "", typ: $funcType([$Float64], [ptrType$232], false)}, {prop: "SetWithCredentials", name: "SetWithCredentials", pkg: "", typ: $funcType([$Float64], [ptrType$232], false)}];
	AmbientLight.init("", [{prop: "Light", name: "Light", embedded: true, exported: true, typ: ptrType$28, tag: ""}]);
	AnimationClip.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	AnimationLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	AnimationMixer.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	AnimationObjectGroup.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	AnimationUtils.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	ArcCurve.init("", [{prop: "EllipseCurve", name: "EllipseCurve", embedded: true, exported: true, typ: ptrType$35, tag: ""}]);
	ArrowHelper.init("", [{prop: "Object3D", name: "Object3D", embedded: true, exported: true, typ: ptrType$20, tag: ""}]);
	ArrowHelperOpts.init("", [{prop: "Length", name: "Length", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Color", name: "Color", embedded: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "HeadLength", name: "HeadLength", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "HeadWidth", name: "HeadWidth", embedded: false, exported: true, typ: ptrType$1, tag: ""}]);
	Audio.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	AudioAnalyser.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	AudioBuffer.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	AudioListener.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	AxisHelper.init("", [{prop: "LineSegments", name: "LineSegments", embedded: true, exported: true, typ: ptrType$42, tag: ""}]);
	BinaryTextureLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Bone.init("", [{prop: "Object3D", name: "Object3D", embedded: true, exported: true, typ: ptrType$20, tag: ""}]);
	BooleanKeyframeTrack.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	BoundingBoxHelper.init("", [{prop: "Mesh", name: "Mesh", embedded: true, exported: true, typ: ptrType$47, tag: ""}]);
	Box2.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Box3.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	BoxBufferGeometry.init("", [{prop: "BufferGeometry", name: "BufferGeometry", embedded: true, exported: true, typ: ptrType$51, tag: ""}]);
	BoxBufferGeometryOpts.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "widthSegments", name: "widthSegments", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "heightSegments", name: "heightSegments", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "depthSegments", name: "depthSegments", embedded: false, exported: false, typ: $Int, tag: ""}]);
	BoxGeometry.init("", [{prop: "Geometry", name: "Geometry", embedded: true, exported: true, typ: ptrType$53, tag: ""}]);
	BoxGeometryOpts.init("", [{prop: "WidthSegments", name: "WidthSegments", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "HeightSegments", name: "HeightSegments", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "DepthSegments", name: "DepthSegments", embedded: false, exported: true, typ: $Int, tag: ""}]);
	BoxHelper.init("", [{prop: "Line", name: "Line", embedded: true, exported: true, typ: ptrType$55, tag: ""}]);
	BufferAttribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Int8Attribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Uint8Attribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Uint8ClampedAttribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Int16Attribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Uint16Attribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Int32Attribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Uint32Attribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Float32Attribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Float64Attribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	BufferGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	BufferGeometryLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	BufferGeometryLoadFunc.init([ptrType$51, sliceType$12], [], false);
	Cache.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Camera.init("", [{prop: "Object3D", name: "Object3D", embedded: true, exported: true, typ: ptrType$20, tag: ""}]);
	CameraHelper.init("", [{prop: "Line", name: "Line", embedded: true, exported: true, typ: ptrType$55, tag: ""}]);
	CanvasTexture.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	CatmullRomCurve3.init("", [{prop: "Curve", name: "Curve", embedded: true, exported: true, typ: ptrType$62, tag: ""}]);
	CircleBufferGeometry.init("", [{prop: "BufferGeometry", name: "BufferGeometry", embedded: true, exported: true, typ: ptrType$51, tag: ""}]);
	CircleBufferGeometryOpts.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "thetaStart", name: "thetaStart", embedded: false, exported: false, typ: $Float64, tag: ""}, {prop: "thetaLength", name: "thetaLength", embedded: false, exported: false, typ: $Float64, tag: ""}]);
	CircleGeometry.init("", [{prop: "Geometry", name: "Geometry", embedded: true, exported: true, typ: ptrType$53, tag: ""}]);
	CircleGeometryOpts.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "thetaStart", name: "thetaStart", embedded: false, exported: false, typ: $Float64, tag: ""}, {prop: "thetaLength", name: "thetaLength", embedded: false, exported: false, typ: $Float64, tag: ""}]);
	Clock.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Color.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	ColorKeyframeTrack.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	CompressedTexture.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	CompressedTextureLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	CubeCamera.init("", [{prop: "Object3D", name: "Object3D", embedded: true, exported: true, typ: ptrType$20, tag: ""}]);
	CubeTexture.init("", [{prop: "Texture", name: "Texture", embedded: true, exported: true, typ: ptrType$72, tag: ""}]);
	CubeTextureLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	CubeTextureLoadFunc.init([ptrType$73, sliceType$12], [], false);
	CubicBezierCurve.init("", [{prop: "Curve", name: "Curve", embedded: true, exported: true, typ: ptrType$62, tag: ""}]);
	CubicBezierCurve3.init("", [{prop: "Curve", name: "Curve", embedded: true, exported: true, typ: ptrType$62, tag: ""}]);
	CubicInterpolant.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Curve.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	CurvePath.init("", [{prop: "Curve", name: "Curve", embedded: true, exported: true, typ: ptrType$62, tag: ""}]);
	CurveUtils.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	CylinderBufferGeometry.init("", [{prop: "BufferGeometry", name: "BufferGeometry", embedded: true, exported: true, typ: ptrType$51, tag: ""}]);
	CylinderBufferGeometryOpts.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "thetaStart", name: "thetaStart", embedded: false, exported: false, typ: $Float64, tag: ""}, {prop: "thetaLength", name: "thetaLength", embedded: false, exported: false, typ: $Float64, tag: ""}]);
	CylinderGeometry.init("", [{prop: "Geometry", name: "Geometry", embedded: true, exported: true, typ: ptrType$53, tag: ""}]);
	CylinderGeometryOpts.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "thetaStart", name: "thetaStart", embedded: false, exported: false, typ: $Float64, tag: ""}, {prop: "thetaLength", name: "thetaLength", embedded: false, exported: false, typ: $Float64, tag: ""}]);
	DataTexture.init("", [{prop: "Texture", name: "Texture", embedded: true, exported: true, typ: ptrType$72, tag: ""}]);
	DirectGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	DirectionalLight.init("", [{prop: "Light", name: "Light", embedded: true, exported: true, typ: ptrType$28, tag: ""}]);
	DirectionalLightHelper.init("", [{prop: "Object3D", name: "Object3D", embedded: true, exported: true, typ: ptrType$20, tag: ""}]);
	DiscreteInterpolant.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	DodecahedronGeometry.init("", [{prop: "PolyhedronGeometry", name: "PolyhedronGeometry", embedded: true, exported: true, typ: ptrType$87, tag: ""}]);
	EdgesGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	EdgesHelper.init("", [{prop: "Line", name: "Line", embedded: true, exported: true, typ: ptrType$55, tag: ""}]);
	EllipseCurve.init("", [{prop: "Curve", name: "Curve", embedded: true, exported: true, typ: ptrType$62, tag: ""}]);
	EllipseCurveOpts.init("", [{prop: "StartAngle", name: "StartAngle", embedded: false, exported: true, typ: $Float64, tag: ""}, {prop: "EndAngle", name: "EndAngle", embedded: false, exported: true, typ: $Float64, tag: ""}, {prop: "Clockwise", name: "Clockwise", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "Rotation", name: "Rotation", embedded: false, exported: true, typ: $Float64, tag: ""}]);
	Euler.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	EventDispatcher.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	ExtrudeGeometry.init("", [{prop: "Geometry", name: "Geometry", embedded: true, exported: true, typ: ptrType$53, tag: ""}]);
	ExtrudeGeometryOpts.init("", [{prop: "CurveSegments", name: "CurveSegments", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Steps", name: "Steps", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Amount", name: "Amount", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "BevelEnabled", name: "BevelEnabled", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "BevelThickness", name: "BevelThickness", embedded: false, exported: true, typ: $Float64, tag: ""}, {prop: "BevelSize", name: "BevelSize", embedded: false, exported: true, typ: $Float64, tag: ""}, {prop: "BevelSegments", name: "BevelSegments", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "ExtrudePath", name: "ExtrudePath", embedded: false, exported: true, typ: ptrType$78, tag: ""}, {prop: "Frames", name: "Frames", embedded: false, exported: true, typ: ptrType$94, tag: ""}, {prop: "Material", name: "Material", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "ExtrudeMaterial", name: "ExtrudeMaterial", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "UVGenerator", name: "UVGenerator", embedded: false, exported: true, typ: ptrType$20, tag: ""}]);
	Face3.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	FaceNormalsHelper.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Fog.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	FogExp2.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Font.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	FontLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Frustum.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Geometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	GridHelper.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Group.init("", [{prop: "Object3D", name: "Object3D", embedded: true, exported: true, typ: ptrType$20, tag: ""}]);
	HemisphereLight.init("", [{prop: "Light", name: "Light", embedded: true, exported: true, typ: ptrType$28, tag: ""}]);
	HemisphereLightHelper.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	IcosahedronGeometry.init("", [{prop: "PolyhedronGeometry", name: "PolyhedronGeometry", embedded: true, exported: true, typ: ptrType$87, tag: ""}]);
	ImageLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	ImmediateRenderObject.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	InstancedBufferAttribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	InstancedBufferGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	InstancedInterleavedBuffer.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	InterleavedBuffer.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	InterleavedBufferAttribute.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Interpolant.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	JSONLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	JSONLoadFunc.init([ptrType$53, sliceType$12], [], false);
	KeyframeTrack.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LatheBufferGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LatheGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Layers.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LensFlare.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LensFlarePlugin.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Light.init("", [{prop: "Object3D", name: "Object3D", embedded: true, exported: true, typ: ptrType$20, tag: ""}]);
	LightShadow.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Line.init("", [{prop: "Object3D", name: "Object3D", embedded: true, exported: true, typ: ptrType$20, tag: ""}]);
	Line3.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LineBasicMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LineBasicMaterialOpts.init($String, $emptyInterface);
	LineCurve.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LineDashedMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LineSegments.init("", [{prop: "Line", name: "Line", embedded: true, exported: true, typ: ptrType$55, tag: ""}]);
	LinearInterpolant.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Loader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LoadingManager.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LOD.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LUT.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	LUTLegendOpts.init($String, $emptyInterface);
	Material.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	MaterialLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Math.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Matrix3.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Matrix4.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Mesh.init("", [{prop: "Object3D", name: "Object3D", embedded: true, exported: true, typ: ptrType$20, tag: ""}]);
	MeshBasicMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	MeshBasicMaterialOpts.init($String, $emptyInterface);
	MeshDepthMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	MeshDepthMaterialOpts.init($String, $emptyInterface);
	MeshLambertMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	MeshLambertMaterialOpts.init($String, $emptyInterface);
	MeshNormalMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	MeshNormalMaterialOpts.init($String, $emptyInterface);
	MeshPhongMaterial.init("", [{prop: "Material", name: "Material", embedded: true, exported: true, typ: ptrType$9, tag: ""}]);
	MeshPhongMaterialOpts.init($String, $emptyInterface);
	MeshStandardMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	MeshStandardMaterialOpts.init($String, $emptyInterface);
	MorphBlendMesh.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	MultiMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	NumberKeyframeTrack.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Object3D.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	ObjectLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	OctahedronGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	OrthographicCamera.init("", [{prop: "Camera", name: "Camera", embedded: true, exported: true, typ: ptrType$11, tag: ""}]);
	ParametricGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Path.init("", [{prop: "CurvePath", name: "CurvePath", embedded: true, exported: true, typ: ptrType$78, tag: ""}]);
	PerspectiveCamera.init("", [{prop: "Camera", name: "Camera", embedded: true, exported: true, typ: ptrType$11, tag: ""}]);
	Plane.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	PlaneBufferGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	PlaneGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	PointLight.init("", [{prop: "Light", name: "Light", embedded: true, exported: true, typ: ptrType$28, tag: ""}]);
	PointLightHelper.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Points.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	PointsMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	PolyhedronGeometry.init("", [{prop: "Geometry", name: "Geometry", embedded: true, exported: true, typ: ptrType$53, tag: ""}]);
	PositionalAudio.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	PropertyBinding.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	PropertyMixer.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	QuadraticBezierCurve.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Quaternion.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	QuaternionKeyframeTrack.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	QuaternionLinearInterpolant.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	RawShaderMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Ray.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Raycaster.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	RingBufferGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	RingGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Scene.init("", [{prop: "Object3D", name: "Object3D", embedded: true, exported: true, typ: ptrType$20, tag: ""}]);
	SceneUtils.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	ShaderChunk.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	ShaderLib.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	ShaderMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Shape.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	ShapeGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	ShapeUtils.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Skeleton.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	SkeletonHelper.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	SkinnedMesh.init("", [{prop: "Mesh", name: "Mesh", embedded: true, exported: true, typ: ptrType$47, tag: ""}]);
	Sphere.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	SphereBufferGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	SphereGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	SphereGeometryOpts.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "phiStart", name: "phiStart", embedded: false, exported: false, typ: $Float64, tag: ""}, {prop: "phiLength", name: "phiLength", embedded: false, exported: false, typ: $Float64, tag: ""}, {prop: "thetaStart", name: "thetaStart", embedded: false, exported: false, typ: $Float64, tag: ""}, {prop: "thetaLength", name: "thetaLength", embedded: false, exported: false, typ: $Float64, tag: ""}]);
	Spherical.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Spline.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	SplineCurve.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	SpotLight.init("", [{prop: "Light", name: "Light", embedded: true, exported: true, typ: ptrType$28, tag: ""}]);
	SpotLightHelper.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Sprite.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	SpriteMaterial.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	SpritePlugin.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	StereoCamera.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	StringKeyframeTrack.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	TetrahedronGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	TextGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Texture.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	TextureOpts.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "mapping", name: "mapping", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "wrapS", name: "wrapS", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "wrapT", name: "wrapT", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "magFilter", name: "magFilter", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "minFilter", name: "minFilter", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "format", name: "format", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "anisotropy", name: "anisotropy", embedded: false, exported: false, typ: $Int, tag: ""}]);
	TextureLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	TextureLoadFunc.init([ptrType$53, sliceType$12], [], false);
	JSObject.init([{prop: "JSObject", name: "JSObject", pkg: "", typ: $funcType([], [ptrType$10], false)}]);
	Three.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "ctx", name: "ctx", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	MOUSE.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	TorusBufferGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	TorusGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	TorusKnotBufferGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	TorusKnotGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Triangle.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	TubeGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Uniform.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	UniformsLib.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	UniformsUtils.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Vector2.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Vector3.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	Vector4.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	VectorKeyframeTrack.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	VertexNormalsHelper.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	VideoTexture.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLBufferRenderer.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLCapabilities.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLExtensions.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLGeometries.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLIndexedBufferRenderer.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLLights.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLObjects.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLProgram.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLPrograms.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLProperties.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLRenderTarget.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLRenderTargetCube.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLRenderer.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLRendererOpts.init("", [{prop: "Precision", name: "Precision", embedded: false, exported: true, typ: ptrType$25, tag: "json:\"precision,omitempty\""}, {prop: "Alpha", name: "Alpha", embedded: false, exported: true, typ: ptrType$23, tag: "json:\"alpha,omitempty\""}, {prop: "PremultipliedAlpha", name: "PremultipliedAlpha", embedded: false, exported: true, typ: ptrType$23, tag: "json:\"premultipliedAlpha,omitempty\""}, {prop: "Antialias", name: "Antialias", embedded: false, exported: true, typ: ptrType$23, tag: "json:\"antialias,omitempty\""}, {prop: "Stencil", name: "Stencil", embedded: false, exported: true, typ: ptrType$23, tag: "json:\"stencil,omitempty\""}, {prop: "PreserveDrawingBuffer", name: "PreserveDrawingBuffer", embedded: false, exported: true, typ: ptrType$23, tag: "json:\"preserveDrawingBuffer,omitempty\""}, {prop: "Depth", name: "Depth", embedded: false, exported: true, typ: ptrType$23, tag: "json:\"depth,omitempty\""}, {prop: "LogarithmicDepthBuffer", name: "LogarithmicDepthBuffer", embedded: false, exported: true, typ: ptrType$23, tag: "json:\"logatihmicDepthBuffer,omitempty\""}]);
	RenderOpts.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "renderTarget", name: "renderTarget", embedded: false, exported: false, typ: JSObject, tag: ""}, {prop: "forceClear", name: "forceClear", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	WebGLShader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLShadowMap.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WebGLState.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WireframeGeometry.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	WireframeHelper.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	XHRLoader.init("github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$10, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/akosgarai/webgl-cube-editor/pkg/wglrenderer"] = (function() {
	var $pkg = {}, $init, three, vecty, elem, js, webGLRenderer, WebGLOptions, webGLRendererParameters, sliceType, ptrType, ptrType$1, mapType, ptrType$2, funcType, WebGLRenderer, newWebGLRenderer;
	three = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three"];
	vecty = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty"];
	elem = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/elem"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	webGLRenderer = $pkg.webGLRenderer = $newType(0, $kindStruct, "wglrenderer.webGLRenderer", true, "github.com/akosgarai/webgl-cube-editor/pkg/wglrenderer", false, function(Core_, opts_, markup_, canvas_, renderer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.opts = new WebGLOptions.ptr($throwNilPointerError, $throwNilPointerError);
			this.markup = sliceType.nil;
			this.canvas = ptrType.nil;
			this.renderer = ptrType$1.nil;
			return;
		}
		this.Core = Core_;
		this.opts = opts_;
		this.markup = markup_;
		this.canvas = canvas_;
		this.renderer = renderer_;
	});
	WebGLOptions = $pkg.WebGLOptions = $newType(0, $kindStruct, "wglrenderer.WebGLOptions", true, "github.com/akosgarai/webgl-cube-editor/pkg/wglrenderer", true, function(Init_, Shutdown_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Init = $throwNilPointerError;
			this.Shutdown = $throwNilPointerError;
			return;
		}
		this.Init = Init_;
		this.Shutdown = Shutdown_;
	});
	webGLRendererParameters = $pkg.webGLRendererParameters = $newType(0, $kindStruct, "wglrenderer.webGLRendererParameters", true, "github.com/akosgarai/webgl-cube-editor/pkg/wglrenderer", false, function(Canvas_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Canvas = $ifaceNil;
			return;
		}
		this.Canvas = Canvas_;
	});
	sliceType = $sliceType(vecty.MarkupOrChild);
	ptrType = $ptrType(vecty.HTML);
	ptrType$1 = $ptrType(three.WebGLRenderer);
	mapType = $mapType($String, $emptyInterface);
	ptrType$2 = $ptrType(webGLRenderer);
	funcType = $funcType([ptrType$1], [], false);
	webGLRenderer.ptr.prototype.Mount = function() {
		var r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.renderer = newWebGLRenderer(new webGLRendererParameters.ptr((x = r.canvas.Node(), new x.constructor.elem(x))));
		$r = r.opts.Init(r.renderer); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: webGLRenderer.ptr.prototype.Mount }; } $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	webGLRenderer.prototype.Mount = function() { return this.$val.Mount(); };
	webGLRenderer.ptr.prototype.Unmount = function() {
		var r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* */ if (!(r.opts.Shutdown === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(r.opts.Shutdown === $throwNilPointerError)) { */ case 1:
			$r = r.opts.Shutdown(r.renderer); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: webGLRenderer.ptr.prototype.Unmount }; } $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	webGLRenderer.prototype.Unmount = function() { return this.$val.Unmount(); };
	webGLRenderer.ptr.prototype.Render = function() {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = elem.Canvas(r.markup); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r.canvas = _r;
		$s = -1; return r.canvas;
		/* */ } return; } if ($f === undefined) { $f = { $blk: webGLRenderer.ptr.prototype.Render }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	webGLRenderer.prototype.Render = function() { return this.$val.Render(); };
	WebGLRenderer = function(opts, markup) {
		var markup, opts;
		if (opts.Init === $throwNilPointerError) {
			$panic(new $String("vthree: Renderer: must specify opts.Init"));
		}
		return new webGLRenderer.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), $clone(opts, WebGLOptions), markup, ptrType.nil, ptrType$1.nil);
	};
	$pkg.WebGLRenderer = WebGLRenderer;
	newWebGLRenderer = function(parameters) {
		var parameters;
		return three.WebGLRendererFromJSObject(new ($global.THREE.WebGLRenderer)($externalize($makeMap($String.keyFor, [{ k: "canvas", v: parameters.Canvas }]), mapType)));
	};
	ptrType$2.methods = [{prop: "Mount", name: "Mount", pkg: "", typ: $funcType([], [], false)}, {prop: "Unmount", name: "Unmount", pkg: "", typ: $funcType([], [], false)}, {prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}];
	webGLRenderer.init("github.com/akosgarai/webgl-cube-editor/pkg/wglrenderer", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "opts", name: "opts", embedded: false, exported: false, typ: WebGLOptions, tag: "vecty:\"prop\""}, {prop: "markup", name: "markup", embedded: false, exported: false, typ: sliceType, tag: "vecty:\"prop\""}, {prop: "canvas", name: "canvas", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "renderer", name: "renderer", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	WebGLOptions.init("", [{prop: "Init", name: "Init", embedded: false, exported: true, typ: funcType, tag: ""}, {prop: "Shutdown", name: "Shutdown", embedded: false, exported: true, typ: funcType, tag: ""}]);
	webGLRendererParameters.init("", [{prop: "Canvas", name: "Canvas", embedded: false, exported: true, typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = three.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = vecty.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = elem.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, bytealg, io, sync, unicode, utf8, asciiSet, ptrType$5, arrayType$3, IndexByte, Index, IndexRune, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeASCIISet, makeCutsetFunc, Trim;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	bytealg = $packages["internal/bytealg"];
	io = $packages["io"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	asciiSet = $pkg.asciiSet = $newType(32, $kindArray, "strings.asciiSet", true, "strings", false, null);
	ptrType$5 = $ptrType(asciiSet);
	arrayType$3 = $arrayType($Uint32, 8);
	IndexByte = function(s, c) {
		var c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Index = function(s, sep) {
		var s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	IndexRune = function(s, r) {
		var _i, _ref, _rune, i, r, r$1, s;
		if (0 <= r && r < 128) {
			return IndexByte(s, ((r << 24 >>> 24)));
		} else if ((r === 65533)) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				r$1 = _rune[0];
				if (r$1 === 65533) {
					return i;
				}
				_i += _rune[1];
			}
			return -1;
		} else if (!utf8.ValidRune(r)) {
			return -1;
		} else {
			return Index(s, ($encodeRune(r)));
		}
	};
	$pkg.IndexRune = IndexRune;
	TrimLeftFunc = function(s, f) {
		var _r, f, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			$s = -1; return "";
		}
		$s = -1; return $substring(s, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && s.charCodeAt(i) >= 128) {
			_tuple = utf8.DecodeRuneInString($substring(s, i));
			wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		$s = -1; return $substring(s, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var $24r, _r, _r$1, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f.$24r = $24r; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	indexFunc = function(s, f, truth) {
		var _i, _r, _ref, _rune, f, i, r, s, truth, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _rune = $f._rune; f = $f.f; i = $f.i; r = $f.r; s = $f.s; truth = $f.truth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return i;
			/* } */ case 4:
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._rune = _rune; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.truth = truth; $f.$s = $s; $f.$r = $r; return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var _r, _tuple, f, i, r, s, size, truth, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeLastRuneInString($substring(s, 0, i));
			r = _tuple[0];
			size = _tuple[1];
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeASCIISet = function(chars) {
		var _index, _tmp, _tmp$1, _tmp$2, _tmp$3, as, c, chars, i, ok, y;
		as = arrayType$3.zero();
		ok = false;
		i = 0;
		while (true) {
			if (!(i < chars.length)) { break; }
			c = chars.charCodeAt(i);
			if (c >= 128) {
				_tmp = $clone(as, asciiSet);
				_tmp$1 = false;
				asciiSet.copy(as, _tmp);
				ok = _tmp$1;
				return [as, ok];
			}
			_index = c >>> 5 << 24 >>> 24;
			((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index] = ((((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index]) | (((y = ((((c & 31) >>> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0));
			i = i + (1) >> 0;
		}
		_tmp$2 = $clone(as, asciiSet);
		_tmp$3 = true;
		asciiSet.copy(as, _tmp$2);
		ok = _tmp$3;
		return [as, ok];
	};
	asciiSet.prototype.contains = function(c) {
		var as, c, x, y;
		as = this.$val;
		return !((((((x = c >>> 5 << 24 >>> 24, (as.nilCheck, ((x < 0 || x >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[x]))) & (((y = ((((c & 31) >>> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0)) === 0));
	};
	$ptrType(asciiSet).prototype.contains = function(c) { return (new asciiSet(this.$get())).contains(c); };
	makeCutsetFunc = function(cutset) {
		var _tuple, as, cutset, isASCII;
		if ((cutset.length === 1) && cutset.charCodeAt(0) < 128) {
			return (function(r) {
				var r;
				return r === ((cutset.charCodeAt(0) >> 0));
			});
		}
		_tuple = makeASCIISet(cutset);
		as = $clone(_tuple[0], asciiSet);
		isASCII = _tuple[1];
		if (isASCII) {
			return (function(r) {
				var r;
				return r < 128 && new ptrType$5(as).contains(((r << 24 >>> 24)));
			});
		}
		return (function(r) {
			var r;
			return IndexRune(cutset, r) >= 0;
		});
	};
	Trim = function(s, cutset) {
		var $24r, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			$s = -1; return s;
		}
		_r = TrimFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Trim }; } $f.$24r = $24r; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Trim = Trim;
	ptrType$5.methods = [{prop: "contains", name: "contains", pkg: "strings", typ: $funcType([$Uint8], [$Bool], false)}];
	asciiSet.init($Uint32, 8);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/akosgarai/webgl-cube-editor"] = (function() {
	var $pkg = {}, $init, components, forms, wglrenderer, three, vecty, elem, event, prop, js, strconv, strings, Page, arrayType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType, ptrType$6, ptrType$7, ptrType$8, sliceType$1, sliceType$2, sliceType$3, ptrType$9, ptrType$10, funcType, ptrType$11, ptrType$12, threejs, main, ColorpicerValueToInt;
	components = $packages["github.com/akosgarai/webgl-cube-editor/pkg/components"];
	forms = $packages["github.com/akosgarai/webgl-cube-editor/pkg/forms"];
	wglrenderer = $packages["github.com/akosgarai/webgl-cube-editor/pkg/wglrenderer"];
	three = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/gmlewis/go-threejs/three"];
	vecty = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty"];
	elem = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/elem"];
	event = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/event"];
	prop = $packages["github.com/akosgarai/webgl-cube-editor/vendor/github.com/hexops/vecty/prop"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	Page = $pkg.Page = $newType(0, $kindStruct, "main.Page", true, "github.com/akosgarai/webgl-cube-editor", true, function(Core_, Title_, MeshColor_, BackgroundColor_, DirectionalLightColor_, DirectionalLightIntensity_, AmbientLightColor_, AmbientLightIntensity_, MeshWidth_, MeshHeight_, MeshDepth_, RotationSpeedY_, RotationSpeedX_, SunPosition_, scene_, camera_, renderer_, cubeMesh_, directionalLight_, ambientLight_, canvasWidth_, canvasHeight_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Core = new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false);
			this.Title = "";
			this.MeshColor = "";
			this.BackgroundColor = "";
			this.DirectionalLightColor = "";
			this.DirectionalLightIntensity = 0;
			this.AmbientLightColor = "";
			this.AmbientLightIntensity = 0;
			this.MeshWidth = 0;
			this.MeshHeight = 0;
			this.MeshDepth = 0;
			this.RotationSpeedY = 0;
			this.RotationSpeedX = 0;
			this.SunPosition = arrayType.zero();
			this.scene = ptrType.nil;
			this.camera = ptrType$1.nil;
			this.renderer = ptrType$2.nil;
			this.cubeMesh = ptrType$3.nil;
			this.directionalLight = ptrType$4.nil;
			this.ambientLight = ptrType$5.nil;
			this.canvasWidth = 0;
			this.canvasHeight = 0;
			return;
		}
		this.Core = Core_;
		this.Title = Title_;
		this.MeshColor = MeshColor_;
		this.BackgroundColor = BackgroundColor_;
		this.DirectionalLightColor = DirectionalLightColor_;
		this.DirectionalLightIntensity = DirectionalLightIntensity_;
		this.AmbientLightColor = AmbientLightColor_;
		this.AmbientLightIntensity = AmbientLightIntensity_;
		this.MeshWidth = MeshWidth_;
		this.MeshHeight = MeshHeight_;
		this.MeshDepth = MeshDepth_;
		this.RotationSpeedY = RotationSpeedY_;
		this.RotationSpeedX = RotationSpeedX_;
		this.SunPosition = SunPosition_;
		this.scene = scene_;
		this.camera = camera_;
		this.renderer = renderer_;
		this.cubeMesh = cubeMesh_;
		this.directionalLight = directionalLight_;
		this.ambientLight = ambientLight_;
		this.canvasWidth = canvasWidth_;
		this.canvasHeight = canvasHeight_;
	});
	arrayType = $arrayType($Float64, 3);
	ptrType = $ptrType(three.Scene);
	ptrType$1 = $ptrType(three.PerspectiveCamera);
	ptrType$2 = $ptrType(three.WebGLRenderer);
	ptrType$3 = $ptrType(three.Mesh);
	ptrType$4 = $ptrType(three.DirectionalLight);
	ptrType$5 = $ptrType(three.AmbientLight);
	sliceType = $sliceType($emptyInterface);
	ptrType$6 = $ptrType(three.Color);
	ptrType$7 = $ptrType(three.BoxGeometryOpts);
	ptrType$8 = $ptrType(three.BoxGeometry);
	sliceType$1 = $sliceType(vecty.Applyer);
	sliceType$2 = $sliceType($String);
	sliceType$3 = $sliceType(vecty.MarkupOrChild);
	ptrType$9 = $ptrType(three.Texture);
	ptrType$10 = $ptrType(three.Camera);
	funcType = $funcType([], [], false);
	ptrType$11 = $ptrType(three.RenderOpts);
	ptrType$12 = $ptrType(Page);
	main = function() {
		var page, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; page = $f.page; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		page = new Page.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "Cube color editor", "#ff0000", "#53c1ff", "#ffffff", 1, "#ffffff", 1, 100, 100, 100, 200, 300, $toNativeArray($kindFloat64, [500, 256, -256]), ptrType.nil, ptrType$1.nil, ptrType$2.nil, ptrType$3.nil, ptrType$4.nil, ptrType$5.nil, 0, 0);
		$r = vecty.SetTitle("Cube color editor"); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = vecty.AddStylesheet("assets/index.css"); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = vecty.RenderBody(page); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: main }; } $f.page = page; $f.$s = $s; $f.$r = $r; return $f;
	};
	ColorpicerValueToInt = function(color) {
		var _r, _r$1, _tuple, col, color, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; col = $f.col; color = $f.color; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = strings.Trim(color, "#"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = strconv.ParseInt(_r, 16, 32); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		col = _tuple[0];
		$s = -1; return (((col.$low + ((col.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ColorpicerValueToInt }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.col = col; $f.color = color; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ColorpicerValueToInt = ColorpicerValueToInt;
	Page.ptr.prototype.Render = function() {
		var $24r, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _r, _r$1, _r$2, _r$3, _r$4, _r$5, p, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $24r = $f.$24r; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = [p];
		p[0] = this;
		_r = vecty.Markup(new sliceType$1([event.Change((function(p) { return function $b(e) {
			var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, e, updateGeometry, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; e = $f.e; updateGeometry = $f.updateGeometry; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			updateGeometry = false;
				_1 = $clone($clone(e.Target, $packages["syscall/js"].Value).Get("id"), $packages["syscall/js"].Value).String();
				/* */ if (_1 === ("cube-color")) { $s = 2; continue; }
				/* */ if (_1 === ("cube-width")) { $s = 3; continue; }
				/* */ if (_1 === ("cube-height")) { $s = 4; continue; }
				/* */ if (_1 === ("cube-dept")) { $s = 5; continue; }
				/* */ if (_1 === ("background-color")) { $s = 6; continue; }
				/* */ if (_1 === ("directional-light-color")) { $s = 7; continue; }
				/* */ if (_1 === ("directional-light-intensity")) { $s = 8; continue; }
				/* */ if (_1 === ("ambient-light-color")) { $s = 9; continue; }
				/* */ if (_1 === ("ambient-light-intensity")) { $s = 10; continue; }
				/* */ if (_1 === ("rotation-speed-y")) { $s = 11; continue; }
				/* */ if (_1 === ("rotation-speed-x")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_1 === ("cube-color")) { */ case 2:
					p[0].MeshColor = $clone($clone(e.Target, $packages["syscall/js"].Value).Get("value"), $packages["syscall/js"].Value).String();
					_r = ColorpicerValueToInt(p[0].MeshColor); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r$1 = threejs.NewColor(new sliceType([new $Int(_r)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					p[0].cubeMesh.JSObject().material.color = $externalize(_r$1, ptrType$6);
					/* break; */ $s = 1; continue;
					$s = 13; continue;
				/* } else if (_1 === ("cube-width")) { */ case 3:
					_tuple = strconv.Atoi($clone($clone(e.Target, $packages["syscall/js"].Value).Get("value"), $packages["syscall/js"].Value).String());
					p[0].MeshWidth = _tuple[0];
					updateGeometry = true;
					/* break; */ $s = 1; continue;
					$s = 13; continue;
				/* } else if (_1 === ("cube-height")) { */ case 4:
					_tuple$1 = strconv.Atoi($clone($clone(e.Target, $packages["syscall/js"].Value).Get("value"), $packages["syscall/js"].Value).String());
					p[0].MeshHeight = _tuple$1[0];
					updateGeometry = true;
					/* break; */ $s = 1; continue;
					$s = 13; continue;
				/* } else if (_1 === ("cube-dept")) { */ case 5:
					_tuple$2 = strconv.Atoi($clone($clone(e.Target, $packages["syscall/js"].Value).Get("value"), $packages["syscall/js"].Value).String());
					p[0].MeshDepth = _tuple$2[0];
					updateGeometry = true;
					/* break; */ $s = 1; continue;
					$s = 13; continue;
				/* } else if (_1 === ("background-color")) { */ case 6:
					p[0].BackgroundColor = $clone($clone(e.Target, $packages["syscall/js"].Value).Get("value"), $packages["syscall/js"].Value).String();
					_r$2 = ColorpicerValueToInt(p[0].BackgroundColor); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = threejs.NewColor(new sliceType([new $Int(_r$2)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					p[0].scene.JSObject().background = $externalize(_r$3, ptrType$6);
					/* break; */ $s = 1; continue;
					$s = 13; continue;
				/* } else if (_1 === ("directional-light-color")) { */ case 7:
					p[0].DirectionalLightColor = $clone($clone(e.Target, $packages["syscall/js"].Value).Get("value"), $packages["syscall/js"].Value).String();
					_r$4 = ColorpicerValueToInt(p[0].DirectionalLightColor); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = threejs.NewColor(new sliceType([new $Int(_r$4)])); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					p[0].directionalLight.JSObject().color = $externalize(_r$5, ptrType$6);
					/* break; */ $s = 1; continue;
					$s = 13; continue;
				/* } else if (_1 === ("directional-light-intensity")) { */ case 8:
					_tuple$3 = strconv.ParseFloat($clone($clone(e.Target, $packages["syscall/js"].Value).Get("value"), $packages["syscall/js"].Value).String(), 64);
					p[0].DirectionalLightIntensity = _tuple$3[0];
					p[0].directionalLight.JSObject().intensity = p[0].DirectionalLightIntensity;
					/* break; */ $s = 1; continue;
					$s = 13; continue;
				/* } else if (_1 === ("ambient-light-color")) { */ case 9:
					p[0].AmbientLightColor = $clone($clone(e.Target, $packages["syscall/js"].Value).Get("value"), $packages["syscall/js"].Value).String();
					_r$6 = ColorpicerValueToInt(p[0].AmbientLightColor); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = threejs.NewColor(new sliceType([new $Int(_r$6)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					p[0].ambientLight.JSObject().color = $externalize(_r$7, ptrType$6);
					/* break; */ $s = 1; continue;
					$s = 13; continue;
				/* } else if (_1 === ("ambient-light-intensity")) { */ case 10:
					_tuple$4 = strconv.ParseFloat($clone($clone(e.Target, $packages["syscall/js"].Value).Get("value"), $packages["syscall/js"].Value).String(), 64);
					p[0].AmbientLightIntensity = _tuple$4[0];
					p[0].ambientLight.JSObject().intensity = p[0].AmbientLightIntensity;
					/* break; */ $s = 1; continue;
					$s = 13; continue;
				/* } else if (_1 === ("rotation-speed-y")) { */ case 11:
					_tuple$5 = strconv.Atoi($clone($clone(e.Target, $packages["syscall/js"].Value).Get("value"), $packages["syscall/js"].Value).String());
					p[0].RotationSpeedY = _tuple$5[0];
					/* break; */ $s = 1; continue;
					$s = 13; continue;
				/* } else if (_1 === ("rotation-speed-x")) { */ case 12:
					_tuple$6 = strconv.Atoi($clone($clone(e.Target, $packages["syscall/js"].Value).Get("value"), $packages["syscall/js"].Value).String());
					p[0].RotationSpeedX = _tuple$6[0];
					/* break; */ $s = 1; continue;
				/* } */ case 13:
			case 1:
			if (updateGeometry) {
				p[0].cubeMesh.JSObject().geometry = $externalize(threejs.NewBoxGeometry((p[0].MeshWidth), (p[0].MeshHeight), (p[0].MeshDepth), ptrType$7.nil), ptrType$8);
			}
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.e = e; $f.updateGeometry = updateGeometry; $f.$s = $s; $f.$r = $r; return $f;
		}; })(p))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = (x = _r, new x.constructor.elem(x));
		_arg$1 = (x$1 = vecty.Markup(new sliceType$1([vecty.Class(new sliceType$2(["container"]))])), new x$1.constructor.elem(x$1));
		_arg$2 = (x$2 = vecty.Markup(new sliceType$1([prop.ID("form-container")])), new x$2.constructor.elem(x$2));
		_arg$3 = new components.Heading.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), p[0].Title);
		_arg$4 = new components.DisplayButton.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "settings-lock", "Settings", "main-menu", "#form-items-container", "open_in_full", "close_fullscreen");
		_r$1 = elem.Div(new sliceType$3([(x$3 = vecty.Markup(new sliceType$1([prop.ID("form-items-container"), vecty.Style("display", "none")])), new x$3.constructor.elem(x$3)), new forms.CubeDisplay.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "cube-color", p[0].MeshColor, "cube-width", p[0].MeshWidth, "cube-height", p[0].MeshHeight, "cube-dept", p[0].MeshDepth), new forms.CubeRotation.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "rotation-speed-x", p[0].RotationSpeedX, "rotation-speed-y", p[0].RotationSpeedY), new forms.Lightsource.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "ambient-light-color", p[0].AmbientLightColor, "ambient-light-intensity", p[0].AmbientLightIntensity, "directional-light-color", p[0].DirectionalLightColor, "directional-light-intensity", p[0].DirectionalLightIntensity), new forms.Scene.ptr(new vecty.Core.ptr($ifaceNil, $ifaceNil, false, false), "background-color", p[0].BackgroundColor)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$5 = _r$1;
		_r$2 = elem.Div(new sliceType$3([_arg$2, _arg$3, _arg$4, _arg$5])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$6 = _r$2;
		_r$3 = elem.Div(new sliceType$3([(x$4 = vecty.Markup(new sliceType$1([prop.ID("canvas-container"), vecty.Style("width", "90%"), vecty.Style("margin-left", "auto"), vecty.Style("margin-right", "auto")])), new x$4.constructor.elem(x$4)), wglrenderer.WebGLRenderer(new wglrenderer.WebGLOptions.ptr($methodVal(p[0], "init"), $methodVal(p[0], "shutdown")), new sliceType$3([]))])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$7 = _r$3;
		_r$4 = elem.Div(new sliceType$3([_arg$1, _arg$6, _arg$7])); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$8 = _r$4;
		_r$5 = elem.Body(new sliceType$3([_arg, _arg$8])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$24r = _r$5;
		$s = 7; case 7: return $24r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Page.ptr.prototype.Render }; } $f.$24r = $24r; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Page.prototype.Render = function() { return this.$val.Render(); };
	Page.ptr.prototype.init = function(renderer) {
		var _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, devicePixelRatio, geom, groundGeom, groundMaterial, groundMesh, groundTexture, mat, p, renderer, textureLoader, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; devicePixelRatio = $f.devicePixelRatio; geom = $f.geom; groundGeom = $f.groundGeom; groundMaterial = $f.groundMaterial; groundMesh = $f.groundMesh; groundTexture = $f.groundTexture; mat = $f.mat; p = $f.p; renderer = $f.renderer; textureLoader = $f.textureLoader; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.renderer = renderer;
		p.canvasWidth = $parseFloat($global.document.querySelector($externalize("#canvas-container", $String)).clientWidth);
		p.canvasHeight = $parseFloat($global.innerHeight) - $parseFloat($global.document.querySelector($externalize("#form-container", $String)).clientHeight) * 1.1;
		devicePixelRatio = $parseFloat($global.devicePixelRatio);
		p.camera = threejs.NewPerspectiveCamera(70, p.canvasWidth / p.canvasHeight, 1, 1000);
		p.camera.Camera.Object3D.Position().Set(0, 0, 400);
		p.scene = threejs.NewScene();
		p.renderer = p.renderer.SetPixelRatio(devicePixelRatio);
		p.renderer.SetSize(p.canvasWidth, p.canvasHeight, true);
		p.renderer.JSObject().shadowMap.enabled = $externalize(true, $Bool);
		_r = ColorpicerValueToInt(p.DirectionalLightColor); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = threejs.NewDirectionalLight((_r), p.DirectionalLightIntensity); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		p.directionalLight = _r$1;
		p.directionalLight.Light.Object3D.Position().Set(p.SunPosition[0], p.SunPosition[1], p.SunPosition[2]);
		p.directionalLight.JSObject().castShadow = $externalize(true, $Bool);
		p.directionalLight.JSObject().shadow.mapSize.width = 1024;
		p.directionalLight.JSObject().shadow.mapSize.height = 1024;
		p.directionalLight.JSObject().shadow.camera.left = -300;
		p.directionalLight.JSObject().shadow.camera.right = 300;
		p.directionalLight.JSObject().shadow.camera.top = 300;
		p.directionalLight.JSObject().shadow.camera.bottom = -300;
		p.directionalLight.JSObject().shadow.camera.far = 1000;
		_r$2 = p.scene.Object3D.Add(p.directionalLight); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = ColorpicerValueToInt(p.AmbientLightColor); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = threejs.NewAmbientLight(_r$3, p.AmbientLightIntensity); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		p.ambientLight = _r$4;
		_r$5 = p.scene.Object3D.Add(p.ambientLight); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = ColorpicerValueToInt(p.MeshColor); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = threejs.NewColor(new sliceType([new $Int(_r$6)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$8 = threejs.NewMeshLambertMaterial($makeMap($String.keyFor, [{ k: "color", v: _r$7 }])); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		mat = _r$8;
		geom = threejs.NewBoxGeometry((p.MeshWidth), (p.MeshHeight), (p.MeshDepth), ptrType$7.nil);
		_r$9 = threejs.NewMesh(geom, mat); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		p.cubeMesh = _r$9;
		p.cubeMesh.JSObject().castShadow = $externalize(true, $Bool);
		_r$10 = p.scene.Object3D.Add(p.cubeMesh); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		_r$11 = ColorpicerValueToInt(p.BackgroundColor); /* */ $s = 12; case 12: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$12 = threejs.NewColor(new sliceType([new $Int(_r$11)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		p.scene.JSObject().background = $externalize(_r$12, ptrType$6);
		textureLoader = threejs.NewTextureLoader();
		textureLoader.SetCrossOrigin("anonymous");
		groundTexture = ptrType$9.nil;
		groundTexture = textureLoader.Load("https://raw.githubusercontent.com/akosgarai/webgl-cube-editor/main/assets/grass.jpg", $throwNilPointerError, $ifaceNil, $ifaceNil);
		groundTexture.SetWrapS(1000);
		groundTexture.SetWrapT(1000);
		groundTexture.SetAnisotropy(16);
		groundTexture.JSObject().repeat.x = 25;
		groundTexture.JSObject().repeat.y = 25;
		groundMaterial = threejs.NewMeshLambertMaterial($makeMap($String.keyFor, [{ k: "map", v: new $jsObjectPtr(groundTexture.JSObject()) }]));
		groundGeom = threejs.NewBoxGeometry(20000, 0, 20000, ptrType$7.nil);
		_r$13 = threejs.NewMesh(groundGeom, groundMaterial); /* */ $s = 14; case 14: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		groundMesh = _r$13;
		groundMesh.Object3D.Position().Set(0, -100, 0);
		groundMesh.JSObject().receiveShadow = $externalize(true, $Bool);
		_r$14 = p.scene.Object3D.Add(groundMesh); /* */ $s = 15; case 15: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		$r = p.animate(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Page.ptr.prototype.init }; } $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.devicePixelRatio = devicePixelRatio; $f.geom = geom; $f.groundGeom = groundGeom; $f.groundMaterial = groundMaterial; $f.groundMesh = groundMesh; $f.groundTexture = groundTexture; $f.mat = mat; $f.p = p; $f.renderer = renderer; $f.textureLoader = textureLoader; $f.$s = $s; $f.$r = $r; return $f;
	};
	Page.prototype.init = function(renderer) { return this.$val.init(renderer); };
	Page.ptr.prototype.shutdown = function(renderer) {
		var p, renderer;
		p = this;
		p.scene = ptrType.nil;
		p.camera = new three.PerspectiveCamera.ptr(ptrType$10.nil);
		p.renderer = ptrType$2.nil;
		p.cubeMesh = ptrType$3.nil;
		p.directionalLight = ptrType$4.nil;
	};
	Page.prototype.shutdown = function(renderer) { return this.$val.shutdown(renderer); };
	Page.ptr.prototype.animate = function() {
		var _r, p, windowWidth, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; windowWidth = $f.windowWidth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p.renderer === ptrType$2.nil) {
			$s = -1; return;
		}
		windowWidth = $parseFloat($global.document.querySelector($externalize("#canvas-container", $String)).clientWidth);
		if (!((windowWidth === p.canvasWidth))) {
			$global.document.querySelector($externalize("#canvas-container canvas", $String)).width = windowWidth;
			$global.document.querySelector($externalize("#canvas-container canvas", $String)).style = $externalize("width: 100%", $String);
			p.camera.JSObject().aspect = windowWidth / p.canvasHeight;
			p.camera.Camera.UpdateProjectionMatrix();
			p.renderer.SetSize(windowWidth, p.canvasHeight, false);
			p.canvasWidth = windowWidth;
		}
		$global.requestAnimationFrame($externalize($methodVal(p, "animate"), funcType));
		p.cubeMesh.JSObject().rotation.y = $parseFloat(p.cubeMesh.JSObject().rotation.y) + 0.0001 * (p.RotationSpeedY);
		p.cubeMesh.JSObject().rotation.x = $parseFloat(p.cubeMesh.JSObject().rotation.x) + 0.0001 * (p.RotationSpeedX);
		_r = p.renderer.Render(p.scene, p.camera, ptrType$11.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Page.ptr.prototype.animate }; } $f._r = _r; $f.p = p; $f.windowWidth = windowWidth; $f.$s = $s; $f.$r = $r; return $f;
	};
	Page.prototype.animate = function() { return this.$val.animate(); };
	ptrType$12.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [vecty.ComponentOrHTML], false)}, {prop: "init", name: "init", pkg: "github.com/akosgarai/webgl-cube-editor", typ: $funcType([ptrType$2], [], false)}, {prop: "shutdown", name: "shutdown", pkg: "github.com/akosgarai/webgl-cube-editor", typ: $funcType([ptrType$2], [], false)}, {prop: "animate", name: "animate", pkg: "github.com/akosgarai/webgl-cube-editor", typ: $funcType([], [], false)}];
	Page.init("github.com/akosgarai/webgl-cube-editor", [{prop: "Core", name: "Core", embedded: true, exported: true, typ: vecty.Core, tag: ""}, {prop: "Title", name: "Title", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "MeshColor", name: "MeshColor", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "BackgroundColor", name: "BackgroundColor", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "DirectionalLightColor", name: "DirectionalLightColor", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "DirectionalLightIntensity", name: "DirectionalLightIntensity", embedded: false, exported: true, typ: $Float64, tag: ""}, {prop: "AmbientLightColor", name: "AmbientLightColor", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "AmbientLightIntensity", name: "AmbientLightIntensity", embedded: false, exported: true, typ: $Float64, tag: ""}, {prop: "MeshWidth", name: "MeshWidth", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "MeshHeight", name: "MeshHeight", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "MeshDepth", name: "MeshDepth", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "RotationSpeedY", name: "RotationSpeedY", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "RotationSpeedX", name: "RotationSpeedX", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "SunPosition", name: "SunPosition", embedded: false, exported: true, typ: arrayType, tag: ""}, {prop: "scene", name: "scene", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "camera", name: "camera", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "renderer", name: "renderer", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "cubeMesh", name: "cubeMesh", embedded: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "directionalLight", name: "directionalLight", embedded: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "ambientLight", name: "ambientLight", embedded: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "canvasWidth", name: "canvasWidth", embedded: false, exported: false, typ: $Float64, tag: ""}, {prop: "canvasHeight", name: "canvasHeight", embedded: false, exported: false, typ: $Float64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = components.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = forms.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = wglrenderer.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = three.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = vecty.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = elem.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = event.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = prop.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		threejs = three.New();
		/* */ if ($pkg === $mainPkg) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ($pkg === $mainPkg) { */ case 12:
			$r = main(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$mainFinished = true;
		/* } */ case 13:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
$initAllLinknames();var $mainPkg = $packages["github.com/akosgarai/webgl-cube-editor"];
$packages["runtime"].$init();
$go($mainPkg.$init, []);
$flushConsole();

}).call(this);
//# sourceMappingURL=webgl-cube-editor.js.map
